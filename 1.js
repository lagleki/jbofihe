// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - Module['asm'].stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 217264;
/* global initializers */  __ATINIT__.push();


/* memory initializer */ allocate([112,154,1,0,123,156,1,0,153,162,1,0,179,112,1,0,187,181,1,0,181,151,1,0,177,183,1,0,186,186,1,0,240,107,1,0,127,171,1,0,255,255,255,255,1,0,0,0,2,0,0,0,3,0,0,0,255,255,255,255,4,0,0,0,5,0,0,0,255,255,255,255,255,255,255,255,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,255,255,255,255,11,0,0,0,255,255,255,255,12,0,0,0,13,0,0,0,14,0,0,0,255,255,255,255,15,0,0,0,255,255,255,255,16,0,0,0,255,255,255,255,17,0,0,0,1,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,2,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,4,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,5,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,6,0,0,0,255,255,255,255,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,52,1,0,205,52,1,0,209,52,1,0,214,52,1,0,217,52,1,0,221,52,1,0,226,52,1,0,231,52,1,0,234,52,1,0,238,52,1,0,241,52,1,0,245,52,1,0,249,52,1,0,253,52,1,0,2,53,1,0,6,53,1,0,9,53,1,0,13,53,1,0,16,53,1,0,21,53,1,0,26,53,1,0,30,53,1,0,35,53,1,0,38,53,1,0,44,53,1,0,50,53,1,0,56,53,1,0,62,53,1,0,67,53,1,0,72,53,1,0,77,53,1,0,82,53,1,0,86,53,1,0,91,53,1,0,96,53,1,0,101,53,1,0,104,53,1,0,109,53,1,0,114,53,1,0,117,53,1,0,122,53,1,0,126,53,1,0,131,53,1,0,136,53,1,0,138,53,1,0,141,53,1,0,145,53,1,0,149,53,1,0,154,53,1,0,157,53,1,0,161,53,1,0,166,53,1,0,169,53,1,0,175,53,1,0,181,53,1,0,187,53,1,0,193,53,1,0,199,53,1,0,205,53,1,0,211,53,1,0,214,53,1,0,219,53,1,0,224,53,1,0,227,53,1,0,231,53,1,0,236,53,1,0,239,53,1,0,244,53,1,0,247,53,1,0,252,53,1,0,1,54,1,0,6,54,1,0,9,54,1,0,14,54,1,0,18,54,1,0,23,54,1,0,26,54,1,0,31,54,1,0,35,54,1,0,40,54,1,0,45,54,1,0,48,54,1,0,52,54,1,0,57,54,1,0,62,54,1,0,67,54,1,0,72,54,1,0,76,54,1,0,79,54,1,0,83,54,1,0,88,54,1,0,93,54,1,0,98,54,1,0,102,54,1,0,106,54,1,0,110,54,1,0,114,54,1,0,118,54,1,0,123,54,1,0,128,54,1,0,133,54,1,0,136,54,1,0,141,54,1,0,145,54,1,0,148,54,1,0,151,54,1,0,155,54,1,0,160,54,1,0,163,54,1,0,167,54,1,0,170,54,1,0,175,54,1,0,179,54,1,0,184,54,1,0,187,54,1,0,191,54,1,0,196,54,1,0,201,54,1,0,205,54,1,0,209,54,1,0,213,54,1,0,218,54,1,0,223,54,1,0,227,54,1,0,231,54,1,0,235,54,1,0,239,54,1,0,242,54,1,0,246,54,1,0,250,54,1,0,255,54,1,0,4,55,1,0,9,55,1,0,14,55,1,0,20,55,1,0,26,55,1,0,32,55,1,0,38,55,1,0,44,55,1,0,47,55,1,0,49,55,1,0,54,55,1,0,58,55,1,0,63,55,1,0,66,55,1,0,71,55,1,0,74,55,1,0,78,55,1,0,83,55,1,0,88,55,1,0,93,55,1,0,99,55,1,0,218,57,1,0,223,57,1,0,228,57,1,0,233,57,1,0,238,57,1,0,243,57,1,0,248,57,1,0,253,57,1,0,2,58,1,0,7,58,1,0,12,58,1,0,17,58,1,0,22,58,1,0,27,58,1,0,32,58,1,0,37,58,1,0,42,58,1,0,14,0,0,0,13,0,0,0,11,0,0,0,7,0,0,0,14,0,0,0,13,0,0,0,11,0,0,0,7,0,0,0,8,0,0,0,4,0,0,0,2,0,0,0,1,0,0,0,8,0,0,0,4,0,0,0,2,0,0,0,1,0,0,0,9,0,0,0,6,0,0,0,6,0,0,0,9,0,0,0,9,0,0,0,6,0,0,0,6,0,0,0,9,0,0,0,12,0,0,0,12,0,0,0,3,0,0,0,3,0,0,0,10,0,0,0,5,0,0,0,10,0,0,0,5,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,1,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,17,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,2,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,17,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,17,0,0,0,17,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,4,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,4,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,4,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,21,0,0,0,3,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,16,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,6,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,6,0,0,0,11,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,18,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,6,0,0,0,18,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,6,0,0,0,6,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,5,0,0,0,18,0,0,0,18,0,0,0,21,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,5,0,0,0,18,0,0,0,18,0,0,0,16,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,5,0,0,0,18,0,0,0,16,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,19,0,0,0,19,0,0,0,6,0,0,0,0,0,0,0,18,0,0,0,6,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,10,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,5,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,21,0,0,0,21,0,0,0,9,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,21,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,17,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,6,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,6,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,6,0,0,0,18,0,0,0,6,0,0,0,17,0,0,0,18,0,0,0,6,0,0,0,18,0,0,0,18,0,0,0,5,0,0,0,18,0,0,0,16,0,0,0,18,0,0,0,16,0,0,0,18,0,0,0,18,0,0,0,16,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,5,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,16,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,5,0,0,0,5,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,19,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,6,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,15,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,18,0,0,0,6,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,6,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,16,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,5,0,0,0,13,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,19,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,19,0,0,0,18,0,0,0,0,0,0,0,14,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,18,0,0,0,5,0,0,0,0,0,0,0,12,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,16,0,0,0,0,0,0,0,18,0,0,0,5,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,6,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,5,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,19,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,17,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,7,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,20,0,0,0,20,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,18,0,0,0,8,0,0,0,8,0,0,0,18,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,20,0,0,0,20,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,6,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,91,1,0,123,91,1,0,133,91,1,0,138,91,1,0,149,91,1,0,162,91,1,0,175,91,1,0,188,91,1,0,195,91,1,0,205,91,1,0,217,91,1,0,237,91,1,0,242,91,1,0,245,91,1,0,254,91,1,0,3,92,1,0,12,92,1,0,26,92,1,0,47,92,1,0,51,92,1,0,64,92,1,0,70,92,1,0,84,92,1,0,98,92,1,0,102,92,1,0,108,92,1,0,118,92,1,0,129,92,1,0,143,92,1,0,156,92,1,0,172,92,1,0,190,92,1,0,212,92,1,0,225,92,1,0,236,92,1,0,251,92,1,0,7,93,1,0,15,93,1,0,19,93,1,0,30,93,1,0,43,93,1,0,48,93,1,0,59,93,1,0,75,93,1,0,92,93,1,0,104,93,1,0,118,93,1,0,131,93,1,0,142,93,1,0,154,93,1,0,169,93,1,0,181,93,1,0,190,93,1,0,203,93,1,0,216,93,1,0,227,93,1,0,236,93,1,0,242,93,1,0,254,93,1,0,13,94,1,0,40,94,1,0,44,94,1,0,50,94,1,0,56,94,1,0,66,94,1,0,76,94,1,0,89,94,1,0,96,94,1,0,112,94,1,0,121,94,1,0,129,94,1,0,142,94,1,0,151,94,1,0,169,94,1,0,184,94,1,0,191,94,1,0,206,94,1,0,217,94,1,0,238,94,1,0,246,94,1,0,0,95,1,0,10,95,1,0,20,95,1,0,29,95,1,0,40,95,1,0,51,95,1,0,61,95,1,0,72,95,1,0,86,95,1,0,93,95,1,0,104,95,1,0,116,95,1,0,132,95,1,0,149,95,1,0,169,95,1,0,183,95,1,0,190,95,1,0,199,95,1,0,208,95,1,0,217,95,1,0,226,95,1,0,235,95,1,0,244,95,1,0,253,95,1,0,4,96,1,0,11,96,1,0,30,96,1,0,36,96,1,0,51,96,1,0,66,96,1,0,82,96,1,0,95,96,1,0,112,96,1,0,117,96,1,0,127,96,1,0,139,96,1,0,151,96,1,0,163,96,1,0,173,96,1,0,185,96,1,0,191,96,1,0,199,96,1,0,207,96,1,0,215,96,1,0,223,96,1,0,231,96,1,0,240,96,1,0,249,96,1,0,1,97,1,0,12,97,1,0,25,97,1,0,39,97,1,0,43,97,1,0,58,97,1,0,69,97,1,0,80,97,1,0,93,97,1,0,106,97,1,0,111,97,1,0,117,97,1,0,125,97,1,0,138,97,1,0,152,97,1,0,160,97,1,0,168,97,1,0,189,97,1,0,209,97,1,0,220,97,1,0,238,97,1,0,255,97,1,0,20,98,1,0,38,98,1,0,43,98,1,0,50,98,1,0,58,98,1,0,66,98,1,0,74,98,1,0,89,98,1,0,94,98,1,0,106,98,1,0,122,98,1,0,140,98,1,0,149,98,1,0,136,72,3,0,58,167,1,0,133,176,1,0,59,180,1,0,38,184,1,0,78,102,1,0,80,102,1,0,82,102,1,0,84,102,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,100,104,1,0,105,104,1,0,111,104,1,0,116,104,1,0,122,104,1,0,127,104,1,0,133,104,1,0,138,104,1,0,144,104,1,0,149,104,1,0,155,104,1,0,159,104,1,0,165,104,1,0,169,104,1,0,175,104,1,0,149,104,1,0,180,104,1,0,184,104,1,0,190,104,1,0,195,104,1,0,201,104,1,0,206,104,1,0,212,104,1,0,216,104,1,0,222,104,1,0,226,104,1,0,232,104,1,0,236,104,1,0,242,104,1,0,246,104,1,0,252,104,1,0,246,104,1,0,1,105,1,0,5,105,1,0,11,105,1,0,216,104,1,0,16,105,1,0,5,105,1,0,21,105,1,0,26,105,1,0,32,105,1,0,37,105,1,0,43,105,1,0,127,104,1,0,47,105,1,0,52,105,1,0,58,105,1,0,63,105,1,0,69,105,1,0,116,104,1,0,74,105,1,0,79,105,1,0,85,105,1,0,89,105,1,0,95,105,1,0,99,105,1,0,105,105,1,0,169,104,1,0,110,105,1,0,184,104,1,0,115,105,1,0,120,105,1,0,126,105,1,0,99,105,1,0,131,105,1,0,127,104,1,0,136,105,1,0,138,104,1,0,141,105,1,0,146,105,1,0,152,105,1,0,157,105,1,0,163,105,1,0,236,104,1,0,167,105,1,0,236,104,1,0,172,105,1,0,176,105,1,0,182,105,1,0,187,105,1,0,193,105,1,0,226,104,1,0,198,105,1,0,203,105,1,0,209,105,1,0,105,104,1,0,214,105,1,0,176,105,1,0,219,105,1,0,223,105,1,0,229,105,1,0,234,105,1,0,240,105,1,0,223,105,1,0,245,105,1,0,249,105,1,0,255,105,1,0,249,105,1,0,4,106,1,0,9,106,1,0,15,106,1,0,99,105,1,0,19,106,1,0,79,105,1,0,23,106,1,0,28,106,1,0,34,106,1,0,146,105,1,0,38,106,1,0,43,106,1,0,49,106,1,0,157,105,1,0,53,106,1,0,58,106,1,0,64,106,1,0,69,106,1,0,75,106,1,0,80,106,1,0,86,106,1,0,91,106,1,0,97,106,1,0,102,106,1,0,108,106,1,0,112,106,1,0,118,106,1,0,112,106,1,0,123,106,1,0,69,106,1,0,127,106,1,0,102,106,1,0,131,106,1,0,135,106,1,0,141,106,1,0,145,106,1,0,151,106,1,0,80,106,1,0,155,106,1,0,91,106,1,0,159,106,1,0,91,106,1,0,164,106,1,0,168,106,1,0,174,106,1,0,69,106,1,0,179,106,1,0,135,106,1,0,184,106,1,0,80,106,1,0,189,106,1,0,193,106,1,0,199,106,1,0,58,106,1,0,204,106,1,0,193,106,1,0,209,106,1,0,58,106,1,0,213,106,1,0,168,106,1,0,218,106,1,0,222,106,1,0,228,106,1,0,102,106,1,0,233,106,1,0,222,106,1,0,238,106,1,0,145,106,1,0,242,106,1,0,145,106,1,0,247,106,1,0,252,106,1,0,2,107,1,0,7,107,1,0,13,107,1,0,18,107,1,0,24,107,1,0,29,107,1,0,35,107,1,0,40,107,1,0,46,107,1,0,50,107,1,0,56,107,1,0,60,107,1,0,66,107,1,0,71,107,1,0,77,107,1,0,7,107,1,0,81,107,1,0,50,107,1,0,86,107,1,0,90,107,1,0,96,107,1,0,100,107,1,0,106,107,1,0,110,107,1,0,116,107,1,0,110,107,1,0,121,107,1,0,125,107,1,0,131,107,1,0,90,107,1,0,136,107,1,0,252,106,1,0,141,107,1,0,125,107,1,0,146,107,1,0,40,107,1,0,150,107,1,0,18,107,1,0,154,107,1,0,60,107,1,0,159,107,1,0,164,107,1,0,170,107,1,0,29,107,1,0,175,107,1,0,179,107,1,0,185,107,1,0,190,107,1,0,196,107,1,0,179,107,1,0,201,107,1,0,206,107,1,0,212,107,1,0,216,107,1,0,222,107,1,0,216,107,1,0,227,107,1,0,206,107,1,0,231,107,1,0,40,107,1,0,236,107,1,0,240,107,1,0,243,107,1,0,29,107,1,0,247,107,1,0,13,107,1,0,251,107,1,0,255,107,1,0,5,108,1,0,10,108,1,0,16,108,1,0,21,108,1,0,27,108,1,0,255,107,1,0,32,108,1,0,36,108,1,0,42,108,1,0,46,108,1,0,52,108,1,0,46,108,1,0,57,108,1,0,61,108,1,0,67,108,1,0,61,108,1,0,72,108,1,0,76,108,1,0,82,108,1,0,87,108,1,0,93,108,1,0,98,108,1,0,104,108,1,0,109,108,1,0,115,108,1,0,120,108,1,0,126,108,1,0,131,108,1,0,137,108,1,0,120,108,1,0,141,108,1,0,131,108,1,0,145,108,1,0,149,108,1,0,155,108,1,0,149,108,1,0,159,108,1,0,149,108,1,0,164,108,1,0,87,108,1,0,168,108,1,0,131,108,1,0,173,108,1,0,177,108,1,0,180,108,1,0,109,108,1,0,184,108,1,0,109,108,1,0,189,108,1,0,120,108,1,0,194,108,1,0,87,108,1,0,199,108,1,0,187,105,1,0,203,108,1,0,208,108,1,0,214,108,1,0,219,108,1,0,225,108,1,0,230,108,1,0,236,108,1,0,240,108,1,0,246,108,1,0,240,108,1,0,251,108,1,0,255,108,1,0,5,109,1,0,255,108,1,0,10,109,1,0,7,107,1,0,15,109,1,0,100,107,1,0,20,109,1,0,25,109,1,0,31,109,1,0,35,109,1,0,41,109,1,0,46,109,1,0,52,109,1,0,56,109,1,0,62,109,1,0,67,109,1,0,73,109,1,0,67,109,1,0,78,109,1,0,83,109,1,0,89,109,1,0,94,109,1,0,97,109,1,0,102,109,1,0,108,109,1,0,113,109,1,0,119,109,1,0,123,109,1,0,129,109,1,0,102,109,1,0,134,109,1,0,102,109,1,0,138,109,1,0,113,109,1,0,142,109,1,0,113,109,1,0,147,109,1,0,73,109,1,0,151,109,1,0,155,109,1,0,161,109,1,0,155,109,1,0,166,109,1,0,67,109,1,0,170,109,1,0,123,109,1,0,175,109,1,0,83,109,1,0,180,109,1,0,83,109,1,0,184,109,1,0,56,109,1,0,189,109,1,0,194,109,1,0,200,109,1,0,94,109,1,0,204,109,1,0,209,109,1,0,215,109,1,0,220,109,1,0,226,109,1,0,231,109,1,0,237,109,1,0,242,109,1,0,248,109,1,0,253,109,1,0,3,110,1,0,7,110,1,0,13,110,1,0,7,110,1,0,18,110,1,0,209,109,1,0,23,110,1,0,27,110,1,0,33,110,1,0,38,110,1,0,44,110,1,0,48,110,1,0,54,110,1,0,59,110,1,0,65,110,1,0,69,110,1,0,75,110,1,0,69,110,1,0,80,110,1,0,84,110,1,0,90,110,1,0,94,110,1,0,100,110,1,0,104,110,1,0,110,110,1,0,114,110,1,0,120,110,1,0,125,110,1,0,131,110,1,0,253,109,1,0,135,110,1,0,114,110,1,0,140,110,1,0,94,110,1,0,144,110,1,0,148,110,1,0,154,110,1,0,159,110,1,0,165,110,1,0,48,110,1,0,170,110,1,0,84,110,1,0,175,110,1,0,104,110,1,0,180,110,1,0,242,109,1,0,185,110,1,0,253,109,1,0,190,110,1,0,195,110,1,0,201,110,1,0,148,110,1,0,206,110,1,0,211,110,1,0,217,110,1,0,221,110,1,0,227,110,1,0,231,110,1,0,237,110,1,0,242,110,1,0,248,110,1,0,94,110,1,0,253,110,1,0,231,110,1,0,2,111,1,0,7,111,1,0,13,111,1,0,18,111,1,0,24,111,1,0,28,111,1,0,34,111,1,0,39,111,1,0,45,111,1,0,7,111,1,0,49,111,1,0,220,109,1,0,54,111,1,0,59,111,1,0,65,111,1,0,231,109,1,0,70,111,1,0,75,111,1,0,81,111,1,0,85,111,1,0,91,111,1,0,18,111,1,0,95,111,1,0,99,111,1,0,105,111,1,0,99,111,1,0,110,111,1,0,204,109,1,0,114,111,1,0,119,111,1,0,125,111,1,0,130,111,1,0,136,111,1,0,136,111,1,0,141,111,1,0,146,111,1,0,152,111,1,0,156,111,1,0,159,111,1,0,119,111,1,0,164,111,1,0,146,111,1,0,169,111,1,0,173,111,1,0,179,111,1,0,184,111,1,0,190,111,1,0,194,111,1,0,200,111,1,0,204,111,1,0,210,111,1,0,119,111,1,0,214,111,1,0,146,111,1,0,218,111,1,0,222,111,1,0,228,111,1,0,233,111,1,0,239,111,1,0,244,111,1,0,250,111,1,0,222,111,1,0,255,111,1,0,3,112,1,0,9,112,1,0,173,111,1,0,14,112,1,0,3,112,1,0,19,112,1,0,24,112,1,0,30,112,1,0,244,111,1,0,34,112,1,0,194,111,1,0,38,112,1,0,194,111,1,0,43,112,1,0,125,111,1,0,47,112,1,0,51,112,1,0,57,112,1,0,51,112,1,0,62,112,1,0,66,112,1,0,72,112,1,0,77,112,1,0,83,112,1,0,66,112,1,0,88,112,1,0,93,112,1,0,99,112,1,0,104,112,1,0,110,112,1,0,114,112,1,0,120,112,1,0,125,112,1,0,131,112,1,0,136,112,1,0,142,112,1,0,147,112,1,0,153,112,1,0,158,112,1,0,164,112,1,0,169,112,1,0,175,112,1,0,179,112,1,0,182,112,1,0,76,108,1,0,187,112,1,0,191,112,1,0,197,112,1,0,202,112,1,0,208,112,1,0,212,112,1,0,218,112,1,0,223,112,1,0,229,112,1,0,212,112,1,0,234,112,1,0,239,112,1,0,245,112,1,0,249,112,1,0,255,112,1,0,249,112,1,0,4,113,1,0,8,113,1,0,14,113,1,0,8,113,1,0,19,113,1,0,23,113,1,0,29,113,1,0,33,113,1,0,39,113,1,0,33,113,1,0,44,113,1,0,49,113,1,0,55,113,1,0,60,113,1,0,66,113,1,0,70,113,1,0,76,113,1,0,191,112,1,0,81,113,1,0,86,113,1,0,92,113,1,0,97,113,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([103,113,1,0,70,113,1,0,108,113,1,0,86,113,1,0,112,113,1,0,117,113,1,0,123,113,1,0,128,113,1,0,134,113,1,0,138,113,1,0,144,113,1,0,149,113,1,0,155,113,1,0,160,113,1,0,166,113,1,0,171,113,1,0,177,113,1,0,23,113,1,0,182,113,1,0,187,113,1,0,193,113,1,0,198,113,1,0,204,113,1,0,209,113,1,0,215,113,1,0,147,112,1,0,220,113,1,0,138,113,1,0,225,113,1,0,230,113,1,0,236,113,1,0,241,113,1,0,247,113,1,0,251,113,1,0,1,114,1,0,6,114,1,0,12,114,1,0,251,113,1,0,17,114,1,0,21,114,1,0,27,114,1,0,32,114,1,0,38,114,1,0,43,114,1,0,49,114,1,0,53,114,1,0,59,114,1,0,125,112,1,0,64,114,1,0,69,114,1,0,75,114,1,0,136,112,1,0,80,114,1,0,158,112,1,0,84,114,1,0,89,114,1,0,95,114,1,0,158,112,1,0,100,114,1,0,21,114,1,0,105,114,1,0,110,114,1,0,116,114,1,0,120,114,1,0,126,114,1,0,120,114,1,0,131,114,1,0,135,114,1,0,141,114,1,0,135,114,1,0,146,114,1,0,150,114,1,0,156,114,1,0,161,114,1,0,167,114,1,0,172,114,1,0,178,114,1,0,183,114,1,0,189,114,1,0,150,114,1,0,194,114,1,0,221,110,1,0,199,114,1,0,28,111,1,0,204,114,1,0,208,114,1,0,214,114,1,0,208,114,1,0,219,114,1,0,60,113,1,0,223,114,1,0,228,114,1,0,234,114,1,0,169,112,1,0,239,114,1,0,244,114,1,0,250,114,1,0,255,114,1,0,5,115,1,0,9,115,1,0,15,115,1,0,19,115,1,0,25,115,1,0,30,115,1,0,36,115,1,0,41,115,1,0,47,115,1,0,51,115,1,0,57,115,1,0,62,115,1,0,68,115,1,0,51,115,1,0,73,115,1,0,85,111,1,0,78,115,1,0,97,113,1,0,82,115,1,0,87,115,1,0,93,115,1,0,98,115,1,0,104,115,1,0,109,115,1,0,115,115,1,0,120,115,1,0,126,115,1,0,130,115,1,0,136,115,1,0,141,115,1,0,147,115,1,0,151,115,1,0,157,115,1,0,162,115,1,0,168,115,1,0,151,115,1,0,173,115,1,0,178,115,1,0,184,115,1,0,189,115,1,0,195,115,1,0,199,115,1,0,205,115,1,0,199,115,1,0,210,115,1,0,214,115,1,0,220,115,1,0,225,115,1,0,231,115,1,0,214,115,1,0,236,115,1,0,240,115,1,0,246,115,1,0,240,115,1,0,251,115,1,0,255,115,1,0,5,116,1,0,195,110,1,0,9,116,1,0,14,116,1,0,20,116,1,0,233,111,1,0,24,116,1,0,29,116,1,0,35,116,1,0,40,116,1,0,46,116,1,0,209,113,1,0,50,116,1,0,55,116,1,0,61,116,1,0,66,116,1,0,72,116,1,0,77,116,1,0,83,116,1,0,88,116,1,0,94,116,1,0,98,116,1,0,104,116,1,0,108,116,1,0,114,116,1,0,114,116,1,0,119,116,1,0,119,116,1,0,124,116,1,0,240,115,1,0,129,116,1,0,129,116,1,0,134,116,1,0,98,116,1,0,138,116,1,0,9,115,1,0,143,116,1,0,147,116,1,0,150,116,1,0,119,116,1,0,154,116,1,0,98,116,1,0,158,116,1,0,98,116,1,0,163,116,1,0,167,116,1,0,173,116,1,0,167,116,1,0,178,116,1,0,182,116,1,0,188,116,1,0,182,116,1,0,193,116,1,0,198,116,1,0,204,116,1,0,209,116,1,0,215,116,1,0,219,116,1,0,225,116,1,0,219,116,1,0,230,116,1,0,6,114,1,0,234,116,1,0,239,116,1,0,245,116,1,0,249,116,1,0,255,116,1,0,3,117,1,0,9,117,1,0,14,117,1,0,20,117,1,0,3,117,1,0,25,117,1,0,24,112,1,0,29,117,1,0,204,111,1,0,34,117,1,0,39,117,1,0,45,117,1,0,32,114,1,0,49,117,1,0,54,117,1,0,60,117,1,0,65,117,1,0,71,117,1,0,76,117,1,0,82,117,1,0,87,117,1,0,93,117,1,0,53,114,1,0,98,117,1,0,103,117,1,0,109,117,1,0,167,116,1,0,113,117,1,0,117,117,1,0,123,117,1,0,59,111,1,0,127,117,1,0,132,117,1,0,138,117,1,0,142,117,1,0,148,117,1,0,153,117,1,0,159,117,1,0,130,111,1,0,164,117,1,0,89,114,1,0,168,117,1,0,173,117,1,0,179,117,1,0,184,117,1,0,190,117,1,0,194,117,1,0,200,117,1,0,204,117,1,0,210,117,1,0,204,117,1,0,215,117,1,0,220,117,1,0,226,117,1,0,30,115,1,0,231,117,1,0,236,117,1,0,242,117,1,0,247,117,1,0,253,117,1,0,2,118,1,0,8,118,1,0,12,118,1,0,18,118,1,0,22,118,1,0,28,118,1,0,22,118,1,0,33,118,1,0,19,115,1,0,38,118,1,0,42,118,1,0,48,118,1,0,130,115,1,0,53,118,1,0,236,117,1,0,57,118,1,0,236,117,1,0,62,118,1,0,42,118,1,0,67,118,1,0,247,117,1,0,71,118,1,0,76,118,1,0,82,118,1,0,247,117,1,0,87,118,1,0,2,118,1,0,92,118,1,0,141,115,1,0,96,118,1,0,101,118,1,0,107,118,1,0,111,118,1,0,117,118,1,0,117,117,1,0,122,118,1,0,111,118,1,0,127,118,1,0,132,118,1,0,138,118,1,0,142,118,1,0,148,118,1,0,142,118,1,0,153,118,1,0,157,118,1,0,163,118,1,0,12,118,1,0,168,118,1,0,157,118,1,0,173,118,1,0,132,118,1,0,177,118,1,0,220,117,1,0,181,118,1,0,220,117,1,0,186,118,1,0,191,118,1,0,197,118,1,0,202,118,1,0,208,118,1,0,213,118,1,0,219,118,1,0,224,118,1,0,230,118,1,0,235,118,1,0,241,118,1,0,191,118,1,0,245,118,1,0,249,118,1,0,255,118,1,0,249,118,1,0,4,119,1,0,9,119,1,0,15,119,1,0,19,119,1,0,25,119,1,0,30,119,1,0,36,119,1,0,40,119,1,0,46,119,1,0,50,119,1,0,56,119,1,0,9,119,1,0,60,119,1,0,30,119,1,0,64,119,1,0,68,119,1,0,74,119,1,0,68,119,1,0,79,119,1,0,84,119,1,0,90,119,1,0,235,118,1,0,94,119,1,0,98,119,1,0,104,119,1,0,191,118,1,0,109,119,1,0,114,119,1,0,120,119,1,0,124,119,1,0,130,119,1,0,19,119,1,0,135,119,1,0,40,119,1,0,140,119,1,0,235,118,1,0,145,119,1,0,98,119,1,0,150,119,1,0,202,118,1,0,155,119,1,0,160,119,1,0,166,119,1,0,124,119,1,0,171,119,1,0,175,119,1,0,181,119,1,0,186,119,1,0,192,119,1,0,175,119,1,0,197,119,1,0,224,118,1,0,201,119,1,0,50,119,1,0,206,119,1,0,211,119,1,0,217,119,1,0,224,118,1,0,222,119,1,0,227,119,1,0,233,119,1,0,213,118,1,0,238,119,1,0,242,119,1,0,248,119,1,0,253,119,1,0,3,120,1,0,242,119,1,0,8,120,1,0,13,120,1,0,19,120,1,0,24,120,1,0,30,120,1,0,34,120,1,0,40,120,1,0,45,120,1,0,51,120,1,0,56,120,1,0,62,120,1,0,211,119,1,0,66,120,1,0,70,120,1,0,73,120,1,0,213,118,1,0,77,120,1,0,186,118,1,0,81,120,1,0,86,120,1,0,92,120,1,0,97,120,1,0,103,120,1,0,108,120,1,0,114,120,1,0,119,120,1,0,125,120,1,0,129,120,1,0,135,120,1,0,139,120,1,0,145,120,1,0,139,120,1,0,150,120,1,0,154,120,1,0,160,120,1,0,154,120,1,0,165,120,1,0,169,120,1,0,175,120,1,0,179,120,1,0,185,120,1,0,179,120,1,0,190,120,1,0,194,120,1,0,200,120,1,0,205,120,1,0,211,120,1,0,194,120,1,0,216,120,1,0,108,120,1,0,220,120,1,0,108,120,1,0,225,120,1,0,229,120,1,0,235,120,1,0,129,120,1,0,240,120,1,0,97,120,1,0,244,120,1,0,97,120,1,0,249,120,1,0,229,120,1,0,254,120,1,0,86,120,1,0,3,121,1,0,86,120,1,0,7,121,1,0,119,120,1,0,11,121,1,0,119,120,1,0,16,121,1,0,21,121,1,0,27,121,1,0,31,121,1,0,37,121,1,0,31,121,1,0,42,121,1,0,46,121,1,0,52,121,1,0,46,121,1,0,57,121,1,0,62,121,1,0,68,121,1,0,73,121,1,0,79,121,1,0,84,121,1,0,90,121,1,0,95,121,1,0,101,121,1,0,106,121,1,0,112,121,1,0,116,121,1,0,122,121,1,0,126,121,1,0,132,121,1,0,137,121,1,0,143,121,1,0,147,121,1,0,153,121,1,0,106,121,1,0,157,121,1,0,161,121,1,0,167,121,1,0,126,121,1,0,172,121,1,0,177,121,1,0,183,121,1,0,161,121,1,0,188,121,1,0,192,121,1,0,198,121,1,0,203,121,1,0,209,121,1,0,192,121,1,0,214,121,1,0,218,121,1,0,224,121,1,0,218,121,1,0,229,121,1,0,84,121,1,0,233,121,1,0,106,121,1,0,238,121,1,0,95,121,1,0,243,121,1,0,137,121,1,0,247,121,1,0,116,121,1,0,252,121,1,0,73,121,1,0,1,122,1,0,147,121,1,0,6,122,1,0,10,122,1,0,16,122,1,0,10,122,1,0,21,122,1,0,223,112,1,0,25,122,1,0,30,122,1,0,36,122,1,0,169,120,1,0,40,122,1,0,169,120,1,0,45,122,1,0,49,122,1,0,55,122,1,0,49,122,1,0,60,122,1,0,65,122,1,0,71,122,1,0,75,122,1,0,81,122,1,0,85,122,1,0,91,122,1,0,96,122,1,0,102,122,1,0,107,122,1,0,113,122,1,0,118,122,1,0,124,122,1,0,128,122,1,0,131,122,1,0,128,122,1,0,135,122,1,0,107,122,1,0,140,122,1,0,107,122,1,0,144,122,1,0,118,122,1,0,148,122,1,0,118,122,1,0,153,122,1,0,157,122,1,0,163,122,1,0,168,122,1,0,174,122,1,0,157,122,1,0,179,122,1,0,34,120,1,0,184,122,1,0,21,121,1,0,188,122,1,0,206,104,1,0,192,122,1,0,239,112,1,0,196,122,1,0,200,122,1,0,206,122,1,0,200,122,1,0,211,122,1,0,216,122,1,0,222,122,1,0,227,122,1,0,233,122,1,0,238,122,1,0,244,122,1,0,249,122,1,0,252,122,1,0,1,123,1,0,7,123,1,0,249,122,1,0,11,123,1,0,216,122,1,0,15,123,1,0,19,123,1,0,25,123,1,0,19,123,1,0,30,123,1,0,34,123,1,0,40,123,1,0,1,123,1,0,44,123,1,0,227,122,1,0,49,123,1,0,54,123,1,0,60,123,1,0,64,123,1,0,70,123,1,0,252,122,1,0,74,123,1,0,238,122,1,0,78,123,1,0,216,122,1,0,83,123,1,0,34,123,1,0,88,123,1,0,1,123,1,0,93,123,1,0,238,122,1,0,98,123,1,0,103,123,1,0,109,123,1,0,103,123,1,0,113,123,1,0,227,122,1,0,117,123,1,0,54,123,1,0,121,123,1,0,70,120,1,0,125,123,1,0,129,123,1,0,135,123,1,0,129,123,1,0,140,123,1,0,10,122,1,0,144,123,1,0,149,123,1,0,155,123,1,0,59,110,1,0,159,123,1,0,164,123,1,0,170,123,1,0,175,123,1,0,181,123,1,0,186,123,1,0,192,123,1,0,197,123,1,0,203,123,1,0,208,123,1,0,214,123,1,0,218,123,1,0,224,123,1,0,186,123,1,0,229,123,1,0,233,123,1,0,239,123,1,0,233,123,1,0,244,123,1,0,248,123,1,0,254,123,1,0,248,123,1,0,3,124,1,0,7,124,1,0,13,124,1,0,186,123,1,0,17,124,1,0,208,123,1,0,21,124,1,0,26,124,1,0,32,124,1,0,197,123,1,0,36,124,1,0,41,124,1,0,47,124,1,0,26,124,1,0,51,124,1,0,56,124,1,0,62,124,1,0,67,124,1,0,73,124,1,0,197,123,1,0,78,124,1,0,83,124,1,0,89,124,1,0,94,124,1,0,100,124,1,0,105,124,1,0,111,124,1,0,116,124,1,0,122,124,1,0,126,124,1,0,132,124,1,0,126,124,1,0,137,124,1,0,164,123,1,0,141,124,1,0,208,123,1,0,146,124,1,0,164,123,1,0,151,124,1,0,156,124,1,0,162,124,1,0,166,124,1,0,172,124,1,0,177,124,1,0,183,124,1,0,175,123,1,0,187,124,1,0,218,123,1,0,192,124,1,0,175,123,1,0,197,124,1,0,7,124,1,0,202,124,1,0,177,124,1,0,206,124,1,0,156,124,1,0,210,124,1,0,214,124,1,0,220,124,1,0,116,124,1,0,224,124,1,0,229,124,1,0,235,124,1,0,240,124,1,0,246,124,1,0,251,124,1,0,1,125,1,0,6,125,1,0,12,125,1,0,16,125,1,0,22,125,1,0,16,125,1,0,27,125,1,0,31,125,1,0,37,125,1,0,6,125,1,0,41,125,1,0,45,125,1,0,51,125,1,0,55,125,1,0,61,125,1,0,65,125,1,0,71,125,1,0,65,125,1,0,76,125,1,0,251,124,1,0,80,125,1,0,31,125,1,0,85,125,1,0,6,125,1,0,90,125,1,0,55,125,1,0,95,125,1,0,229,124,1,0,100,125,1,0,251,124,1,0,105,125,1,0,45,125,1,0,109,125,1,0,45,125,1,0,114,125,1,0,119,125,1,0,125,125,1,0,229,124,1,0,129,125,1,0,134,125,1,0,140,125,1,0,144,125,1,0,150,125,1,0,144,125,1,0,155,125,1,0,240,124,1,0,159,125,1,0,240,124,1,0,164,125,1,0,77,112,1,0,169,125,1,0,174,125,1,0,180,125,1,0,185,125,1,0,191,125,1,0,196,125,1,0,202,125,1,0,104,112,1,0,207,125,1,0,211,125,1,0,217,125,1,0,221,125,1,0,227,125,1,0,221,125,1,0,232,125,1,0,77,112,1,0,236,125,1,0,240,125,1,0,246,125,1,0,251,125,1,0,1,126,1,0,185,125,1,0,5,126,1,0,174,125,1,0,10,126,1,0,185,125,1,0,15,126,1,0,174,125,1,0,19,126,1,0,23,126,1,0,29,126,1,0,251,125,1,0,33,126,1,0,37,126,1,0,43,126,1,0,47,126,1,0,53,126,1,0,47,126,1,0,58,126,1,0,63,126,1,0,69,126,1,0,73,126,1,0,79,126,1,0,73,126,1,0,84,126,1,0,88,126,1,0,94,126,1,0,88,126,1,0,99,126,1,0,23,126,1,0,104,126,1,0,108,126,1,0,114,126,1,0,118,126,1,0,124,126,1,0,124,126,1,0,129,126,1,0,129,126,1,0,134,126,1,0,134,126,1,0,139,126,1,0,144,126,1,0,150,126,1,0,108,126,1,0,154,126,1,0,108,126,1,0,159,126,1,0,144,126,1,0,163,126,1,0,167,126,1,0,173,126,1,0,144,126,1,0,178,126,1,0,167,126,1,0,183,126,1,0,188,126,1,0,194,126,1,0,198,126,1,0,204,126,1,0,166,124,1,0,209,126,1,0,198,126,1,0,214,126,1,0,214,124,1,0,219,126,1,0,134,125,1,0,223,126,1,0,227,126,1,0,233,126,1,0,211,125,1,0,238,126,1,0,196,125,1,0,243,126,1,0,240,125,1,0,248,126,1,0,253,126,1,0,3,127,1,0,37,126,1,0,8,127,1,0,188,126,1,0,12,127,1,0,16,127,1,0,22,127,1,0,16,127,1,0,27,127,1,0,32,127,1,0,38,127,1,0,43,127,1,0,49,127,1,0,54,127,1,0,60,127,1,0,54,127,1,0,64,127,1,0,54,127,1,0,69,127,1,0,118,126,1,0,73,127,1,0,118,126,1,0,78,127,1,0,32,127,1,0,82,127,1,0,32,127,1,0,87,127,1,0,91,127,1,0,97,127,1,0,91,127,1,0,102,127,1,0,43,127,1,0,106,127,1,0,43,127,1,0,111,127,1,0,116,127,1,0,122,127,1,0,127,127,1,0,133,127,1,0,138,127,1,0,144,127,1,0,149,127,1,0,155,127,1,0,160,127,1,0,166,127,1,0,170,127,1,0,176,127,1,0,181,127,1,0,187,127,1,0,191,127,1,0,197,127,1,0,191,127,1,0,202,127,1,0,138,127,1,0,206,127,1,0,181,127,1,0,210,127,1,0,160,127,1,0,214,127,1,0,138,127,1,0,219,127,1,0,160,127,1,0,224,127,1,0,229,127,1,0,235,127,1,0,239,127,1,0,245,127,1,0,149,127,1,0,250,127,1,0,239,127,1,0,255,127,1,0,127,127,1,0,4,128,1,0,9,128,1,0,15,128,1,0,20,128,1,0,26,128,1,0,31,128,1,0,37,128,1,0,41,128,1,0,47,128,1,0,170,127,1,0,52,128,1,0,41,128,1,0,57,128,1,0,61,128,1,0,67,128,1,0,61,128,1,0,72,128,1,0,127,127,1,0,76,128,1,0,81,128,1,0,87,128,1,0,92,128,1,0,98,128,1,0,92,128,1,0,102,128,1,0,81,128,1,0,106,128,1,0,20,128,1,0,110,128,1,0,31,128,1,0,114,128,1,0,119,128,1,0,125,128,1,0,130,128,1,0,136,128,1,0,141,128,1,0,147,128,1,0,151,128,1,0,157,128,1,0,161,128,1,0,167,128,1,0,151,128,1,0,171,128,1,0,119,128,1,0,175,128,1,0,161,128,1,0,180,128,1,0,130,128,1,0,185,128,1,0,190,128,1,0,196,128,1,0,141,128,1,0,200,128,1,0,141,128,1,0,205,128,1,0,119,128,1,0,210,128,1,0,130,128,1,0,214,128,1,0,190,128,1,0,218,128,1,0,223,128,1,0,229,128,1,0,234,128,1,0,240,128,1,0,245,128,1,0,251,128,1,0,0,129,1,0,6,129,1,0,10,129,1,0,16,129,1,0,223,128,1,0,20,129,1,0,223,128,1,0,25,129,1,0,245,128,1,0,29,129,1,0,245,128,1,0,34,129,1,0,38,129,1,0,44,129,1,0,0,129,1,0,48,129,1,0,52,129,1,0,58,129,1,0,38,129,1,0,63,129,1,0,67,129,1,0,73,129,1,0,67,129,1,0,78,129,1,0,0,129,1,0,83,129,1,0,87,129,1,0,93,129,1,0,97,129,1,0,103,129,1,0,97,129,1,0,108,129,1,0,112,129,1,0,118,129,1,0,151,128,1,0,123,129,1,0,112,129,1,0,128,129,1,0,10,129,1,0,132,129,1,0,10,129,1,0,137,129,1,0,141,129,1,0,147,129,1,0,141,129,1,0,152,129,1,0,156,129,1,0,162,129,1,0,156,129,1,0,167,129,1,0,171,129,1,0,177,129,1,0,171,129,1,0,182,129,1,0,186,129,1,0,192,129,1,0,197,129,1,0,203,129,1,0,186,129,1,0,208,129,1,0,116,127,1,0,213,129,1,0,218,129,1,0,224,129,1,0,228,129,1,0,234,129,1,0,239,129,1,0,245,129,1,0,67,129,1,0,249,129,1,0,253,129,1,0,3,130,1,0,8,130,1,0,14,130,1,0,19,130,1,0,25,130,1,0,30,130,1,0,36,130,1,0,41,130,1,0,47,130,1,0,52,130,1,0,58,130,1,0,63,130,1,0,69,130,1,0,73,130,1,0,79,130,1,0,73,130,1,0,84,130,1,0,88,130,1,0,94,130,1,0,98,130,1,0,104,130,1,0,41,130,1,0,108,130,1,0,41,130,1,0,113,130,1,0,117,130,1,0,123,130,1,0,127,130,1,0,133,130,1,0,30,130,1,0,137,130,1,0,98,130,1,0,142,130,1,0,30,130,1,0,147,130,1,0,127,130,1,0,152,130,1,0,63,130,1,0,157,130,1,0,162,130,1,0,168,130,1,0,173,130,1,0,179,130,1,0,63,130,1,0,183,130,1,0,253,129,1,0,188,130,1,0,52,130,1,0,192,130,1,0,117,130,1,0,197,130,1,0,52,130,1,0,202,130,1,0,207,130,1,0,213,130,1,0,173,130,1,0,217,130,1,0,88,130,1,0,222,130,1,0,227,130,1,0,233,130,1,0,237,130,1,0,243,130,1,0,237,130,1,0,248,130,1,0,253,130,1,0,3,131,1,0,8,131,1,0,14,131,1,0,19,131,1,0,25,131,1,0,30,131,1,0,36,131,1,0,41,131,1,0,47,131,1,0,51,131,1,0,57,131,1,0,62,131,1,0,68,131,1,0,30,122,1,0,72,131,1,0,19,131,1,0,76,131,1,0,19,131,1,0,81,131,1,0,85,131,1,0,91,131,1,0,8,131,1,0,95,131,1,0,99,131,1,0,105,131,1,0,109,131,1,0,115,131,1,0,119,131,1,0,125,131,1,0,130,131,1,0,136,131,1,0,140,131,1,0,146,131,1,0,8,131,1,0,151,131,1,0,156,131,1,0,162,131,1,0,167,131,1,0,173,131,1,0,177,131,1,0,183,131,1,0,85,131,1,0,188,131,1,0,177,131,1,0,193,131,1,0,197,131,1,0,203,131,1,0,51,131,1,0,208,131,1,0,197,131,1,0,213,131,1,0,140,131,1,0,218,131,1,0,223,131,1,0,229,131,1,0,234,131,1,0,240,131,1,0,244,131,1,0,250,131,1,0,254,131,1,0,4,132,1,0,9,132,1,0,15,132,1,0,30,131,1,0,20,132,1,0,119,131,1,0,25,132,1,0,223,131,1,0,29,132,1,0,244,131,1,0,34,132,1,0,234,131,1,0,38,132,1,0,253,130,1,0,43,132,1,0,30,122,1,0,47,132,1,0,51,132,1,0,54,132,1,0,59,132,1,0,65,132,1,0,69,132,1,0,75,132,1,0,89,105,1,0,80,132,1,0,69,132,1,0,85,132,1,0,89,132,1,0,95,132,1,0,89,132,1,0,100,132,1,0,105,132,1,0,111,132,1,0,115,132,1,0,121,132,1,0,18,107,1,0,126,132,1,0,130,132,1,0,136,132,1,0,140,132,1,0,146,132,1,0,150,132,1,0,156,132,1,0,254,131,1,0,161,132,1,0,165,132,1,0,171,132,1,0,175,132,1,0,181,132,1,0,175,132,1,0,186,132,1,0,191,132,1,0,197,132,1,0,62,121,1,0,202,132,1,0,84,121,1,0,207,132,1,0,64,123,1,0,211,132,1,0,64,123,1,0,216,132,1,0,221,132,1,0,227,132,1,0,232,132,1,0,238,132,1,0,243,132,1,0,249,132,1,0,254,132,1,0,4,133,1,0,9,133,1,0,15,133,1,0,221,132,1,0,19,133,1,0,221,132,1,0,24,133,1,0,28,133,1,0,34,133,1,0,38,133,1,0,44,133,1,0,38,133,1,0,49,133,1,0,254,132,1,0,53,133,1,0,254,132,1,0,58,133,1,0,62,133,1,0,68,133,1,0,72,133,1,0,78,133,1,0,72,133,1,0,83,133,1,0,62,133,1,0,87,133,1,0,92,133,1,0,98,133,1,0,102,133,1,0,108,133,1,0,102,133,1,0,113,133,1,0,28,133,1,0,118,133,1,0,62,133,1,0,123,133,1,0,105,132,1,0,127,133,1,0,132,133,1,0,138,133,1,0,243,132,1,0,143,133,1,0,148,133,1,0,154,133,1,0,158,133,1,0,164,133,1,0,158,133,1,0,169,133,1,0,9,133,1,0,173,133,1,0,232,132,1,0,178,133,1,0,9,133,1,0,183,133,1,0,187,133,1,0,190,133,1,0,148,133,1,0,194,133,1,0,58,133,1,0,198,133,1,0,202,133,1,0,208,133,1,0,41,131,1,0,213,133,1,0,202,133,1,0,218,133,1,0,99,131,1,0,223,133,1,0,227,133,1,0,233,133,1,0,227,133,1,0,238,133,1,0,242,133,1,0,248,133,1,0,52,129,1,0,253,133,1,0,242,133,1,0,2,134,1,0,87,129,1,0,7,134,1,0,12,134,1,0,18,134,1,0,23,134,1,0,29,134,1,0,34,134,1,0,40,134,1,0,45,134,1,0,51,134,1,0,56,134,1,0,62,134,1,0,66,134,1,0,72,134,1,0,115,132,1,0,77,134,1,0,66,134,1,0,82,134,1,0,86,134,1,0,92,134,1,0,97,134,1,0,103,134,1,0,255,115,1,0,108,134,1,0,112,134,1,0,118,134,1,0,12,134,1,0,122,134,1,0,126,134,1,0,132,134,1,0,126,134,1,0,137,134,1,0,141,134,1,0,147,134,1,0,141,134,1,0,152,134,1,0,157,134,1,0,163,134,1,0,167,134,1,0,173,134,1,0,167,134,1,0,178,134,1,0,183,134,1,0,189,134,1,0,193,134,1,0,199,134,1,0,86,134,1,0,204,134,1,0,209,134,1,0,215,134,1,0,220,134,1,0,226,134,1,0,65,122,1,0,230,134,1,0,235,134,1,0,241,134,1,0,12,134,1,0,246,134,1,0,251,134,1,0,1,135,1,0,193,134,1,0,6,135,1,0,11,135,1,0,17,135,1,0,22,135,1,0,28,135,1,0,33,135,1,0,39,135,1,0,34,134,1,0,44,135,1,0,49,135,1,0,55,135,1,0,45,134,1,0,59,135,1,0,64,135,1,0,70,135,1,0,45,134,1,0,75,135,1,0,11,135,1,0,79,135,1,0,84,135,1,0,90,135,1,0,22,135,1,0,94,135,1,0,99,135,1,0,105,135,1,0,220,134,1,0,109,135,1,0,112,134,1,0,114,135,1,0,119,135,1,0,125,135,1,0,34,134,1,0,129,135,1,0,134,135,1,0,140,135,1,0,145,135,1,0,151,135,1,0,49,135,1,0,155,135,1,0,85,131,1,0,159,135,1,0,109,131,1,0,164,135,1,0,92,133,1,0,168,135,1,0,209,134,1,0,172,135,1,0,177,135,1,0,183,135,1,0,188,135,1,0,194,135,1,0,23,134,1,0,199,135,1,0,204,135,1,0,210,135,1,0,215,135,1,0,221,135,1,0,221,135,1,0,226,135,1,0,226,135,1,0,230,135,1,0,226,135,1,0,234,135,1,0,199,135,1,0,238,135,1,0,204,135,1,0,242,135,1,0,215,135,1,0,246,135,1,0,215,135,1,0,251,135,1,0,204,135,1,0,0,136,1,0,4,136,1,0,7,136,1,0,12,136,1,0,18,136,1,0,23,136,1,0,29,136,1,0,34,136,1,0,40,136,1,0,96,122,1,0,45,136,1,0,140,132,1,0,49,136,1,0,140,132,1,0,54,136,1,0,34,136,1,0,58,136,1,0,63,136,1,0,69,136,1,0,12,136,1,0,73,136,1,0,12,136,1,0,78,136,1,0,82,136,1,0,88,136,1,0,92,136,1,0,98,136,1,0,92,136,1,0,103,136,1,0,108,136,1,0,114,136,1,0,118,136,1,0,124,136,1,0,23,136,1,0,129,136,1,0,133,136,1,0,139,136,1,0,96,122,1,0,143,136,1,0,34,136,1,0,148,136,1,0,82,136,1,0,153,136,1,0,118,136,1,0,158,136,1,0,163,136,1,0,169,136,1,0,174,136,1,0,180,136,1,0,108,136,1,0,184,136,1,0,163,136,1,0,188,136,1,0,133,136,1,0,193,136,1,0,198,136,1,0,204,136,1,0,198,136,1,0,208,136,1,0,212,136,1,0,218,136,1,0,212,136,1,0,223,136,1,0,227,136,1,0,230,136,1,0,234,136,1,0,240,136,1,0,234,136,1,0,245,136,1,0,59,132,1,0,249,136,1,0,187,133,1,0,253,136,1,0,145,135,1,0,1,137,1,0,56,134,1,0,6,137,1,0,10,137,1,0,16,137,1,0,21,137,1,0,27,137,1,0,32,137,1,0,38,137,1,0,43,137,1,0,49,137,1,0,54,137,1,0,60,137,1,0,65,137,1,0,71,137,1,0,75,137,1,0,81,137,1,0,86,137,1,0,92,137,1,0,96,137,1,0,102,137,1,0,107,137,1,0,113,137,1,0,117,137,1,0,123,137,1,0,128,137,1,0,134,137,1,0,172,114,1,0,138,137,1,0,143,137,1,0,149,137,1,0,153,137,1,0,159,137,1,0,153,137,1,0,164,137,1,0,183,114,1,0,168,137,1,0,172,137,1,0,178,137,1,0,165,132,1,0,183,137,1,0,188,137,1,0,194,137,1,0,198,137,1,0,204,137,1,0,32,137,1,0,209,137,1,0,214,137,1,0,220,137,1,0,224,137,1,0,230,137,1,0,235,137,1,0,241,137,1,0,246,137,1,0,252,137,1,0,1,138,1,0,7,138,1,0,12,138,1,0,18,138,1,0,22,138,1,0,25,138,1,0,30,138,1,0,36,138,1,0,41,138,1,0,47,138,1,0,52,138,1,0,58,138,1,0,62,138,1,0,68,138,1,0,73,138,1,0,79,138,1,0,96,137,1,0,84,138,1,0,117,137,1,0,89,138,1,0,172,137,1,0,94,138,1,0,224,137,1,0,99,138,1,0,54,137,1,0,104,138,1,0,62,138,1,0,109,138,1,0,65,137,1,0,114,138,1,0,119,138,1,0,125,138,1,0,129,138,1,0,135,138,1,0,246,137,1,0,139,138,1,0,75,137,1,0,144,138,1,0,149,138,1,0,155,138,1,0,160,138,1,0,166,138,1,0,171,138,1,0,177,138,1,0,182,138,1,0,188,138,1,0,193,138,1,0,199,138,1,0,1,138,1,0,203,138,1,0,12,138,1,0,207,138,1,0,21,137,1,0,212,138,1,0,52,138,1,0,216,138,1,0,220,138,1,0,226,138,1,0,220,138,1,0,231,138,1,0,119,138,1,0,235,138,1,0,240,138,1,0,246,138,1,0,246,138,1,0,251,138,1,0,0,139,1,0,6,139,1,0,11,139,1,0,17,139,1,0,22,139,1,0,28,139,1,0,0,139,1,0,32,139,1,0,0,139,1,0,37,139,1,0,41,139,1,0,47,139,1,0,208,114,1,0,51,139,1,0,41,139,1,0,55,139,1,0,41,139,1,0,60,139,1,0,11,139,1,0,65,139,1,0,69,139,1,0,72,139,1,0,76,139,1,0,82,139,1,0,76,139,1,0,87,139,1,0,92,139,1,0,98,139,1,0,246,138,1,0,102,139,1,0,106,139,1,0,112,139,1,0,117,139,1,0,123,139,1,0,106,139,1,0,128,139,1,0,92,139,1,0,132,139,1,0,136,139,1,0,142,139,1,0,136,139,1,0,147,139,1,0,240,138,1,0,151,139,1,0,240,138,1,0,156,139,1,0,37,139,1,0,160,139,1,0,165,139,1,0,171,139,1,0,176,139,1,0,182,139,1,0,244,114,1,0,187,139,1,0,192,139,1,0,198,139,1,0,203,139,1,0,209,139,1,0,176,139,1,0,213,139,1,0,176,139,1,0,218,139,1,0,222,139,1,0,228,139,1,0,222,139,1,0,233,139,1,0,228,114,1,0,237,139,1,0,241,139,1,0,247,139,1,0,192,139,1,0,252,139,1,0,0,140,1,0,6,140,1,0,241,139,1,0,11,140,1,0,255,114,1,0,15,140,1,0,19,140,1,0,25,140,1,0,19,140,1,0,30,140,1,0,34,140,1,0,40,140,1,0,165,139,1,0,44,140,1,0,48,140,1,0,54,140,1,0,59,140,1,0,65,140,1,0,198,137,1,0,70,140,1,0,48,140,1,0,75,140,1,0,80,140,1,0,86,140,1,0,90,140,1,0,96,140,1,0,90,140,1,0,101,140,1,0,105,140,1,0,111,140,1,0,105,140,1,0,116,140,1,0,121,140,1,0,127,140,1,0,34,140,1,0,132,140,1,0,177,121,1,0,136,140,1,0,140,140,1,0,146,140,1,0,151,140,1,0,157,140,1,0,162,140,1,0,168,140,1,0,173,140,1,0,179,140,1,0,184,140,1,0,190,140,1,0,195,140,1,0,201,140,1,0,206,140,1,0,212,140,1,0,217,140,1,0,223,140,1,0,195,140,1,0,227,140,1,0,195,140,1,0,232,140,1,0,236,140,1,0,242,140,1,0,173,140,1,0,246,140,1,0,173,140,1,0,251,140,1,0,255,140,1,0,5,141,1,0,184,140,1,0,9,141,1,0,184,140,1,0,14,141,1,0,18,141,1,0,24,141,1,0,18,141,1,0,29,141,1,0,217,140,1,0,33,141,1,0,217,140,1,0,38,141,1,0,236,140,1,0,42,141,1,0,236,140,1,0,47,141,1,0,52,141,1,0,58,141,1,0,255,140,1,0,63,141,1,0,67,141,1,0,73,141,1,0,67,141,1,0,78,141,1,0,206,140,1,0,82,141,1,0,86,141,1,0,92,141,1,0,97,141,1,0,103,141,1,0,86,141,1,0,108,141,1,0,43,137,1,0,113,141,1,0,117,139,1,0,117,141,1,0,22,139,1,0,122,141,1,0,126,141,1,0,132,141,1,0,126,141,1,0,137,141,1,0,142,141,1,0,148,141,1,0,203,139,1,0,153,141,1,0,165,139,1,0,158,141,1,0,52,141,1,0,162,141,1,0,166,141,1,0,172,141,1,0,177,141,1,0,183,141,1,0,188,141,1,0,194,141,1,0,166,141,1,0,199,141,1,0,204,141,1,0,210,141,1,0,215,141,1,0,221,141,1,0,226,141,1,0,232,141,1,0,237,141,1,0,243,141,1,0,41,115,1,0,248,141,1,0,252,141,1,0,2,142,1,0,252,141,1,0,7,142,1,0,177,141,1,0,11,142,1,0,16,142,1,0,22,142,1,0,26,142,1,0,32,142,1,0,26,142,1,0,37,142,1,0,226,141,1,0,41,142,1,0,45,142,1,0,51,142,1,0,45,142,1,0,56,142,1,0,30,115,1,0,60,142,1,0,140,140,1,0,65,142,1,0,204,141,1,0,69,142,1,0,204,141,1,0,74,142,1,0,79,142,1,0,85,142,1,0,89,142,1,0,95,142,1,0,89,142,1,0,100,142,1,0,105,142,1,0,111,142,1,0,215,141,1,0,115,142,1,0,119,142,1,0,125,142,1,0,119,142,1,0,130,142,1,0,226,141,1,0,135,142,1,0,140,142,1,0,146,142,1,0,150,142,1,0,156,142,1,0,215,141,1,0,161,142,1,0,150,142,1,0,166,142,1,0,105,142,1,0,170,142,1,0,199,141,1,0,174,142,1,0,179,142,1,0,185,142,1,0,190,142,1,0,196,142,1,0,201,142,1,0,207,142,1,0,212,142,1,0,218,142,1,0,223,142,1,0,229,142,1,0,10,108,1,0,233,142,1,0,238,142,1,0,244,142,1,0,248,142,1,0,254,142,1,0,249,116,1,0,3,143,1,0,248,142,1,0,8,143,1,0,12,143,1,0,18,143,1,0,12,143,1,0,23,143,1,0,27,143,1,0,33,143,1,0,27,143,1,0,38,143,1,0,42,143,1,0,48,143,1,0,80,140,1,0,52,143,1,0,59,140,1,0,56,143,1,0,60,143,1,0,66,143,1,0,190,142,1,0,71,143,1,0,60,143,1,0,76,143,1,0,80,143,1,0,86,143,1,0,223,142,1,0,91,143,1,0,201,142,1,0,95,143,1,0,201,142,1,0,100,143,1,0,104,143,1,0,110,143,1,0,115,143,1,0,121,143,1,0,126,143,1,0,132,143,1,0,137,143,1,0,143,143,1,0,80,143,1,0,148,143,1,0,104,143,1,0,153,143,1,0,158,143,1,0,164,143,1,0,169,143,1,0,175,143,1,0,180,143,1,0,186,143,1,0,249,116,1,0,190,143,1,0,194,143,1,0,200,143,1,0,194,143,1,0,205,143,1,0,209,143,1,0,215,143,1,0,179,142,1,0,220,143,1,0,225,143,1,0,231,143,1,0,235,143,1,0,241,143,1,0,212,142,1,0,246,143,1,0,251,143,1,0,1,144,1,0,62,115,1,0,5,144,1,0,169,143,1,0,9,144,1,0,180,143,1,0,13,144,1,0,18,144,1,0,24,144,1,0,29,144,1,0,35,144,1,0,40,144,1,0,46,144,1,0,51,144,1,0,57,144,1,0,62,144,1,0,68,144,1,0,29,144,1,0,72,144,1,0,29,144,1,0,77,144,1,0,81,144,1,0,87,144,1,0,91,144,1,0,97,144,1,0,90,140,1,0,101,144,1,0,40,144,1,0,105,144,1,0,109,144,1,0,115,144,1,0,119,144,1,0,124,144,1,0,51,144,1,0,128,144,1,0,51,144,1,0,133,144,1,0,109,144,1,0,138,144,1,0,62,144,1,0,142,144,1,0,81,144,1,0,147,144,1,0,62,144,1,0,152,144,1,0,112,129,1,0,156,144,1,0,120,115,1,0,161,144,1,0,166,144,1,0,172,144,1,0,177,144,1,0,183,144,1,0,188,144,1,0,194,144,1,0,199,144,1,0,205,144,1,0,209,144,1,0,215,144,1,0,209,144,1,0,220,144,1,0,224,144,1,0,230,144,1,0,234,144,1,0,240,144,1,0,166,144,1,0,245,144,1,0,227,126,1,0,249,144,1,0,227,126,1,0,254,144,1,0,2,145,1,0,8,145,1,0,177,144,1,0,12,145,1,0,150,132,1,0,17,145,1,0,21,145,1,0,27,145,1,0,31,145,1,0,37,145,1,0,41,145,1,0,47,145,1,0,41,145,1,0,52,145,1,0,56,145,1,0,62,145,1,0,234,144,1,0,67,145,1,0,177,144,1,0,72,145,1,0,56,145,1,0,77,145,1,0,188,144,1,0,82,145,1,0,98,115,1,0,86,145,1,0,90,145,1,0,96,145,1,0,90,145,1,0,101,145,1,0,106,145,1,0,112,145,1,0,109,115,1,0,116,145,1,0,224,144,1,0,121,145,1,0,21,145,1,0,126,145,1,0,199,144,1,0,131,145,1,0,120,115,1,0,135,145,1,0,140,145,1,0,146,145,1,0,31,145,1,0,151,145,1,0,155,145,1,0,161,145,1,0,172,144,1,0,165,145,1,0,61,108,1,0,170,145,1,0,175,145,1,0,181,145,1,0,186,145,1,0,192,145,1,0,130,132,1,0,196,145,1,0,201,145,1,0,207,145,1,0,211,145,1,0,217,145,1,0,201,145,1,0,221,145,1,0,130,132,1,0,226,145,1,0,211,145,1,0,230,145,1,0,211,145,1,0,235,145,1,0,239,145,1,0,244,145,1,0,186,145,1,0,248,145,1,0,186,145,1,0,253,145,1,0,61,108,1,0,1,146,1,0,175,145,1,0,5,146,1,0,10,146,1,0,16,146,1,0,151,140,1,0,21,146,1,0,26,146,1,0,32,146,1,0,37,146,1,0,43,146,1,0,47,146,1,0,53,146,1,0,37,146,1,0,58,146,1,0,62,146,1,0,68,146,1,0,10,137,1,0,73,146,1,0,26,146,1,0,77,146,1,0,26,146,1,0,82,146,1,0,86,146,1,0,92,146,1,0,47,146,1,0,97,146,1,0,102,146,1,0,108,146,1,0,113,146,1,0,119,146,1,0,151,140,1,0,123,146,1,0,102,146,1,0,127,146,1,0,113,146,1,0,131,146,1,0,10,146,1,0,135,146,1,0,10,137,1,0,139,146,1,0,162,140,1,0,143,146,1,0,178,115,1,0,148,146,1,0,153,146,1,0,159,146,1,0,164,146,1,0,170,146,1,0,189,115,1,0,175,146,1,0,180,146,1,0,186,146,1,0,190,146,1,0,196,146,1,0,201,146,1,0,207,146,1,0,190,146,1,0,212,146,1,0,216,146,1,0,222,146,1,0,108,116,1,0,227,146,1,0,231,146,1,0,237,146,1,0,241,146,1,0,247,146,1,0,251,146,1,0,1,147,1,0,5,147,1,0,11,147,1,0,5,147,1,0,15,147,1,0,19,147,1,0,25,147,1,0,180,146,1,0,30,147,1,0,241,146,1,0,35,147,1,0,19,147,1,0,40,147,1,0,201,146,1,0,44,147,1,0,49,147,1,0,55,147,1,0,59,147,1,0,65,147,1,0,59,147,1,0,70,147,1,0,74,147,1,0,80,147,1,0,216,146,1,0,85,147,1,0,90,147,1,0,96,147,1,0,74,147,1,0,101,147,1,0,106,147,1,0,112,147,1,0,117,147,1,0,123,147,1,0,128,147,1,0,134,147,1,0,138,147,1,0,144,147,1,0,138,147,1,0,149,147,1,0,154,147,1,0,160,147,1,0,165,147,1,0,171,147,1,0,106,147,1,0,175,147,1,0,180,147,1,0,186,147,1,0,153,146,1,0,191,147,1,0,231,146,1,0,196,147,1,0,251,146,1,0,201,147,1,0,5,147,1,0,206,147,1,0,211,147,1,0,217,147,1,0,222,147,1,0,228,147,1,0,49,147,1,0,232,147,1,0,237,147,1,0,243,147,1,0,164,146,1,0,248,147,1,0,165,147,1,0,252,147,1,0,1,148,1,0,7,148,1,0,12,148,1,0,18,148,1,0,23,148,1,0,29,148,1,0,34,148,1,0,40,148,1,0,44,148,1,0,50,148,1,0,54,148,1,0,60,148,1,0,54,148,1,0,65,148,1,0,222,147,1,0,69,148,1,0,74,148,1,0,80,148,1,0,85,148,1,0,91,148,1,0,199,115,1,0,96,148,1,0,101,148,1,0,107,148,1,0,112,148,1,0,118,148,1,0,123,148,1,0,129,148,1,0,133,148,1,0,139,148,1,0,133,148,1,0,144,148,1,0,85,148,1,0,148,148,1,0,152,148,1,0,158,148,1,0,152,148,1,0,163,148,1,0,163,148,1,0,167,148,1,0,171,148,1,0,177,148,1,0,112,148,1,0,181,148,1,0,112,148,1,0,186,148,1,0,190,148,1,0,196,148,1,0,190,148,1,0,201,148,1,0,171,148,1,0,206,148,1,0,163,148,1,0,210,148,1,0,214,148,1,0,220,148,1,0,214,148,1,0,225,148,1,0,101,148,1,0,230,148,1,0,123,148,1,0,235,148,1,0,239,148,1,0,245,148,1,0,239,148,1,0,250,148,1,0,255,148,1,0,5,149,1,0,101,148,1,0,9,149,1,0,123,148,1,0,13,149,1,0,17,149,1,0,23,149,1,0,17,149,1,0,28,149,1,0,225,115,1,0,33,149,1,0,38,149,1,0,44,149,1,0,49,149,1,0,55,149,1,0,60,149,1,0,66,149,1,0,71,149,1,0,77,149,1,0,81,149,1,0,84,149,1,0,88,149,1,0,94,149,1,0,38,149,1,0,98,149,1,0,103,149,1,0,109,149,1,0,113,149,1,0,119,149,1,0,113,149,1,0,124,149,1,0,103,149,1,0,128,149,1,0,132,149,1,0,138,149,1,0,88,149,1,0,143,149,1,0,132,149,1,0,148,149,1,0,152,149,1,0,158,149,1,0,152,149,1,0,163,149,1,0,168,149,1,0,174,149,1,0,214,115,1,0,178,149,1,0,188,135,1,0,182,149,1,0,38,149,1,0,187,149,1,0,49,149,1,0,192,149,1,0,197,149,1,0,203,149,1,0,208,149,1,0,214,149,1,0,71,149,1,0,219,149,1,0,223,149,1,0,229,149,1,0,223,149,1,0,234,149,1,0,208,149,1,0,238,149,1,0,243,149,1,0,249,149,1,0,60,149,1,0,253,149,1,0,60,149,1,0,2,150,1,0,7,150,1,0,13,150,1,0,71,149,1,0,17,150,1,0,22,150,1,0,28,150,1,0,23,134,1,0,32,150,1,0,36,150,1,0,42,150,1,0,36,150,1,0,47,150,1,0,51,150,1,0,57,150,1,0,51,150,1,0,62,150,1,0,235,143,1,0,67,150,1,0,190,148,1,0,71,150,1,0,85,148,1,0,76,150,1,0,91,144,1,0,81,150,1,0,168,149,1,0,85,150,1,0,89,150,1,0,95,150,1,0,99,150,1,0,105,150,1,0,86,146,1,0,110,150,1,0,115,150,1,0,121,150,1,0,126,150,1,0,132,150,1,0,137,150,1,0,143,150,1,0,148,150,1,0,154,150,1,0,110,150,1,0,158,150,1,0,162,150,1,0,168,150,1,0,168,150,1,0,172,150,1,0,126,150,1,0,176,150,1,0,162,150,1,0,181,150,1,0,148,150,1,0,186,150,1,0,148,150,1,0,190,150,1,0,89,150,1,0,195,150,1,0,137,150,1,0,200,150,1,0,168,150,1,0,204,150,1,0,115,150,1,0,208,150,1,0,212,150,1,0,218,150,1,0,126,150,1,0,223,150,1,0,212,150,1,0,228,150,1,0,115,150,1,0,233,150,1,0,238,150,1,0,244,150,1,0,248,150,1,0,254,150,1,0,248,150,1,0,3,151,1,0,121,150,1,0,7,151,1,0,180,147,1,0,11,151,1,0,16,151,1,0,22,151,1,0,255,148,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([26,151,1,0,30,151,1,0,36,151,1,0,30,151,1,0,41,151,1,0,238,150,1,0,45,151,1,0,49,151,1,0,55,151,1,0,49,151,1,0,60,151,1,0,65,151,1,0,71,151,1,0,76,151,1,0,82,151,1,0,87,151,1,0,93,151,1,0,98,151,1,0,104,151,1,0,109,151,1,0,115,151,1,0,119,151,1,0,125,151,1,0,130,151,1,0,136,151,1,0,140,151,1,0,146,151,1,0,140,151,1,0,151,151,1,0,71,151,1,0,155,151,1,0,76,151,1,0,159,151,1,0,87,151,1,0,163,151,1,0,87,151,1,0,168,151,1,0,98,151,1,0,172,151,1,0,98,151,1,0,177,151,1,0,181,151,1,0,184,151,1,0,188,151,1,0,194,151,1,0,76,151,1,0,199,151,1,0,203,151,1,0,209,151,1,0,203,151,1,0,214,151,1,0,65,151,1,0,218,151,1,0,223,151,1,0,229,151,1,0,65,151,1,0,234,151,1,0,238,151,1,0,244,151,1,0,238,151,1,0,249,151,1,0,130,151,1,0,253,151,1,0,2,152,1,0,8,152,1,0,109,151,1,0,12,152,1,0,109,151,1,0,17,152,1,0,21,152,1,0,27,152,1,0,21,152,1,0,32,152,1,0,37,152,1,0,43,152,1,0,48,152,1,0,54,152,1,0,59,152,1,0,65,152,1,0,14,116,1,0,70,152,1,0,75,152,1,0,81,152,1,0,85,152,1,0,91,152,1,0,96,152,1,0,102,152,1,0,75,152,1,0,106,152,1,0,110,152,1,0,116,152,1,0,48,152,1,0,120,152,1,0,124,152,1,0,130,152,1,0,134,152,1,0,140,152,1,0,144,152,1,0,150,152,1,0,154,152,1,0,160,152,1,0,154,152,1,0,165,152,1,0,43,152,1,0,169,152,1,0,59,152,1,0,174,152,1,0,96,152,1,0,178,152,1,0,75,152,1,0,197,200,1,0,183,152,1,0,189,152,1,0,85,152,1,0,194,152,1,0,37,152,1,0,199,152,1,0,110,152,1,0,204,152,1,0,209,152,1,0,215,152,1,0,220,152,1,0,226,152,1,0,231,152,1,0,237,152,1,0,241,152,1,0,244,152,1,0,124,152,1,0,249,152,1,0,144,152,1,0,254,152,1,0,134,152,1,0,2,153,1,0,48,152,1,0,7,153,1,0,134,152,1,0,12,153,1,0,220,152,1,0,16,153,1,0,231,152,1,0,20,153,1,0,25,153,1,0,31,153,1,0,35,153,1,0,41,153,1,0,35,153,1,0,46,153,1,0,50,153,1,0,56,153,1,0,50,153,1,0,61,153,1,0,66,153,1,0,72,153,1,0,29,116,1,0,77,153,1,0,40,116,1,0,82,153,1,0,29,116,1,0,86,153,1,0,90,153,1,0,96,153,1,0,101,153,1,0,107,153,1,0,90,153,1,0,111,153,1,0,90,153,1,0,116,153,1,0,40,116,1,0,120,153,1,0,101,153,1,0,124,153,1,0,66,153,1,0,129,153,1,0,66,153,1,0,133,153,1,0,88,116,1,0,138,153,1,0,143,153,1,0,149,153,1,0,154,153,1,0,160,153,1,0,66,116,1,0,165,153,1,0,170,153,1,0,176,153,1,0,154,153,1,0,180,153,1,0,154,153,1,0,185,153,1,0,55,116,1,0,189,153,1,0,142,117,1,0,194,153,1,0,198,153,1,0,204,153,1,0,208,153,1,0,214,153,1,0,208,153,1,0,219,153,1,0,223,153,1,0,226,153,1,0,143,153,1,0,231,153,1,0,170,153,1,0,235,153,1,0,240,153,1,0,246,153,1,0,66,116,1,0,250,153,1,0,170,153,1,0,255,153,1,0,3,154,1,0,9,154,1,0,13,154,1,0,19,154,1,0,13,154,1,0,24,154,1,0,77,116,1,0,28,154,1,0,88,116,1,0,32,154,1,0,37,154,1,0,43,154,1,0,47,154,1,0,53,154,1,0,47,154,1,0,58,154,1,0,62,154,1,0,68,154,1,0,62,154,1,0,73,154,1,0,73,154,1,0,78,154,1,0,83,154,1,0,89,154,1,0,83,154,1,0,94,154,1,0,98,154,1,0,104,154,1,0,83,154,1,0,108,154,1,0,112,154,1,0,115,154,1,0,73,154,1,0,119,154,1,0,98,154,1,0,123,154,1,0,98,154,1,0,128,154,1,0,133,154,1,0,139,154,1,0,144,154,1,0,150,154,1,0,155,154,1,0,161,154,1,0,161,154,1,0,166,154,1,0,170,154,1,0,176,154,1,0,180,154,1,0,186,154,1,0,180,154,1,0,191,154,1,0,155,154,1,0,195,154,1,0,199,154,1,0,205,154,1,0,209,154,1,0,212,154,1,0,144,154,1,0,216,154,1,0,144,154,1,0,221,154,1,0,133,154,1,0,225,154,1,0,199,154,1,0,230,154,1,0,234,154,1,0,240,154,1,0,155,154,1,0,245,154,1,0,249,154,1,0,255,154,1,0,249,154,1,0,4,155,1,0,9,155,1,0,15,155,1,0,20,155,1,0,26,155,1,0,31,155,1,0,37,155,1,0,42,155,1,0,48,155,1,0,53,155,1,0,59,155,1,0,63,155,1,0,69,155,1,0,73,155,1,0,79,155,1,0,9,155,1,0,84,155,1,0,88,155,1,0,94,155,1,0,53,155,1,0,98,155,1,0,102,155,1,0,108,155,1,0,102,155,1,0,113,155,1,0,228,129,1,0,118,155,1,0,122,155,1,0,128,155,1,0,132,155,1,0,138,155,1,0,122,155,1,0,143,155,1,0,147,155,1,0,153,155,1,0,157,155,1,0,163,155,1,0,73,155,1,0,168,155,1,0,147,155,1,0,173,155,1,0,178,155,1,0,184,155,1,0,189,155,1,0,195,155,1,0,31,155,1,0,199,155,1,0,204,155,1,0,210,155,1,0,214,155,1,0,220,155,1,0,214,155,1,0,225,155,1,0,88,155,1,0,230,155,1,0,235,155,1,0,241,155,1,0,246,155,1,0,252,155,1,0,42,155,1,0,1,156,1,0,6,156,1,0,12,156,1,0,17,156,1,0,23,156,1,0,28,156,1,0,34,156,1,0,39,156,1,0,45,156,1,0,6,156,1,0,49,156,1,0,54,156,1,0,60,156,1,0,209,116,1,0,64,156,1,0,63,155,1,0,69,156,1,0,73,156,1,0,79,156,1,0,73,156,1,0,84,156,1,0,28,156,1,0,88,156,1,0,53,155,1,0,93,156,1,0,98,156,1,0,104,156,1,0,109,156,1,0,115,156,1,0,102,155,1,0,119,156,1,0,123,156,1,0,126,156,1,0,109,156,1,0,130,156,1,0,39,156,1,0,134,156,1,0,139,156,1,0,145,156,1,0,150,156,1,0,156,156,1,0,161,156,1,0,167,156,1,0,172,156,1,0,178,156,1,0,182,156,1,0,188,156,1,0,172,156,1,0,192,156,1,0,161,156,1,0,196,156,1,0,200,156,1,0,206,156,1,0,139,156,1,0,210,156,1,0,214,156,1,0,220,156,1,0,225,156,1,0,231,156,1,0,214,156,1,0,236,156,1,0,240,156,1,0,246,156,1,0,240,156,1,0,251,156,1,0,150,156,1,0,255,156,1,0,182,156,1,0,4,157,1,0,172,156,1,0,9,157,1,0,161,156,1,0,14,157,1,0,150,156,1,0,19,157,1,0,200,156,1,0,24,157,1,0,28,157,1,0,34,157,1,0,28,157,1,0,39,157,1,0,200,156,1,0,43,157,1,0,48,157,1,0,54,157,1,0,58,157,1,0,64,157,1,0,58,157,1,0,69,157,1,0,134,156,1,0,73,157,1,0,48,157,1,0,77,157,1,0,81,157,1,0,87,157,1,0,81,157,1,0,92,157,1,0,97,157,1,0,103,157,1,0,108,157,1,0,114,157,1,0,119,157,1,0,125,157,1,0,130,157,1,0,136,157,1,0,141,157,1,0,147,157,1,0,151,157,1,0,157,157,1,0,161,157,1,0,167,157,1,0,161,157,1,0,172,157,1,0,176,157,1,0,182,157,1,0,186,157,1,0,192,157,1,0,196,157,1,0,202,157,1,0,207,157,1,0,213,157,1,0,217,157,1,0,223,157,1,0,228,157,1,0,234,157,1,0,239,157,1,0,245,157,1,0,97,157,1,0,249,157,1,0,119,157,1,0,254,157,1,0,97,157,1,0,3,158,1,0,8,158,1,0,14,158,1,0,141,157,1,0,18,158,1,0,141,157,1,0,23,158,1,0,27,158,1,0,33,158,1,0,38,158,1,0,44,158,1,0,176,157,1,0,49,158,1,0,186,157,1,0,54,158,1,0,59,158,1,0,65,158,1,0,217,157,1,0,70,158,1,0,75,158,1,0,81,158,1,0,27,158,1,0,86,158,1,0,91,158,1,0,97,158,1,0,108,157,1,0,101,158,1,0,130,157,1,0,106,158,1,0,110,158,1,0,116,158,1,0,75,158,1,0,120,158,1,0,124,158,1,0,130,158,1,0,136,157,1,0,134,158,1,0,91,158,1,0,138,158,1,0,110,158,1,0,143,158,1,0,147,158,1,0,150,158,1,0,154,158,1,0,160,158,1,0,165,158,1,0,171,158,1,0,154,158,1,0,176,158,1,0,225,156,1,0,180,158,1,0,40,144,1,0,185,158,1,0,8,158,1,0,189,158,1,0,151,157,1,0,194,158,1,0,199,158,1,0,205,158,1,0,108,157,1,0,210,158,1,0,215,158,1,0,221,158,1,0,124,158,1,0,226,158,1,0,155,145,1,0,231,158,1,0,235,158,1,0,241,158,1,0,186,119,1,0,245,158,1,0,62,146,1,0,250,158,1,0,255,158,1,0,5,159,1,0,10,146,1,0,10,159,1,0,15,159,1,0,21,159,1,0,26,159,1,0,32,159,1,0,37,159,1,0,43,159,1,0,48,159,1,0,54,159,1,0,59,159,1,0,65,159,1,0,59,159,1,0,69,159,1,0,73,159,1,0,79,159,1,0,15,159,1,0,83,159,1,0,87,159,1,0,93,159,1,0,235,158,1,0,98,159,1,0,87,159,1,0,103,159,1,0,48,159,1,0,107,159,1,0,48,159,1,0,112,159,1,0,26,159,1,0,117,159,1,0,37,159,1,0,121,159,1,0,73,159,1,0,125,159,1,0,37,159,1,0,130,159,1,0,73,159,1,0,135,159,1,0,140,159,1,0,146,159,1,0,26,159,1,0,150,159,1,0,140,159,1,0,154,159,1,0,101,118,1,0,158,159,1,0,157,155,1,0,163,159,1,0,31,155,1,0,168,159,1,0,20,155,1,0,173,159,1,0,177,159,1,0,183,159,1,0,139,156,1,0,188,159,1,0,177,159,1,0,193,159,1,0,198,159,1,0,204,159,1,0,208,159,1,0,214,159,1,0,196,157,1,0,219,159,1,0,208,159,1,0,224,159,1,0,229,159,1,0,235,159,1,0,126,124,1,0,239,159,1,0,244,159,1,0,250,159,1,0,254,159,1,0,4,160,1,0,9,160,1,0,15,160,1,0,20,160,1,0,26,160,1,0,31,160,1,0,37,160,1,0,255,158,1,0,42,160,1,0,47,160,1,0,53,160,1,0,58,160,1,0,64,160,1,0,69,160,1,0,75,160,1,0,80,160,1,0,86,160,1,0,47,160,1,0,90,160,1,0,94,160,1,0,100,160,1,0,58,160,1,0,104,160,1,0,255,158,1,0,108,160,1,0,112,160,1,0,118,160,1,0,47,160,1,0,123,160,1,0,128,160,1,0,134,160,1,0,139,160,1,0,145,160,1,0,69,160,1,0,149,160,1,0,20,160,1,0,153,160,1,0,58,160,1,0,158,160,1,0,112,160,1,0,163,160,1,0,254,159,1,0,167,160,1,0,254,159,1,0,172,160,1,0,94,160,1,0,177,160,1,0,69,160,1,0,182,160,1,0,53,160,1,0,186,160,1,0,80,160,1,0,190,160,1,0,75,160,1,0,194,160,1,0,199,160,1,0,205,160,1,0,210,160,1,0,216,160,1,0,221,160,1,0,227,160,1,0,232,160,1,0,238,160,1,0,243,160,1,0,249,160,1,0,253,160,1,0,3,161,1,0,7,161,1,0,13,161,1,0,18,161,1,0,24,161,1,0,29,161,1,0,35,161,1,0,39,161,1,0,45,161,1,0,232,160,1,0,50,161,1,0,54,161,1,0,60,161,1,0,54,161,1,0,65,161,1,0,69,161,1,0,75,161,1,0,80,161,1,0,86,161,1,0,90,161,1,0,96,161,1,0,100,161,1,0,106,161,1,0,110,161,1,0,116,161,1,0,121,161,1,0,127,161,1,0,243,160,1,0,132,161,1,0,136,161,1,0,142,161,1,0,7,161,1,0,147,161,1,0,136,161,1,0,152,161,1,0,210,160,1,0,157,161,1,0,161,161,1,0,167,161,1,0,171,161,1,0,177,161,1,0,39,161,1,0,182,161,1,0,69,161,1,0,187,161,1,0,221,160,1,0,192,161,1,0,161,161,1,0,197,161,1,0,202,161,1,0,208,161,1,0,171,161,1,0,213,161,1,0,218,161,1,0,224,161,1,0,228,161,1,0,234,161,1,0,228,161,1,0,239,161,1,0,243,161,1,0,249,161,1,0,243,161,1,0,254,161,1,0,218,129,1,0,2,162,1,0,6,162,1,0,12,162,1,0,17,162,1,0,23,162,1,0,6,162,1,0,28,162,1,0,197,129,1,0,32,162,1,0,80,161,1,0,36,162,1,0,218,161,1,0,40,162,1,0,230,108,1,0,44,162,1,0,49,162,1,0,55,162,1,0,60,162,1,0,66,162,1,0,71,162,1,0,77,162,1,0,82,162,1,0,88,162,1,0,93,162,1,0,99,162,1,0,103,162,1,0,109,162,1,0,103,162,1,0,114,162,1,0,93,162,1,0,118,162,1,0,93,162,1,0,123,162,1,0,240,108,1,0,127,162,1,0,22,139,1,0,131,162,1,0,198,159,1,0,135,162,1,0,139,162,1,0,145,162,1,0,239,129,1,0,149,162,1,0,153,162,1,0,156,162,1,0,49,162,1,0,160,162,1,0,49,162,1,0,165,162,1,0,60,162,1,0,169,162,1,0,82,162,1,0,174,162,1,0,71,162,1,0,179,162,1,0,39,117,1,0,183,162,1,0,82,162,1,0,187,162,1,0,191,162,1,0,197,162,1,0,191,162,1,0,202,162,1,0,198,159,1,0,206,162,1,0,71,162,1,0,210,162,1,0,215,162,1,0,221,162,1,0,226,162,1,0,232,162,1,0,237,162,1,0,243,162,1,0,76,117,1,0,248,162,1,0,253,162,1,0,3,163,1,0,54,117,1,0,7,163,1,0,11,163,1,0,17,163,1,0,114,112,1,0,22,163,1,0,65,117,1,0,26,163,1,0,114,112,1,0,30,163,1,0,34,163,1,0,40,163,1,0,34,163,1,0,45,163,1,0,49,163,1,0,55,163,1,0,49,163,1,0,60,163,1,0,215,162,1,0,64,163,1,0,68,163,1,0,74,163,1,0,68,163,1,0,79,163,1,0,83,163,1,0,89,163,1,0,83,163,1,0,94,163,1,0,203,139,1,0,98,163,1,0,103,163,1,0,109,163,1,0,253,162,1,0,114,163,1,0,215,162,1,0,119,163,1,0,124,163,1,0,130,163,1,0,87,117,1,0,134,163,1,0,138,163,1,0,144,163,1,0,149,163,1,0,155,163,1,0,138,163,1,0,160,163,1,0,226,162,1,0,165,163,1,0,169,163,1,0,175,163,1,0,169,163,1,0,180,163,1,0,185,163,1,0,191,163,1,0,25,109,1,0,195,163,1,0,237,162,1,0,200,163,1,0,204,163,1,0,210,163,1,0,204,163,1,0,215,163,1,0,219,163,1,0,225,163,1,0,244,159,1,0,230,163,1,0,235,163,1,0,241,163,1,0,246,163,1,0,252,163,1,0,1,164,1,0,7,164,1,0,11,164,1,0,17,164,1,0,21,164,1,0,27,164,1,0,27,164,1,0,31,164,1,0,235,163,1,0,35,164,1,0,235,163,1,0,40,164,1,0,44,164,1,0,47,164,1,0,27,164,1,0,51,164,1,0,21,164,1,0,56,164,1,0,246,163,1,0,60,164,1,0,246,163,1,0,65,164,1,0,69,164,1,0,75,164,1,0,69,164,1,0,80,164,1,0,244,159,1,0,84,164,1,0,1,164,1,0,88,164,1,0,1,164,1,0,93,164,1,0,97,164,1,0,103,164,1,0,97,164,1,0,108,164,1,0,113,164,1,0,119,164,1,0,9,160,1,0,124,164,1,0,31,160,1,0,129,164,1,0,134,164,1,0,140,164,1,0,145,164,1,0,151,164,1,0,36,108,1,0,155,164,1,0,36,108,1,0,160,164,1,0,9,160,1,0,164,164,1,0,200,122,1,0,168,164,1,0,172,164,1,0,178,164,1,0,172,164,1,0,183,164,1,0,188,141,1,0,187,164,1,0,134,164,1,0,191,164,1,0,195,164,1,0,201,164,1,0,205,164,1,0,211,164,1,0,215,164,1,0,221,164,1,0,205,164,1,0,226,164,1,0,231,164,1,0,237,164,1,0,145,164,1,0,241,164,1,0,145,164,1,0,246,164,1,0,250,164,1,0,0,165,1,0,8,130,1,0,4,165,1,0,134,164,1,0,9,165,1,0,19,130,1,0,13,165,1,0,215,164,1,0,18,165,1,0,166,141,1,0,22,165,1,0,31,160,1,0,26,165,1,0,31,165,1,0,37,165,1,0,42,165,1,0,48,165,1,0,53,165,1,0,59,165,1,0,64,165,1,0,70,165,1,0,75,165,1,0,81,165,1,0,85,165,1,0,91,165,1,0,85,165,1,0,96,165,1,0,101,165,1,0,107,165,1,0,111,165,1,0,117,165,1,0,122,165,1,0,128,165,1,0,133,165,1,0,139,165,1,0,143,165,1,0,149,165,1,0,75,122,1,0,154,165,1,0,31,165,1,0,158,165,1,0,162,165,1,0,168,165,1,0,172,165,1,0,178,165,1,0,182,165,1,0,188,165,1,0,182,165,1,0,193,165,1,0,198,165,1,0,204,165,1,0,209,165,1,0,215,165,1,0,198,165,1,0,219,165,1,0,224,165,1,0,230,165,1,0,64,165,1,0,235,165,1,0,240,165,1,0,246,165,1,0,250,165,1,0,0,166,1,0,5,166,1,0,11,166,1,0,16,166,1,0,22,166,1,0,26,166,1,0,32,166,1,0,37,166,1,0,43,166,1,0,31,165,1,0,48,166,1,0,172,165,1,0,53,166,1,0,53,165,1,0,58,166,1,0,162,165,1,0,63,166,1,0,68,166,1,0,74,166,1,0,79,166,1,0,85,166,1,0,16,166,1,0,89,166,1,0,93,166,1,0,99,166,1,0,75,165,1,0,104,166,1,0,109,166,1,0,115,166,1,0,120,166,1,0,126,166,1,0,131,166,1,0,137,166,1,0,141,166,1,0,147,166,1,0,152,166,1,0,158,166,1,0,209,165,1,0,162,166,1,0,167,166,1,0,173,166,1,0,42,165,1,0,178,166,1,0,182,166,1,0,188,166,1,0,192,166,1,0,198,166,1,0,192,166,1,0,203,166,1,0,131,166,1,0,207,166,1,0,211,166,1,0,217,166,1,0,211,166,1,0,222,166,1,0,227,166,1,0,233,166,1,0,238,166,1,0,244,166,1,0,249,166,1,0,255,166,1,0,3,167,1,0,9,167,1,0,13,167,1,0,19,167,1,0,23,167,1,0,29,167,1,0,249,166,1,0,33,167,1,0,38,167,1,0,44,167,1,0,48,167,1,0,54,167,1,0,58,167,1,0,61,167,1,0,66,167,1,0,72,167,1,0,249,166,1,0,77,167,1,0,82,167,1,0,88,167,1,0,92,167,1,0,98,167,1,0,13,167,1,0,103,167,1,0,92,167,1,0,108,167,1,0,113,167,1,0,119,167,1,0,124,167,1,0,130,167,1,0,48,167,1,0,134,167,1,0,48,167,1,0,139,167,1,0,143,167,1,0,149,167,1,0,143,167,1,0,154,167,1,0,113,167,1,0,158,167,1,0,227,166,1,0,163,167,1,0,124,167,1,0,167,167,1,0,238,166,1,0,172,167,1,0,238,166,1,0,176,167,1,0,180,167,1,0,186,167,1,0,191,167,1,0,197,167,1,0,180,167,1,0,202,167,1,0,38,167,1,0,206,167,1,0,210,167,1,0,216,167,1,0,210,167,1,0,221,167,1,0,225,167,1,0,231,167,1,0,236,167,1,0,242,167,1,0,247,167,1,0,253,167,1,0,2,168,1,0,8,168,1,0,13,168,1,0,19,168,1,0,24,168,1,0,30,168,1,0,35,168,1,0,41,168,1,0,24,168,1,0,45,168,1,0,49,168,1,0,55,168,1,0,60,168,1,0,66,168,1,0,13,168,1,0,71,168,1,0,75,168,1,0,81,168,1,0,24,168,1,0,86,168,1,0,85,122,1,0,91,168,1,0,95,168,1,0,101,168,1,0,95,168,1,0,106,168,1,0,110,168,1,0,116,168,1,0,120,168,1,0,126,168,1,0,60,168,1,0,130,168,1,0,120,168,1,0,135,168,1,0,140,168,1,0,146,168,1,0,35,168,1,0,150,168,1,0,99,150,1,0,155,168,1,0,160,168,1,0,166,168,1,0,35,168,1,0,171,168,1,0,175,168,1,0,181,168,1,0,186,168,1,0,192,168,1,0,247,167,1,0,197,168,1,0,202,168,1,0,208,168,1,0,213,168,1,0,219,168,1,0,223,168,1,0,229,168,1,0,223,168,1,0,234,168,1,0,238,168,1,0,244,168,1,0,238,168,1,0,249,168,1,0,254,168,1,0,4,169,1,0,8,169,1,0,14,169,1,0,8,169,1,0,19,169,1,0,24,169,1,0,30,169,1,0,34,169,1,0,40,169,1,0,34,169,1,0,45,169,1,0,49,169,1,0,55,169,1,0,49,169,1,0,60,169,1,0,254,168,1,0,64,169,1,0,19,168,1,0,68,169,1,0,72,169,1,0,78,169,1,0,83,169,1,0,89,169,1,0,250,165,1,0,94,169,1,0,129,138,1,0,99,169,1,0,72,169,1,0,104,169,1,0,152,166,1,0,108,169,1,0,112,169,1,0,118,169,1,0,112,169,1,0,123,169,1,0,110,168,1,0,128,169,1,0,0,140,1,0,133,169,1,0,137,169,1,0,143,169,1,0,137,169,1,0,148,169,1,0,206,140,1,0,153,169,1,0,142,118,1,0,157,169,1,0,237,141,1,0,162,169,1,0,224,165,1,0,166,169,1,0,182,166,1,0,171,169,1,0,176,169,1,0,182,169,1,0,187,169,1,0,193,169,1,0,198,169,1,0,204,169,1,0,93,166,1,0,209,169,1,0,209,143,1,0,214,169,1,0,66,167,1,0,218,169,1,0,222,169,1,0,228,169,1,0,2,145,1,0,233,169,1,0,222,169,1,0,238,169,1,0,243,169,1,0,249,169,1,0,253,169,1,0,3,170,1,0,175,145,1,0,8,170,1,0,12,170,1,0,18,170,1,0,12,170,1,0,23,170,1,0,28,170,1,0,34,170,1,0,38,170,1,0,44,170,1,0,49,170,1,0,55,170,1,0,60,170,1,0,66,170,1,0,38,170,1,0,71,170,1,0,76,170,1,0,82,170,1,0,82,167,1,0,86,170,1,0,160,168,1,0,90,170,1,0,94,170,1,0,100,170,1,0,94,170,1,0,105,170,1,0,188,151,1,0,109,170,1,0,119,151,1,0,114,170,1,0,188,151,1,0,119,170,1,0,37,166,1,0,123,170,1,0,143,165,1,0,128,170,1,0,183,152,1,0,133,170,1,0,124,167,1,0,137,170,1,0,213,168,1,0,141,170,1,0,198,153,1,0,146,170,1,0,2,168,1,0,151,170,1,0,3,154,1,0,156,170,1,0,237,147,1,0,160,170,1,0,39,111,1,0,164,170,1,0,170,154,1,0,169,170,1,0,133,154,1,0,174,170,1,0,234,154,1,0,179,170,1,0,184,170,1,0,190,170,1,0,195,170,1,0,201,170,1,0,201,170,1,0,206,170,1,0,211,170,1,0,217,170,1,0,195,170,1,0,221,170,1,0,195,170,1,0,226,170,1,0,230,170,1,0,236,170,1,0,240,170,1,0,246,170,1,0,251,170,1,0,1,171,1,0,240,170,1,0,6,171,1,0,10,171,1,0,16,171,1,0,10,171,1,0,21,171,1,0,25,171,1,0,31,171,1,0,35,171,1,0,41,171,1,0,179,170,1,0,45,171,1,0,49,171,1,0,55,171,1,0,253,169,1,0,60,171,1,0,49,171,1,0,65,171,1,0,211,170,1,0,69,171,1,0,211,170,1,0,74,171,1,0,35,171,1,0,78,171,1,0,35,171,1,0,83,171,1,0,190,170,1,0,87,171,1,0,201,170,1,0,91,171,1,0,230,170,1,0,96,171,1,0,25,171,1,0,101,171,1,0,206,170,1,0,105,171,1,0,109,171,1,0,114,171,1,0,184,170,1,0,118,171,1,0,184,170,1,0,123,171,1,0,127,171,1,0,130,171,1,0,134,171,1,0,140,171,1,0,132,155,1,0,145,171,1,0,150,171,1,0,156,171,1,0,26,166,1,0,161,171,1,0,134,171,1,0,166,171,1,0,170,171,1,0,176,171,1,0,170,171,1,0,181,171,1,0,185,171,1,0,191,171,1,0,185,171,1,0,196,171,1,0,201,171,1,0,207,171,1,0,13,120,1,0,211,171,1,0,59,159,1,0,216,171,1,0,15,159,1,0,221,171,1,0,225,171,1,0,231,171,1,0,225,171,1,0,236,171,1,0,80,160,1,0,241,171,1,0,109,166,1,0,245,171,1,0,100,161,1,0,250,171,1,0,110,161,1,0,255,171,1,0,4,172,1,0,10,172,1,0,199,160,1,0,15,172,1,0,141,166,1,0,20,172,1,0,24,172,1,0,30,172,1,0,24,172,1,0,35,172,1,0,24,120,1,0,39,172,1,0,44,172,1,0,50,172,1,0,230,170,1,0,54,172,1,0,250,164,1,0,58,172,1,0,113,164,1,0,63,172,1,0,250,164,1,0,68,172,1,0,72,172,1,0,78,172,1,0,111,165,1,0,83,172,1,0,88,172,1,0,94,172,1,0,99,172,1,0,105,172,1,0,72,172,1,0,110,172,1,0,115,172,1,0,121,172,1,0,126,172,1,0,132,172,1,0,137,172,1,0,143,172,1,0,148,172,1,0,154,172,1,0,106,145,1,0,158,172,1,0,3,167,1,0,163,172,1,0,168,172,1,0,174,172,1,0,23,167,1,0,179,172,1,0,184,172,1,0,190,172,1,0,195,172,1,0,201,172,1,0,24,169,1,0,205,172,1,0,49,168,1,0,210,172,1,0,75,168,1,0,215,172,1,0,220,172,1,0,226,172,1,0,231,172,1,0,237,172,1,0,241,172,1,0,247,172,1,0,241,172,1,0,252,172,1,0,0,173,1,0,6,173,1,0,11,173,1,0,17,173,1,0,22,173,1,0,28,173,1,0,0,173,1,0,33,173,1,0,22,173,1,0,38,173,1,0,38,173,1,0,43,173,1,0,48,173,1,0,54,173,1,0,54,173,1,0,59,173,1,0,236,167,1,0,64,173,1,0,236,167,1,0,68,173,1,0,72,173,1,0,78,173,1,0,72,173,1,0,83,173,1,0,87,173,1,0,93,173,1,0,87,173,1,0,98,173,1,0,225,167,1,0,103,173,1,0,107,173,1,0,113,173,1,0,117,173,1,0,123,173,1,0,127,173,1,0,133,173,1,0,127,173,1,0,138,173,1,0,142,173,1,0,148,173,1,0,48,173,1,0,152,173,1,0,117,173,1,0,157,173,1,0,162,173,1,0,168,173,1,0,48,173,1,0,173,173,1,0,11,173,1,0,177,173,1,0,107,173,1,0,182,173,1,0,142,173,1,0,187,173,1,0,38,173,1,0,191,173,1,0,195,173,1,0,201,173,1,0,195,173,1,0,206,173,1,0,210,173,1,0,216,173,1,0,210,173,1,0,221,173,1,0,59,173,1,0,225,173,1,0,54,173,1,0,229,173,1,0,234,173,1,0,240,173,1,0,245,173,1,0,251,173,1,0,0,174,1,0,6,174,1,0,11,174,1,0,17,174,1,0,22,174,1,0,28,174,1,0,32,174,1,0,38,174,1,0,32,174,1,0,43,174,1,0,48,174,1,0,54,174,1,0,58,174,1,0,64,174,1,0,68,174,1,0,74,174,1,0,79,174,1,0,85,174,1,0,68,174,1,0,90,174,1,0,22,174,1,0,94,174,1,0,98,174,1,0,104,174,1,0,98,174,1,0,109,174,1,0,113,174,1,0,119,174,1,0,123,174,1,0,129,174,1,0,99,172,1,0,133,174,1,0,137,174,1,0,143,174,1,0,137,174,1,0,148,174,1,0,113,174,1,0,152,174,1,0,157,174,1,0,163,174,1,0,123,174,1,0,168,174,1,0,173,174,1,0,179,174,1,0,183,174,1,0,189,174,1,0,11,174,1,0,194,174,1,0,58,174,1,0,199,174,1,0,204,174,1,0,210,174,1,0,215,174,1,0,221,174,1,0,226,174,1,0,232,174,1,0,237,174,1,0,243,174,1,0,245,173,1,0,248,174,1,0,126,172,1,0,252,174,1,0,1,175,1,0,7,175,1,0,11,175,1,0,17,175,1,0,22,175,1,0,28,175,1,0,11,175,1,0,33,175,1,0,38,175,1,0,44,175,1,0,113,174,1,0,49,175,1,0,54,175,1,0,60,175,1,0,237,174,1,0,64,175,1,0,69,175,1,0,75,175,1,0,79,175,1,0,85,175,1,0,0,174,1,0,90,175,1,0,79,175,1,0,95,175,1,0,226,174,1,0,99,175,1,0,234,173,1,0,103,175,1,0,234,173,1,0,108,175,1,0,245,173,1,0,112,175,1,0,22,174,1,0,117,175,1,0,121,175,1,0,124,175,1,0,128,175,1,0,134,175,1,0,27,110,1,0,139,175,1,0,128,175,1,0,144,175,1,0,149,175,1,0,155,175,1,0,160,175,1,0,166,175,1,0,2,152,1,0,170,175,1,0,175,175,1,0,181,175,1,0,185,175,1,0,191,175,1,0,196,175,1,0,202,175,1,0,207,175,1,0,213,175,1,0,218,175,1,0,224,175,1,0,229,175,1,0,235,175,1,0,240,175,1,0,246,175,1,0,251,175,1,0,1,176,1,0,6,176,1,0,12,176,1,0,136,139,1,0,16,176,1,0,37,154,1,0,20,176,1,0,25,176,1,0,31,176,1,0,168,172,1,0,36,176,1,0,195,172,1,0,41,176,1,0,46,176,1,0,52,176,1,0,153,117,1,0,56,176,1,0,168,172,1,0,60,176,1,0,64,176,1,0,70,176,1,0,74,176,1,0,80,176,1,0,46,176,1,0,84,176,1,0,88,176,1,0,94,176,1,0,130,111,1,0,98,176,1,0,184,172,1,0,102,176,1,0,88,176,1,0,106,176,1,0,88,176,1,0,111,176,1,0,175,175,1,0,115,176,1,0,74,176,1,0,120,176,1,0,46,176,1,0,125,176,1,0,25,176,1,0,129,176,1,0,133,176,1,0,136,176,1,0,64,176,1,0,141,176,1,0,25,176,1,0,146,176,1,0,151,176,1,0,157,176,1,0,151,176,1,0,161,176,1,0,240,175,1,0,166,176,1,0,219,163,1,0,171,176,1,0,75,168,1,0,176,176,1,0,184,117,1,0,181,176,1,0,186,176,1,0,192,176,1,0,196,176,1,0,202,176,1,0,196,175,1,0,206,176,1,0,207,175,1,0,210,176,1,0,214,176,1,0,217,176,1,0,221,176,1,0,227,176,1,0,221,176,1,0,232,176,1,0,236,176,1,0,242,176,1,0,220,172,1,0,246,176,1,0,251,176,1,0,1,177,1,0,229,175,1,0,5,177,1,0,236,176,1,0,10,177,1,0,240,175,1,0,14,177,1,0,18,177,1,0,24,177,1,0,196,176,1,0,29,177,1,0,34,177,1,0,40,177,1,0,45,177,1,0,51,177,1,0,251,176,1,0,55,177,1,0,59,177,1,0,65,177,1,0,18,177,1,0,70,177,1,0,59,177,1,0,75,177,1,0,80,177,1,0,86,177,1,0,90,177,1,0,96,177,1,0,90,177,1,0,101,177,1,0,105,177,1,0,111,177,1,0,105,177,1,0,116,177,1,0,120,177,1,0,126,177,1,0,120,177,1,0,131,177,1,0,186,176,1,0,135,177,1,0,186,176,1,0,140,177,1,0,231,172,1,0,144,177,1,0,149,177,1,0,155,177,1,0,155,177,1,0,160,177,1,0,165,177,1,0,171,177,1,0,176,177,1,0,182,177,1,0,186,177,1,0,192,177,1,0,196,177,1,0,202,177,1,0,149,177,1,0,206,177,1,0,186,177,1,0,210,177,1,0,214,177,1,0,220,177,1,0,214,177,1,0,225,177,1,0,155,177,1,0,229,177,1,0,196,177,1,0,234,177,1,0,165,177,1,0,238,177,1,0,149,177,1,0,243,177,1,0,176,177,1,0,247,177,1,0,176,177,1,0,252,177,1,0,165,177,1,0,1,178,1,0,54,175,1,0,5,178,1,0,90,161,1,0,10,178,1,0,15,178,1,0,21,178,1,0,26,178,1,0,32,178,1,0,22,150,1,0,36,178,1,0,60,162,1,0,41,178,1,0,45,178,1,0,51,178,1,0,11,163,1,0,56,178,1,0,45,178,1,0,61,178,1,0,219,163,1,0,66,178,1,0,119,135,1,0,70,178,1,0,186,177,1,0,75,178,1,0,79,178,1,0,85,178,1,0,89,178,1,0,95,178,1,0,89,178,1,0,100,178,1,0,183,174,1,0,105,178,1,0,110,178,1,0,116,178,1,0,120,178,1,0,126,178,1,0,130,178,1,0,136,178,1,0,130,178,1,0,141,178,1,0,175,168,1,0,146,178,1,0,1,164,1,0,150,178,1,0,155,178,1,0,161,178,1,0,166,178,1,0,172,178,1,0,177,178,1,0,183,178,1,0,188,178,1,0,194,178,1,0,199,178,1,0,205,178,1,0,209,178,1,0,215,178,1,0,199,178,1,0,220,178,1,0,224,178,1,0,227,178,1,0,177,178,1,0,231,178,1,0,177,178,1,0,236,178,1,0,240,178,1,0,246,178,1,0,240,178,1,0,251,178,1,0,255,178,1,0,5,179,1,0,188,178,1,0,9,179,1,0,155,178,1,0,13,179,1,0,155,178,1,0,18,179,1,0,22,179,1,0,28,179,1,0,209,178,1,0,33,179,1,0,255,178,1,0,38,179,1,0,188,178,1,0,43,179,1,0,22,179,1,0,48,179,1,0,166,178,1,0,52,179,1,0,166,178,1,0,57,179,1,0,22,173,1,0,61,179,1,0,79,178,1,0,66,179,1,0,70,179,1,0,76,179,1,0,185,175,1,0,81,179,1,0,70,179,1,0,86,179,1,0,0,173,1,0,90,179,1,0,95,179,1,0,101,179,1,0,106,179,1,0,112,179,1,0,116,179,1,0,122,179,1,0,126,179,1,0,132,179,1,0,137,179,1,0,143,179,1,0,147,179,1,0,153,179,1,0,147,179,1,0,157,179,1,0,147,179,1,0,162,179,1,0,166,179,1,0,172,179,1,0,166,179,1,0,177,179,1,0,95,179,1,0,181,179,1,0,95,179,1,0,186,179,1,0,191,179,1,0,197,179,1,0,201,179,1,0,207,179,1,0,116,179,1,0,212,179,1,0,126,179,1,0,217,179,1,0,201,179,1,0,222,179,1,0,137,179,1,0,226,179,1,0,230,179,1,0,236,179,1,0,230,179,1,0,241,179,1,0,106,179,1,0,246,179,1,0,191,179,1,0,250,179,1,0,230,179,1,0,254,179,1,0,106,179,1,0,2,180,1,0,6,180,1,0,9,180,1,0,14,180,1,0,20,180,1,0,20,180,1,0,25,180,1,0,30,180,1,0,36,180,1,0,30,180,1,0,41,180,1,0,45,180,1,0,51,180,1,0,139,162,1,0,55,180,1,0,59,180,1,0,62,180,1,0,30,180,1,0,66,180,1,0,45,180,1,0,71,180,1,0,76,180,1,0,82,180,1,0,14,180,1,0,86,180,1,0,14,180,1,0,91,180,1,0,76,180,1,0,95,180,1,0,100,180,1,0,106,180,1,0,111,180,1,0,117,180,1,0,122,180,1,0,128,180,1,0,133,180,1,0,139,180,1,0,144,180,1,0,150,180,1,0,154,180,1,0,160,180,1,0,154,180,1,0,165,180,1,0,144,180,1,0,169,180,1,0,173,180,1,0,179,180,1,0,184,180,1,0,190,180,1,0,195,180,1,0,201,180,1,0,205,180,1,0,211,180,1,0,205,180,1,0,216,180,1,0,220,180,1,0,226,180,1,0,230,180,1,0,236,180,1,0,122,180,1,0,241,180,1,0,230,180,1,0,246,180,1,0,250,180,1,0,0,181,1,0,122,180,1,0,4,181,1,0,144,180,1,0,9,181,1,0,56,134,1,0,13,181,1,0,173,180,1,0,18,181,1,0,220,180,1,0,23,181,1,0,27,181,1,0,33,181,1,0,27,181,1,0,38,181,1,0,195,180,1,0,42,181,1,0,47,181,1,0,53,181,1,0,100,180,1,0,57,181,1,0,100,180,1,0,62,181,1,0,66,181,1,0,72,181,1,0,66,181,1,0,77,181,1,0,111,180,1,0,82,181,1,0,133,180,1,0,87,181,1,0,91,181,1,0,94,181,1,0,166,179,1,0,98,181,1,0,42,143,1,0,103,181,1,0,107,181,1,0,113,181,1,0,117,181,1,0,123,181,1,0,250,180,1,0,128,181,1,0,133,181,1,0,139,181,1,0,117,181,1,0,144,181,1,0,149,181,1,0,155,181,1,0,160,181,1,0,166,181,1,0,160,181,1,0,170,181,1,0,149,181,1,0,174,181,1,0,149,181,1,0,179,181,1,0,160,181,1,0,183,181,1,0,187,181,1,0,190,181,1,0,194,181,1,0,200,181,1,0,194,181,1,0,205,181,1,0,209,181,1,0,215,181,1,0,209,181,1,0,220,181,1,0,224,181,1,0,230,181,1,0,139,162,1,0,235,181,1,0,224,181,1,0,240,181,1,0,47,181,1,0,244,181,1,0,249,181,1,0,255,181,1,0,194,181,1,0,3,182,1,0,192,166,1,0,7,182,1,0,12,182,1,0,18,182,1,0,23,182,1,0,29,182,1,0,12,182,1,0,34,182,1,0,23,182,1,0,39,182,1,0,44,182,1,0,50,182,1,0,12,182,1,0,54,182,1,0,44,182,1,0,59,182,1,0,44,182,1,0,63,182,1,0,23,182,1,0,67,182,1,0,71,182,1,0,74,182,1,0,79,182,1,0,85,182,1,0,90,182,1,0,96,182,1,0,101,182,1,0,107,182,1,0,112,182,1,0,118,182,1,0,123,182,1,0,129,182,1,0,133,182,1,0,139,182,1,0,123,182,1,0,144,182,1,0,101,182,1,0,148,182,1,0,152,182,1,0,158,182,1,0,133,182,1,0,163,182,1,0,152,182,1,0,168,182,1,0,172,182,1,0,178,182,1,0,183,182,1,0,189,182,1,0,194,182,1,0,200,182,1,0,204,182,1,0,210,182,1,0,214,182,1,0,220,182,1,0,225,182,1,0,231,182,1,0,235,182,1,0,241,182,1,0,235,182,1,0,246,182,1,0,250,182,1,0,0,183,1,0,5,183,1,0,11,183,1,0,250,182,1,0,16,183,1,0,21,183,1,0,27,183,1,0,225,182,1,0,31,183,1,0,172,182,1,0,36,183,1,0,112,182,1,0,41,183,1,0,46,183,1,0,52,183,1,0,90,182,1,0,56,183,1,0,90,182,1,0,61,183,1,0,66,183,1,0,72,183,1,0,77,183,1,0,83,183,1,0,88,183,1,0,94,183,1,0,112,182,1,0,98,183,1,0,77,183,1,0,102,183,1,0,101,182,1,0,107,183,1,0,214,182,1,0,112,183,1,0,117,183,1,0,123,183,1,0,46,183,1,0,127,183,1,0,132,183,1,0,138,183,1,0,143,183,1,0,149,183,1,0,153,183,1,0,159,183,1,0,79,182,1,0,164,183,1,0,153,183,1,0,169,183,1,0,172,182,1,0,173,183,1,0,177,183,1,0,180,183,1,0,184,183,1,0,190,183,1,0,184,183,1,0,195,183,1,0,200,183,1,0,206,183,1,0,211,183,1,0,217,183,1,0,222,183,1,0,228,183,1,0,233,183,1,0,239,183,1,0,35,109,1,0,243,183,1,0,248,183,1,0,254,183,1,0,35,109,1,0,3,184,1,0,194,117,1,0,8,184,1,0,222,183,1,0,12,184,1,0,200,183,1,0,17,184,1,0,248,183,1,0,21,184,1,0,200,183,1,0,25,184,1,0,211,183,1,0,29,184,1,0,211,183,1,0,34,184,1,0,38,184,1,0,41,184,1,0,46,184,1,0,52,184,1,0,248,183,1,0,56,184,1,0,222,183,1,0,61,184,1,0,233,183,1,0,66,184,1,0,233,183,1,0,70,184,1,0,46,184,1,0,74,184,1,0,194,117,1,0,78,184,1,0,82,184,1,0,88,184,1,0,82,184,1,0,93,184,1,0,98,184,1,0,104,184,1,0,109,184,1,0,115,184,1,0,120,184,1,0,126,184,1,0,120,184,1,0,130,184,1,0,134,184,1,0,140,184,1,0,144,184,1,0,150,184,1,0,144,184,1,0,155,184,1,0,134,184,1,0,160,184,1,0,164,184,1,0,170,184,1,0,98,184,1,0,174,184,1,0,98,184,1,0,179,184,1,0,109,184,1,0,183,184,1,0,120,184,1,0,188,184,1,0,164,184,1,0,193,184,1,0,197,184,1,0,203,184,1,0,197,184,1,0,208,184,1,0,35,153,1,0,212,184,1,0,62,154,1,0,216,184,1,0,220,184,1,0,226,184,1,0,220,184,1,0,231,184,1,0,235,184,1,0,241,184,1,0,235,184,1,0,245,184,1,0,235,184,1,0,250,184,1,0,110,158,1,0,254,184,1,0,253,160,1,0,3,185,1,0,204,182,1,0,8,185,1,0,36,150,1,0,12,185,1,0,74,148,1,0,16,185,1,0,109,184,1,0,21,185,1,0,25,185,1,0,31,185,1,0,36,185,1,0,42,185,1,0,47,185,1,0,53,185,1,0,195,164,1,0,58,185,1,0,25,185,1,0,63,185,1,0,68,185,1,0,74,185,1,0,79,185,1,0,85,185,1,0,90,185,1,0,96,185,1,0,101,185,1,0,107,185,1,0,36,185,1,0,111,185,1,0,47,185,1,0,115,185,1,0,90,185,1,0,120,185,1,0,124,185,1,0,130,185,1,0,90,185,1,0,134,185,1,0,79,185,1,0,138,185,1,0,79,185,1,0,143,185,1,0,101,185,1,0,147,185,1,0,101,185,1,0,152,185,1,0,68,185,1,0,156,185,1,0,68,185,1,0,161,185,1,0,124,185,1,0,166,185,1,0,171,185,1,0,177,185,1,0,182,185,1,0,188,185,1,0,188,185,1,0,193,185,1,0,198,185,1,0,204,185,1,0,171,185,1,0,209,185,1,0,213,185,1,0,219,185,1,0,198,185,1,0,223,185,1,0,213,185,1,0,227,185,1,0,231,185,1,0,237,185,1,0,231,185,1,0,242,185,1,0,246,185,1,0,252,185,1,0,246,185,1,0,1,186,1,0,171,185,1,0,5,186,1,0,10,186,1,0,16,186,1,0,10,186,1,0,20,186,1,0,213,185,1,0,25,186,1,0,198,185,1,0,30,186,1,0,34,186,1,0,40,186,1,0,34,186,1,0,45,186,1,0,182,185,1,0,50,186,1,0,182,185,1,0,54,186,1,0,10,186,1,0,58,186,1,0,177,185,1,0,62,186,1,0,66,186,1,0,72,186,1,0,159,104,1,0,77,186,1,0,82,186,1,0,88,186,1,0,66,186,1,0,93,186,1,0,97,186,1,0,103,186,1,0,97,186,1,0,108,186,1,0,50,153,1,0,112,186,1,0,116,186,1,0,122,186,1,0,116,186,1,0,127,186,1,0,131,186,1,0,137,186,1,0,131,186,1,0,142,186,1,0,184,183,1,0,146,186,1,0,151,186,1,0,157,186,1,0,157,186,1,0,162,186,1,0,162,186,1,0,167,186,1,0,171,186,1,0,177,186,1,0,171,186,1,0,182,186,1,0,186,186,1,0,189,186,1,0,151,186,1,0,193,186,1,0,151,186,1,0,198,186,1,0,202,186,1,0,208,186,1,0,202,186,1,0,213,186,1,0,171,186,1,0,217,186,1,0,221,186,1,0,227,186,1,0,221,186,1,0,232,186,1,0,162,186,1,0,236,186,1,0,240,186,1,0,246,186,1,0,240,186,1,0,251,186,1,0,234,128,1,0,255,186,1,0,234,128,1,0,4,187,1,0,97,164,1,0,8,187,1,0,13,187,1,0,19,187,1,0,24,187,1,0,30,187,1,0,149,123,1,0,35,187,1,0,40,187,1,0,46,187,1,0,13,187,1,0,50,187,1,0,13,187,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);
/* memory initializer */ allocate([203,2,203,2,203,2,204,2,205,2,160,2,187,2,206,2,137,2,137,2,137,2,137,2,137,2,188,2,188,2,188,2,207,2,55,2,55,2,55,2,208,2,208,2,208,2,209,2,208,2,208,2,209,2,208,2,208,2,102,2,139,2,140,2,140,2,140,2,141,2,210,2,211,2,211,2,211,2,212,2,213,2,107,2,214,2,110,0,215,2,151,2,214,2,110,0,216,2,151,2,214,2,110,0,150,2,151,2,25,0,25,0,217,2,180,2,218,2,91,2,91,2,91,2,204,2,219,2,156,2,156,2,156,2,156,2,156,2,200,2,200,2,200,2,249,1,220,2,188,2,221,2,103,2,103,2,103,2,212,2,222,2,167,2,167,2,167,2,167,2,167,2,208,2,208,2,208,2,72,2,27,2,174,2,174,2,174,2,77,2,175,2,25,0,26,0,25,0,25,0,175,2,97,0,97,0,97,0,97,0,34,2,223,2,200,2,55,2,224,2,208,2,91,2,103,2,0,0,18,0,20,0,21,0,21,0,32,0,35,0,36,0,39,0,46,0,57,0,58,0,70,0,83,0,85,0,88,0,90,0,93,0,94,0,101,0,107,0,113,0,115,0,118,0,125,0,129,0,134,0,140,0,144,0,147,0,148,0,152,0,159,0,161,0,166,0,167,0,172,0,173,0,176,0,182,0,183,0,190,0,192,0,196,0,197,0,200,0,202,0,255,255,255,255,255,255,255,255,0,0,255,255,255,255,0,0,255,255,0,0,255,255,255,255,255,255,12,0,12,0,11,0,11,0,12,0,255,255,12,0,255,255,20,0,20,0,255,255,12,0,20,0,0,0,11,0,255,255,255,255,11,0,255,255,31,0,255,255,11,0,12,0,20,0,12,0,12,0,31,0,255,255,33,0,255,255,33,0,255,255,255,255,1,0,2,0,3,0,4,0,5,0,3,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,11,0,15,0,16,0,3,0,2,0,3,0,255,255,255,255,255,255,17,0,18,0,19,0,255,255,20,0,20,0,21,0,22,0,23,0,24,0,24,0,25,0,255,255,255,255,26,0,8,0,8,0,8,0,8,0,8,0,11,0,8,0,255,255,255,255,27,0,28,0,29,0,255,255,30,0,255,255,31,0,32,0,33,0,1,0,2,0,27,0,28,0,3,0,29,0,34,0,8,0,11,0,31,0,32,0,33,0,11,0,2,0,4,0,5,0,3,0,6,0,18,0,19,0,20,0,13,0,14,0,20,0,21,0,22,0,24,0,255,255,24,0,255,255,255,255,255,255,11,0,255,255,9,0,15,0,12,0,18,0,18,0,18,0,18,0,18,0,20,0,18,0,255,255,255,255,255,255,35,0,255,255,255,255,2,0,3,0,36,0,18,0,20,0,20,0,255,255,20,0,255,255,19,0,21,0,23,0,23,0,23,0,23,0,23,0,24,0,23,0,255,255,37,0,255,255,255,255,38,0,19,0,35,0,21,0,22,0,255,255,255,255,255,255,255,255,255,255,255,255,39,0,255,255,255,255,255,255,40,0,41,0,41,0,42,0,255,255,9,0,15,0,16,0,2,0,27,0,28,0,3,0,29,0,32,0,33,0,41,0,255,255,2,0,41,0,28,0,3,0,29,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,35,0,255,255,255,255,31,0,40,0,40,0,40,0,40,0,40,0,41,0,40,0,255,255,43,0,2,0,3,0,44,0,45,0,255,255,2,0,3,0,45,0,2,0,3,0,0,0,9,0,12,0,17,0,21,0,25,0,28,0,34,0,38,0,42,0,46,0,49,0,55,0,59,0,65,0,70,0,70,0,70,0,75,0,75,0,75,0,255,255,0,0,255,255,0,0,0,0,0,0,255,255,0,0,0,0,0,0,255,255,6,0,0,0,6,0,6,0,255,255,255,255,6,0,255,255,255,255,1,0,1,0,1,0,1,0,1,0,2,0,3,0,4,0,5,0,1,0,6,0,6,0,7,0,8,0,5,0,6,0,6,0,9,0,5,0,5,0,10,0,11,0,5,0,5,0,10,0,5,0,5,0,10,0,1,0,1,0,1,0,1,0,1,0,1,0,12,0,5,0,5,0,10,0,13,0,5,0,5,0,10,0,14,0,1,0,6,0,6,0,5,0,5,0,5,0,14,0,15,0,15,0,16,0,16,0,16,0,17,0,1,0,6,0,6,0,17,0,18,0,18,0,19,0,19,0,19,0,15,0,15,0,16,0,16,0,16,0,18,0,18,0,19,0,19,0,19,0,36,78,97,109,101,36,0,10,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,65,110,32,117,110,101,120,112,101,99,116,101,100,32,101,114,114,111,114,32,104,97,115,32,111,99,99,117,114,114,101,100,32,119,104,105,108,115,116,32,114,117,110,110,105,110,103,32,106,98,111,102,105,104,101,46,10,10,80,108,101,97,115,101,32,115,117,98,109,105,116,32,97,32,114,101,112,111,114,116,32,116,111,32,60,106,98,111,102,105,104,101,64,103,111,46,116,111,62,44,32,119,105,116,104,32,97,116,32,108,101,97,115,116,32,116,104,105,115,32,105,110,102,111,114,109,97,116,105,111,110,58,10,32,32,86,101,114,115,105,111,110,32,111,102,32,106,98,111,102,105,104,101,32,40,106,98,111,102,105,104,101,32,45,118,41,10,32,32,67,111,109,109,97,110,100,32,108,105,110,101,32,111,112,116,105,111,110,115,10,32,32,84,104,101,32,105,110,112,117,116,32,116,101,120,116,10,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,0,45,100,0,45,118,0,106,98,111,102,105,104,101,32,118,101,114,115,105,111,110,32,37,115,10,0,45,107,0,45,103,0,45,116,0,45,116,102,0,45,108,0,45,120,0,45,72,0,45,98,0,45,109,0,45,105,101,0,45,114,101,0,45,115,101,0,45,115,101,118,0,45,99,114,0,45,98,116,0,45,100,100,0,45,119,0,45,45,104,101,108,112,0,45,104,0,45,63,0,85,110,114,101,99,111,103,110,105,122,101,100,32,99,111,109,109,97,110,100,32,108,105,110,101,32,111,112,116,105,111,110,32,37,115,10,0,45,114,101,32,97,110,100,32,45,115,101,32,115,119,105,116,99,104,101,115,32,97,114,101,32,110,111,116,32,99,111,109,112,97,116,105,98,108,101,44,32,45,115,101,32,105,103,110,111,114,101,100,10,0,67,111,117,108,100,32,110,111,116,32,111,112,101,110,32,37,115,32,102,111,114,32,105,110,112,117,116,10,0,10,84,111,107,101,110,32,108,105,115,116,32,98,101,102,111,114,101,32,112,114,101,112,114,111,99,101,115,115,105,110,103,10,10,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,84,111,107,101,110,32,108,105,115,116,32,97,102,116,101,114,32,112,114,101,112,114,111,99,101,115,115,105,110,103,10,10,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,10,0,67,111,112,121,114,105,103,104,116,32,49,57,57,56,45,50,48,48,49,32,82,105,99,104,97,114,100,32,80,46,32,67,117,114,110,111,119,32,60,114,112,99,64,109,121,115,101,108,102,46,99,111,109,62,10,10,45,107,32,32,32,32,32,32,32,32,32,32,32,83,104,111,119,32,116,111,107,101,110,32,108,105,115,116,115,32,98,101,102,111,114,101,32,97,110,100,32,97,102,116,101,114,32,112,114,101,112,114,111,99,101,115,115,105,110,103,10,45,116,32,32,32,32,32,32,32,32,32,32,32,83,104,111,119,32,101,100,105,116,101,100,32,112,97,114,115,101,32,116,114,101,101,10,45,116,102,32,32,32,32,32,32,32,32,32,32,83,104,111,119,32,102,117,108,108,32,112,97,114,115,101,32,116,114,101,101,10,10,84,104,101,115,101,32,111,112,116,105,111,110,115,32,112,114,111,100,117,99,101,32,102,111,114,109,97,116,116,101,100,32,76,111,106,98,97,110,32,43,32,112,97,114,116,105,97,108,32,69,110,103,108,105,115,104,32,116,114,97,110,115,108,97,116,105,111,110,10,45,108,32,32,32,32,32,32,32,32,32,32,32,80,114,111,100,117,99,101,32,76,97,84,101,88,32,111,117,116,112,117,116,10,45,120,32,32,32,32,32,32,32,32,32,32,32,80,114,111,100,117,99,101,32,112,108,97,105,110,32,116,101,120,116,32,111,117,116,112,117,116,10,45,72,32,32,32,32,32,32,32,32,32,32,32,80,114,111,100,117,99,101,32,72,84,77,76,32,111,117,116,112,117,116,10,45,98,32,32,32,32,32,32,32,32,32,32,32,80,114,111,100,117,99,101,32,39,98,108,111,99,107,101,100,39,32,111,117,116,112,117,116,32,40,76,97,84,101,88,32,38,32,112,108,97,105,110,32,116,101,120,116,32,111,110,108,121,41,10,45,119,32,60,119,105,100,116,104,62,32,32,32,83,101,116,32,111,117,116,112,117,116,32,119,105,100,116,104,32,40,112,108,97,105,110,32,116,101,120,116,41,10,10,84,104,101,115,101,32,111,112,116,105,111,110,115,32,114,101,108,97,116,101,32,116,111,32,104,97,110,100,108,105,110,103,32,101,108,105,100,97,98,108,101,32,115,101,112,97,114,97,116,111,114,115,47,116,101,114,109,105,110,97,116,111,114,115,10,45,105,101,32,32,32,32,32,32,32,32,32,32,68,105,115,112,108,97,121,32,101,108,105,100,101,100,32,115,101,112,97,114,97,116,111,114,115,32,97,110,100,32,116,101,114,109,105,110,97,116,111,114,115,10,45,114,101,32,32,32,32,32,32,32,32,32,32,82,101,113,117,105,114,101,32,101,108,105,100,97,98,108,101,32,115,101,112,97,114,97,116,111,114,115,32,97,110,100,32,116,101,114,109,105,110,97,116,111,114,115,32,116,111,32,98,101,32,112,114,101,115,101,110,116,10,45,115,101,32,32,32,32,32,32,32,32,32,32,83,104,111,119,32,101,108,105,100,97,98,108,101,32,115,101,112,97,114,97,116,111,114,115,47,116,101,114,109,105,110,97,116,111,114,115,32,116,104,97,116,32,99,111,117,108,100,32,98,101,32,111,109,105,116,116,101,100,10,45,115,101,118,32,32,32,32,32,32,32,32,32,68,105,116,116,111,44,32,112,108,117,115,32,118,101,114,98,111,115,101,32,100,101,116,97,105,108,10,10,84,104,101,115,101,32,111,112,116,105,111,110,115,32,114,101,108,97,116,101,32,116,111,32,103,114,97,109,109,97,114,32,111,112,116,105,111,110,115,10,45,99,114,32,32,32,32,32,32,32,32,32,32,65,108,108,111,119,32,99,117,108,116,117,114,97,108,32,114,97,102,115,105,32,105,110,32,108,117,106,118,111,32,40,82,101,102,101,114,101,110,99,101,32,71,114,97,109,109,97,114,32,115,101,99,116,105,111,110,32,52,46,49,54,41,10,10,84,104,101,115,101,32,111,112,116,105,111,110,115,32,114,101,108,97,116,101,32,116,111,32,104,101,108,112,32,38,32,100,101,98,117,103,10,45,118,32,32,32,32,32,32,32,32,32,32,32,83,104,111,119,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,32,97,110,100,32,101,120,105,116,10,45,104,32,32,32,32,32,32,32,32,32,32,32,83,104,111,119,32,116,104,105,115,32,104,101,108,112,32,105,110,102,111,114,109,97,116,105,111,110,10,45,63,32,32,32,32,32,32,32,32,32,32,32,83,104,111,119,32,116,104,105,115,32,104,101,108,112,32,105,110,102,111,114,109,97,116,105,111,110,10,45,109,32,32,32,32,32,32,32,32,32,32,32,83,104,111,119,32,109,101,109,111,114,121,32,117,115,97,103,101,32,115,116,97,116,105,115,116,105,99,115,10,45,100,32,32,32,32,32,32,32,32,32,32,32,83,104,111,119,32,100,101,98,117,103,32,105,110,102,111,114,109,97,116,105,111,110,10,45,100,100,32,32,32,32,32,32,32,32,32,32,82,101,112,111,114,116,32,109,105,115,115,105,110,103,32,100,105,99,116,105,111,110,97,114,121,32,101,110,116,114,105,101,115,32,116,111,32,115,116,100,101,114,114,10,45,98,116,32,32,32,32,32,32,32,32,32,32,83,104,111,119,32,112,97,114,115,101,114,32,115,116,97,116,101,32,98,97,99,107,116,114,97,99,101,32,119,104,101,110,32,97,32,115,121,110,116,97,120,32,101,114,114,111,114,32,111,99,99,117,114,115,10,0,85,110,99,108,111,115,101,100,32,37,115,32,99,111,110,115,116,114,117,99,116,105,111,110,32,97,116,32,101,110,100,32,111,102,32,102,105,108,101,10,0,85,110,114,101,99,111,103,110,105,122,97,98,108,101,32,119,111,114,100,32,39,37,115,39,32,97,116,32,108,105,110,101,32,37,100,32,99,111,108,117,109,110,32,37,100,10,0,73,110,118,97,108,105,100,32,117,112,112,101,114,99,97,115,101,32,108,101,116,116,101,114,115,32,105,110,32,119,111,114,100,32,39,37,115,39,32,97,116,32,108,105,110,101,32,37,100,32,99,111,108,117,109,110,32,37,100,10,0,108,101,120,49,46,99,0,112,114,111,99,101,115,115,95,119,111,114,100,0,97,98,99,100,101,102,103,105,106,107,108,109,110,111,112,114,115,116,117,118,120,121,122,39,0,66,97,100,32,99,109,97,118,111,32,91,37,115,93,10,0,66,97,100,32,99,109,97,118,111,32,91,37,115,93,32,97,116,32,108,105,110,101,32,37,100,32,99,111,108,117,109,110,32,37,100,10,0,71,65,82,32,58,32,37,115,10,0,77,65,82,32,58,32,37,115,10,0,67,77,86,32,58,32,37,115,32,91,37,115,93,10,0,90,69,73,32,58,32,0,66,82,86,32,58,32,37,115,10,0,67,77,78,32,58,32,37,115,10,0,66,75,78,32,58,32,40,98,114,111,107,101,110,32,101,114,97,115,117,114,101,41,10,0,108,101,120,50,46,99,0,115,104,111,119,95,116,111,107,101,110,0,98,117,105,108,100,95,115,116,114,105,110,103,95,102,114,111,109,95,110,111,100,101,115,0,122,111,105,43,34,0,122,111,43,0,60,68,101,102,101,99,116,105,118,101,32,101,114,97,115,117,114,101,62,0,46,98,117,0,108,111,39,117,45,0,45,108,101,39,117,0,104,97,110,100,108,101,95,98,117,0,67,97,110,110,111,116,32,104,97,118,101,32,39,122,101,105,39,32,97,116,32,116,104,101,32,115,116,97,114,116,32,111,102,32,116,104,101,32,116,101,120,116,10,0,67,97,110,110,111,116,32,104,97,118,101,32,39,122,101,105,39,32,97,116,32,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,116,101,120,116,10,0,32,122,101,105,32,0,85,110,116,101,114,109,105,110,97,116,101,100,32,76,79,104,85,32,46,46,32,76,69,104,85,32,99,111,110,115,116,114,117,99,116,105,111,110,10,0,67,97,110,110,111,116,32,104,97,118,101,32,90,79,32,97,115,32,116,104,101,32,108,97,115,116,32,116,111,107,101,110,32,105,110,32,116,104,101,32,116,101,120,116,10,0,104,97,110,100,108,101,95,122,111,0,37,115,10,0,67,77,65,86,79,32,58,32,37,115,32,91,37,115,93,10,0,67,77,65,86,79,32,58,32,110,97,105,32,91,78,65,73,93,10,0,67,77,65,86,79,32,58,32,99,97,105,32,91,67,65,73,93,10,0,67,77,65,86,79,32,58,32,115,97,105,32,91,67,65,73,93,10,0,67,77,65,86,79,32,58,32,114,117,39,101,32,91,67,65,73,93,10,0,67,77,65,86,79,32,58,32,99,117,39,105,32,91,67,65,73,93,10,0,67,77,65,86,79,32,58,32,112,101,105,32,91,67,65,73,93,10,0,90,79,73,32,58,32,37,115,10,0,90,79,32,32,58,32,37,115,10,0,76,79,104,85,32,32,58,32,37,115,10,0,90,69,73,32,58,32,37,115,10,0,66,85,32,58,32,37,115,10,0,66,82,73,86,76,65,32,58,32,37,115,10,0,67,77,69,78,69,32,58,32,37,115,10,0,79,84,72,69,82,63,10,0,43,45,0,124,32,0,32,110,97,105,0,32,99,97,105,32,110,97,105,0,32,115,97,105,32,110,97,105,0,32,114,117,39,101,32,110,97,105,0,32,47,37,115,42,47,0,32,47,37,115,47,0,122,111,105,32,37,115,32,37,115,32,37,115,0,37,115,32,98,117,0,41,37,100,0,40,37,100,0,121,45,62,116,121,112,101,32,61,61,32,78,95,78,79,78,84,69,82,77,0,99,111,110,118,101,114,115,105,111,110,46,99,0,99,111,110,118,95,109,97,114,107,95,116,117,50,115,0,99,111,109,112,117,116,101,95,116,117,50,95,99,111,110,118,0,85,110,101,120,112,101,99,116,101,100,32,99,97,115,101,33,33,10,0,108,111,111,107,117,112,95,99,111,110,118,101,114,116,101,100,95,112,108,97,99,101,0,99,49,45,62,100,97,116,97,46,99,109,97,118,111,46,115,101,108,109,97,111,32,61,61,32,83,69,0,99,111,110,118,95,116,97,103,95,115,101,95,98,97,105,0,102,117,110,99,116,105,111,110,115,46,99,0,40,120,45,62,116,121,112,101,32,61,61,32,78,95,78,79,78,84,69,82,77,41,32,38,38,32,40,120,45,62,100,97,116,97,46,110,111,110,116,101,114,109,46,116,121,112,101,32,61,61,32,116,121,112,101,41,0,116,121,112,101,95,99,104,101,99,107,0,120,45,62,116,121,112,101,32,61,61,32,78,95,78,79,78,84,69,82,77,0,110,99,104,0,99,104,105,108,100,95,114,101,102,0,105,62,61,48,0,105,32,60,32,110,116,45,62,110,99,104,105,108,100,114,101,110,0,102,105,110,100,95,110,116,104,95,99,104,105,108,100,0,102,105,110,100,95,110,116,104,95,99,109,97,118,111,95,99,104,105,108,100,0,110,116,45,62,116,121,112,101,32,61,61,32,65,85,71,77,69,78,84,69,68,0,115,116,114,105,112,95,97,116,116,105,116,117,100,105,110,97,108,0,40,99,104,105,108,100,32,45,32,99,104,105,108,100,48,41,32,60,32,78,0,116,116,46,109,101,46,115,117,109,116,105,0,116,101,114,109,115,46,99,0,112,114,111,99,101,115,115,95,116,97,110,114,117,95,117,110,105,116,95,50,95,97,114,103,115,0,99,115,51,0,116,117,50,95,99,104,105,108,100,0,99,116,97,103,0,68,111,110,39,116,32,107,110,111,119,32,104,111,119,32,116,111,32,104,97,110,100,108,101,32,110,101,103,97,116,101,100,32,97,98,115,116,114,97,99,116,111,114,32,121,101,116,32,97,116,32,108,105,110,101,32,37,100,32,99,111,108,117,109,110,32,37,100,32,45,32,105,103,110,111,114,105,110,103,32,110,101,103,97,116,105,111,110,10,0,67,97,110,39,116,32,104,97,110,100,108,101,32,99,111,110,110,101,99,116,101,100,32,97,98,115,116,114,97,99,116,111,114,115,32,119,114,116,32,112,108,97,99,101,115,32,121,101,116,32,97,116,32,108,105,110,101,32,37,100,32,99,111,108,117,109,110,32,37,100,10,0,108,99,45,62,110,32,60,32,77,65,88,95,84,69,82,77,83,95,73,78,95,86,69,67,84,79,82,0,108,99,95,97,112,112,101,110,100,95,106,97,105,0,108,99,95,97,112,112,101,110,100,95,106,97,105,95,116,97,103,0,108,99,95,97,112,112,101,110,100,95,115,101,0,115,101,45,62,100,97,116,97,46,99,109,97,118,111,46,115,101,108,109,97,111,32,61,61,32,83,69,0,114,101,99,111,118,101,114,95,115,101,95,99,111,110,118,0,107,115,51,0,112,114,111,99,101,115,115,95,115,101,108,98,114,105,95,51,95,97,114,103,115,0,116,97,110,114,117,95,117,110,105,116,32,97,116,32,108,105,110,101,32,37,100,32,99,111,108,117,109,110,32,37,100,32,99,111,110,116,97,105,110,115,32,67,69,73,44,32,99,97,110,39,116,32,104,97,110,100,108,101,32,116,104,105,115,32,121,101,116,10,0,99,115,0,112,114,111,99,101,115,115,95,115,101,108,98,114,105,95,97,114,103,115,0,68,111,110,39,116,32,107,110,111,119,32,119,104,97,116,32,116,111,32,100,111,32,119,105,116,104,32,60,106,97,105,62,32,102,111,114,32,103,108,111,115,115,32,99,111,110,118,101,114,115,105,111,110,10,0,73,110,118,97,108,105,100,32,112,108,97,99,101,10,0,84,111,111,32,109,97,110,121,32,112,108,97,99,101,115,32,97,115,115,105,103,110,101,100,10,0,108,99,95,97,112,112,101,110,100,95,108,105,110,107,115,0,112,114,111,99,101,115,115,95,115,117,109,116,105,95,116,97,105,108,95,49,97,0,112,114,111,99,101,115,115,95,115,117,109,116,105,95,53,98,0,109,109,115,101,108,98,114,105,0,112,114,111,99,101,115,115,95,109,101,116,97,108,105,110,103,117,105,115,116,105,99,0,78,111,32,112,108,97,99,101,32,116,97,103,103,105,110,103,32,102,111,114,32,116,101,114,109,115,101,116,32,97,116,32,108,105,110,101,32,37,100,10,0,116,45,62,100,97,116,97,46,110,111,110,116,101,114,109,46,116,121,112,101,32,61,61,32,84,69,82,77,0,116,118,95,98,117,105,108,100,0,100,101,115,116,32,33,61,32,115,114,99,0,116,118,95,114,101,118,101,114,115,101,0,120,45,62,100,97,116,97,46,99,109,97,118,111,46,115,101,108,109,97,111,32,61,61,32,70,65,0,114,101,99,111,118,101,114,95,102,97,95,99,111,110,118,0,98,116,97,105,108,0,112,114,111,99,101,115,115,95,115,117,98,115,101,110,116,101,110,99,101,0,98,116,99,0,112,114,111,99,101,115,115,95,98,114,105,100,105,95,116,97,105,108,0,98,116,49,0,98,116,49,99,0,112,114,111,99,101,115,115,95,98,114,105,100,105,95,116,97,105,108,95,49,0,98,116,50,0,98,116,50,97,0,112,114,111,99,101,115,115,95,98,114,105,100,105,95,116,97,105,108,95,50,0,98,116,50,98,0,115,115,49,0,112,114,111,99,101,115,115,95,98,114,105,100,105,95,116,97,105,108,95,51,0,115,115,50,0,116,110,32,60,61,32,77,65,88,95,84,69,82,77,83,95,73,78,95,86,69,67,84,79,82,0,116,118,95,99,97,116,101,110,97,116,101,0,120,45,62,116,121,112,101,32,61,61,32,78,95,78,79,78,84,69,82,77,32,38,38,32,120,45,62,100,97,116,97,46,110,111,110,116,101,114,109,46,116,121,112,101,32,61,61,32,83,84,65,84,69,77,69,78,84,95,51,0,112,114,111,99,101,115,115,95,115,116,97,116,101,109,101,110,116,95,51,0,115,101,110,116,45,62,116,121,112,101,32,61,61,32,78,95,78,79,78,84,69,82,77,0,116,109,0,99,104,101,99,107,95,116,117,49,95,102,111,114,95,108,105,110,107,115,0,84,101,114,109,115,101,116,32,97,116,32,108,105,110,101,32,37,100,32,105,103,110,111,114,101,100,44,32,112,108,97,99,101,32,116,97,103,103,105,110,103,32,119,105,108,108,32,98,101,32,102,97,117,108,116,121,10,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,177,58,1,0,3,1,14,0,0,0,52,21,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,61,21,1,0,110,1,17,0,117,0,64,21,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,71,21,1,0,110,1,19,0,117,0,74,21,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,81,21,1,0,110,1,22,0,117,0,85,21,1,0,95,21,1,0,110,1,23,0,117,0,99,21,1,0,109,21,1,0,110,1,24,0,117,0,113,21,1,0,120,21,1,0,110,1,25,0,117,0,124,21,1,0,129,21,1,0,110,1,26,0,117,0,133,21,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,179,58,1,0,3,1,28,0,0,0,142,21,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,152,21,1,0,110,1,31,0,117,0,155,21,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,166,21,1,0,110,1,36,0,117,0,170,21,1,0,181,21,1,0,110,1,37,0,117,0,185,21,1,0,196,21,1,0,110,1,38,0,117,0,200,21,1,0,211,21,1,0,110,1,39,0,117,0,215,21,1,0,223,21,1,0,110,1,40,0,117,0,227,21,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,238,21,1,0,46,1,42,0,43,0,240,21,1,0,254,21,1,0,110,1,43,0,117,0,1,22,1,0,8,22,1,0,110,1,44,0,117,0,11,22,1,0,21,22,1,0,110,1,45,0,117,0,24,22,1,0,29,22,1,0,110,1,46,0,117,0,32,22,1,0,40,22,1,0,110,1,47,0,117,0,43,22,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,48,22,1,0,110,1,50,0,117,0,52,22,1,0,63,22,1,0,110,1,51,0,117,0,67,22,1,0,76,22,1,0,110,1,52,0,117,0,80,22,1,0,93,22,1,0,110,1,53,0,117,0,97,22,1,0,110,22,1,0,110,1,54,0,117,0,114,22,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,181,58,1,0,3,1,56,0,0,0,126,22,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,22,1,0,110,1,59,0,117,0,139,22,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,149,22,1,0,110,1,64,0,117,0,153,22,1,0,159,22,1,0,110,1,65,0,117,0,163,22,1,0,173,22,1,0,110,1,66,0,117,0,177,22,1,0,185,22,1,0,110,1,67,0,117,0,189,22,1,0,198,22,1,0,110,1,68,0,117,0,202,22,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,183,58,1,0,3,1,70,0,0,0,213,22,1,0,227,22,1,0,110,1,71,0,117,0,230,22,1,0,240,22,1,0,110,1,72,0,117,0,243,22,1,0,252,22,1,0,110,1,73,0,117,0,255,22,1,0,9,23,1,0,110,1,74,0,117,0,12,23,1,0,23,23,1,0,110,1,75,0,117,0,26,23,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,31,23,1,0,110,1,78,0,117,0,35,23,1,0,40,23,1,0,110,1,79,0,117,0,44,23,1,0,51,23,1,0,110,1,80,0,117,0,55,23,1,0,65,23,1,0,110,1,81,0,117,0,69,23,1,0,77,23,1,0,110,1,82,0,117,0,81,23,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,225,55,1,0,120,1,84,0,139,0,92,23,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,103,23,1,0,15,1,97,0,11,0,107,23,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,109,23,1,0,93,1,112,0,100,0,112,23,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,232,104,1,0,5,1,115,0,1,0,118,23,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,15,106,1,0,5,1,117,0,1,0,131,23,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,100,104,1,0,110,1,120,0,118,0,143,23,1,0,111,104,1,0,4,1,121,0,2,0,156,23,1,0,122,104,1,0,5,1,122,0,1,0,171,23,1,0,133,104,1,0,121,1,123,0,140,0,183,23,1,0,144,104,1,0,110,1,124,0,119,0,194,23,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,207,23,1,0,6,1,126,0,3,0,210,23,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,141,106,1,0,8,1,129,0,4,0,221,23,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,53,106,1,0,29,1,134,0,23,0,237,23,1,0,64,106,1,0,22,1,135,0,16,0,246,23,1,0,75,106,1,0,5,1,136,0,1,0,6,24,1,0,86,106,1,0,7,1,137,0,5,0,14,24,1,0,97,106,1,0,110,1,138,0,123,0,31,24,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,240,107,1,0,88,1,140,0,92,0,36,24,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,2,107,1,0,9,1,149,0,148,0,38,24,1,0,13,107,1,0,10,1,150,0,6,0,60,24,1,0,24,107,1,0,10,1,151,0,6,0,79,24,1,0,35,107,1,0,110,1,152,0,120,0,96,24,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,177,108,1,0,11,1,154,0,7,0,112,24,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,145,108,1,0,12,1,157,0,8,0,129,24,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,94,109,1,0,14,1,168,0,9,0,149,24,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,73,109,1,0,43,1,176,0,41,0,163,24,1,0,78,109,1,0,43,1,177,0,41,0,177,24,1,0,89,109,1,0,43,1,178,0,41,0,191,24,1,0,97,109,1,0,110,1,179,0,125,0,205,24,1,0,108,109,1,0,29,1,180,0,25,0,219,24,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,235,24,1,0,15,1,182,0,11,0,238,24,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,240,24,1,0,93,1,210,0,100,0,243,24,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,90,110,1,0,17,1,213,0,12,0,250,24,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,81,111,1,0,5,1,215,0,1,0,10,25,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,204,109,1,0,16,1,218,0,13,0,20,25,1,0,215,109,1,0,110,1,219,0,118,0,32,25,1,0,226,109,1,0,5,1,220,0,1,0,41,25,1,0,237,109,1,0,121,1,221,0,140,0,57,25,1,0,248,109,1,0,29,1,222,0,24,0,70,25,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,156,111,1,0,50,1,224,0,46,0,82,25,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,190,111,1,0,19,1,227,0,14,0,96,25,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,114,111,1,0,61,1,232,0,63,0,113,25,1,0,124,25,1,0,18,1,233,0,149,0,129,25,1,0,125,111,1,0,88,1,234,0,94,0,150,25,1,0,136,111,1,0,50,1,235,0,46,0,158,25,1,0,141,111,1,0,55,1,236,0,150,0,177,25,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,179,112,1,0,88,1,238,0,92,0,184,25,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,131,112,1,0,5,1,247,0,1,0,186,25,1,0,142,112,1,0,88,1,248,0,96,0,196,25,1,0,153,112,1,0,5,1,249,0,1,0,205,25,1,0,164,112,1,0,5,1,250,0,1,0,225,25,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,147,116,1,0,21,1,252,0,15,0,238,25,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,134,116,1,0,22,1,255,0,16,0,254,25,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,114,116,1,0,121,1,4,1,140,0,8,26,1,0,119,116,1,0,43,1,5,1,41,0,19,26,1,0,124,116,1,0,121,1,6,1,140,0,34,26,1,0,46,26,1,0,22,1,7,1,16,0,51,26,1,0,129,116,1,0,121,1,8,1,140,0,60,26,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,70,26,1,0,23,1,10,1,17,0,73,26,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,215,117,1,0,118,1,18,1,136,0,90,26,1,0,226,117,1,0,24,1,19,1,18,0,105,26,1,0,231,117,1,0,17,1,20,1,12,0,113,26,1,0,242,117,1,0,76,1,21,1,77,0,129,26,1,0,253,117,1,0,5,1,22,1,1,0,148,26,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,159,26,1,0,15,1,24,1,11,0,162,26,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,70,120,1,0,55,1,52,1,52,0,164,26,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,56,119,1,0,110,1,55,1,123,0,176,26,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,62,120,1,0,88,1,57,1,93,0,184,26,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,186,118,1,0,88,1,60,1,95,0,196,26,1,0,197,118,1,0,55,1,61,1,53,0,207,26,1,0,208,118,1,0,110,1,62,1,119,0,226,26,1,0,219,118,1,0,25,1,63,1,19,0,236,26,1,0,230,118,1,0,55,1,64,1,53,0,255,26,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,17,27,1,0,55,1,66,1,52,0,20,27,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,165,120,1,0,55,1,69,1,53,0,32,27,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,81,120,1,0,121,1,74,1,140,0,47,27,1,0,57,27,1,0,55,1,75,1,53,0,62,27,1,0,92,120,1,0,5,1,76,1,1,0,77,27,1,0,103,120,1,0,118,1,77,1,136,0,83,27,1,0,114,120,1,0,55,1,78,1,53,0,93,27,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,110,27,1,0,55,1,80,1,52,0,113,27,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+40960);
/* memory initializer */ allocate([3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,57,121,1,0,121,1,88,1,140,0,125,27,1,0,68,121,1,0,55,1,89,1,53,0,138,27,1,0,79,121,1,0,103,1,90,1,110,0,153,27,1,0,90,121,1,0,5,1,91,1,1,0,163,27,1,0,101,121,1,0,55,1,92,1,53,0,179,27,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,128,122,1,0,55,1,94,1,54,0,194,27,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,124,122,1,0,27,1,97,1,20,0,198,27,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,214,27,1,0,110,1,102,1,119,0,219,27,1,0,230,27,1,0,5,1,103,1,1,0,235,27,1,0,102,122,1,0,55,1,104,1,53,0,250,27,1,0,113,122,1,0,55,1,105,1,54,0,13,28,1,0,28,28,1,0,26,1,106,1,21,0,33,28,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,249,122,1,0,43,1,108,1,41,0,46,28,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,211,122,1,0,29,1,116,1,23,0,63,28,1,0,222,122,1,0,88,1,117,1,95,0,71,28,1,0,233,122,1,0,5,1,118,1,1,0,80,28,1,0,244,122,1,0,5,1,119,1,1,0,91,28,1,0,252,122,1,0,84,1,120,1,87,0,104,28,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,119,28,1,0,15,1,122,1,11,0,122,28,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,124,28,1,0,28,1,150,1,22,0,127,28,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,3,124,1,0,28,1,153,1,22,0,143,28,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,202,124,1,0,5,1,155,1,1,0,161,28,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,159,123,1,0,29,1,158,1,26,0,177,28,1,0,170,123,1,0,5,1,159,1,1,0,191,28,1,0,181,123,1,0,118,1,160,1,135,0,202,28,1,0,192,123,1,0,30,1,161,1,27,0,216,28,1,0,203,123,1,0,50,1,162,1,46,0,228,28,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,245,28,1,0,28,1,164,1,22,0,248,28,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,41,125,1,0,88,1,167,1,93,0,8,29,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,224,124,1,0,118,1,172,1,136,0,20,29,1,0,32,29,1,0,31,1,173,1,28,0,37,29,1,0,235,124,1,0,118,1,174,1,134,0,51,29,1,0,246,124,1,0,22,1,175,1,16,0,62,29,1,0,1,125,1,0,32,1,176,1,29,0,75,29,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,92,29,1,0,28,1,178,1,22,0,95,29,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,164,125,1,0,28,1,186,1,22,0,111,29,1,0,169,125,1,0,5,1,187,1,1,0,125,29,1,0,180,125,1,0,22,1,188,1,16,0,136,29,1,0,191,125,1,0,33,1,189,1,30,0,148,29,1,0,202,125,1,0,88,1,190,1,94,0,164,29,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,179,29,1,0,28,1,192,1,22,0,182,29,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,150,126,1,0,34,1,195,1,31,0,198,29,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,124,126,1,0,55,1,200,1,55,0,218,29,1,0,129,126,1,0,55,1,201,1,55,0,223,29,1,0,134,126,1,0,55,1,202,1,55,0,228,29,1,0,139,126,1,0,55,1,203,1,55,0,233,29,1,0,238,29,1,0,55,1,204,1,55,0,243,29,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,249,29,1,0,28,1,206,1,22,0,252,29,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,27,127,1,0,35,1,214,1,32,0,12,30,1,0,38,127,1,0,36,1,215,1,33,0,27,30,1,0,49,127,1,0,110,1,216,1,123,0,43,30,1,0,48,30,1,0,37,1,217,1,34,0,53,30,1,0,73,30,1,0,118,1,218,1,133,0,78,30,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,96,30,1,0,15,1,220,1,11,0,99,30,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,181,57,1,0,38,1,248,1,35,0,101,30,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,206,127,1,0,88,1,251,1,93,0,109,30,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,102,128,1,0,5,1,253,1,1,0,121,30,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,111,127,1,0,5,1,0,2,1,0,139,30,1,0,122,127,1,0,15,1,1,2,10,0,151,30,1,0,133,127,1,0,110,1,2,2,123,0,168,30,1,0,144,127,1,0,39,1,3,2,36,0,176,30,1,0,155,127,1,0,29,1,4,2,24,0,195,30,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,184,57,1,0,38,1,6,2,35,0,201,30,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,147,128,1,0,118,1,9,2,135,0,210,30,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,114,128,1,0,118,1,14,2,133,0,231,30,1,0,245,30,1,0,110,1,15,2,124,0,250,30,1,0,193,57,1,0,38,1,16,2,35,0,11,31,1,0,125,128,1,0,15,1,17,2,10,0,23,31,1,0,136,128,1,0,40,1,18,2,37,0,35,31,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,55,31,1,0,41,1,20,2,38,0,58,31,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,218,128,1,0,42,1,28,2,39,0,76,31,1,0,229,128,1,0,42,1,29,2,39,0,85,31,1,0,202,58,1,0,42,1,30,2,39,0,95,31,1,0,240,128,1,0,42,1,31,2,39,0,108,31,1,0,251,128,1,0,42,1,32,2,39,0,118,31,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,187,57,1,0,38,1,34,2,35,0,132,31,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,144,100,1,0,44,1,37,2,40,0,141,31,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,158,31,1,0,43,1,42,2,41,0,163,31,1,0,176,31,1,0,43,1,43,2,41,0,181,31,1,0,199,31,1,0,43,1,44,2,41,0,204,31,1,0,215,31,1,0,43,1,45,2,41,0,220,31,1,0,233,31,1,0,43,1,46,2,41,0,238,31,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,190,57,1,0,38,1,48,2,35,0,252,31,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,25,130,1,0,45,1,56,2,42,0,9,32,1,0,36,130,1,0,45,1,57,2,42,0,23,32,1,0,47,130,1,0,45,1,58,2,42,0,38,32,1,0,58,130,1,0,45,1,59,2,42,0,56,32,1,0,149,58,1,0,45,1,60,2,42,0,71,32,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,90,32,1,0,15,1,62,2,11,0,93,32,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,51,132,1,0,47,1,90,2,44,0,95,32,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,95,131,1,0,48,1,93,2,45,0,104,32,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,43,132,1,0,88,1,95,2,93,0,121,32,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,248,130,1,0,77,1,98,2,80,0,133,32,1,0,3,131,1,0,5,1,99,2,1,0,148,32,1,0,14,131,1,0,5,1,100,2,1,0,165,32,1,0,25,131,1,0,110,1,101,2,118,0,173,32,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,187,133,1,0,47,1,104,2,44,0,184,32,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,58,133,1,0,84,1,107,2,87,0,194,32,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,216,132,1,0,78,1,112,2,82,0,209,32,1,0,227,132,1,0,22,1,113,2,16,0,225,32,1,0,238,132,1,0,47,1,114,2,44,0,231,32,1,0,249,132,1,0,15,1,115,2,10,0,244,32,1,0,4,133,1,0,110,1,116,2,119,0,1,33,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,185,58,1,0,3,1,118,2,0,0,7,33,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,7,134,1,0,110,1,126,2,121,0,20,33,1,0,18,134,1,0,5,1,127,2,1,0,32,33,1,0,29,134,1,0,88,1,128,2,95,0,44,33,1,0,40,134,1,0,5,1,129,2,1,0,58,33,1,0,51,134,1,0,5,1,130,2,1,0,77,33,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,4,136,1,0,47,1,132,2,44,0,86,33,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,226,135,1,0,50,1,135,2,46,0,96,33,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,111,33,1,0,110,1,140,2,120,0,116,33,1,0,199,135,1,0,50,1,141,2,46,0,135,33,1,0,141,33,1,0,49,1,142,2,47,0,146,33,1,0,210,135,1,0,15,1,143,2,10,0,152,33,1,0,221,135,1,0,50,1,144,2,46,0,165,33,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,227,136,1,0,47,1,146,2,44,0,180,33,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,7,136,1,0,110,1,154,2,118,0,194,33,1,0,18,136,1,0,50,1,155,2,46,0,202,33,1,0,29,136,1,0,22,1,156,2,16,0,219,33,1,0,40,136,1,0,110,1,157,2,123,0,229,33,1,0,239,33,1,0,118,1,158,2,135,0,244,33,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,0,34,1,0,15,1,160,2,11,0,3,34,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,22,138,1,0,84,1,188,2,87,0,5,34,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,164,137,1,0,5,1,191,2,1,0,23,34,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,212,138,1,0,110,1,193,2,120,0,38,34,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,16,137,1,0,5,1,196,2,1,0,56,34,1,0,27,137,1,0,16,1,197,2,13,0,67,34,1,0,38,137,1,0,5,1,198,2,1,0,87,34,1,0,49,137,1,0,88,1,199,2,96,0,102,34,1,0,60,137,1,0,110,1,200,2,118,0,114,34,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,69,139,1,0,51,1,202,2,48,0,132,34,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,37,139,1,0,53,1,205,2,49,0,147,34,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,235,138,1,0,55,1,210,2,58,0,163,34,1,0,246,138,1,0,52,1,211,2,50,0,178,34,1,0,251,138,1,0,39,1,212,2,36,0,191,34,1,0,6,139,1,0,22,1,213,2,16,0,210,34,1,0,17,139,1,0,110,1,214,2,119,0,224,34,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,234,34,1,0,54,1,216,2,51,0,237,34,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,160,139,1,0,110,1,224,2,124,0,251,34,1,0,171,139,1,0,22,1,225,2,16,0,13,35,1,0,182,139,1,0,5,1,226,2,1,0,20,35,1,0,187,139,1,0,88,1,227,2,94,0,37,35,1,0,198,139,1,0,5,1,228,2,1,0,50,35,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,68,35,1,0,55,1,230,2,54,0,71,35,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,232,140,1,0,5,1,233,2,1,0,82,35,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,168,140,1,0,55,1,238,2,55,0,93,35,1,0,179,140,1,0,55,1,239,2,55,0,98,35,1,0,190,140,1,0,55,1,240,2,55,0,103,35,1,0,201,140,1,0,55,1,241,2,55,0,108,35,1,0,212,140,1,0,55,1,242,2,55,0,113,35,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,118,35,1,0,58,1,244,2,59,0,121,35,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,199,141,1,0,50,1,252,2,46,0,131,35,1,0,210,141,1,0,56,1,253,2,60,0,144,35,1,0,221,141,1,0,110,1,254,2,121,0,164,35,1,0,232,141,1,0,57,1,255,2,61,0,172,35,1,0,243,141,1,0,5,1,0,3,1,0,192,35,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,203,35,1,0,15,1,2,3,11,0,206,35,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,208,35,1,0,59,1,30,3,62,0,211,35,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,48,143,1,0,59,1,33,3,62,0,222,35,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,1,144,1,0,61,1,35,3,63,0,240,35,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,174,142,1,0,110,1,38,3,119,0,1,36,1,0,185,142,1,0,60,1,39,3,64,0,13,36,1,0,196,142,1,0,59,1,40,3,62,0,29,36,1,0,207,142,1,0,128,1,41,3,146,0,46,36,1,0,218,142,1,0,5,1,42,3,1,0,67,36,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,79,36,1,0,62,1,44,3,65,0,82,36,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,97,144,1,0,62,1,47,3,65,0,96,36,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,24,144,1,0,5,1,52,3,1,0,115,36,1,0,119,144,1,0,62,1,53,3,65,0,127,36,1,0,35,144,1,0,62,1,54,3,65,0,145,36,1,0,46,144,1,0,110,1,55,3,123,0,163,36,1,0,57,144,1,0,63,1,56,3,66,0,174,36,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,190,36,1,0,64,1,58,3,67,0,193,36,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,156,144,1,0,110,1,66,3,119,0,204,36,1,0,161,144,1,0,5,1,67,3,1,0,212,36,1,0,172,144,1,0,84,1,68,3,87,0,224,36,1,0,183,144,1,0,110,1,69,3,120,0,244,36,1,0,194,144,1,0,65,1,70,3,68,0,1,37,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,11,37,1,0,62,1,72,3,65,0,14,37,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,207,145,1,0,62,1,75,3,65,0,28,37,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,47,37,1,0,15,1,80,3,10,0,52,37,1,0,239,145,1,0,62,1,81,3,65,0,65,37,1,0,165,145,1,0,62,1,82,3,65,0,77,37,1,0,170,145,1,0,66,1,83,3,69,0,95,37,1,0,181,145,1,0,67,1,84,3,70,0,109,37,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,121,37,1,0,68,1,86,3,71,0,124,37,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,5,146,1,0,60,1,94,3,64,0,130,37,1,0,16,146,1,0,60,1,95,3,64,0,149,37,1,0,21,146,1,0,60,1,96,3,64,0,164,37,1,0,32,146,1,0,60,1,97,3,64,0,184,37,1,0,205,37,1,0,69,1,98,3,72,0,210,37,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,231,37,1,0,15,1,100,3,11,0,234,37,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,236,37,1,0,55,1,128,3,58,0,239,37,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,1,147,1,0,71,1,131,3,73,0,247,37,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,40,148,1,0,5,1,133,3,1,0,8,38,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,143,146,1,0,55,1,136,3,54,0,20,38,1,0,148,146,1,0,5,1,137,3,1,0,32,38,1,0,159,146,1,0,5,1,138,3,1,0,48,38,1,0,170,146,1,0,70,1,139,3,74,0,67,38,1,0,175,146,1,0,88,1,140,3,94,0,87,38,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,115,100,1,0,72,1,142,3,75,0,103,38,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,163,148,1,0,76,1,145,3,77,0,119,38,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,80,148,1,0,5,1,150,3,1,0,135,38,1,0,91,148,1,0,5,1,151,3,1,0,147,38,1,0,96,148,1,0,88,1,152,3,94,0,157,38,1,0,107,148,1,0,64,1,153,3,67,0,167,38,1,0,118,148,1,0,73,1,154,3,76,0,175,38,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,81,149,1,0,55,1,156,3,54,0,115,100,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,28,149,1,0,55,1,164,3,54,0,195,38,1,0,33,149,1,0,22,1,165,3,16,0,207,38,1,0,44,149,1,0,10,1,166,3,6,0,225,38,1,0,55,149,1,0,55,1,167,3,54,0,238,38,1,0,66,149,1,0,110,1,168,3,121,0,249,38,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,255,38,1,0,43,1,170,3,41,0,2,39,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,168,150,1,0,76,1,173,3,77,0,10,39,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,110,150,1,0,88,1,178,3,95,0,25,39,1,0,33,39,1,0,74,1,179,3,78,0,38,39,1,0,121,150,1,0,75,1,180,3,79,0,55,39,1,0,132,150,1,0,71,1,181,3,73,0,68,39,1,0,143,150,1,0,121,1,182,3,140,0,84,39,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,181,151,1,0,88,1,184,3,92,0,95,39,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,60,151,1,0,110,1,192,3,119,0,97,39,1,0,71,151,1,0,84,1,193,3,88,0,109,39,1,0,82,151,1,0,5,1,194,3,1,0,130,39,1,0,93,151,1,0,22,1,195,3,16,0,148,39,1,0,104,151,1,0,5,1,196,3,1,0,153,39,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,168,39,1,0,15,1,198,3,11,0,171,39,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,241,152,1,0,77,1,226,3,80,0,173,39,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,130,152,1,0,80,1,229,3,81,0,187,39,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,12,153,1,0,24,1,231,3,18,0,204,39,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,32,152,1,0,15,1,234,3,10,0,220,39,1,0,43,152,1,0,78,1,235,3,82,0,234,39,1,0,54,152,1,0,110,1,236,3,120,0,250,39,1,0,65,152,1,0,103,1,237,3,110,0,13,40,1,0,70,152,1,0,79,1,238,3,83,0,23,40,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,42,40,1,0,44,1,240,3,40,0,45,40,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,86,153,1,0,43,1,243,3,41,0,63,40,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,77,40,1,0,29,1,248,3,25,0,82,40,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,61,153,1,0,29,1,250,3,25,0,90,40,1,0,72,153,1,0,118,1,251,3,136,0,97,40,1,0,77,153,1,0,29,1,252,3,23,0,107,40,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,223,153,1,0,84,1,254,3,87,0,116,40,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,133,153,1,0,29,1,6,4,24,0,132,40,1,0,138,153,1,0,81,1,7,4,84,0,138,40,1,0,149,153,1,0,5,1,8,4,1,0,156,40,1,0,160,153,1,0,82,1,9,4,85,0,173,40,1,0,165,153,1,0,88,1,10,4,94,0,183,40,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,112,154,1,0,88,1,12,4,92,0,40,59,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,94,154,1,0,83,1,15,4,86,0,199,40,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,217,40,1,0,43,1,20,4,41,0,222,40,1,0,73,154,1,0,78,1,21,4,82,0,239,40,1,0,78,154,1,0,82,1,22,4,85,0,3,41,1,0,13,41,1,0,88,1,23,4,96,0,18,41,1,0,32,41,1,0,44,1,24,4,40,0,37,41,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,209,154,1,0,84,1,26,4,87,0,57,41,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,128,154,1,0,85,1,34,4,89,0,72,41,1,0,139,154,1,0,22,1,35,4,16,0,91,41,1,0,150,154,1,0,86,1,36,4,90,0,99,41,1,0,161,154,1,0,16,1,37,4,13,0,113,41,1,0,129,41,1,0,87,1,38,4,91,0,134,41,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,146,41,1,0,15,1,40,4,11,0,78,102,1,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3,0,0,0,255,255,255,255,136,72,3,0,136,72,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+51200);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+61442);
/* memory initializer */ allocate([32,98,121,0,101,110,100,32,108,105,110,107,101,100,32,115,117,109,116,105,0,108,97,99,107,0,56,0,104,105,32,112,114,105,111,114,105,116,121,32,105,110,100,105,99,97,116,111,114,0,117,110,111,114,100,101,114,101,100,32,105,110,116,101,114,118,97,108,0,111,114,100,101,114,101,100,32,105,110,116,101,114,118,97,108,0,110,101,119,32,105,110,102,111,114,109,97,116,105,111,110,0,115,104,111,114,116,32,115,99,111,112,101,32,108,105,110,107,0,101,110,100,32,110,117,109,98,101,114,32,111,114,32,108,101,114,102,117,0,119,111,114,100,32,116,111,32,108,101,114,102,117,0,115,111,109,101,32,115,101,108,98,114,105,32,49,0,115,111,109,101,32,115,101,108,98,114,105,32,50,0,115,111,109,101,32,115,101,108,98,114,105,32,51,0,115,116,97,114,116,32,101,109,111,116,105,111,110,0,99,111,105,110,99,105,100,101,110,116,32,119,105,116,104,0,98,121,0,98,0,99,97,0,100,117,114,105,110,103,0,105,110,116,101,110,115,101,32,101,109,111,116,105,111,110,0,108,97,99,107,101,100,32,98,121,0,97,99,116,117,97,108,108,121,32,105,115,0,73,32,100,101,102,105,110,101,0,98,121,32,97,117,116,104,111,114,105,116,121,32,111,102,0,99,111,110,116,105,110,117,97,116,105,118,101,0,105,110,32,102,114,111,110,116,32,111,102,0,105,110,32,97,32,115,101,116,32,119,105,116,104,0,112,114,111,45,98,114,105,100,105,32,97,115,115,105,103,110,0,102,111,110,116,32,115,104,105,102,116,0,99,101,39,101,0,97,102,116,101,114,116,104,111,117,103,104,116,32,116,101,114,109,115,101,116,0,112,101,114,99,101,110,116,0,105,110,32,97,32,115,101,113,117,101,110,99,101,32,119,105,116,104,0,108,97,109,98,100,97,0,51,0,105,110,32,115,121,115,116,101,109,0,105,110,102,105,110,105,116,121,0,101,109,111,116,105,111,110,97,108,108,121,32,102,101,108,116,32,98,121,0,111,110,32,116,104,101,32,115,99,97,108,101,0,116,97,110,114,117,32,105,110,118,101,114,115,105,111,110,0,103,114,101,101,116,105,110,103,115,0,105,110,105,116,105,97,116,105,118,101,0,117,110,115,112,101,99,105,102,32,98,114,105,100,105,0,97,99,104,105,101,118,97,116,105,118,101,0,99,111,39,111,0,112,97,114,116,105,110,103,115,0,99,101,115,115,97,116,105,118,101,0,99,117,0,115,101,108,98,114,105,32,115,101,112,97,114,97,116,111,114,0,97,98,115,111,108,117,116,101,32,118,97,108,117,101,0,109,111,100,97,108,32,63,0,110,101,117,116,114,97,108,32,101,109,111,116,105,111,110,0,112,114,111,98,97,98,105,108,105,116,121,32,115,101,108,98,114,105,0,97,115,32,115,97,105,100,32,98,121,0,99,121,0,99,0,115,111,109,101,116,104,105,110,103,32,49,0,101,109,112,97,116,104,121,0,104,101,120,32,100,105,103,105,116,32,65,0,97,108,108,32,101,120,99,101,112,116,0,101,118,101,110,116,117,97,108,32,117,116,116,101,114,97,110,99,101,0,115,117,112,112,111,115,105,110,103,0,99,97,110,99,101,108,32,112,114,111,45,97,115,115,105,103,110,115,0,101,97,114,108,105,101,114,32,117,116,116,101,114,97,110,99,101,0,100,101,0,115,111,109,101,116,104,105,110,103,32,50,0,116,104,105,115,32,117,116,116,101,114,97,110,99,101,0,112,97,117,115,97,116,105,118,101,0,100,101,39,101,0,115,111,111,110,32,117,116,116,101,114,97,110,99,101,0,100,97,116,101,100,0,108,111,103,97,114,105,116,104,109,0,114,101,99,101,110,116,32,117,116,116,101,114,97,110,99,101,0,100,105,0,115,111,109,101,116,104,105,110,103,32,51,0,114,101,115,117,109,112,116,105,116,105,118,101,0,110,101,120,116,32,117,116,116,101,114,97,110,99,101,0,114,101,103,117,108,97,114,108,121,0,97,116,32,116,104,101,32,108,111,99,117,115,32,111,102,0,108,97,115,116,32,117,116,116,101,114,97,110,99,101,0,121,111,117,0,118,111,99,97,116,105,118,101,32,109,97,114,107,101,114,0,100,111,39,97,0,103,101,110,101,114,111,117,115,108,121,0,100,111,39,101,0,117,110,115,112,101,99,105,102,32,109,111,100,97,108,0,117,110,115,112,101,99,105,102,32,117,116,116,101,114,97,110,99,101,0,121,111,117,32,97,110,100,32,111,116,104,101,114,115,0,100,111,39,117,0,101,110,100,32,118,111,99,97,116,105,118,101,0,115,97,109,101,32,105,100,101,110,116,105,116,121,32,97,115,0,101,97,115,116,32,111,102,0,116,111,111,32,109,97,110,121,0,97,115,32,109,117,99,104,32,97,115,0,97,99,99,111,114,100,105,110,103,32,116,111,0,98,114,105,100,105,32,97,98,115,116,114,97,99,116,0,100,121,0,100,0,102,97,0,49,115,116,32,115,117,109,116,105,32,112,108,97,99,101,0,101,120,116,114,97,32,115,117,109,116,105,32,112,108,97,99,101,0,105,110,32,116,104,101,32,101,118,101,110,116,32,111,102,0,116,111,119,97,114,100,115,32,112,111,105,110,116,0,114,101,118,101,114,115,101,32,111,102,0,114,101,99,105,112,114,111,99,97,108,32,111,102,0,101,110,100,32,111,102,32,116,101,120,116,0,97,110,100,32,114,101,115,112,101,99,116,105,118,101,108,121,0,102,101,0,50,110,100,32,115,117,109,116,105,32,112,108,97,99,101,0,104,101,120,32,100,105,103,105,116,32,66,0,110,116,104,32,114,111,111,116,32,111,102,0,102,101,39,101,0,115,112,97,99,101,32,97,115,112,101,99,116,115,0,100,105,118,105,100,101,100,32,98,121,0,111,118,101,114,32,97,110,100,32,111,117,116,0,101,110,100,32,109,111,100,97,108,32,115,101,108,98,114,105,0,102,105,0,51,114,100,32,115,117,109,116,105,32,112,108,97,99,101,0,115,117,109,116,105,32,112,108,97,99,101,32,63,0,99,114,101,97,116,101,100,32,98,121,0,104,111,115,112,105,116,97,108,105,116,121,0,115,101,108,98,114,105,32,116,111,32,109,111,100,97,108,0,102,114,97,99,116,105,111,110,32,115,108,97,115,104,0,102,111,0,52,116,104,32,115,117,109,116,105,32,112,108,97,99,101,0,101,110,100,32,99,111,109,112,111,115,105,116,101,32,108,101,114,102,117,0,105,116,45,54,0,105,116,45,55,0,105,116,45,56,0,105,116,45,57,0,102,111,39,117,0,105,116,45,49,48,0,102,117,0,53,116,104,32,115,117,109,116,105,32,112,108,97,99,101,0,114,101,118,101,114,115,101,32,80,111,108,105,115,104,0,105,110,100,105,99,97,116,111,114,32,115,99,111,112,101,0,101,97,115,121,0,102,117,39,111,0,101,110,100,32,105,110,100,105,99,97,116,111,114,32,115,99,111,112,101,0,102,117,39,117,0,117,110,115,112,101,99,105,102,32,111,112,101,114,97,116,111,114,0,102,121,0,102,0,102,111,114,101,32,111,114,0,104,101,120,32,100,105,103,105,116,32,67,0,119,105,116,104,32,97,99,116,105,118,101,32,97,103,101,110,116,0,116,111,32,111,98,115,101,114,118,101,114,0,117,112,112,101,114,45,99,97,115,101,32,115,104,105,102,116,0,104,97,117,116,101,117,114,0,105,110,99,108,117,115,105,118,101,32,105,110,116,101,114,118,97,108,0,97,98,111,118,101,0,102,111,114,101,32,97,110,100,0,101,120,112,111,110,101,110,116,105,97,108,32,110,111,116,97,116,105,111,110,0,110,117,108,108,32,111,112,101,114,97,116,111,114,0,103,101,39,101,0,117,110,115,112,101,99,105,102,32,101,109,111,116,105,111,110,0,102,111,114,101,32,99,111,110,110,32,63,0,71,114,101,101,107,32,115,104,105,102,116,0,101,110,100,32,114,101,108,97,116,105,118,101,32,112,104,114,97,115,101,0,103,105,0,99,111,110,110,101,99,116,105,118,101,32,109,101,100,105,97,108,0,98,114,105,100,105,32,111,114,0,98,114,105,100,105,32,97,110,100,0,98,114,105,100,105,32,99,111,110,110,32,63,0,98,114,105,100,105,32,105,102,102,0,98,114,105,100,105,32,119,104,101,116,104,101,114,0,102,111,114,101,32,105,102,102,0,112,114,111,45,115,117,109,116,105,32,97,115,115,105,103,110,0,103,111,39,97,0,114,101,99,101,110,116,32,98,114,105,100,105,0,103,111,39,101,0,112,101,110,117,108,116,105,109,97,116,101,32,98,114,105,100,105,0,103,111,39,105,0,108,97,115,116,32,98,114,105,100,105,0,103,111,39,111,0,102,117,116,117,114,101,32,98,114,105,100,105,0,103,111,39,117,0,101,97,114,108,105,101,114,32,98,114,105,100,105,0,102,111,114,101,32,119,104,101,116,104,101,114,0,102,111,114,101,32,116,97,110,114,117,32,111,114,0,102,111,114,101,32,116,97,110,114,117,32,97,110,100,0,102,111,114,101,32,116,97,110,114,117,32,99,111,110,110,32,63,0,102,111,114,101,32,116,97,110,114,117,32,105,102,102,0,102,111,114,101,32,116,97,110,114,117,32,119,104,101,116,104,101,114,0,103,121,0,103,0,116,97,110,114,117,32,111,114,0,109,111,100,97,108,32,99,111,110,118,101,114,115,105,111,110,0,104,101,120,32,100,105,103,105,116,32,68,0,98,114,105,100,105,32,97,102,102,105,114,109,101,114,0,116,104,101,114,101,102,111,114,101,32,114,101,115,117,108,116,0,98,121,32,114,117,108,101,0,73,32,99,111,110,99,108,117,100,101,0,116,97,110,114,117,32,97,110,100,0,116,114,117,116,104,32,97,98,115,116,114,97,99,116,0,115,99,97,108,97,114,32,97,102,102,105,114,109,101,114,0,114,111,103,101,114,0,116,97,110,114,117,32,99,111,110,110,32,63,0,72,101,98,114,101,119,32,115,104,105,102,116,0,116,114,117,116,104,0,115,117,109,116,105,32,99,111,110,110,32,63,0,105,110,32,97,100,100,105,116,105,111,110,0,117,112,32,116,111,32,108,105,109,105,116,0,97,112,112,114,111,120,105,109,97,116,101,108,121,0,117,110,100,101,114,32,100,105,114,101,99,116,105,111,110,32,111,102,0,98,97,115,101,100,32,111,110,0,116,97,110,114,117,32,105,102,102,0,105,110,32,97,32,109,97,115,115,32,119,105,116,104,0,106,111,39,97,0,109,101,116,97,108,105,110,103,117,105,115,116,105,99,32,121,101,115,0,117,110,105,111,110,0,106,111,39,105,0,97,114,114,97,121,0,65,114,97,98,105,99,32,115,104,105,102,116,0,105,110,32,99,111,109,109,111,110,32,119,105,116,104,0,116,97,110,114,117,32,119,104,101,116,104,101,114,0,73,32,115,116,97,116,101,0,118,97,103,117,101,32,99,111,110,110,101,99,116,105,118,101,0,97,116,116,101,110,116,105,111,110,0,99,101,114,116,97,105,110,116,121,0,106,117,39,117,0,110,117,109,98,101,114,32,98,97,115,101,0,106,121,0,106,0,112,114,111,112,101,114,116,121,32,97,98,115,116,114,97,99,116,0,99,104,97,114,97,99,116,101,114,105,122,105,110,103,0,105,110,100,105,114,101,99,116,32,113,117,101,115,116,105,111,110,0,103,111,110,101,32,116,111,32,98,121,0,105,110,110,97,116,101,108,121,32,99,97,112,97,98,108,101,32,111,102,0,114,101,112,114,101,115,101,110,116,101,100,32,98,121,0,105,109,97,103,105,110,97,114,121,32,105,0,73,32,107,110,111,119,32,99,117,108,116,117,114,97,108,108,121,0,115,116,97,114,116,32,103,114,111,117,112,105,110,103,0,101,110,100,32,97,98,115,116,114,97,99,116,105,111,110,0,114,101,108,97,116,105,118,105,122,101,100,32,105,116,0,101,110,100,32,103,114,111,117,112,105,110,103,0,101,120,99,108,117,115,105,118,101,32,105,110,116,101,114,118,97,108,0,112,108,101,97,115,101,32,114,101,112,101,97,116,0,114,101,112,101,97,116,105,110,103,0,107,105,0,116,101,110,115,101,32,100,101,102,97,117,108,116,0,116,101,120,116,117,97,108,32,99,111,110,102,117,115,105,111,110,0,116,104,97,110,107,115,0,97,115,32,97,32,114,101,108,97,116,105,111,110,32,111,102,0,110,117,109,98,101,114,32,99,111,109,109,97,0,98,101,99,97,117,115,101,32,111,102,32,114,101,97,115,111,110,0,107,111,0,105,109,112,101,114,97,116,105,118,101,0,98,111,117,110,100,101,100,32,98,121,0,105,116,45,49,0,105,116,45,50,0,105,116,45,51,0,105,116,45,52,0,105,116,45,53,0,107,117,0,101,110,100,32,115,117,109,116,105,0,105,110,116,101,114,115,101,99,116,105,111,110,0,101,110,100,32,109,101,120,32,102,111,114,101,116,104,111,117,103,104,116,0,104,111,119,101,118,101,114,0,101,110,100,32,114,101,108,97,116,105,118,101,32,99,108,97,117,115,101,0,105,110,32,99,117,108,116,117,114,101,0,107,121,0,107,0,108,97,0,116,104,97,116,32,110,97,109,101,100,0,116,104,101,32,109,97,115,115,32,111,102,32,110,97,109,101,100,0,112,117,110,99,116,117,97,116,105,111,110,32,109,97,114,107,0,112,114,111,98,97,98,105,108,105,116,121,0,116,104,101,32,114,101,102,101,114,101,110,116,32,111,102,0,116,104,101,32,115,101,116,32,111,102,32,110,97,109,101,100,0,116,104,101,32,110,111,110,45,76,111,106,98,97,110,32,110,97,109,101,100,0,113,117,97,110,116,105,102,121,105,110,103,0,108,101,0,116,104,101,32,100,101,115,99,114,105,98,101,100,0,116,104,101,32,109,97,115,115,32,100,101,115,99,114,105,98,101,100,0,105,110,32,99,97,116,101,103,111,114,121,0,116,104,101,32,115,116,101,114,101,111,116,121,112,105,99,97,108,0,116,104,101,32,115,101,116,32,100,101,115,99,114,105,98,101,100,0,97,103,103,114,101,115,115,105,118,101,0,101,110,100,32,101,114,114,111,114,32,113,117,111,116,101,0,108,105,0,116,104,101,32,110,117,109,98,101,114,0,99,108,101,97,114,108,121,0,112,114,101,99,101,100,101,100,32,98,121,0,101,120,112,101,114,105,101,110,99,101,32,97,98,115,116,114,97,99,116,0,111,109,105,116,116,101,100,32,116,101,120,116,0,101,110,100,32,113,117,111,116,101,0,108,111,0,116,104,101,32,114,101,97,108,108,121,32,105,115,0,116,104,101,32,109,97,115,115,32,114,101,97,108,108,121,32,105,115,0,108,111,39,97,0,76,111,106,98,97,110,32,115,104,105,102,116,0,116,104,101,32,116,121,112,105,99,97,108,0,116,104,101,32,115,101,116,32,114,101,97,108,108,121,32,105,115,0,101,110,100,32,109,101,120,32,115,117,109,116,105,0,101,114,114,111,114,32,113,117,111,116,101,0,108,117,0,113,117,111,116,101,0,116,104,101,32,105,110,100,105,118,105,100,117,97,108,115,32,111,102,0,116,104,101,32,115,121,109,98,111,108,32,102,111,114,0,116,104,101,32,115,101,116,32,99,111,109,112,111,115,101,100,32,111,102,0,116,104,101,32,109,97,115,115,32,99,111,109,112,111,115,101,100,32,111,102,0,108,117,39,117,0,101,110,100,32,115,117,109,116,105,32,113,117,97,108,105,102,105,101,114,115,0,108,121,0,108,0,109,97,0,115,117,109,116,105,32,63,0,115,101,110,116,101,110,99,101,32,111,114,100,105,110,97,108,0,101,120,99,101,101,100,101,100,32,98,121,0,119,101,32,119,105,116,104,32,121,111,117,0,109,97,116,101,114,105,97,108,32,111,98,106,101,99,116,0,105,110,32,114,101,102,101,114,101,110,99,101,32,102,114,97,109,101,0,111,112,101,114,97,110,100,32,116,111,32,111,112,101,114,97,116,111,114,0,112,111,115,105,116,105,118,101,32,110,117,109,98,101,114,0,115,117,109,116,105,32,116,111,32,115,101,108,98,114,105,0,99,97,114,100,105,110,97,108,32,115,101,108,98,114,105,0,117,110,100,101,114,99,117,116,32,98,121,0,119,105,116,104,32,110,97,109,101,0,108,101,115,115,32,116,104,97,110,0,116,104,101,32,109,101,120,0,101,110,100,32,115,117,109,116,105,32,116,111,32,115,101,108,98,114,105,0,119,101,44,32,110,111,116,32,121,111,117,0,115,101,108,102,45,105,110,116,114,111,100,117,99,116,105,111,110,0,99,101,110,116,101,114,45,114,97,110,103,101,0,109,101,32,97,110,100,32,121,111,117,0,100,105,116,116,111,0,109,111,0,98,114,105,100,105,32,63,0,111,114,100,105,110,97,108,32,115,101,108,98,114,105,0,116,111,111,32,102,101,119,0,109,111,39,101,0,115,117,109,116,105,32,116,111,32,111,112,101,114,97,110,100,0,115,112,97,99,101,32,109,111,116,105,111,110,0,115,101,99,116,105,111,110,32,111,114,100,105,110,97,108,0,99,111,109,112,108,101,116,105,118,101,0,53,0,102,111,114,32,101,120,97,109,112,108,101,0,112,111,105,110,116,45,101,118,101,110,116,32,97,98,115,116,114,97,99,116,0,98,101,99,97,117,115,101,32,111,102,32,109,111,116,105,118,101,0,111,118,101,114,0,101,120,101,109,112,108,105,102,105,101,100,32,98,121,0,109,121,0,109,0,98,114,105,100,105,32,110,101,103,97,116,111,114,0,110,101,103,97,116,101,32,108,97,115,116,32,119,111,114,100,0,114,101,102,101,114,101,110,99,101,32,112,111,105,110,116,0,99,97,110,99,101,108,32,115,104,105,102,116,115,0,115,99,97,108,97,114,32,99,111,110,116,114,97,114,121,0,109,101,116,97,108,105,110,103,117,105,115,116,105,99,32,110,111,116,0,116,121,112,105,99,97,108,108,121,0,115,101,108,98,114,105,32,116,111,32,111,112,101,114,97,116,111,114,0,110,101,0,105,110,99,105,100,101,110,116,97,108,32,112,104,114,97,115,101,0,99,117,114,114,101,110,116,32,98,114,105,100,105,0,110,101,39,97,0,110,101,120,116,32,116,111,0,119,105,116,104,105,110,0,102,97,99,116,111,114,105,97,108,0,115,111,117,116,104,32,111,102,0,97,109,111,117,110,116,32,97,98,115,116,114,97,99,116,0,98,101,108,111,119,0,115,101,108,98,114,105,32,116,111,32,111,112,101,114,97,110,100,0,98,101,99,97,117,115,101,32,111,102,32,108,111,103,105,99,0,110,101,119,32,116,111,112,105,99,0,110,101,103,97,116,105,118,101,32,110,117,109,98,101,114,0,105,110,99,105,100,101,110,116,97,108,32,99,108,97,117,115,101,0,110,111,39,97,0,110,101,120,116,32,111,117,116,101,114,32,98,114,105,100,105,0,115,99,97,108,97,114,32,109,105,100,112,111,105,110,116,32,110,111,116,0,111,108,100,32,116,111,112,105,99,0,110,111,39,111,0,116,121,112,105,99,97,108,32,118,97,108,117,101,0,110,111,39,117,0,105,110,99,105,100,101,110,116,97,108,32,105,100,101,110,116,105,116,121,0,101,118,101,110,116,32,97,98,115,116,114,97,99,116,0,111,112,101,114,97,116,111,114,32,116,111,32,115,101,108,98,114,105,0,112,114,111,109,105,115,101,0,115,116,97,114,116,32,116,101,114,109,115,101,116,0,99,97,110,32,98,117,116,32,104,97,115,32,110,111,116,0,110,117,39,117,0,101,110,100,32,116,101,114,109,115,101,116,0,110,121,0,49,0,113,117,101,115,116,105,111,110,32,102,111,108,108,111,119,115,0,105,110,32,97,100,100,105,116,105,111,110,32,116,111,0,106,117,115,116,105,99,101,0,114,97,116,105,111,0,116,114,97,110,115,102,105,120,105,110,103,0,104,97,118,105,110,103,32,99,111,109,112,111,110,101,110,116,0,112,101,0,114,101,115,116,114,105,99,116,105,118,101,32,112,104,114,97,115,101,0,101,109,111,116,105,111,110,32,63,0,115,116,97,114,116,32,102,105,103,117,114,97,116,105,118,101,0,112,101,39,101,0,116,101,114,109,115,101,116,32,99,111,110,110,32,109,97,114,107,0,73,32,111,112,105,110,101,0,102,111,114,101,32,109,101,120,32,111,112,101,114,97,116,111,114,0,112,108,101,97,115,101,0,100,101,99,105,109,97,108,32,112,111,105,110,116,0,109,97,116,114,105,120,32,111,102,32,114,111,119,115,0,100,105,103,105,116,32,115,101,112,97,114,97,116,111,114,0,116,105,109,101,115,0,117,115,101,100,32,98,121,0,99,114,111,115,115,32,112,114,111,100,117,99,116,0,112,111,0,105,115,32,115,112,101,99,105,102,105,99,32,116,111,0,114,101,115,116,114,105,99,116,105,118,101,32,99,108,97,117,115,101,0,101,110,100,32,102,105,103,117,114,97,116,105,118,101,0,119,104,105,99,104,32,98,101,108,111,110,103,115,32,116,111,0,105,110,32,116,104,101,32,115,101,113,117,101,110,99,101,0,117,110,105,113,117,101,108,121,0,114,101,115,116,114,105,99,116,105,118,101,32,105,100,101,110,116,105,116,121,0,98,101,102,111,114,101,0,112,108,101,97,115,101,100,32,98,121,0,98,121,32,112,114,111,99,101,115,115,0,99,97,110,32,97,110,100,32,104,97,115,0,97,110,116,105,99,105,112,97,116,105,118,101,0,112,114,111,99,101,115,115,32,97,98,115,116,114,97,99,116,0,112,121,0,112,0,114,97,0,114,101,99,101,110,116,32,115,117,109,116,105,0,119,105,116,104,32,115,117,112,101,114,108,97,116,105,118,101,0,101,110,111,117,103,104,0,112,101,114,116,97,105,110,101,100,32,116,111,32,98,121,0,114,101,112,101,97,116,105,110,103,32,100,101,99,105,109,97,108,0,102,114,111,109,32,115,111,117,114,99,101,0,112,114,111,45,97,115,115,105,103,110,32,117,112,100,97,116,101,0,99,104,105,101,102,108,121,0,50,0,104,101,120,32,100,105,103,105,116,32,69,0,116,114,97,110,115,112,111,115,101,0,115,112,105,114,105,116,117,97,108,0,114,101,97,100,121,32,116,111,32,114,101,99,101,105,118,101,0,97,100,106,97,99,101,110,116,32,116,111,0,111,114,100,105,110,97,108,32,116,101,110,115,101,0,114,105,0,108,97,115,116,32,115,117,109,116,105,0,98,101,99,97,117,115,101,32,111,102,32,99,97,117,115,101,0,114,101,108,101,97,115,101,32,111,102,32,101,109,111,116,105,111,110,0,101,120,112,101,114,105,101,110,99,101,100,32,98,121,0,105,110,116,101,103,114,97,108,0,111,110,32,116,104,101,32,114,105,103,104,116,32,111,102,0,101,97,99,104,0,113,117,97,110,116,105,102,105,101,100,32,116,101,110,115,101,0,115,111,99,105,97,108,0,114,111,39,101,0,109,101,110,116,97,108,0,101,109,111,116,105,111,110,97,108,0,112,104,121,115,105,99,97,108,0,115,101,120,117,97,108,0,114,117,0,101,97,114,108,105,101,114,32,115,117,109,116,105,0,73,32,112,111,115,116,117,108,97,116,101,0,119,101,97,107,32,101,109,111,116,105,111,110,0,99,111,110,116,105,110,117,111,117,115,108,121,0,67,121,114,105,108,108,105,99,32,115,104,105,102,116,0,115,117,114,114,111,117,110,100,105,110,103,0,114,121,0,114,0,115,97,0,101,114,97,115,101,32,117,116,116,101,114,97,110,99,101,0,115,116,114,111,110,103,32,101,109,111,116,105,111,110,0,114,101,113,117,105,114,105,110,103,0,101,100,105,116,111,114,105,97,108,32,105,110,115,101,114,116,105,111,110,0,112,114,101,99,105,115,101,108,121,32,115,112,101,97,107,105,110,103,0,109,97,116,114,105,120,32,111,102,32,99,111,108,117,109,110,115,0,100,101,114,105,118,97,116,105,118,101,0,115,105,109,112,108,121,32,115,112,101,97,107,105,110,103,0,50,110,100,32,99,111,110,118,101,114,115,105,111,110,0,100,105,115,99,117,114,115,105,118,101,32,98,114,105,100,105,0,115,101,108,102,45,115,117,102,102,105,99,105,101,110,99,121,0,115,101,39,101,0,99,104,97,114,97,99,116,101,114,32,99,111,100,101,0,115,101,108,102,45,111,114,105,101,110,116,101,100,0,115,101,39,111,0,73,32,107,110,111,119,32,105,110,116,101,114,110,97,108,108,121,0,101,110,100,32,100,105,115,99,117,114,115,105,118,101,0,115,105,0,101,114,97,115,101,32,119,111,114,100,0,115,105,109,105,108,97,114,108,121,0,112,111,114,116,105,111,110,32,115,101,108,98,114,105,0,115,105,103,109,97,32,115,117,109,109,97,116,105,111,110,0,99,111,110,99,101,112,116,32,97,98,115,116,114,97,99,116,0,97,105,100,101,100,32,98,121,0,57,0,114,101,99,105,112,114,111,99,97,108,32,115,117,109,116,105,0,97,108,109,111,115,116,32,97,108,108,0,109,111,115,116,0,109,97,110,121,0,115,101,118,101,114,97,108,0,102,101,119,0,115,117,0,101,114,97,115,101,32,100,105,115,99,111,117,114,115,101,0,73,32,103,101,110,101,114,97,108,105,122,101,0,97,116,32,109,111,115,116,0,112,108,117,115,0,97,116,32,108,101,97,115,116,0,117,110,115,112,101,99,105,102,32,97,98,115,116,114,97,99,116,0,115,121,0,115,0,116,104,97,116,32,116,104,101,114,101,0,105,110,32,102,111,114,109,0,115,104,105,102,116,32,110,101,120,116,32,108,101,114,102,117,0,105,110,116,101,114,114,117,112,116,105,111,110,0,104,97,98,105,116,117,97,108,108,121,0,98,121,32,109,101,116,104,111,100,0,98,121,32,116,104,101,32,119,97,121,0,109,97,107,105,110,103,32,97,32,116,97,110,114,117,0,51,114,100,32,99,111,110,118,101,114,115,105,111,110,0,99,111,109,112,111,115,105,116,101,32,108,101,114,102,117,0,116,111,32,116,104,101,32,112,111,119,101,114,0,116,101,39,101,0,98,111,114,100,101,114,105,110,103,0,101,120,112,111,110,101,110,116,105,97,108,32,101,0,101,110,100,32,109,101,120,32,99,111,110,118,101,114,116,101,114,115,0,116,104,105,115,32,104,101,114,101,0,98,101,104,105,110,100,0,73,32,104,101,97,114,0,115,117,103,103,101,115,116,101,100,32,98,121,0,109,101,120,32,112,114,101,99,101,100,101,110,99,101,0,97,115,115,111,99,105,97,116,101,100,32,119,105,116,104,32,116,105,109,101,0,116,111,0,115,116,97,114,116,32,112,97,114,101,110,116,104,101,115,105,115,0,101,110,100,32,112,97,114,101,110,116,104,101,115,105,115,0,108,111,119,101,114,45,99,97,115,101,32,115,104,105,102,116,0,112,111,108,97,114,32,111,112,112,111,115,105,116,101,0,101,100,105,116,111,114,105,97,108,32,117,110,113,117,111,116,101,0,116,111,39,111,0,97,119,97,121,32,102,114,111,109,32,112,111,105,110,116,0,105,110,32,98,114,105,101,102,0,116,104,97,116,32,121,111,110,100,101,114,0,116,104,101,32,98,114,105,100,105,32,105,109,112,108,105,101,100,32,98,121,0,115,116,97,114,116,32,116,101,120,116,32,115,99,111,112,101,0,97,115,115,111,99,105,97,116,101,100,32,119,105,116,104,32,115,105,116,101,0,110,117,108,108,32,111,112,101,114,97,110,100,0,101,110,100,32,116,101,120,116,32,115,99,111,112,101,0,116,121,0,116,104,101,114,101,32,97,116,0,104,101,120,32,100,105,103,105,116,32,70,0,101,110,100,32,115,105,109,112,108,101,32,98,114,105,100,105,0,118,97,39,97,0,97,100,100,105,116,105,118,101,32,105,110,118,101,114,115,101,0,118,97,39,101,0,115,99,97,108,101,32,115,101,108,98,114,105,0,105,110,32,111,116,104,101,114,32,119,111,114,100,115,0,118,97,39,111,0,117,110,100,101,114,32,99,111,110,100,105,116,105,111,110,115,0,98,101,110,101,102,105,116,105,110,103,32,102,114,111,109,0,52,116,104,32,99,111,110,118,101,114,115,105,111,110,0,108,101,102,116,32,98,114,97,99,107,101,116,0,115,109,97,108,108,32,115,112,97,99,101,32,105,110,116,101,114,118,97,108,0,119,104,111,108,101,32,115,112,97,99,101,32,105,110,116,101,114,118,97,108,0,118,101,39,105,0,116,105,110,121,32,115,112,97,99,101,32,105,110,116,101,114,118,97,108,0,118,101,39,111,0,114,105,103,104,116,32,98,114,97,99,107,101,116,0,98,105,103,32,115,112,97,99,101,32,105,110,116,101,114,118,97,108,0,104,101,114,101,32,97,116,0,50,45,115,112,97,99,101,32,105,110,116,101,114,118,97,108,0,52,45,115,112,97,99,101,32,105,110,116,101,114,118,97,108,0,49,45,115,112,97,99,101,32,105,110,116,101,114,118,97,108,0,119,105,108,99,111,0,51,45,115,112,97,99,101,32,105,110,116,101,114,118,97,108,0,52,0,100,101,115,99,114,105,112,116,105,118,101,32,99,108,97,117,115,101,0,120,49,32,105,116,0,118,111,39,101,0,120,50,32,105,116,0,118,111,39,105,0,120,51,32,105,116,0,118,111,39,111,0,120,52,32,105,116,0,118,111,39,117,0,120,53,32,105,116,0,121,111,110,100,101,114,32,97,116,0,118,117,39,97,0,119,101,115,116,32,111,102,0,118,105,114,116,117,101,0,116,104,101,32,115,101,113,117,101,110,99,101,32,111,102,0,108,111,110,103,32,115,99,111,112,101,32,114,101,108,97,116,105,118,101,0,118,117,39,117,0,109,105,110,117,115,0,118,121,0,54,0,105,110,102,114,97,102,101,99,116,105,118,101,0,53,116,104,32,99,111,110,118,101,114,115,105,111,110,0,120,105,0,115,117,98,115,99,114,105,112,116,0,120,111,0,110,117,109,98,101,114,32,63,0,120,117,0,116,114,117,101,45,102,97,108,115,101,32,63,0,120,121,0,120,0,122,97,0,109,101,100,105,117,109,32,116,105,109,101,0,115,101,108,101,99,116,32,97,108,112,104,97,98,101,116,0,97,112,112,114,111,118,101,100,32,98,121,0,73,32,111,98,115,101,114,118,101,0,122,97,39,101,0,110,111,110,99,101,45,119,111,114,100,32,110,101,120,116,0,115,116,97,116,101,32,97,98,115,116,114,97,99,116,0,115,117,112,101,114,102,101,99,116,105,118,101,0,103,114,101,97,116,101,114,32,116,104,97,110,0,55,0,108,117,106,118,111,32,103,108,117,101,0,109,101,100,105,117,109,32,116,105,109,101,32,105,110,116,101,114,118,97,108,0,119,104,111,108,101,32,116,105,109,101,32,105,110,116,101,114,118,97,108,0,122,101,39,105,0,115,104,111,114,116,32,116,105,109,101,32,105,110,116,101,114,118,97,108,0,111,117,116,119,97,114,100,0,122,101,39,117,0,108,111,110,103,32,116,105,109,101,32,105,110,116,101,114,118,97,108,0,122,105,0,115,104,111,114,116,32,116,105,109,101,0,114,101,108,32,99,108,97,117,115,101,32,106,111,105,110,101,114,0,110,111,110,101,120,105,115,116,101,110,116,32,105,116,0,122,111,0,49,45,119,111,114,100,32,113,117,111,116,101,0,122,111,105,0,110,111,110,45,76,111,106,98,97,110,32,113,117,111,116,101,0,116,97,110,103,101,110,116,105,97,108,32,116,111,0,122,111,39,101,0,117,110,115,112,101,99,105,102,32,105,116,0,105,110,119,97,114,100,0,122,111,39,111,0,104,117,109,111,114,111,117,115,108,121,0,122,111,39,117,0,101,110,100,32,112,114,101,110,101,120,0,122,117,0,108,111,110,103,32,116,105,109,101,0,122,117,39,97,0,111,110,32,116,104,101,32,108,101,102,116,32,111,102,0,119,105,116,104,32,97,99,116,111,114,0,116,121,112,105,99,97,108,32,105,116,0,97,99,116,105,118,105,116,121,32,97,98,115,116,114,97,99,116,0,122,117,39,117,0,111,110,32,116,104,101,32,111,110,101,32,104,97,110,100,0,122,121,0,122,0,65,0,66,65,73,0,66,65,104,69,0,66,69,0,66,69,73,0,66,69,104,79,0,66,73,104,73,0,66,79,0,66,79,73,0,66,85,0,66,89,49,0,66,89,50,0,67,65,73,0,67,65,104,65,0,67,69,73,0,67,79,0,67,79,73,0,67,85,0,67,85,104,69,0,68,65,104,79,0,68,79,73,0,68,79,104,85,0,70,65,0,70,65,104,65,49,0,70,65,104,65,50,0,70,65,104,65,51,0,70,65,104,65,52,0,70,65,104,79,0,70,69,104,69,0,70,69,104,85,0,70,73,104,79,0,70,79,73,0,70,85,104,65,0,70,85,104,69,0,70,85,104,79,0,71,65,0,71,65,104,79,0,71,69,104,85,0,71,73,0,71,73,104,65,0,71,79,73,0,71,79,104,65,0,71,85,104,65,0,73,0,74,65,0,74,65,73,0,74,79,73,0,74,79,104,73,0,75,69,0,75,69,73,0,75,69,104,69,0,75,73,0,75,79,104,65,49,0,75,79,104,65,50,0,75,79,104,65,51,0,75,79,104,65,52,0,75,79,104,65,53,0,75,79,104,65,54,0,75,79,104,65,55,0,75,85,0,75,85,104,69,0,75,85,104,79,0,76,65,0,76,65,85,0,76,65,104,69,0,76,69,0,76,69,104,85,0,76,73,0,76,73,104,85,0,76,79,104,79,0,76,79,104,85,0,76,85,0,76,85,104,85,0,77,65,73,0,77,65,104,79,0,77,69,0,77,69,104,85,0,77,79,73,0,77,79,104,69,0,77,79,104,73,0,78,65,0,78,65,73,0,78,65,104,69,0,78,65,104,85,0,78,73,104,69,0,78,73,104,79,0,78,79,73,0,78,85,0,78,85,49,0,78,85,104,65,0,78,85,104,73,0,78,85,104,85,0,80,65,49,0,80,65,50,0,80,65,51,0,80,65,52,0,80,65,53,0,80,69,104,65,0,80,69,104,79,0,80,79,104,65,0,80,85,0,82,65,104,79,0,82,79,73,0,83,65,0,83,69,0,83,69,73,0,83,69,104,85,0,83,73,0,83,79,73,0,83,85,0,84,65,104,69,0,84,69,73,0,84,69,104,85,0,84,79,0,84,79,73,0,84,85,104,69,0,84,85,104,85,0,85,73,49,0,85,73,50,0,85,73,51,0,85,73,51,97,0,85,73,51,98,0,85,73,52,0,85,73,53,0,85,73,54,0,85,73,55,0,86,65,0,86,65,85,0,86,69,73,0,86,69,104,65,0,86,69,104,79,0,86,73,104,65,0,86,85,104,79,0,86,85,104,85,48,0,86,85,104,85,49,0,86,85,104,85,50,0,86,85,104,85,51,0,86,85,104,85,52,0,88,73,0,89,0,90,65,104,79,0,90,69,73,0,90,69,104,65,0,90,73,0,90,73,104,69,0,90,79,0,90,79,73,0,90,79,104,85,0,66,73,104,69,0,67,69,104,69,0,75,79,104,65,56,0,80,69,104,69,0,80,82,73,86,65,84,69,95,78,85,77,66,69,82,95,77,65,73,0,80,82,73,86,65,84,69,95,78,85,77,66,69,82,95,82,79,73,0,80,82,73,86,65,84,69,95,78,85,77,66,69,82,95,77,79,73,0,80,82,73,86,65,84,69,95,78,65,95,75,85,0,80,82,73,86,65,84,69,95,78,65,104,69,95,66,79,0,80,82,73,86,65,84,69,95,71,73,72,69,75,95,66,79,0,80,82,73,86,65,84,69,95,71,73,72,69,75,95,75,69,0,121,0,99,97,116,101,103,46,99,0,108,111,111,107,97,104,101,97,100,0,99,109,116,101,115,116,40,120,44,32,71,73,104,65,41,0,115,116,114,97,100,100,108,101,95,103,105,104,101,107,0,80,82,73,86,65,84,69,95,74,79,73,75,95,66,79,0,80,82,73,86,65,84,69,95,74,79,73,75,95,75,69,0,80,82,73,86,65,84,69,95,69,75,95,66,79,0,80,82,73,86,65,84,69,95,69,75,95,75,69,0,99,109,116,101,115,116,40,120,44,32,65,41,0,115,116,114,97,100,100,108,101,95,101,107,0,80,82,73,86,65,84,69,95,74,69,75,95,66,79,0,80,82,73,86,65,84,69,95,74,69,75,95,75,69,0,80,82,73,86,65,84,69,95,73,95,74,69,75,74,79,73,75,0,80,82,73,86,65,84,69,95,73,95,66,79,0,80,82,73,86,65,84,69,95,83,84,65,82,84,95,71,69,75,0,122,32,33,61,32,104,101,97,100,0,99,97,116,101,103,111,114,105,122,101,95,103,101,107,0,120,32,33,61,32,104,101,97,100,0,98,97,99,107,117,112,95,111,118,101,114,95,106,101,107,95,106,111,105,107,0,80,82,73,86,65,84,69,95,83,84,65,82,84,95,74,79,73,75,0,80,82,73,86,65,84,69,95,69,78,68,95,74,79,73,75,0,80,82,73,86,65,84,69,95,83,84,65,82,84,95,71,85,72,69,75,0,80,82,73,86,65,84,69,95,83,84,65,82,84,95,69,75,0,80,82,73,86,65,84,69,95,83,84,65,82,84,95,71,73,72,69,75,0,80,82,73,86,65,84,69,95,83,84,65,82,84,95,74,69,75,0,80,82,73,86,65,84,69,95,69,78,68,95,74,69,75,0,80,82,73,86,65,84,69,95,83,84,65,82,84,95,84,69,78,83,69,0,80,82,73,86,65,84,69,95,69,78,68,95,84,69,78,83,69,0,103,105,107,32,124,124,32,103,105,0,99,111,110,110,101,99,116,46,99,0,112,114,111,99,101,115,115,95,103,101,107,0,103,97,0,103,101,0,103,111,0,103,117,0,103,101,39,105,0,112,114,111,99,101,115,115,95,102,111,114,101,116,104,111,117,103,104,116,0,70,70,70,70,0,70,70,70,84,0,70,70,84,70,0,70,70,84,84,0,70,84,70,70,0,70,84,70,84,0,70,84,84,70,0,70,84,84,84,0,84,70,70,70,0,84,70,70,84,0,84,70,84,70,0,84,70,84,84,0,84,84,70,70,0,84,84,70,84,0,84,84,84,70,0,84,84,84,84,0,81,81,81,81,0,102,117,110,99,32,33,61,32,84,82,95,79,84,72,69,82,0,103,101,110,101,114,97,116,101,95,116,114,117,116,104,95,105,110,100,101,120,0,109,105,100,95,103,105,107,0,112,114,111,99,101,115,115,95,115,116,97,103,95,103,105,107,0,112,114,111,99,101,115,115,95,106,111,105,107,95,103,105,0,106,111,105,107,0,107,101,121,0,112,114,111,99,101,115,115,95,103,117,104,101,107,0,103,117,39,117,0,112,114,111,99,101,115,115,95,106,101,107,0,112,114,111,99,101,115,115,95,101,107,0,97,0,101,0,111,0,117,0,106,105,0,112,114,111,99,101,115,115,95,103,105,104,101,107,0,103,105,39,105,0,85,110,109,97,116,99,104,101,100,32,83,73,32,97,116,32,115,116,97,114,116,32,111,102,32,105,110,112,117,116,44,32,108,105,110,101,32,37,100,32,99,111,108,117,109,110,32,37,100,10,0,85,110,114,101,99,111,103,110,105,122,101,100,32,116,111,107,101,110,32,116,121,112,101,32,37,100,32,98,101,102,111,114,101,32,83,73,10,0,48,0,101,114,97,115,117,114,101,46,99,0,104,97,110,100,108,101,95,115,105,0,66,121,116,101,115,32,105,110,32,117,115,101,32,97,116,32,101,110,100,32,32,58,32,37,56,108,117,10,77,97,120,105,109,117,109,32,98,121,116,101,115,32,105,110,32,117,115,101,32,58,32,37,56,108,117,10,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,4,1,1,1,5,1,1,1,1,1,6,1,1,1,1,1,7,1,1,1,2,1,1,1,1,1,1,1,3,1,1,1,4,1,1,1,5,1,1,1,1,1,6,1,1,1,1,1,7,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,31,31,31,31,31,31,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,1,86,86,86,1,86,86,0,1,86,86,86,86,85,1,86,0,84,86,86,1,86,0,86,35,86,0,0,0,2,0,0,1,86,86,86,1,86,86,0,1,86,86,86,86,85,1,86,0,84,86,86,1,86,0,86,35,86,0,0,0,2,0,0,1,156,156,154,1,156,154,0,1,154,156,153,155,155,1,156,0,153,156,156,1,154,0,156,35,154,0,0,0,2,0,0,1,156,156,156,1,152,156,0,1,156,152,153,153,153,1,152,0,153,156,152,1,156,0,156,35,156,0,0,0,2,0,0,1,154,156,156,1,156,154,0,1,152,156,155,155,155,1,156,0,153,156,156,1,154,0,156,35,152,0,0,0,2,0,0,1,86,86,86,1,86,86,0,1,86,86,86,86,85,1,86,0,84,86,86,1,86,0,86,35,86,0,0,0,2,0,0,1,156,154,156,1,156,156,0,1,156,154,153,155,155,1,154,0,153,154,154,1,156,0,154,35,156,0,0,0,2,0,0,1,154,156,154,1,156,156,0,1,154,156,153,155,155,1,156,0,153,156,156,1,154,0,156,35,154,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,86,86,86,1,86,86,0,1,86,86,86,86,85,1,86,0,84,86,86,1,86,0,86,35,86,0,0,0,2,0,0,1,152,156,152,1,156,152,0,1,156,156,155,153,155,1,156,0,155,156,156,1,152,0,156,35,156,0,0,0,2,0,0,1,156,154,156,1,154,156,0,1,156,156,153,155,155,1,154,0,153,154,154,1,156,0,156,35,156,0,0,0,2,0,0,1,154,154,154,1,154,154,0,1,154,154,156,155,155,1,154,0,155,154,154,1,154,0,154,35,154,0,0,0,2,0,0,1,154,154,154,1,154,154,0,1,154,154,153,156,155,1,154,0,153,154,154,1,154,0,154,35,156,0,0,0,2,0,0,1,154,154,154,1,154,154,0,1,154,154,155,155,156,1,154,0,151,154,154,1,154,0,154,35,154,0,0,0,2,0,0,1,86,86,86,1,86,86,0,1,86,86,86,86,85,1,86,0,84,86,86,1,86,0,86,35,86,0,0,0,2,0,0,1,156,154,156,1,154,156,0,1,156,154,153,155,155,1,156,0,153,154,154,1,156,0,154,35,156,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,154,154,154,1,154,154,0,1,154,154,155,155,155,1,154,0,156,154,154,1,154,0,154,35,154,0,0,0,2,0,0,1,156,156,156,1,152,156,0,1,156,152,153,153,153,1,152,0,153,156,152,1,156,0,154,35,156,0,0,0,2,0,0,1,156,152,156,1,154,156,0,1,156,154,155,155,155,1,154,0,153], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+71682);
/* memory initializer */ allocate([152,156,1,156,0,154,35,156,0,0,0,2,0,0,1,86,86,86,1,86,86,0,1,86,86,86,86,85,1,86,0,84,86,86,1,86,0,86,35,86,0,0,0,2,0,0,1,154,156,154,1,156,154,0,1,154,156,153,155,155,1,156,0,153,156,156,1,156,0,156,35,154,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,156,156,156,1,154,156,0,1,156,156,153,155,155,1,154,0,153,154,154,1,156,0,156,35,156,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,152,156,152,1,156,152,0,1,156,156,155,153,155,1,156,0,155,156,156,1,152,0,156,35,156,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,156,156,154,1,156,154,0,1,154,156,153,155,155,1,156,0,153,156,156,1,154,0,156,35,154,0,0,0,2,0,0,1,156,156,156,1,152,156,0,1,156,152,153,153,153,1,152,0,153,156,152,1,156,0,156,35,156,0,0,0,2,0,0,1,154,156,156,1,156,154,0,1,159,156,155,155,155,1,156,0,153,156,156,1,154,0,156,35,159,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,156,154,156,1,156,156,0,1,156,154,153,155,155,1,154,0,153,154,154,1,156,0,154,35,156,0,0,0,2,0,0,1,154,156,154,1,156,156,0,1,154,156,153,155,155,1,156,0,153,156,156,1,154,0,156,35,154,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,152,156,152,1,156,152,0,1,156,156,155,153,155,1,156,0,155,156,156,1,152,0,156,35,156,0,0,0,2,0,0,1,156,154,156,1,154,156,0,1,156,156,153,155,155,1,154,0,153,154,154,1,156,0,156,35,156,0,0,0,2,0,0,1,154,154,154,1,154,154,0,1,154,154,156,155,155,1,154,0,158,154,154,1,154,0,154,35,154,0,0,0,2,0,0,1,154,154,154,1,154,154,0,1,154,154,153,156,155,1,154,0,153,154,154,1,154,0,154,35,156,0,0,0,2,0,0,1,154,154,154,1,154,154,0,1,154,154,155,155,156,1,154,0,155,154,154,1,154,0,154,35,154,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,156,154,156,1,154,156,0,1,156,154,153,155,155,1,156,0,153,154,154,1,156,0,154,35,156,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,157,157,157,1,157,157,0,1,157,157,158,158,158,1,157,0,156,157,157,1,157,0,157,35,157,0,0,0,2,0,0,1,156,156,156,1,152,156,0,1,156,152,153,153,153,1,152,0,153,156,152,1,156,0,154,35,156,0,0,0,2,0,0,1,156,159,156,1,154,156,0,1,156,154,155,155,155,1,154,0,153,159,156,1,156,0,154,35,156,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,154,156,154,1,156,154,0,1,154,156,153,155,155,1,156,0,153,156,156,1,156,0,156,35,154,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,156,156,156,1,154,156,0,1,156,156,153,155,155,1,154,0,153,154,154,1,156,0,156,35,156,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,152,156,152,1,156,152,0,1,156,156,155,153,155,1,156,0,155,156,156,1,152,0,156,35,156,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,156,156,154,1,156,154,0,1,154,156,153,155,155,1,156,0,153,156,156,1,154,0,156,35,154,0,0,0,2,0,0,1,156,156,156,1,152,156,0,1,156,152,153,153,153,1,152,0,153,156,152,1,156,0,156,35,156,0,0,0,2,0,0,1,154,156,156,1,156,154,0,1,152,156,155,155,155,1,156,0,153,156,156,1,154,0,156,35,152,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,156,154,156,1,156,156,0,1,156,154,153,155,155,1,154,0,153,154,154,1,156,0,154,35,156,0,0,0,2,0,0,1,154,156,154,1,156,156,0,1,154,156,153,155,155,1,156,0,153,156,156,1,154,0,156,35,154,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,152,156,152,1,156,152,0,1,156,156,155,153,155,1,156,0,155,156,156,1,152,0,156,35,156,0,0,0,2,0,0,1,156,154,156,1,154,156,0,1,156,156,153,155,155,1,154,0,153,154,154,1,156,0,156,35,156,0,0,0,2,0,0,1,154,154,154,1,154,154,0,1,154,154,156,155,158,1,154,0,155,154,154,1,154,0,154,35,154,0,0,0,2,0,0,1,154,154,154,1,154,154,0,1,154,154,153,156,155,1,154,0,153,154,154,1,154,0,154,35,156,0,0,0,2,0,0,1,157,157,157,1,157,157,0,1,157,157,158,158,156,1,157,0,158,157,157,1,157,0,157,35,157,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,156,154,156,1,154,156,0,1,156,154,153,155,155,1,156,0,153,154,154,1,156,0,154,35,156,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,154,154,154,1,154,154,0,1,154,154,155,155,155,1,154,0,156,154,154,1,154,0,154,35,154,0,0,0,2,0,0,1,156,156,156,1,152,156,0,1,156,152,153,153,153,1,152,0,153,156,152,1,156,0,154,35,156,0,0,0,2,0,0,1,156,152,156,1,154,156,0,1,156,154,155,155,155,1,154,0,153,152,156,1,156,0,154,35,156,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,154,156,154,1,156,154,0,1,154,156,153,155,155,1,156,0,153,156,156,1,156,0,156,35,154,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,156,156,156,1,154,156,0,1,156,156,153,155,155,1,154,0,153,154,154,1,156,0,156,35,156,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,152,156,152,1,156,152,0,1,156,156,155,153,155,1,156,0,155,156,156,1,152,0,156,35,156,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,156,156,154,1,156,154,0,1,154,156,153,155,155,1,156,0,153,156,156,1,154,0,156,35,154,0,0,0,2,0,0,1,156,156,156,1,152,156,0,1,156,152,153,153,153,1,152,0,153,156,152,1,156,0,156,35,156,0,0,0,2,0,0,1,154,156,156,1,156,154,0,1,152,156,155,155,155,1,156,0,153,156,156,1,154,0,156,35,152,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,156,154,156,1,156,156,0,1,156,154,153,155,155,1,154,0,153,154,154,1,156,0,154,35,156,0,0,0,2,0,0,1,154,156,154,1,156,156,0,1,154,156,153,155,155,1,156,0,153,156,156,1,154,0,156,35,154,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,152,156,152,1,156,152,0,1,156,156,155,153,155,1,156,0,155,156,156,1,152,0,156,35,156,0,0,0,2,0,0,1,156,154,156,1,154,156,0,1,156,156,153,155,155,1,154,0,153,154,154,1,156,0,156,35,156,0,0,0,2,0,0,1,154,154,154,1,154,154,0,1,154,154,156,155,155,1,154,0,155,154,154,1,154,0,154,35,154,0,0,0,2,0,0,1,154,154,154,1,154,154,0,1,154,154,153,156,155,1,154,0,153,154,154,1,154,0,154,35,156,0,0,0,2,0,0,1,154,154,154,1,154,154,0,1,154,154,155,155,156,1,154,0,158,154,154,1,154,0,154,35,154,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,156,154,156,1,154,156,0,1,156,154,153,155,155,1,156,0,153,154,154,1,156,0,154,35,156,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,157,157,157,1,157,157,0,1,157,157,158,158,158,1,157,0,156,157,157,1,157,0,157,35,157,0,0,0,2,0,0,1,156,156,156,1,152,156,0,1,156,152,153,153,153,1,152,0,153,156,152,1,156,0,154,35,156,0,0,0,2,0,0,1,156,152,156,1,154,156,0,1,156,154,155,155,155,1,154,0,153,152,156,1,156,0,154,35,156,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,154,156,154,1,156,154,0,1,154,156,153,155,155,1,156,0,153,156,156,1,156,0,156,35,154,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,156,156,156,1,154,156,0,1,156,156,153,155,155,1,154,0,153,154,154,1,156,0,156,35,156,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,152,156,152,1,156,152,0,1,156,156,155,153,155,1,156,0,155,156,156,1,152,0,156,35,156,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,35,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,18,18,16,18,16,0,0,0,18,18,16,18,18,0,0,19,17,17,17,17,17,0,0,0,18,18,16,18,18,0,0,19,17,17,17,17,17,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,0,0,20,0,0,0,0,0,0,0,0,18,18,16,18,16,0,0,0,18,18,16,18,18,0,0,19,17,17,17,17,17,0,0,0,18,18,16,18,18,0,0,19,17,17,17,17,17,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,0,0,20,0,0,0,0,0,0,0,0,18,18,16,18,16,0,0,0,18,18,16,18,18,0,0,19,17,17,17,17,17,0,0,0,18,18,16,18,18,0,0,19,17,17,17,17,17,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,18,18,16,18,16,0,0,0,18,18,16,18,18,0,0,19,17,17,17,17,17,0,0,0,18,18,16,18,18,0,0,19,17,17,17,17,17,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,18,18,16,18,16,0,0,0,18,18,16,18,18,0,0,19,17,17,17,17,17,0,0,0,18,18,16,18,18,0,0,19,17,17,17,17,17,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,18,18,16,18,16,0,0,0,18,18,16,18,18,0,0,19,17,17,17,17,17,0,0,0,18,18,16,18,18,0,0,19,17,17,17,17,17,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,18,18,16,18,16,0,0,0,18,18,16,18,18,0,0,19,17,17,17,17,17,0,0,0,18,18,16,18,18,0,0,19,17,17,17,17,17,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,18,18,16,18,16,0,0,0,18,18,16,18,18,0,0,19,17,17,17,17,17,0,0,0,18,18,16,18,18,0,0,19,17,17,17,17,17,0,0,3,3,3,0,3,3,0,0,3,3,3,3,1,0,3,0,2,3,3,0,3,0,3,0,3,0,0,0,0,0,1,3,4,5,6,2,4,5,6,16,17,18,19,2,4,5,6,20,1,3,7,8,9,10,11,13,14,8,9,1,3,1,3,7,8,9,10,11,13,14,8,9,2,4,5,6,16,17,18,19,2,4,5,6,16,17,18,19,4,5,6,2,4,5,6,16,17,18,19,3,1,3,7,8,9,10,11,13,14,20,2,4,5,6,16,17,18,19,2,7,8,9,10,11,12,13,14,15,19,20,1,8,9,1,8,9,1,8,9,1,8,9,1,3,7,8,9,10,11,13,14,1,8,10,13,1,8,10,13,1,8,9,10,13,1,8,9,1,3,7,8,9,10,11,13,14,1,1,3,2,16,17,18,4,5,6,1,3,3,3,8,9,1,8,9,10,13,1,3,1,2,3,10,12,15,19,20,1,3,1,3,7,8,9,10,11,13,14,8,9,2,4,5,6,16,4,5,6,3,3,15,2,4,5,6,16,1,2,4,5,6,16,2,4,5,6,16,17,18,19,1,9,1,9,2,4,5,6,16,17,18,19,1,8,9,10,13,1,8,9,1,8,9,10,13,4,5,6,1,7,9,11,14,1,7,9,11,14,2,4,5,6,16,2,4,5,6,16,17,18,19,1,7,9,11,14,1,8,9,1,3,2,4,5,6,16,15,8,9,10,12,1,3,7,8,9,10,11,13,14,1,3,7,8,9,10,11,13,14,1,8,9,8,10,13,14,1,8,9,13,14,1,8,9,1,8,9,1,3,7,8,9,10,11,13,14,7,8,9,8,9,1,3,7,8,9,10,11,13,14,1,7,8,9,10,13,1,8,9,10,13,1,3,3,7,8,9,10,11,4,5,6,4,5,6,1,3,7,8,9,10,11,13,14,1,3,1,3,7,8,9,10,11,13,14,2,4,5,6,16,17,18,19,4,5,6,2,4,5,6,16,9,1,1,3,1,3,7,8,9,10,11,13,14,2,4,5,6,16,2,4,5,6,16,1,8,9,1,8,9,1,3,1,3,7,8,9,10,11,4,5,6,4,5,6,2,4,5,6,16,1,8,9,1,8,9,1,7,8,9,10,11,3,15,1,7,8,9,10,11,2,4,5,6,16,17,18,19,7,8,9,10,11,12,13,14,15,1,8,9,13,14,1,8,9,10,13,1,8,9,13,14,1,3,7,8,9,10,11,13,14,8,10,13,14,4,5,6,16,1,7,9,11,14,1,8,9,13,14,1,8,9,10,13,1,7,9,11,14,8,10,13,2,4,5,6,16,17,18,19,1,7,9,11,14,1,8,9,13,14,1,8,9,1,8,9,1,8,9,1,8,9,1,8,9,1,8,9,1,8,10,13,1,1,1,1,8,9,1,8,9,10,13,1,8,9,1,8,9,10,13,1,8,9,1,8,9,10,13,1,8,9,1,2,3,10,12,15,19,20,1,3,8,9,4,5,6,16,1,3,8,9,2,4,5,6,16,7,8,9,10,11,12,13,14,15,1,3,7,8,9,10,11,13,14,1,8,10,13,14,1,8,10,13,14,1,3,7,8,9,10,11,13,14,1,3,8,9,1,3,1,3,8,9,10,13,4,5,6,8,10,13,8,10,13,14,2,4,5,6,16,3,3,8,10,13,8,10,13,3,8,10,13,2,4,5,6,16,1,3,8,9,1,3,1,8,9,1,8,9,10,13,14,1,8,9,1,3,8,9,1,3,8,9,10,13,1,3,8,9,10,13,2,4,5,6,16,2,4,5,6,16,1,1,2,4,5,6,16,1,3,1,3,7,8,9,10,11,13,14,2,4,5,6,16,2,4,5,6,16,1,8,9,1,8,9,15,1,8,9,15,1,3,7,8,9,10,11,13,14,8,10,13,2,4,5,6,16,2,4,5,6,16,17,18,19,8,10,13,8,10,13,1,3,7,8,9,10,11,13,14,2,4,5,6,16,2,4,5,6,16,1,3,1,3,7,8,9,10,11,13,14,4,5,6,4,5,6,2,4,5,6,16,2,4,5,6,16,1,8,9,10,13,1,8,9,2,4,5,6,16,1,7,9,11,14,1,7,9,11,14,1,8,9,1,8,9,10,13,1,8,9,10,13,1,8,9,4,5,6,2,4,5,6,16,1,8,9,10,13,1,8,9,2,4,5,6,16,1,7,9,11,14,2,4,5,6,16,15,7,8,9,10,11,12,13,14,15,7,8,9,10,11,14,4,5,6,2,4,5,6,16,1,3,1,3,7,8,9,10,11,13,14,4,5,6,1,8,9,1,8,9,15,2,4,5,6,16,8,10,13,1,8,10,13,1,8,10,13,1,3,7,8,9,10,11,13,14,8,10,13,2,4,5,6,16,1,7,9,11,14,1,7,9,11,14,2,4,5,6,16,7,8,9,10,11,12,13,14,15,1,1,8,9,10,13,1,3,3,7,8,9,10,11,2,4,5,6,16,4,5,6,2,4,5,6,16,1,8,10,13,1,8,10,13,2,4,5,6,16,1,7,9,11,14,2,4,5,6,16,1,1,3,1,3,7,8,9,10,11,13,14,4,5,6,2,4,5,6,16,2,4,5,6,16,1,3,3,7,8,9,10,11,4,5,6,1,2,3,10,12,15,19,20,1,7,9,11,13,14,1,7,8,9,11,14,1,8,9,13,14,1,8,9,10,13,1,8,9,10,13,1,2,4,5,6,16,17,18,19,8,10,13,8,10,13,1,3,1,3,7,8,9,10,11,13,14,2,4,5,6,16,1,3,1,7,9,11,14,1,3,8,9,1,3,8,9,1,3,8,9,1,3,8,9,1,7,8,9,10,11,1,7,8,9,11,14,1,3,8,9,1,3,8,9,1,3,8,9,1,3,8,9,1,3,8,9,10,13,1,8,9,10,13,1,3,1,3,8,9,10,13,4,5,6,1,3,7,8,9,10,11,2,4,5,6,16,2,4,5,6,16,1,3,7,8,9,10,11,13,14,2,4,5,6,16,2,4,5,6,16,1,8,9,1,8,9,15,1,8,9,15,1,3,7,8,9,10,11,13,14,13,14,13,14,1,8,9,7,9,11,14,4,5,6,1,2,3,10,12,15,19,20,1,3,7,8,9,10,11,13,14,8,10,13,14,8,10,13,14,1,8,9,10,13,2,4,5,6,16,1,1,3,1,3,7,8,9,10,11,13,14,4,5,6,4,5,6,2,4,5,6,16,17,18,19,8,10,13,8,10,13,1,3,1,3,7,9,11,14,4,5,6,1,8,10,13,1,8,9,1,8,9,15,1,3,7,8,9,10,11,13,14,1,7,8,9,11,14,1,8,9,10,13,1,3,7,8,9,10,11,13,14,1,3,7,8,9,10,11,4,5,6,4,5,6,1,3,1,3,7,8,9,10,11,13,14,4,5,6,2,4,5,6,16,7,8,9,10,11,12,13,14,15,1,3,8,9,1,3,8,9,1,3,8,9,1,3,4,5,6,1,3,1,3,8,9,4,5,6,15,1,8,9,13,14,1,8,9,13,14,1,3,7,8,9,10,11,13,14,8,10,13,14,8,10,13,1,8,9,1,8,9,1,8,9,10,13,2,4,5,6,16,1,3,1,7,9,11,14,1,3,8,9,10,13,1,8,10,13,4,5,6,16,1,8,9,4,5,6,16,4,5,6,16,1,8,9,10,13,2,4,5,6,16,1,8,10,13,1,8,10,13,2,4,5,6,16,1,7,9,11,14,2,4,5,6,16,1,2,4,5,6,16,1,1,8,10,13,4,5,6,3,8,10,13,1,3,8,9,1,3,8,9,1,8,9,10,13,1,3,8,9,10,13,1,3,8,9,1,3,8,9,1,8,9,1,13,14,1,1,13,14,13,14,1,3,8,9,13,14,1,3,8,9,13,14,1,8,9,10,13,15,2,4,5,6,16,7,8,9,10,11,12,13,14,15,8,10,13,14,1,8,10,13,1,8,10,13,14,1,3,7,8,9,10,11,13,14,8,10,13,14,1,7,9,11,14,8,10,13,2,4,5,6,16,1,1,8,10,13,1,3,3,7,8,9,10,11,4,5,6,2,4,5,6,16,13,14,1,8,9,10,13,1,3,1,7,9,11,14,13,14,1,13,14,1,3,8,9,10,13,2,4,5,6,16,1,1,8,9,10,13,1,8,9,13,14,1,7,9,11,14,1,8,9,10,13,1,8,9,3,13,14,1,3,13,14,1,8,9,13,14,1,8,9,10,13,1,8,9,13,14,1,8,9,13,14,1,3,8,9,10,13,1,3,3,7,8,9,10,11,4,5,6,1,8,9,1,8,9,15,1,8,9,15,2,4,5,6,16,7,8,9,10,11,12,13,14,15,2,4,5,6,16,2,4,5,6,16,7,8,9,10,11,12,13,14,15,3,2,4,5,6,16,3,1,3,7,8,9,10,11,13,14,8,10,13,2,4,5,6,16,17,18,19,8,10,13,8,10,13,1,1,3,8,9,4,5,6,1,8,10,13,7,8,9,10,11,12,13,14,15,3,7,8,9,10,11,7,9,11,14,1,3,3,7,8,9,10,11,4,5,6,2,4,5,6,16,1,3,1,3,7,8,9,10,11,13,14,4,5,6,1,3,7,8,9,10,11,13,1,8,9,10,13,2,4,5,6,16,2,4,5,6,16,1,8,9,1,8,9,13,14,4,5,6,4,5,6,2,4,5,6,16,1,1,8,10,13,1,8,9,15,1,3,7,8,9,10,11,13,14,8,10,13,2,4,5,6,16,2,4,5,6,16,17,18,19,8,10,13,8,10,13,1,3,8,9,1,3,4,5,6,1,8,10,13,7,8,9,10,11,12,13,14,15,1,3,3,7,8,9,10,11,4,5,6,2,4,5,6,16,2,4,5,6,16,1,2,3,10,12,15,19,20,1,3,8,9,1,1,1,3,3,7,8,9,10,11,4,5,6,1,8,9,1,8,9,15,1,8,9,15,1,3,3,4,5,6,1,8,9,15,7,8,9,10,11,12,13,14,15,2,4,5,6,16,17,18,19,8,10,13,8,10,13,1,3,1,7,9,11,14,2,4,5,6,16,7,8,9,10,11,12,13,14,15,3,1,8,9,1,8,9,15,1,8,9,15,1,3,8,9,13,14,1,3,8,9,13,14,1,3,8,9,10,13,1,8,9,10,13,1,3,7,8,9,10,11,13,14,1,1,3,8,9,10,13,1,3,8,9,13,14,1,8,9,7,9,11,14,1,3,7,8,9,10,11,2,4,5,6,16,2,4,5,6,16,1,3,8,9,7,8,9,10,11,14,2,4,5,6,16,1,2,4,5,6,16,17,18,19,8,10,13,8,10,13,1,3,8,10,13,14,4,5,6,1,3,1,7,9,11,14,2,4,5,6,16,3,1,8,9,15,1,2,3,10,12,15,19,20,1,3,8,9,1,3,8,9,15,7,8,9,10,11,12,13,14,15,2,4,5,6,16,2,4,5,6,16,1,2,3,10,12,15,19,20,1,7,8,9,10,11,12,13,14,15,1,3,8,9,1,8,9,1,8,9,15,1,8,9,15,1,3,1,7,9,11,14,1,8,10,13,1,3,7,8,9,10,11,4,5,6,1,8,9,15,7,8,9,10,11,12,13,14,15,2,4,5,6,16,1,1,1,8,10,13,1,7,9,11,14,1,3,8,9,13,14,1,3,8,9,13,14,2,4,5,6,16,1,3,8,9,1,7,8,9,11,14,1,8,9,10,13,2,4,5,6,16,7,8,9,10,11,12,13,14,15,1,3,8,9,10,13,1,3,8,9,1,3,7,8,9,10,11,13,14,2,4,5,6,16,1,3,1,7,9,11,14,3,8,10,13,1,8,10,13,1,15,2,4,5,6,16,1,3,4,5,6,1,1,3,8,9,4,5,6,15,2,4,5,6,16,2,4,5,6,16,1,1,1,8,10,13,10,12,1,8,9,15,1,3,3,7,8,9,10,11,4,5,6,2,4,5,6,16,2,4,5,6,16,1,8,9,10,13,1,8,9,10,13,1,7,9,11,14,2,4,5,6,16,1,8,9,1,3,7,8,9,10,11,4,5,6,1,8,9,15,2,4,5,6,16,1,8,10,13,1,7,9,11,14,1,1,3,8,9,4,5,6,1,8,10,13,2,4,5,6,16,3,2,4,5,6,16,7,8,9,10,11,12,13,14,15,3,1,1,3,8,9,4,5,6,1,3,3,7,8,9,10,11,4,5,6,2,4,5,6,16,2,4,5,6,16,15,2,4,5,6,16,1,2,3,10,12,15,19,20,1,3,8,9,1,3,8,9,2,4,5,6,16,1,8,9,10,13,1,8,9,10,12,2,4,5,6,16,7,8,9,10,11,12,13,14,15,3,1,3,8,9,1,3,7,8,9,10,11,4,5,6,1,8,9,15,2,4,5,6,16,7,8,9,10,11,12,13,14,15,3,1,2,3,10,12,15,19,20,1,3,8,9,1,3,8,9,1,3,7,8,9,10,11,4,5,6,15,2,4,5,6,16,3,7,8,9,10,11,2,4,5,6,16,15,1,3,7,8,9,10,11,4,5,6,1,8,9,15,7,8,9,10,11,12,13,14,15,2,4,5,6,16,10,12,1,3,7,8,9,10,11,4,5,6,1,8,9,15,7,8,9,10,11,12,13,14,15,15,2,4,5,6,16,2,4,5,6,16,10,12,1,3,8,9,1,3,8,9,1,3,8,9,10,13,10,12,1,8,9,15,1,3,7,8,9,10,11,4,5,6,15,10,12,1,8,9,15,1,3,7,8,9,10,11,4,5,6,15,2,4,5,6,16,1,8,9,10,13,1,7,9,11,14,15,10,12,15,10,12,15,15,65,66,83,84,82,65,67,84,73,79,78,0,65,85,71,77,69,78,84,69,68,0,66,65,73,49,0,66,82,73,68,73,95,84,65,73,76,0,66,82,73,68,73,95,84,65,73,76,95,49,0,66,82,73,68,73,95,84,65,73,76,95,50,0,66,82,73,68,73,95,84,65,73,76,95,51,0,67,72,85,78,75,83,0,67,77,69,78,69,95,83,69,81,0,67,79,73,95,78,65,73,95,83,69,81,0,67,79,77,80,76,69,88,95,84,69,78,83,69,95,77,79,68,65,76,0,67,84,65,71,0,69,75,0,70,82,65,71,77,69,78,84,0,70,82,69,69,0,70,82,69,69,95,83,69,81,0,70,82,69,69,95,86,79,67,65,84,73,86,69,0,70,85,76,76,95,82,69,76,65,84,73,86,69,95,67,76,65,85,83,69,0,71,69,75,0,71,69,75,95,83,69,78,84,69,78,67,69,0,71,73,72,69,75,0,71,73,72,69,75,95,83,84,65,71,95,66,79,0,71,73,72,69,75,95,83,84,65,71,95,75,69,0,71,73,75,0,71,85,72,69,75,0,73,78,68,73,67,65,84,79,82,0,73,78,68,73,67,65,84,79,82,83,0,73,78,68,73,67,65,84,79,82,95,83,69,81,0,73,78,78,69,82,95,78,85,77,66,69,82,0,73,78,78,69,82,95,83,84,65,84,69,77,69,78,84,0,73,78,84,69,82,86,65,76,95,80,82,79,80,69,82,84,89,0,73,78,84,69,82,86,65,76,95,80,82,79,80,69,82,84,89,95,83,69,81,0,73,95,74,74,95,83,84,65,71,95,66,79,0,73,95,74,79,73,75,95,74,69,75,0,73,95,79,80,84,95,70,82,69,69,95,83,69,81,0,74,65,73,95,84,65,71,95,84,85,50,0,74,65,73,95,84,85,50,0,74,69,75,0,74,69,75,95,79,80,84,95,75,69,0,74,69,75,95,79,80,84,95,75,69,66,79,0,74,79,73,75,0,74,79,73,75,95,69,75,95,75,69,0,74,79,73,75,95,69,75,95,83,84,65,71,95,66,79,0,74,79,73,75,95,74,69,75,95,83,84,65,71,95,66,79,0,74,79,73,75,95,79,80,84,95,75,69,0,74,79,73,75,95,79,80,84,95,75,69,66,79,0,74,79,73,75,95,83,84,65,71,95,75,69,0,75,69,95,79,80,69,82,65,78,68,0,75,69,95,79,80,69,82,65,84,79,82,0,75,69,95,83,69,76,66,82,73,51,95,84,85,50,0,75,69,95,83,69,76,66,82,73,95,51,0,75,69,95,83,85,77,84,73,0,76,65,72,69,95,83,85,77,84,73,95,54,0,76,69,82,70,85,95,83,84,82,73,78,71,0,76,69,82,70,85,95,87,79,82,68,0,76,73,78,75,65,82,71,83,0,76,73,78,75,83,0,77,65,73,78,95,83,69,76,66,82,73,0,77,69,84,65,76,73,78,71,85,73,83,84,73,67,0,77,69,84,65,76,73,78,71,85,73,83,84,73,67,95,77,65,73,78,95,83,69,76,66,82,73,0,77,69,88,0,77,69,88,95,49,0,77,69,88,95,50,0,77,69,88,95,50,95,83,69,81,0,77,69,88,95,73,78,70,73,88,0,77,69,88,95,79,80,69,82,65,84,79,82,0,77,69,88,95,82,80,0,78,65,72,69,95,66,79,95,83,85,77,84,73,95,54,0,78,65,72,69,95,84,85,50,0,78,65,73,95,83,69,81,0,78,65,77,69,95,83,85,77,84,73,95,54,0,78,73,72,79,95,83,69,81,0,78,73,72,79,95,83,69,81,95,70,82,69,69,95,83,69,81,0,78,79,95,67,85,95,83,69,78,84,69,78,67,69,0,78,85,77,66,69,82,0,78,85,77,66,69,82,95,77,79,73,95,84,85,50,0,78,85,95,78,65,73,95,83,69,81,0,79,66,83,69,82,86,65,84,73,86,69,95,83,69,78,84,69,78,67,69,0,79,80,69,82,65,78,68,0,79,80,69,82,65,78,68,95,49,0,79,80,69,82,65,78,68,95,50,0,79,80,69,82,65,78,68,95,51,0,79,80,69,82,65,84,79,82,0,79,80,69,82,65,84,79,82,95,49,0,79,80,69,82,65,84,79,82,95,50,0,80,65,82,65,71,82,65,80,72,0,80,65,82,65,71,82,65,80,72,83,0,80,65,82,69,78,84,72,69,84,73,67,65,76,0,80,82,69,78,69,88,0,81,85,65,78,84,73,70,73,69,82,0,82,69,67,73,80,82,79,67,73,84,89,0,82,69,76,65,84,73,86,69,95,67,76,65,85,83,69,0,82,69,76,65,84,73,86,69,95,67,76,65,85,83,69,83,0,82,69,76,65,84,73,86,69,95,67,76,65,85,83,69,95,83,69,81,0,82,80,95,69,88,80,82,69,83,83,73,79,78,0,83,69,76,66,82,73,0,83,69,76,66,82,73,95,49,0,83,69,76,66,82,73,95,50,0,83,69,76,66,82,73,95,51,0,83,69,76,66,82,73,95,52,0,83,69,76,66,82,73,95,53,0,83,69,76,66,82,73,95,54,0,83,69,78,84,69,78,67,69,0,83,69,95,66,65,73,0,83,69,95,84,85,50,0,83,73,77,80,76,69,95,84,69,78,83,69,95,77,79,68,65,76,0,83,80,65,67,69,0,83,80,65,67,69,95,73,78,84,69,82,86,65,76,0,83,80,65,67,69,95,73,78,84,95,80,82,79,80,0,83,80,65,67,69,95,73,78,84,95,80,82,79,80,83,0,83,80,65,67,69,95,79,70,70,83,69,84,0,83,80,65,67,69,95,79,70,70,83,69,84,95,83,69,81,0,83,84,65,71,0,83,84,65,84,69,77,69,78,84,0,83,84,65,84,69,77,69,78,84,95,49,0,83,84,65,84,69,77,69,78,84,95,50,0,83,84,65,84,69,77,69,78,84,95,51,0,83,85,66,83,67,82,73,80,84,0,83,85,66,83,69,78,84,69,78,67,69,0,83,85,77,84,73,0,83,85,77,84,73,95,49,0,83,85,77,84,73,95,50,0,83,85,77,84,73,95,51,0,83,85,77,84,73,95,52,0,83,85,77,84,73,95,53,0,83,85,77,84,73,95,53,65,0,83,85,77,84,73,95,53,66,0,83,85,77,84,73,95,54,0,83,85,77,84,73,95,84,65,73,76,0,83,85,77,84,73,95,84,65,73,76,95,49,0,83,85,77,84,73,95,84,65,73,76,95,49,65,0,84,65,71,0,84,65,71,71,69,68,95,84,69,82,77,83,69,84,0,84,65,73,76,95,84,69,82,77,83,0,84,65,78,82,85,95,85,78,73,84,0,84,65,78,82,85,95,85,78,73,84,95,49,0,84,65,78,82,85,95,85,78,73,84,95,50,0,84,69,82,77,0,84,69,82,77,83,0,84,69,82,77,83,69,84,0,84,69,82,77,83,69,84,95,66,79,68,89,0,84,69,82,77,83,69,84,95,83,84,65,82,84,0,84,69,82,77,83,95,49,0,84,69,82,77,83,95,50,0,84,69,82,77,95,70,76,79,65,84,73,78,71,95,78,69,71,65,84,69,0,84,69,82,77,95,70,76,79,65,84,73,78,71,95,84,69,78,83,69,0,84,69,82,77,95,79,84,72,69,82,0,84,69,82,77,95,80,76,65,67,69,68,95,83,85,77,84,73,0,84,69,82,77,95,80,76,65,73,78,95,83,85,77,84,73,0,84,69,82,77,95,82,69,76,65,84,73,86,69,95,67,76,65,85,83,69,0,84,69,82,77,95,84,65,71,71,69,68,95,83,85,77,84,73,0,84,69,88,84,0,84,69,88,84,95,49,0,84,69,88,84,95,49,65,0,84,69,88,84,95,49,66,0,84,69,88,84,95,49,67,0,84,69,88,84,95,78,79,95,84,69,88,84,95,49,0,84,73,77,69,0,84,73,77,69,95,79,70,70,83,69,84,0,84,73,77,69,95,79,70,70,83,69,84,95,83,69,81,0,85,84,84,69,82,65,78,67,69,95,79,82,68,73,78,65,76,0,86,79,67,65,84,73,86,69,0,90,69,72,65,95,80,85,95,78,65,73,0,91,116,121,112,101,45,111,102,93,0,91,105,115,44,32,100,111,101,115,93,0,40,111,102,41,0,37,115,32,37,115,32,37,115,32,37,115,0,122,111,32,37,115,0,34,37,115,34,0,32,116,121,112,101,45,111,102,32,0,108,111,39,117,32,37,115,32,108,101,39,117,0,37,115,46,98,117,0,32,40,67,79,78,86,63,41,0,95,118,0,95,97,0,95,110,0,78,111,32,97,100,118,97,110,99,101,100,32,116,114,97,110,115,108,97,116,105,111,110,32,102,111,117,110,100,32,102,111,114,32,37,115,10,0,114,117,39,101,110,97,105,0,115,97,105,110,97,105,0,99,97,105,110,97,105,0,112,101,105,110,97,105,0,46,46,125,0,32,99,97,105,0,32,115,97,105,0,32,114,117,39,101,0,32,99,117,39,105,0,32,114,117,39,101,110,97,105,0,32,115,97,105,110,97,105,0,32,99,97,105,110,97,105,0,32,112,101,105,0,32,112,101,105,110,97,105,0,78,111,32,99,111,110,116,101,120,116,32,102,111,117,110,100,32,102,111,114,32,116,101,110,115,101,32,99,109,97,118,111,32,97,116,32,108,105,110,101,32,37,100,32,99,111,108,117,109,110,32,37,100,10,0,64,84,69,82,77,0,64,78,79,85,78,0,64,83,69,76,66,82,73,0,64,76,73,78,75,0,64,67,79,78,78,69,67,84,0,64,74,65,73,0,32,35,0,37,100,0,120,99,111,110,0,111,117,116,112,117,116,46,99,0,111,117,116,112,117,116,95,102,111,114,101,95,111,114,95,97,102,116,101,114,116,104,111,117,103,104,116,0,64,65,70,84,69,82,0,64,71,69,0,64,71,73,0,115,111,109,101,116,104,105,110,103,32,111,116,104,101,114,32,116,104,97,110,0,111,116,104,101,114,32,116,104,97,110,0,91,111,102,93,0,112,117,0,116,114,97,110,115,108,97,116,101,95,116,105,109,101,95,111,102,102,115,101,116,0,106,97,105,43,60,116,97,103,62,49,58,32,40,0,35,37,100,41,0,109,101,0,37,100,46,46,0,35,37,100,45,37,115,37,100,0,37,115,37,100,0,35,37,100,45,37,100,0,103,111,105,0,114,101,108,97,116,105,118,101,46,99,0,112,114,111,99,101,115,115,95,103,111,105,95,99,108,97,117,115,101,0,116,101,114,109,0,83,104,111,117,108,100,110,39,116,32,102,105,110,100,32,114,101,108,97,116,105,118,101,32,99,108,97,117,115,101,32,105,110,32,116,104,105,115,32,99,111,110,116,101,120,116,10,0,83,101,108,109,97,39,111,32,80,85,32,116,111,107,101,110,32,97,116,32,108,105,110,101,32,37,100,32,99,111,108,117,109,110,32,37,100,32,108,105,101,115,32,105,110,32,117,110,104,97,110,100,108,101,100,32,99,111,110,116,101,120,116,10,0,45,0,110,118,113,116,37,115,37,49,100,37,99,0,37,115,37,49,100,0,69,114,114,111,114,32,105,110,32,100,105,99,116,105,111,110,97,114,121,32,101,110,116,114,121,32,102,111,114,32,112,108,97,99,101,32,37,100,32,111,102,32,37,115,10,0,63,63,0,37,115,37,49,100,110,0,78,111,32,97,100,118,97,110,99,101,100,32,101,110,116,114,121,32,102,111,114,32,91,37,115,93,10,0,78,111,32,100,105,99,116,105,111,110,97,114,121,32,101,110,116,114,121,32,102,111,114,32,91,37,115,93,44,32,97,116,116,101,109,112,116,105,110,103,32,112,97,116,116,101,114,110,32,109,97,116,99,104,10,0,78,111,32,100,105,99,116,105,111,110,97,114,121,32,101,110,116,114,121,32,102,111,114,32,91,37,115,93,44,32,97,116,116,101,109,112,116,105,110,103,32,116,111,32,98,114,101,97,107,32,117,112,32,97,115,32,108,117,106,118,111,10,0,45,91,0,91,78,65,77,69,93,0,42,37,49,100,37,115,37,49,100,37,115,0,42,37,49,100,37,115,37,49,100,0,42,37,49,100,37,115,37,49,100,110,0,66,114,111,107,101,110,32,98,97,115,101,32,99,111,110,116,101,120,116,32,102,111,114,32,37,115,10,0,110,0,118,0,113,0,116,0,68,105,99,116,105,111,110,97,114,121,32,99,111,110,116,97,105,110,115,32,98,111,103,117,115,32,101,120,116,101,110,100,101,100,32,101,110,116,114,121,32,102,111,114,32,91,37,115,93,10,0,98,101,105,110,103,32,37,115,0,45,105,115,104,0,37,115,32,116,104,105,110,103,40,115,41,0,116,104,105,110,103,40,115,41,32,37,115,0,97,101,105,111,117,0,45,105,110,103,0,37,115,45,105,110,103,0,32,111,102,0,37,115,45,114,40,115,41,0,37,115,45,101,114,40,115,41,0,105,110,0,97,116,0,119,105,116,104,0,116,104,114,111,117,103,104,0,37,115,40,101,115,41,0,98,99,100,102,103,104,106,107,108,109,110,112,113,114,115,116,118,119,120,122,0,37,115,40,105,101,115,41,0,37,115,40,115,41,0,0,3,4,5,6,8,10,11,13,14,16,17,19,20,21,22,23,24,8,12,8,0,4,11,12,13,14,16,17,22,23,24,13,17,22,5,4,8,11,1,2,7,9,13,15,18,0,4,5,6,10,11,12,16,19,20,21,0,3,5,6,8,10,12,13,17,19,20,21,22,3,5,6,8,10,13,14,17,20,21,22,23,24,5,20,5,20,21,12,14,12,14,23,19,1,2,7,9,13,15,18,5,6,10,12,20,21,3,8,12,13,17,22,12,14,12,14,23,1,2,7,9,13,15,18,5,12,20,21,12,14,19,23,24,0,3,4,8,11,16,12,13,17,22,13,17,22,5,12,14,23,24,3,5,6,8,10,20,21,5,20,3,5,6,8,10,12,5,6,10,20,21,12,5,20,21,5,6,10,19,20,21,19,1,2,7,9,13,15,18,5,12,3,8,12,19,5,3,8,19,3,8,74,66,79,70,73,72,69,95,68,73,67,84,73,79,78,65,82,89,0,115,109,117,106,109,97,106,105,46,100,97,116,0,114,98,0,67,111,117,108,100,32,110,111,116,32], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+81922);
/* memory initializer */ allocate([115,116,97,116,32,116,104,101,32,100,105,99,116,105,111,110,97,114,121,32,102,105,108,101,10,0,67,111,117,108,100,32,110,111,116,32,114,101,97,100,32,100,105,99,116,105,111,110,97,114,121,32,99,111,110,116,101,110,116,115,10,0,43,0,97,101,105,111,117,0,98,99,100,102,103,106,107,108,109,110,112,114,115,116,118,120,122,0,63,0,98,97,39,97,0,98,97,114,110,97,0,98,97,39,101,0,98,97,108,114,101,0,98,97,39,105,0,98,97,110,108,105,0,98,97,39,111,0,98,97,110,114,111,0,98,97,39,117,0,98,97,99,114,117,0,98,97,98,0,122,98,97,98,117,0,98,97,99,0,98,97,110,99,117,0,98,97,99,114,0,98,97,100,0,98,97,110,100,117,0,98,97,100,110,0,98,97,100,110,97,0,98,97,100,114,0,98,97,100,114,105,0,98,97,102,0,98,97,107,102,117,0,98,97,103,0,98,97,114,103,117,0,98,97,105,0,98,97,112,108,105,0,98,97,106,0,98,97,106,114,97,0,98,97,106,114,0,98,97,107,0,98,97,107,110,105,0,98,97,107,102,0,98,97,107,110,0,98,97,107,114,0,98,97,107,114,105,0,98,97,107,116,0,98,97,107,116,117,0,98,97,108,0,98,97,108,106,0,98,97,108,106,105,0,98,97,108,110,0,98,97,108,110,105,0,98,97,108,114,0,98,97,108,118,0,98,97,108,118,105,0,98,97,109,0,106,98,97,109,97,0,98,97,110,0,98,97,110,103,117,0,98,97,110,99,0,98,97,110,100,0,98,97,110,102,0,98,97,110,102,105,0,98,97,110,103,0,98,97,110,108,0,98,97,110,114,0,98,97,110,120,0,98,97,110,120,97,0,98,97,110,122,0,98,97,110,122,117,0,98,97,112,0,98,97,112,108,0,98,97,114,0,98,97,114,116,117,0,98,97,114,100,0,98,97,114,100,97,0,98,97,114,103,0,98,97,114,106,0,98,97,114,106,97,0,98,97,114,110,0,98,97,114,116,0,98,97,115,0,98,97,115,116,105,0,98,97,115,110,0,98,97,115,110,97,0,98,97,115,116,0,98,97,116,0,98,97,116,99,105,0,98,97,116,99,0,98,97,116,107,0,98,97,116,107,101,0,98,97,117,0,98,97,118,0,98,97,118,109,0,98,97,118,109,105,0,98,97,120,0,98,97,120,115,0,98,97,120,115,111,0,98,97,122,0,98,101,39,97,0,98,101,114,115,97,0,98,101,39,101,0,98,101,110,100,101,0,98,101,39,105,0,98,101,110,106,105,0,98,101,39,111,0,98,101,109,114,111,0,98,101,39,117,0,98,101,116,102,117,0,98,101,98,0,98,101,98,110,97,0,98,101,98,110,0,98,101,100,0,98,101,102,0,98,101,103,0,98,101,110,103,111,0,98,101,105,0,98,101,118,114,105,0,98,101,106,0,98,101,109,0,98,101,109,114,0,98,101,110,0,98,101,115,110,97,0,98,101,110,100,0,98,101,110,103,0,98,101,110,106,0,98,101,114,0,98,101,114,116,105,0,98,101,114,115,0,98,101,114,116,0,98,101,115,0,98,101,115,110,0,98,101,116,0,98,101,116,114,105,0,98,101,116,102,0,98,101,116,114,0,98,101,118,0,98,101,118,114,0,98,105,39,97,0,98,105,108,109,97,0,98,105,39,101,0,98,114,105,102,101,0,98,105,39,105,0,106,98,105,110,105,0,98,105,39,111,0,98,105,110,120,111,0,98,105,39,117,0,98,105,116,109,117,0,98,105,99,0,98,105,102,99,101,0,98,105,100,0,98,105,110,100,111,0,98,105,100,106,0,98,105,100,106,117,0,98,105,102,0,98,105,102,99,0,98,105,103,0,98,105,108,103,97,0,98,105,106,0,98,114,105,106,117,0,98,105,107,0,98,105,107,108,97,0,98,105,107,108,0,98,105,108,0,98,105,108,110,105,0,98,105,108,103,0,98,105,108,109,0,98,105,108,110,0,98,105,109,0,98,105,110,0,98,105,110,100,0,98,105,110,114,0,98,105,110,114,97,0,98,105,110,120,0,98,105,114,0,98,105,114,107,97,0,98,105,114,106,0,98,105,114,106,101,0,98,105,114,107,0,98,105,114,116,0,98,105,114,116,105,0,98,105,115,0,98,105,115,108,105,0,98,105,115,108,0,98,105,116,0,98,105,116,109,0,98,105,118,0,98,105,0,98,105,120,0,98,105,122,0,98,108,97,0,98,108,97,110,117,0,98,108,97,98,0,98,108,97,98,105,0,98,108,97,99,0,98,108,97,99,105,0,98,108,97,110,0,98,108,101,0,114,117,98,108,101,0,98,108,105,0,98,108,105,107,117,0,98,108,105,107,0,98,108,111,0,98,108,111,116,105,0,98,108,111,116,0,98,108,117,0,99,105,98,108,117,0,98,111,39,97,0,98,111,120,110,97,0,98,111,39,101,0,98,114,111,100,101,0,98,111,39,105,0,98,111,116,112,105,0,98,111,39,111,0,98,111,120,102,111,0,98,111,39,117,0,98,111,110,103,117,0,98,111,102,0,98,111,103,0,98,111,105,0,98,111,108,99,105,0,98,111,108,0,98,111,108,99,0,98,111,110,0,98,111,110,103,0,98,111,114,0,98,111,0,98,111,116,0,98,111,116,112,0,98,111,120,102,0,98,111,120,110,0,98,114,97,0,98,114,97,100,0,98,114,97,100,105,0,98,114,97,116,0,98,114,97,116,117,0,98,114,97,122,0,98,114,97,122,111,0,98,114,101,0,98,114,101,100,105,0,98,114,101,100,0,98,114,105,0,98,114,105,100,105,0,98,114,105,100,0,98,114,105,102,0,98,114,105,106,0,98,114,105,116,0,98,114,105,116,111,0,98,114,111,0,120,101,98,114,111,0,98,114,111,100,0,98,114,111,100,117,0,98,114,117,0,98,117,114,99,117,0,98,114,117,110,0,98,114,117,110,97,0,98,117,39,97,0,98,117,39,101,0,98,117,110,114,101,0,98,117,39,105,0,98,117,0,98,117,39,111,0,98,117,100,106,111,0,98,117,39,117,0,98,117,107,112,117,0,98,117,100,0,98,117,110,100,97,0,98,117,100,106,0,98,117,106,0,98,117,107,0,98,117,107,112,0,98,117,108,0,98,117,109,0,98,117,109,114,117,0,98,117,109,114,0,98,117,110,0,98,117,110,100,0,98,117,110,114,0,98,117,114,0,98,117,114,99,0,98,117,114,110,0,98,117,114,110,97,0,98,117,115,0,99,97,39,97,0,99,97,98,114,97,0,99,97,39,101,0,99,97,116,107,101,0,99,97,39,105,0,99,97,116,110,105,0,99,97,39,111,0,99,97,110,107,111,0,99,97,39,117,0,99,97,110,108,117,0,99,97,98,0,99,97,98,110,97,0,99,97,98,110,0,99,97,98,114,0,99,97,99,0,116,99,97,99,105,0,99,97,99,114,0,99,97,99,114,97,0,99,97,100,0,99,97,110,100,111,0,99,97,100,122,0,99,97,100,122,117,0,99,97,102,0,99,97,102,110,101,0,99,97,102,110,0,99,97,103,0,99,97,110,103,101,0,99,97,105,0,99,97,114,109,105,0,99,97,106,0,99,97,110,106,97,0,99,97,107,0,99,97,108,107,117,0,99,97,107,108,0,99,97,107,108,97,0,99,97,108,0,99,97,108,107,0,99,97,109,0,99,97,110,0,99,97,110,114,101,0,99,97,110,99,0,99,97,110,99,105,0,99,97,110,100,0,99,97,110,103,0,99,97,110,106,0,99,97,110,107,0,99,97,110,108,0,99,97,110,112,0,99,97,110,112,97,0,99,97,110,114,0,99,97,110,116,0,99,97,110,116,105,0,99,97,112,0,99,107,97,112,101,0,99,97,114,0,99,97,114,110,97,0,99,97,114,99,0,99,97,114,99,101,0,99,97,114,109,0,99,97,114,110,0,99,97,114,116,0,99,97,114,116,117,0,99,97,114,118,0,99,97,114,118,105,0,99,97,115,0,99,107,97,115,117,0,99,97,115,110,0,99,97,115,110,117,0,99,97,116,0,99,97,116,107,0,99,97,116,108,0,99,97,116,108,117,0,99,97,116,110,0,99,97,116,114,0,99,97,116,114,97,0,99,97,117,0,99,108,97,120,117,0,99,97,118,0,99,97,120,0,99,97,120,110,111,0,99,97,120,110,0,99,97,122,0,99,101,39,97,0,99,101,99,108,97,0,99,101,39,105,0,99,116,101,107,105,0,99,101,39,111,0,99,101,39,117,0,99,101,99,109,117,0,99,101,99,0,99,101,0,99,101,99,108,0,99,101,99,109,0,99,101,100,0,99,101,114,100,97,0,99,101,100,114,0,99,101,100,114,97,0,99,101,105,0,99,101,118,110,105,0,99,101,107,0,99,114,101,107,97,0,99,101,108,0,99,101,109,0,99,101,110,0,99,101,110,116,105,0,99,101,110,98,0,99,101,110,98,97,0,99,101,110,115,0,99,101,110,115,97,0,99,101,110,116,0,99,101,114,0,99,101,114,110,105,0,99,101,114,100,0,99,101,114,110,0,99,101,114,116,0,99,101,114,116,117,0,99,101,115,0,99,101,118,0,99,101,118,110,0,99,101,122,0,99,102,97,0,99,102,97,114,105,0,99,102,97,114,0,99,102,105,0,99,102,105,108,97,0,99,102,105,107,0,99,102,105,107,97,0,99,102,105,108,0,99,102,105,110,0,99,102,105,110,101,0,99,102,105,112,0,99,102,105,112,117,0,99,102,117,0,114,105,99,102,117,0,99,105,39,97,0,99,105,115,107,97,0,99,105,39,101,0,99,105,115,116,101,0,99,105,39,105,0,99,105,110,114,105,0,99,105,39,111,0,99,105,116,110,111,0,99,105,39,117,0,99,107,105,108,117,0,99,105,98,0,99,105,0,99,105,98,108,0,99,105,99,0,99,105,108,99,101,0,99,105,99,110,0,99,105,99,110,97,0,99,105,100,0,99,105,100,110,105,0,99,105,100,106,0,99,105,100,106,97,0,99,105,100,110,0,99,105,100,114,0,99,105,100,114,111,0,99,105,102,0,99,105,102,110,117,0,99,105,102,110,0,99,105,103,0,99,105,103,108,97,0,99,105,103,108,0,99,105,106,0,99,105,110,106,101,0,99,105,107,0,99,105,107,110,97,0,99,105,107,110,0,99,105,107,114,0,99,105,107,114,101,0,99,105,107,115,0,99,105,107,115,105,0,99,105,108,0,99,105,108,116,97,0,99,105,108,99,0,99,105,108,109,0,99,105,108,109,111,0,99,105,108,114,0,99,105,108,114,101,0,99,105,108,116,0,99,105,109,0,99,105,109,100,0,99,105,109,100,101,0,99,105,109,110,0,99,105,109,110,105,0,99,105,110,0,99,105,110,115,101,0,99,105,110,98,0,99,105,110,98,97,0,99,105,110,100,0,99,105,110,100,117,0,99,105,110,102,0,99,105,110,102,111,0,99,105,110,106,0,99,105,110,107,0,99,105,110,107,105,0,99,105,110,108,0,99,105,110,108,97,0,99,105,110,109,0,99,105,110,109,111,0,99,105,110,114,0,99,105,110,115,0,99,105,110,116,0,99,105,110,116,97,0,99,105,110,122,0,99,105,110,122,97,0,99,105,112,0,99,105,112,114,97,0,99,105,112,110,0,99,105,112,110,105,0,99,105,112,114,0,99,105,114,0,99,105,116,114,105,0,99,105,114,107,0,99,105,114,107,111,0,99,105,114,108,0,99,105,114,108,97,0,99,105,115,0,99,114,105,115,97,0,99,105,115,107,0,99,105,115,109,0,99,105,115,109,97,0,99,105,115,116,0,99,105,116,0,99,105,116,107,0,99,105,116,107,97,0,99,105,116,110,0,99,105,116,114,0,99,105,116,115,0,99,105,116,115,105,0,99,105,118,0,99,105,118,108,97,0,99,105,118,108,0,99,105,122,0,99,105,122,114,97,0,99,105,122,114,0,99,107,97,0,99,107,97,110,97,0,99,107,97,98,0,99,107,97,98,117,0,99,107,97,102,0,99,107,97,102,105,0,99,107,97,106,0,99,107,97,106,105,0,99,107,97,110,0,99,107,97,112,0,99,107,97,115,0,99,107,101,0,99,107,101,106,105,0,99,107,101,106,0,99,107,105,0,99,107,105,107,0,99,107,105,107,117,0,99,107,105,108,0,99,107,105,110,0,99,107,105,110,105,0,99,107,105,114,0,99,107,105,114,101,0,99,107,111,0,99,111,107,99,117,0,99,107,117,0,99,117,107,116,97,0,99,107,117,108,0,99,107,117,108,101,0,99,107,117,110,0,99,107,117,110,117,0,99,108,97,0,99,108,97,110,105,0,99,108,97,100,0,99,108,97,100,117,0,99,108,97,110,0,99,108,97,120,0,99,108,105,0,99,108,105,107,0,99,108,105,107,97,0,99,108,105,114,0,99,108,105,114,97,0,99,108,105,116,0,99,108,105,116,101,0,99,108,105,118,0,99,108,105,118,97,0,99,108,117,0,99,117,108,110,111,0,99,108,117,112,0,99,108,117,112,97,0,99,109,97,0,99,109,97,108,117,0,99,109,97,99,0,99,109,97,99,105,0,99,109,97,108,0,99,109,97,110,0,99,109,97,110,97,0,99,109,97,118,0,99,109,97,118,111,0,99,109,101,0,99,109,101,110,101,0,99,109,101,110,0,99,109,105,0,99,109,105,109,97,0,99,109,105,108,0,99,109,105,108,97,0,99,109,105,109,0,99,109,111,0,99,109,111,110,105,0,99,109,111,110,0,99,109,117,0,106,105,99,109,117,0,99,110,97,0,99,110,97,110,0,99,110,97,110,111,0,99,110,101,0,99,110,101,98,0,99,110,101,98,111,0,99,110,101,109,0,99,110,101,109,117,0,99,110,105,0,99,110,105,99,0,99,110,105,99,105,0,99,110,105,110,0,99,110,105,110,111,0,99,110,105,115,0,99,110,105,115,97,0,99,110,105,116,0,99,110,105,116,97,0,99,110,111,0,99,111,110,100,105,0,99,110,117,0,109,97,99,110,117,0,99,111,39,97,0,99,111,39,101,0,99,111,39,105,0,99,111,39,117,0,99,111,105,0,99,111,107,99,0,99,111,108,0,99,111,0,99,111,109,0,99,111,110,0,99,111,110,100,0,99,111,114,0,99,111,114,116,117,0,99,111,114,116,0,99,112,97,0,99,112,97,99,117,0,99,112,97,99,0,99,112,97,110,0,99,112,97,110,97,0,99,112,97,114,0,99,112,97,114,101,0,99,112,101,0,99,112,101,100,117,0,99,112,101,100,0,99,112,105,0,99,112,105,110,0,99,112,105,110,97,0,99,112,117,0,108,97,99,112,117,0,99,114,97,0,99,114,97,110,101,0,99,114,97,100,0,99,114,97,100,105,0,99,114,97,110,0,99,114,101,0,99,114,101,107,0,99,114,101,112,0,99,114,101,112,117,0,99,114,105,0,99,114,105,98,0,99,114,105,98,101,0,99,114,105,100,0,99,114,105,100,97,0,99,114,105,110,0,99,114,105,110,111,0,99,114,105,112,0,99,114,105,112,117,0,99,114,105,115,0,99,114,105,116,0,99,114,105,116,117,0,99,114,111,0,99,114,117,0,99,117,114,109,105,0,99,116,97,0,99,116,97,114,0,99,116,97,114,117,0,99,116,101,0,110,105,99,116,101,0,99,116,101,98,0,99,116,101,98,105,0,99,116,101,107,0,99,116,105,0,99,116,105,108,0,99,116,105,108,101,0,99,116,105,110,0,99,116,105,110,111,0,99,116,111,0,120,101,99,116,111,0,99,116,117,0,99,116,117,99,97,0,99,116,117,99,0,99,117,39,97,0,99,117,120,110,97,0,99,117,39,101,0,99,117,39,105,0,99,117,109,107,105,0,99,117,39,111,0,99,117,110,115,111,0,99,117,39,117,0,99,117,110,116,117,0,99,117,99,0,99,117,116,99,105,0,99,117,107,0,99,117,107,108,97,0,99,117,107,108,0,99,117,107,116,0,99,117,108,0,99,117,109,108,97,0,99,117,108,110,0,99,117,109,0,99,117,109,107,0,99,117,109,108,0,99,117,110,0,99,117,110,109,0,99,117,110,109,105,0,99,117,110,115,0,99,117,110,116,0,99,117,112,0,99,117,112,114,0,99,117,112,114,97,0,99,117,114,0,99,117,114,110,117,0,99,117,114,109,0,99,117,114,110,0,99,117,114,118,0,99,117,114,118,101,0,99,117,115,0,99,117,115,107,117,0,99,117,115,107,0,99,117,116,0,99,117,116,110,101,0,99,117,116,99,0,99,117,116,110,0,99,117,118,0,99,117,120,0,99,117,120,110,0,100,97,39,97,0,100,97,109,98,97,0,100,97,39,101,0,100,97,110,114,101,0,100,97,39,105,0,100,97,114,120,105,0,100,97,39,111,0,100,97,114,110,111,0,100,97,39,117,0,100,97,110,108,117,0,100,97,98,0,100,97,99,0,100,97,99,114,117,0,100,97,99,114,0,100,97,99,116,0,100,97,99,116,105,0,100,97,100,0,100,97,110,100,117,0,100,97,100,106,0,100,97,100,106,111,0,100,97,102,0,100,97,110,102,117,0,100,97,103,0,100,97,114,103,117,0,100,97,105,0,100,97,106,0,100,97,107,0,100,97,107,102,117,0,100,97,107,102,0,100,97,107,108,0,100,97,107,108,105,0,100,97,108,0,100,97,109,0,100,97,110,109,111,0,100,97,109,98,0,100,97,109,114,0,100,97,109,114,105,0,100,97,110,0,100,97,110,116,105,0,100,97,110,100,0,100,97,110,102,0,100,97,110,108,0,100,97,110,109,0,100,97,110,114,0,100,97,110,115,0,100,97,110,115,117,0,100,97,110,116,0,100,97,112,0,100,97,112,109,97,0,100,97,112,108,0,100,97,112,108,117,0,100,97,112,109,0,100,97,114,0,100,97,114,103,0,100,97,114,108,0,100,97,114,108,117,0,100,97,114,110,0,100,97,114,115,0,100,97,114,115,105,0,100,97,114,120,0,100,97,115,0,100,97,115,110,105,0,100,97,115,107,0,100,97,115,107,105,0,100,97,115,110,0,100,97,115,112,0,100,97,115,112,111,0,100,97,115,114,0,100,97,115,114,105,0,100,97,116,0,100,114,97,116,97,0,100,97,116,107,0,100,97,116,107,97,0,100,97,116,110,0,100,97,116,110,105,0,100,97,117,0,100,97,118,0,100,97,0,100,97,120,0,100,97,122,0,100,101,39,97,0,100,101,110,112,97,0,100,101,39,105,0,100,101,110,99,105,0,100,101,39,111,0,100,101,108,110,111,0,100,101,39,117,0,100,101,114,116,117,0,100,101,98,0,100,101,109,98,105,0,100,101,99,0,100,101,99,116,105,0,100,101,99,116,0,100,101,103,0,100,101,103,106,105,0,100,101,103,106,0,100,101,105,0,100,106,101,100,105,0,100,101,106,0,100,101,106,110,105,0,100,101,106,110,0,100,101,107,0,100,101,107,116,111,0,100,101,107,112,0,100,101,107,112,117,0,100,101,107,116,0,100,101,108,0,100,101,108,110,0,100,101,109,0,100,101,110,109,105,0,100,101,109,98,0,100,101,110,0,100,101,110,99,0,100,101,110,109,0,100,101,110,112,0,100,101,112,0,100,101,114,0,100,101,114,116,0,100,101,114,120,0,100,101,114,120,105,0,100,101,115,0,100,101,115,107,117,0,100,101,115,107,0,100,101,116,0,100,101,116,114,105,0,100,101,116,114,0,100,105,39,97,0,106,100,105,109,97,0,100,105,39,101,0,100,105,114,99,101,0,100,105,39,105,0,106,100,105,110,105,0,100,105,39,111,0,100,105,110,107,111,0,100,105,39,117,0,100,105,110,106,117,0,100,105,98,0,100,105,114,98,97,0,100,105,99,0,100,105,107,99,97,0,100,105,99,114,0,100,105,99,114,97,0,100,105,103,0,100,105,114,103,111,0,100,105,106,0,100,105,107,0,100,105,107,110,105,0,100,105,107,99,0,100,105,107,108,0,100,105,107,108,111,0,100,105,107,110,0,100,105,108,0,100,105,108,110,117,0,100,105,108,99,0,100,105,108,99,117,0,100,105,108,110,0,100,105,109,0,100,105,109,110,97,0,100,105,109,110,0,100,105,110,0,100,105,110,106,0,100,105,110,107,0,100,105,114,0,100,105,114,98,0,100,105,114,99,0,100,105,114,103,0,100,105,122,0,100,105,122,108,111,0,100,105,122,108,0,100,106,97,0,100,106,97,99,0,100,106,97,99,117,0,100,106,101,0,100,106,101,100,0,100,106,105,0,100,106,105,99,97,0,100,106,105,99,0,100,106,105,110,0,100,106,105,110,101,0,100,106,111,0,115,97,100,106,111,0,100,106,117,0,115,105,100,106,117,0,100,106,117,110,0,100,106,117,110,111,0,100,111,39,105,0,100,111,110,114,105,0,100,111,39,111,0,100,111,116,99,111,0,100,111,105,0,100,111,0,100,111,110,0,100,111,110,114,0,100,111,114,0,100,111,116,0,100,111,116,99,0,100,114,97,0,100,114,97,110,105,0,100,114,97,99,0,100,114,97,99,105,0,100,114,97,110,0,100,114,97,116,0,100,114,101,0,100,114,105,0,100,114,111,0,100,114,117,0,100,114,117,100,105,0,100,114,117,100,0,100,117,39,97,0,100,117,110,100,97,0,100,117,39,101,0,100,117,107,115,101,0,100,117,39,105,0,100,117,110,108,105,0,100,117,39,111,0,100,117,0,100,117,39,117,0,100,117,110,107,117,0,100,117,98,0,100,117,100,0,100,117,103,0,100,117,103,114,105,0,100,117,103,114,0,100,117,106,0,100,117,110,106,97,0,100,117,107,0,100,117,107,115,0,100,117,107,116,0,100,117,107,116,105,0,100,117,108,0,106,100,117,108,105,0,100,117,109,0,100,117,110,0,100,117,110,100,0,100,117,110,106,0,100,117,110,107,0,100,117,110,108,0,100,117,110,114,0,100,117,110,114,97,0,100,117,114,0,100,117,115,0,100,117,116,0,100,122,97,0,100,122,101,0,100,122,101,110,97,0,100,122,101,110,0,100,122,105,0,100,122,105,112,0,100,122,105,112,111,0,100,122,117,0,102,97,39,97,0,102,97,114,110,97,0,102,97,39,101,0,102,97,116,110,101,0,102,97,39,105,0,102,97,99,107,105,0,102,97,39,111,0,102,97,110,109,111,0,102,97,39,117,0,102,97,114,108,117,0,102,97,99,0,102,97,116,99,105,0,102,97,99,107,0,102,97,100,0,102,97,100,110,105,0,102,97,100,110,0,102,97,103,0,102,97,103,114,105,0,102,97,103,114,0,102,97,105,0,102,97,116,114,105,0,102,97,107,0,102,97,108,0,102,97,108,110,0,102,97,108,110,117,0,102,97,109,0,102,97,109,116,0,102,97,109,116,105,0,102,97,110,0,102,97,110,99,0,102,97,110,99,117,0,102,97,110,103,0,102,97,110,103,101,0,102,97,110,109,0,102,97,110,114,0,102,97,110,114,105,0,102,97,110,116,0,102,97,110,116,97,0,102,97,110,118,0,102,97,110,118,97,0,102,97,110,122,0,102,97,110,122,97,0,102,97,112,0,102,97,112,114,111,0,102,97,112,114,0,102,97,114,0,102,97,114,108,0,102,97,114,110,0,102,97,114,118,0,102,97,114,118,105,0,102,97,115,0,102,114,97,115,111,0,102,97,115,110,0,102,97,115,110,117,0,102,97,116,0,102,97,116,99,0,102,97,116,110,0,102,97,116,114,0,102,97,117,0,102,97,118,0,102,97,120,0,102,114,97,120,117,0,102,97,122,0,102,101,39,97,0,102,101,110,114,97,0,102,101,39,105,0,102,101,116,115,105,0,102,101,39,111,0,102,101,110,115,111,0,102,101,39,117,0,102,101,110,103,117,0,102,101,98,0,102,101,98,118,105,0,102,101,98,118,0,102,101,100,0,102,101,110,100,105,0,102,101,103,0,102,101,105,0,102,101,112,110,105,0,102,101,107,0,102,101,110,107,105,0,102,101,109,0,102,101,109,116,105,0,102,101,109,116,0,102,101,110,0,102,101,110,100,0,102,101,110,103,0,102,101,110,107,0,102,101,110,114,0,102,101,110,115,0,102,101,112,0,102,101,112,110,0,102,101,112,114,0,102,101,112,114,105,0,102,101,114,0,102,101,114,116,0,102,101,114,116,105,0,102,101,115,0,102,101,115,116,105,0,102,101,115,116,0,102,101,116,0,102,101,116,115,0,102,105,39,97,0,102,105,39,101,0,102,105,110,112,101,0,102,105,39,105,0,102,105,110,116,105,0,102,105,39,111,0,102,114,105,107,111,0,102,105,39,117,0,102,105,99,0,102,114,105,99,97,0,102,105,103,0,102,105,103,114,101,0,102,105,103,114,0,102,105,107,0,102,105,108,0,102,114,105,108,105,0,102,105,108,115,0,102,105,108,115,111,0,102,105,110,0,102,105,110,112,0,102,105,110,116,0,102,105,112,0,102,105,114,0,102,108,105,114,97,0,102,105,115,0,102,105,116,0,102,114,105,116,105,0,102,108,97,0,102,108,97,108,117,0,102,108,97,108,0,102,108,97,110,0,102,108,97,110,105,0,102,108,101,0,102,108,101,99,117,0,102,108,101,99,0,102,108,105,0,102,108,105,98,97,0,102,108,105,98,0,102,108,105,114,0,102,108,111,0,102,111,108,100,105,0,102,108,117,0,102,117,108,116,97,0,102,111,39,97,0,102,111,39,101,0,102,111,39,105,0,102,111,39,111,0,102,111,110,109,111,0,102,111,105,0,102,111,108,100,0,102,111,109,0,102,111,110,0,102,111,110,120,97,0,102,111,110,109,0,102,111,110,120,0,102,111,114,99,0,102,111,114,99,97,0,102,114,97,0,102,114,97,116,105,0,102,114,97,115,0,102,114,97,116,0,102,114,97,120,0,102,114,101,0,102,114,105,0,108,105,102,114,105,0,102,114,105,99,0,102,114,105,107,0,102,114,105,108,0,102,114,105,110,0,102,114,105,110,117,0,102,114,105,116,0,102,114,111,0,102,114,117,0,102,114,117,109,117,0,102,114,117,109,0,102,117,39,97,0,102,117,110,99,97,0,102,117,39,101,0,102,117,122,109,101,0,102,117,39,105,0,102,117,107,112,105,0,102,117,107,0,102,117,107,112,0,102,117,108,0,102,117,108,116,0,102,117,110,0,102,117,110,99,0,102,117,114,0,102,117,115,114,97,0,102,117,115,114,0,102,117,122,0,102,117,122,109,0,103,97,39,97,0,103,114,97,110,97,0,103,97,39,101,0,103,97,110,115,101,0,103,97,39,105,0,103,97,108,102,105,0,103,97,39,111,0,103,97,110,108,111,0,103,97,39,117,0,103,97,108,116,117,0,103,97,99,0,103,97,112,99,105,0,103,97,99,114,0,103,97,99,114,105,0,103,97,100,0,103,97,100,114,105,0,103,97,100,114,0,103,97,102,0,103,97,105,0,103,97,108,0,103,97,108,102,0,103,97,108,116,0,103,97,108,120,0,103,97,108,120,101,0,103,97,110,0,103,97,110,114,97,0,103,97,110,108,0,103,97,110,114,0,103,97,110,115,0,103,97,110,116,0,103,97,110,116,105,0,103,97,110,120,0,103,97,110,120,111,0,103,97,110,122,0,103,97,110,122,117,0,103,97,112,0,103,97,112,114,117,0,103,97,112,99,0,103,97,112,114,0,103,97,114,0,103,97,114,110,97,0,103,97,114,110,0,103,97,115,0,103,97,115,110,0,103,97,115,110,117,0,103,97,115,116,0,103,97,115,116,97,0,103,97,116,0,103,97,117,0,103,97,120,0,103,97,122,0,103,101,39,97,0,103,101,114,110,97,0,103,101,39,111,0,103,101,110,116,111,0,103,101,39,117,0,103,101,114,107,117,0,103,101,105,0,103,108,101,107,105,0,103,101,106,0,103,101,110,106,97,0,103,101,107,0,103,101,110,0,103,101,110,106,0,103,101,110,116,0,103,101,110,120,0,103,101,110,120,117,0,103,101,114,0,103,101,114,107,0,103,101,114,110,0,103,101,116,0,103,101,120,0,103,105,39,97,0,103,105,100,118,97,0,103,105,39,101,0,122,103,105,107,101,0,103,105,39,111,0,103,105,103,100,111,0,103,105,39,117,0,103,105,115,109,117,0,103,105,99,0,103,108,105,99,111,0,103,105,100,0,103,105,100,118,0,103,105,103,0,103,105,103,100,0,103,105,107,0,103,105,110,107,97,0,103,105,109,0,103,105,110,0,106,103,105,110,97,0,103,105,110,107,0,103,105,114,0,103,105,114,122,117,0,103,105,114,122,0,103,105,115,109,0,103,105,116,0,106,103,105,116,97,0,103,108,97,0,103,108,97,114,101,0,103,108,97,114,0,103,108,101,0,103,108,101,116,117,0,103,108,101,107,0,103,108,101,116,0,103,108,105,0,103,108,105,99,0,103,108,117,0,103,108,117,116,97,0,103,108,117,116,0,103,111,99,0,103,111,99,116,105,0,103,111,99,116,0,103,111,116,0,103,111,116,114,111,0,103,111,116,114,0,103,114,97,0,103,114,97,107,101,0,103,114,97,100,0,103,114,97,100,117,0,103,114,97,107,0,103,114,97,110,0,103,114,97,115,0,103,114,97,115,117,0,103,114,101,0,112,97,103,114,101,0,103,114,101,107,0,103,114,101,107,117,0,103,114,105,0,103,114,117,0,103,117,114,110,105,0,103,114,117,115,0,103,114,117,115,105,0,103,114,117,116,0,103,114,117,116,101,0,103,117,39,97,0,103,117,110,107,97,0,103,117,39,101,0,103,117,103,100,101,0,103,117,39,105,0,103,117,115,110,105,0,103,117,39,111,0,103,117,110,114,111,0,103,117,98,0,103,117,98,110,105,0,103,117,98,110,0,103,117,99,0,103,117,116,99,105,0,103,117,100,0,103,117,110,100,105,0,103,117,103,0,103,117,103,100,0,103,117,107,0,103,117,115,107,97,0,103,117,109,0,103,117,110,109,97,0,103,117,110,0,103,117,110,100,0,103,117,110,107,0,103,117,110,109,0,103,117,110,114,0,103,117,110,115,0,103,117,110,115,101,0,103,117,110,116,0,103,117,110,116,97,0,103,117,114,0,103,117,114,110,0,103,117,115,0,103,117,115,107,0,103,117,115,110,0,103,117,115,116,0,103,117,115,116,97,0,103,117,116,0,103,117,116,99,0,103,117,116,114,0,103,117,116,114,97,0,103,117,122,0,103,117,122,109,101,0,103,117,122,109,0,106,97,39,97,0,106,97,116,110,97,0,106,97,39,101,0,106,97,108,103,101,0,106,97,39,105,0,106,97,100,110,105,0,106,97,39,111,0,106,97,114,99,111,0,106,97,39,117,0,106,103,97,108,117,0,106,97,98,0,106,97,110,98,101,0,106,97,98,114,0,106,97,98,114,101,0,106,97,99,0,106,97,100,0,106,97,100,110,0,106,97,102,0,106,97,109,102,117,0,106,97,103,0,106,97,105,0,106,103,97,114,105,0,106,97,106,0,106,109,97,106,105,0,106,97,107,0,106,97,114,107,105,0,106,97,107,110,0,106,97,107,110,101,0,106,97,108,0,106,97,110,108,105,0,106,97,108,103,0,106,97,108,110,0,106,97,108,110,97,0,106,97,108,114,0,106,97,108,114,97,0,106,97,109,0,106,97,109,110,97,0,106,97,109,102,0,106,97,109,110,0,106,97,110,0,106,97,110,99,111,0,106,97,110,98,0,106,97,110,99,0,106,97,110,108,0,106,97,110,115,0,106,97,110,115,117,0,106,97,110,116,0,106,97,110,116,97,0,106,97,112,0,106,97,115,112,117,0,106,97,114,0,106,100,97,114,105,0,106,97,114,98,0,106,97,114,98,117,0,106,97,114,99,0,106,97,114,107,0,106,97,115,0,106,97,115,112,0,106,97,116,0,106,97,116,110,0,106,97,117,0,106,97,118,0,106,97,0,106,97,118,110,0,106,97,118,110,105,0,106,98,97,0,106,98,97,114,105,0,106,98,97,109,0,106,98,97,114,0,106,98,101,0,106,98,101,110,97,0,106,98,101,110,0,106,98,101,114,0,106,98,101,114,97,0,106,98,105,0,106,105,98,110,105,0,106,98,105,110,0,106,98,111,0,108,111,106,98,111,0,106,98,117,0,106,117,98,109,101,0,106,100,97,0,108,105,106,100,97,0,106,100,97,114,0,106,100,101,0,107,97,106,100,101,0,106,100,105,0,106,100,105,99,101,0,106,100,105,99,0,106,100,105,107,0,106,100,105,107,97,0,106,100,105,109,0,106,100,105,110,0,106,100,117,0,106,100,117,108,0,106,101,39,97,0,106,101,99,116,97,0,106,101,39,101,0,106,101,116,99,101,0,106,101,39,105,0,106,101,114,115,105,0,106,101,39,111,0,106,101,103,118,111,0,106,101,39,117,0,106,101,116,110,117,0,106,101,99,0,106,101,99,116,0,106,101,100,0,106,101,110,100,117,0,106,101,102,0,106,101,102,116,117,0,106,101,102,116,0,106,101,103,0,106,101,103,118,0,106,101,105,0,106,101,110,109,105,0,106,101,108,0,106,101,108,99,97,0,106,101,108,99,0,106,101,109,0,106,101,109,110,0,106,101,109,110,97,0,106,101,110,0,106,101,110,99,97,0,106,101,110,99,0,106,101,110,100,0,106,101,110,109,0,106,101,114,0,106,101,114,110,0,106,101,114,110,97,0,106,101,114,115,0,106,101,114,120,0,106,101,114,120,111,0,106,101,115,0,106,101,115,110,105,0,106,101,115,110,0,106,101,116,0,106,101,116,99,0,106,101,116,110,0,106,101,118,0,106,101,0,106,101,120,0,106,101,122,0,106,103,97,0,106,103,97,110,117,0,106,103,97,108,0,106,103,97,110,0,106,103,97,114,0,106,103,101,0,106,103,101,110,97,0,106,103,101,110,0,106,103,105,0,106,103,105,114,97,0,106,103,105,110,0,106,103,105,114,0,106,103,105,116,0,106,105,39,97,0,106,105,110,103,97,0,106,105,39,101,0,106,109,105,118,101,0,106,105,39,105,0,106,105,110,118,105,0,106,105,39,111,0,106,105,112,110,111,0,106,105,39,117,0,106,118,105,110,117,0,106,105,98,0,106,105,98,114,105,0,106,105,98,110,0,106,105,98,114,0,106,105,99,0,106,105,109,99,97,0,106,105,99,108,0,106,105,99,108,97,0,106,105,99,109,0,106,105,102,0,106,105,116,102,97,0,106,105,103,0,106,105,106,0,106,105,106,110,117,0,106,105,106,110,0,106,105,107,0,106,105,107,99,97,0,106,105,107,99,0,106,105,107,114,0,106,105,107,114,117,0,106,105,108,0,106,105,108,107,97,0,106,105,108,107,0,106,105,108,114,0,106,105,108,114,97,0,106,105,109,0,106,105,110,109,101,0,106,105,109,99,0,106,105,109,112,0,106,105,109,112,101,0,106,105,109,116,0,106,105,109,116,101,0,106,105,110,0,106,105,110,99,0,106,105,110,99,105,0,106,105,110,103,0,106,105,110,107,0,106,105,110,107,117,0,106,105,110,109,0,106,105,110,114,0,106,105,110,114,117,0,106,105,110,115,0,106,105,110,115,97,0,106,105,110,116,0,106,105,110,116,111,0,106,105,110,118,0,106,105,110,122,0,106,105,110,122,105,0,106,105,112,0,106,105,112,99,0,106,105,112,99,105,0,106,105,112,110,0,106,105,114,0,106,105,114,110,0,106,105,114,110,97,0,106,105,115,0,106,105,115,114,0,106,105,115,114,97,0,106,105,116,0,106,105,116,102,0,106,105,116,114,0,106,105,116,114,111,0,106,105,118,0,106,105,118,98,0,106,105,118,98,117,0,106,105,118,110,0,106,105,118,110,97,0,106,105,122,0,106,109,97,0,106,109,97,106,0,106,109,101,0,106,109,105,0,106,109,105,102,0,106,109,105,102,97,0,106,109,105,110,0,106,109,105,110,97,0,106,109,105,118,0,106,111,39,101,0,106,111,114,110,101,0,106,111,39,111,0,106,111,114,100,111,0,106,111,39,117,0,106,111,105,0,106,111,108,0,106,111,109,0,106,111,110,0,106,111,114,0,106,111,114,100,0,106,111,114,110,0,106,111,118,0,106,111,0,106,117,39,97,0,106,117,102,114,97,0,106,117,39,101,0,106,117,108,110,101,0,106,117,39,105,0,106,117,110,100,105,0,106,117,39,111,0,106,117,98,0,106,117,98,109,0,106,117,100,0,106,117,100,114,0,106,117,100,114,105,0,106,117,102,0,106,117,102,114,0,106,117,103,0,106,117,110,103,111,0,106,117,107,0,106,117,107,110,105,0,106,117,107,110,0,106,117,107,112,0,106,117,107,112,97,0,106,117,108,0,106,117,110,108,97,0,106,117,108,110,0,106,117,109,0,106,117,114,109,101,0,106,117,110,0,106,117,110,100,0,106,117,110,103,0,106,117,110,108,0,106,117,110,114,0,106,117,110,114,105,0,106,117,110,116,0,106,117,110,116,97,0,106,117,112,0,106,117,114,0,106,117,114,109,0,106,117,114,115,0,106,117,114,115,97,0,106,117,115,0,106,117,116,0,106,117,116,115,105,0,106,117,116,115,0,106,117,118,0,106,117,0,106,117,120,0,106,117,120,114,101,0,106,117,120,114,0,106,118,97,0,106,118,101,0,106,118,105,0,106,118,105,110,0,106,118,111,0,108,117,106,118,111,0,107,97,39,97,0,107,97,116,110,97,0,107,97,39,101,0,107,97,107,110,101,0,107,97,39,105,0,107,114,97,116,105,0,107,97,39,111,0,107,97,110,114,111,0,107,97,39,117,0,107,97,110,116,117,0,107,97,98,0,107,97,114,98,105,0,107,97,98,114,0,107,97,98,114,105,0,107,97,99,0,107,97,110,99,117,0,107,97,99,109,0,107,97,99,109,97,0,107,97,100,0,107,97,110,100,105,0,107,97,100,110,0,107,97,100,110,111,0,107,97,102,0,107,97,102,107,0,107,97,102,107,101,0,107,97,103,0,107,97,103,110,105,0,107,97,103,110,0,107,97,105,0,107,97,106,0,107,97,110,106,105,0,107,97,106,100,0,107,97,106,110,0,107,97,106,110,97,0,107,97,107,0,107,108,97,107,117,0,107,97,107,110,0,107,97,107,112,0,107,97,107,112,97,0,107,97,108,0,107,97,110,108,97,0,107,97,108,99,0,107,97,108,99,105,0,107,97,108,114,0,107,97,108,114,105,0,107,97,108,115,0,107,97,108,115,97,0,107,97,108,116,0,107,97,108,116,101,0,107,97,109,0,107,97,0,107,97,109,106,0,107,97,109,106,117,0,107,97,109,110,0,107,97,109,110,105,0,107,97,109,112,0,107,97,109,112,117,0,107,97,110,0,107,97,110,115,97,0,107,97,110,98,0,107,97,110,98,97,0,107,97,110,99,0,107,97,110,100,0,107,97,110,106,0,107,97,110,108,0,107,97,110,114,0,107,97,110,115,0,107,97,110,116,0,107,97,110,120,0,107,97,110,120,101,0,107,97,112,0,115,107,97,112,105,0,107,97,114,0,107,97,114,98,0,107,97,114,99,0,107,97,114,99,101,0,107,97,114,100,0,107,97,114,100,97,0,107,97,114,103,0,107,97,114,103,117,0,107,97,114,108,0,107,97,114,108,105,0,107,97,114,110,0,107,97,114,110,105,0,107,97,115,0,107,97,116,0,107,97,116,110,0,107,97,117,0,107,97,118,0,107,97,118,98,117,0,107,97,118,98,0,107,97,120,0,107,101,39,97,0,107,101,118,110,97,0,107,101,39,101,0,107,101,39,105,0,107,101,99,116,105,0,107,101,39,111,0,107,101,108,118,111,0,107,101,39,117,0,107,114,101,102,117,0,107,101,99,0,107,101,99,116,0,107,101,105,0,107,101,108,99,105,0,107,101,106,0,107,101,108,0,107,101,108,99,0,107,101,108,118,0,107,101,109,0,107,101,0,107,101,110,0,107,101,110,114,97,0,107,101,110,114,0,107,101,110,115,0,107,101,110,115,97,0,107,101,112,0,107,101,114,0,107,101,114,108,111,0,107,101,114,102,0,107,101,114,102,97,0,107,101,114,108,0,107,101,115,0,107,101,116,0,107,101,116,99,111,0,107,101,116,99,0,107,101,118,0,107,101,118,110,0,107,101,122,0,107,105,39,97,0,107,114,105,120,97,0,107,105,39,101,0,107,105,99,110,101,0,107,105,39,105,0,107,105,39,111,0,107,105,108,116,111,0,107,105,39,117,0,107,114,105,110,117,0,107,105,99,0,107,105,99,110,0,107,105,106,0,107,105,106,110,111,0,107,105,106,110,0,107,105,107,0,107,105,108,0,107,105,110,108,105,0,107,105,108,116,0,107,105,110,0,115,107,105,110,97,0,107,105,110,108,0,107,105,114,0,107,105,115,0,107,105,115,116,111,0,107,105,115,116,0,107,105,116,0,107,108,105,116,105,0,107,105,120,0,107,108,97,0,107,108,97,109,97,0,107,108,97,106,0,107,108,97,106,105,0,107,108,97,107,0,107,108,97,109,0,107,108,97,110,0,107,108,97,110,105,0,107,108,101,0,107,108,101,115,105,0,107,108,101,115,0,107,108,105,0,107,108,105,110,97,0,107,108,105,110,0,107,108,105,114,0,107,108,105,114,117,0,107,108,105,116,0,107,108,111,0,107,108,117,0,107,117,108,110,117,0,107,108,117,112,0,107,108,117,112,101,0,107,108,117,122,0,107,108,117,122,97,0,107,111,39,97,0,107,111,106,110,97,0,107,111,39,101,0,107,111,108,109,101,0,107,111,39,105,0,107,111,98,108,105,0,107,111,39,111,0,115,107,111,116,111,0,107,111,39,117,0,107,111,110,106,117,0,107,111,98,0,107,111,98,108,0,107,111,105,0,107,111,114,98,105,0,107,111,106,0,107,111,106,110,0,107,111,107,0,107,111,114,107,97,0,107,111,108,0,107,111,108,109,0,107,111,109,0,107,111,109,99,117,0,107,111,109,99,0,107,111,110,0,107,111,110,106,0,107,111,114,0,107,111,114,98,0,107,111,114,99,0,107,111,114,99,117,0,107,111,114,107,0,107,111,115,0,107,111,115,116,97,0,107,111,115,116,0,107,111,116,0,107,114,97,0,107,114,97,115,105,0,107,114,97,109,0,107,114,97,109,117,0,107,114,97,115,0,107,114,97,116,0,107,114,101,0,107,114,101,102,0,107,114,105,0,107,114,105,99,105,0,107,114,105,99,0,107,114,105,108,0,107,114,105,108,105,0,107,114,105,110,0,107,114,105,120,0,107,114,111,0,107,114,117,0,107,114,117,118,105,0,107,114,117,99,0,107,114,117,99,97,0,107,114,117,106,0,107,114,117,106,105,0,107,114,117,118,0,107,117,39,97,0,107,117,109,102,97,0,107,117,39,101,0,107,117,115,112,101,0,107,117,39,105,0,107,117,114,106,105,0,107,117,39,111,0,115,107,117,114,111,0,107,117,39,117,0,107,117,98,0,107,117,98,108,105,0,107,117,98,108,0,107,117,99,0,107,117,99,108,0,107,117,99,108,105,0,107,117,102,0,107,117,102,114,97,0,107,117,102,114,0,107,117,106,0,107,117,107,0,107,117,107,116,101,0,107,117,107,116,0,107,117,108,0,107,117,108,110,0,107,117,109,0,107,117,109,102,0,107,117,109,116,0,107,117,109,116,101,0,107,117,110,0,107,117,110,114,97,0,107,117,110,114,0,107,117,110,116,0,107,117,110,116,105,0,107,117,112,0,107,117,114,0,107,117,114,102,97,0,107,117,114,102,0,107,117,114,106,0,107,117,114,107,0,107,117,114,107,105,0,107,117,115,0,107,117,115,114,117,0,107,117,115,112,0,107,117,115,114,0,107,117,116,0,107,117,122,0,108,97,39,97,0,108,97,115,110,97,0,108,97,39,101,0,108,97,107,110,101,0,108,97,39,105,0,108,97,109,106,105,0,108,97,39,111,0,108,97,116,109,111,0,108,97,39,117,0,108,97,108,120,117,0,108,97,98,0,108,97,98,110,0,108,97,98,110,111,0,108,97,99,0,108,97,99,114,105,0,108,97,99,112,0,108,97,99,114,0,108,97,100,0,108,97,100,114,117,0,108,97,100,114,0,108,97,102,0,108,97,102,116,105,0,108,97,102,116,0,108,97,103,0,118,108,97,103,105,0,108,97,105,0,108,97,106,0,108,97,107,0,108,97,107,115,101,0,108,97,107,110,0,108,97,107,115,0,108,97,108,0,108,97,110,108,105,0,108,97,108,120,0,108,97,109,0,108,97,109,106,0,108,97,110,0,108,97,110,109,101,0,108,97,110,98,0,108,97,110,98,105,0,108,97,110,99,0,108,97,110,99,105,0,108,97,110,107,0,108,97,110,107,97,0,108,97,110,108,0,108,97,110,109,0,108,97,110,116,0,108,97,110,116,101,0,108,97,110,120,0,108,97,110,120,101,0,108,97,110,122,0,108,97,110,122,117,0,108,97,112,0,108,97,114,0,108,97,114,99,117,0,108,97,114,99,0,108,97,115,0,115,108,97,115,105,0,108,97,115,110,0,108,97,115,116,0,108,97,115,116,117,0,108,97,116,0,109,108,97,116,117,0,108,97,116,109,0,108,97,116,110,0,108,97,116,110,97,0,108,97,117,0,108,97,120,0,108], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+92162);
/* memory initializer */ allocate([97,122,0,108,97,122,110,0,108,97,122,110,105,0,108,101,39,97,0,108,101,98,110,97,0,108,101,39,105,0,112,108,101,106,105,0,108,101,39,111,0,108,101,110,106,111,0,108,101,39,117,0,108,101,114,102,117,0,108,101,98,0,108,101,98,110,0,108,101,99,0,108,101,114,99,105,0,108,101,100,0,109,108,101,100,105,0,108,101,105,0,108,101,106,0,108,101,107,0,108,101,110,107,117,0,108,101,109,0,108,101,39,101,0,108,101,110,0,108,101,110,106,0,108,101,110,107,0,108,101,114,0,108,101,114,99,0,108,101,114,102,0,108,101,116,0,108,105,39,97,0,108,105,39,101,0,108,105,100,110,101,0,108,105,39,105,0,108,105,110,106,105,0,108,105,39,111,0,108,105,110,116,111,0,108,105,39,117,0,108,105,116,114,117,0,108,105,98,0,108,105,98,106,111,0,108,105,98,106,0,108,105,99,0,108,105,116,99,101,0,108,105,100,0,108,105,110,100,105,0,108,105,100,110,0,108,105,102,0,108,105,102,114,0,108,105,103,0,115,108,105,103,117,0,108,105,106,0,108,105,106,100,0,108,105,107,0,108,105,116,107,105,0,108,105,108,0,108,105,118,108,97,0,108,105,109,0,108,105,109,110,97,0,108,105,109,110,0,108,105,110,0,108,105,110,115,105,0,108,105,110,100,0,108,105,110,106,0,108,105,110,115,0,108,105,110,116,0,108,105,114,0,108,105,115,0,108,105,115,114,105,0,108,105,115,114,0,108,105,115,116,0,108,105,115,116,101,0,108,105,116,0,108,105,116,99,0,108,105,116,107,0,108,105,116,114,0,108,105,118,0,108,105,118,103,0,108,105,118,103,97,0,108,105,118,108,0,108,105,120,0,112,108,105,120,97,0,108,105,122,0,108,111,39,105,0,108,111,39,111,0,115,108,111,118,111,0,108,111,39,117,0,108,111,114,120,117,0,108,111,98,0,108,111,103,106,0,108,111,103,106,105,0,108,111,105,0,108,111,108,100,105,0,108,111,106,0,108,111,106,98,0,108,111,108,0,108,111,108,100,0,108,111,109,0,108,111,39,101,0,108,111,114,0,108,111,114,120,0,108,111,116,0,108,111,118,0,108,117,39,97,0,112,108,117,116,97,0,108,117,39,101,0,108,117,39,105,0,108,117,109,99,105,0,108,117,39,111,0,108,117,98,110,111,0,108,117,98,0,108,117,110,98,101,0,108,117,98,110,0,108,117,106,0,112,108,117,106,97,0,108,117,106,118,0,108,117,109,0,108,117,109,99,0,108,117,110,0,109,108,117,110,105,0,108,117,110,98,0,108,117,110,114,0,108,117,110,114,97,0,108,117,110,115,0,108,117,110,115,97,0,108,117,112,0,108,117,114,0,108,117,115,0,108,117,116,0,108,117,118,0,108,117,122,0,109,97,39,97,0,109,97,39,101,0,109,97,114,99,101,0,109,97,39,105,0,109,97,115,116,105,0,109,97,39,111,0,109,97,39,117,0,109,97,107,99,117,0,109,97,98,0,109,97,98,114,117,0,109,97,98,108,0,109,97,98,108,97,0,109,97,98,114,0,109,97,99,0,109,97,110,99,105,0,109,97,99,110,0,109,97,100,0,109,97,114,100,101,0,109,97,102,0,109,97,107,102,97,0,109,97,103,0,109,97,114,103,117,0,109,97,105,0,109,97,114,106,105,0,109,97,106,0,109,97,107,0,109,97,107,115,105,0,109,97,107,99,0,109,97,107,102,0,109,97,107,115,0,109,97,108,0,109,97,108,115,0,109,97,108,115,105,0,109,97,109,0,109,97,109,116,97,0,109,97,109,116,0,109,97,110,0,109,97,110,107,117,0,109,97,110,99,0,109,97,110,102,0,109,97,110,102,111,0,109,97,110,107,0,109,97,110,114,0,109,97,110,114,105,0,109,97,110,115,0,109,97,110,115,97,0,109,97,110,116,0,109,97,110,116,105,0,109,97,112,0,109,97,112,107,117,0,109,97,112,107,0,109,97,112,110,0,109,97,112,110,105,0,109,97,112,116,0,109,97,112,116,105,0,109,97,114,0,109,97,114,98,0,109,97,114,98,105,0,109,97,114,99,0,109,97,114,100,0,109,97,114,103,0,109,97,114,106,0,109,97,114,110,0,109,97,114,110,97,0,109,97,114,120,0,109,97,114,120,97,0,109,97,115,0,109,97,115,110,0,109,97,115,110,111,0,109,97,115,116,0,109,97,116,0,109,97,116,99,0,109,97,116,99,105,0,109,97,116,108,0,109,97,116,108,105,0,109,97,116,110,0,109,97,116,110,101,0,109,97,116,114,0,109,97,116,114,97,0,109,97,117,0,122,109,97,100,117,0,109,97,118,0,109,97,118,106,105,0,109,97,118,106,0,109,97,120,0,109,97,120,114,0,109,97,120,114,105,0,109,101,39,97,0,109,108,101,99,97,0,109,101,39,101,0,109,101,39,105,0,109,101,110,115,105,0,109,101,39,111,0,109,101,107,115,111,0,109,101,39,117,0,109,101,110,116,117,0,109,101,98,0,109,101,98,114,105,0,109,101,98,114,0,109,101,99,0,109,101,103,0,109,101,103,100,111,0,109,101,103,100,0,109,101,105,0,109,101,106,0,109,101,108,106,111,0,109,101,107,0,109,101,107,115,0,109,101,108,0,109,101,108,98,105,0,109,101,108,98,0,109,101,108,106,0,109,101,109,0,109,101,110,0,109,101,110,108,105,0,109,101,110,108,0,109,101,110,115,0,109,101,110,116,0,109,101,114,0,109,101,114,107,111,0,109,101,114,107,0,109,101,114,108,0,109,101,114,108,105,0,109,101,115,0,109,101,116,0,109,101,120,0,109,101,120,110,111,0,109,101,120,110,0,109,105,39,97,0,109,105,39,101,0,109,105,110,100,101,0,109,105,39,105,0,109,105,110,106,105,0,109,105,39,111,0,109,105,115,110,111,0,109,105,39,117,0,109,105,110,116,117,0,109,105,98,0,109,105,0,109,105,99,0,109,105,107,99,101,0,109,105,100,0,109,105,100,106,0,109,105,100,106,117,0,109,105,102,0,109,105,102,114,97,0,109,105,102,114,0,109,105,106,0,109,105,107,0,109,105,107,114,105,0,109,105,107,99,0,109,105,107,114,0,109,105,108,0,109,105,108,116,105,0,109,105,108,116,0,109,105,108,120,0,109,105,108,120,101,0,109,105,109,0,109,105,110,0,109,105,110,100,0,109,105,110,106,0,109,105,110,108,0,109,105,110,108,105,0,109,105,110,114,0,109,105,110,114,97,0,109,105,110,116,0,109,105,112,0,109,105,112,114,105,0,109,105,112,114,0,109,105,114,0,109,105,114,108,0,109,105,114,108,105,0,109,105,115,0,109,105,115,110,0,109,105,115,114,0,109,105,115,114,111,0,109,105,116,0,109,105,116,114,0,109,105,116,114,101,0,109,105,118,0,109,105,120,0,109,105,120,114,101,0,109,105,120,114,0,109,108,97,0,109,108,97,110,97,0,109,108,97,110,0,109,108,97,116,0,109,108,101,0,109,108,101,99,0,109,108,101,100,0,109,108,105,0,109,108,111,0,109,111,108,107,105,0,109,108,117,0,115,105,109,108,117,0,109,108,117,110,0,109,111,39,97,0,109,111,114,110,97,0,109,111,39,105,0,109,111,114,106,105,0,109,111,39,111,0,109,111,108,114,111,0,109,111,39,117,0,109,111,107,108,117,0,109,111,98,0,109,111,99,0,109,111,107,99,97,0,109,111,105,0,109,111,106,0,109,111,107,99,0,109,111,107,108,0,109,111,108,0,109,111,108,107,0,109,111,108,114,0,109,111,109,0,109,111,110,0,109,111,114,0,109,111,114,107,111,0,109,111,114,106,0,109,111,114,107,0,109,111,114,110,0,109,111,114,115,0,109,111,114,115,105,0,109,111,115,0,109,111,115,114,97,0,109,111,115,114,0,109,111,118,0,109,114,97,0,109,114,97,106,0,109,114,97,106,105,0,109,114,101,0,109,114,105,0,109,114,105,108,117,0,109,114,105,108,0,109,114,111,0,109,114,117,0,109,114,117,108,105,0,109,114,117,108,0,109,117,39,97,0,109,117,114,116,97,0,109,117,39,101,0,109,117,110,106,101,0,109,117,39,105,0,109,117,107,116,105,0,109,117,39,111,0,109,117,108,110,111,0,109,117,39,117,0,109,117,118,100,117,0,109,117,99,0,115,109,117,99,105,0,109,117,99,116,0,109,117,99,116,105,0,109,117,100,0,109,117,100,114,105,0,109,117,100,114,0,109,117,102,0,109,117,106,0,109,117,107,0,109,117,107,116,0,109,117,108,0,109,117,108,110,0,109,117,109,0,109,117,0,109,117,110,0,115,109,117,110,105,0,109,117,110,106,0,109,117,112,0,109,117,112,108,105,0,109,117,112,108,0,109,117,114,0,109,117,114,115,0,109,117,114,115,101,0,109,117,114,116,0,109,117,115,0,109,117,115,108,111,0,109,117,115,108,0,109,117,116,0,109,117,116,99,0,109,117,116,99,101,0,109,117,118,0,109,117,118,100,0,109,117,122,0,109,117,122,103,97,0,109,117,122,103,0,110,97,39,97,0,110,97,110,99,97,0,110,97,39,101,0,110,97,116,102,101,0,110,97,39,105,0,110,97,108,99,105,0,110,97,39,111,0,110,97,39,117,0,110,97,109,99,117,0,110,97,98,0,110,97,110,98,97,0,110,97,98,109,0,110,97,98,109,105,0,110,97,99,0,110,97,100,0,110,97,110,100,117,0,110,97,102,0,110,97,103,0,110,97,114,103,101,0,110,97,105,0,110,97,116,109,105,0,110,97,106,0,110,97,114,106,117,0,110,97,107,0,110,97,107,110,105,0,110,97,107,110,0,110,97,108,0,110,97,108,99,0,110,97,109,0,110,97,109,99,0,115,110,97,110,117,0,110,97,110,98,0,110,97,110,99,0,110,97,110,100,0,110,97,110,108,0,110,97,110,108,97,0,110,97,110,109,0,110,97,110,109,117,0,110,97,110,118,0,110,97,110,118,105,0,110,97,114,0,110,97,0,110,97,114,103,0,110,97,114,106,0,110,97,116,0,110,97,116,102,0,110,97,116,109,0,110,97,117,0,110,97,118,0,110,97,118,110,0,110,97,118,110,105,0,110,97,120,0,110,97,120,108,101,0,110,97,120,108,0,110,97,122,0,110,97,122,98,105,0,110,97,122,98,0,110,101,39,105,0,110,101,110,114,105,0,110,101,39,111,0,110,101,39,117,0,110,101,98,0,110,101,105,0,110,101,108,99,105,0,110,101,106,110,0,110,101,106,110,105,0,110,101,108,0,110,101,108,99,0,110,101,109,0,110,101,110,0,110,101,110,114,0,110,101,114,0,110,105,39,97,0,110,105,39,101,0,110,105,108,99,101,0,110,105,39,105,0,110,105,98,108,105,0,110,105,39,111,0,110,105,39,117,0,110,105,110,109,117,0,110,105,98,0,110,105,98,108,0,110,105,99,0,110,105,99,116,0,110,105,100,0,115,110,105,100,117,0,110,105,107,0,110,105,107,108,101,0,110,105,107,108,0,110,105,108,0,110,105,0,110,105,108,99,0,110,105,109,0,110,105,109,114,0,110,105,109,114,101,0,110,105,110,0,110,105,110,109,0,110,105,112,0,115,110,105,112,97,0,110,105,114,0,110,105,114,110,97,0,110,105,114,110,0,110,105,115,0,110,105,116,0,110,105,116,99,0,110,105,116,99,117,0,110,105,118,0,110,105,118,106,105,0,110,105,118,106,0,110,105,120,0,110,105,120,108,105,0,110,105,120,108,0,110,111,39,101,0,110,111,39,105,0,110,111,98,108,105,0,110,111,98,108,0,110,111,105,0,110,111,116,99,105,0,110,111,108,0,110,111,110,0,110,111,0,110,111,114,0,110,111,116,0,110,111,116,99,0,110,117,39,97,0,115,110,117,114,97,0,110,117,39,101,0,110,117,112,114,101,0,110,117,39,105,0,110,117,116,108,105,0,110,117,39,111,0,110,117,106,0,115,110,117,106,105,0,110,117,107,0,110,117,107,110,105,0,110,117,107,110,0,110,117,108,0,110,117,109,0,110,117,114,109,97,0,110,117,110,0,110,117,0,110,117,112,0,110,117,112,114,0,110,117,114,0,110,117,114,109,0,110,117,116,0,115,110,117,116,105,0,110,117,116,108,0,110,117,122,0,110,117,122,98,97,0,110,117,122,98,0,112,97,39,97,0,112,97,99,110,97,0,112,97,39,101,0,112,114,97,110,101,0,112,97,39,105,0,112,114,97,109,105,0,112,97,39,111,0,112,97,110,108,111,0,112,97,39,117,0,112,97,116,102,117,0,112,97,98,0,112,97,114,98,105,0,112,97,99,0,112,97,108,99,105,0,112,97,99,110,0,112,97,100,0,112,97,110,100,105,0,112,97,102,0,112,97,103,0,112,97,103,98,117,0,112,97,103,98,0,112,97,103,114,0,112,97,105,0,112,97,106,110,105,0,112,97,106,0,115,112,97,106,105,0,112,97,106,110,0,112,97,107,0,112,97,108,107,117,0,112,97,108,0,112,114,97,108,105,0,112,97,108,99,0,112,97,108,107,0,112,97,108,110,0,112,97,108,110,101,0,112,97,108,116,0,112,97,108,116,97,0,112,97,109,0,112,97,109,98,0,112,97,109,98,101,0,112,97,110,0,112,97,110,99,105,0,112,97,110,99,0,112,97,110,100,0,112,97,110,106,0,112,97,110,106,101,0,112,97,110,107,0,112,97,110,107,97,0,112,97,110,108,0,112,97,110,112,0,112,97,110,112,105,0,112,97,110,114,0,112,97,110,114,97,0,112,97,110,116,0,112,97,110,116,101,0,112,97,110,122,0,112,97,110,122,105,0,112,97,112,0,112,97,112,114,0,112,97,112,114,105,0,112,97,114,0,112,97,114,98,0,112,97,115,0,112,97,115,116,117,0,112,97,115,116,0,112,97,116,0,112,97,116,102,0,112,97,116,108,0,112,97,116,108,117,0,112,97,116,120,0,112,97,116,120,117,0,112,97,117,0,112,97,118,0,112,97,0,112,97,120,0,112,97,122,0,112,101,39,97,0,112,114,101,106,97,0,112,101,39,105,0,112,101,110,109,105,0,112,101,39,111,0,112,101,110,100,111,0,112,101,39,117,0,112,101,110,99,117,0,112,101,98,0,112,101,110,98,105,0,112,101,99,0,112,101,100,0,112,101,105,0,112,101,110,115,105,0,112,101,106,0,112,101,108,0,112,101,108,120,117,0,112,101,108,106,0,112,101,108,106,105,0,112,101,108,120,0,112,101,109,0,112,101,109,99,105,0,112,101,109,99,0,112,101,110,0,112,101,110,98,0,112,101,110,99,0,112,101,110,100,0,112,101,110,109,0,112,101,110,115,0,112,101,114,0,112,101,114,108,105,0,112,101,114,108,0,112,101,115,0,112,101,115,120,0,112,101,115,120,117,0,112,101,116,0,112,101,116,115,111,0,112,101,116,115,0,112,101,118,0,112,101,120,0,112,101,122,0,112,101,122,108,105,0,112,101,122,108,0,112,105,39,97,0,112,105,108,107,97,0,112,105,39,101,0,112,108,105,112,101,0,112,105,39,105,0,112,105,108,106,105,0,112,105,39,111,0,112,105,112,110,111,0,112,105,39,117,0,112,105,109,108,117,0,112,105,98,0,112,108,105,98,117,0,112,105,99,0,112,105,99,116,105,0,112,105,99,116,0,112,105,100,0,112,105,110,100,105,0,112,105,102,0,112,105,110,102,117,0,112,105,106,0,112,114,105,106,101,0,112,105,106,110,0,112,105,106,110,101,0,112,105,107,0,112,105,110,107,97,0,112,105,107,99,0,112,105,107,99,105,0,112,105,107,116,0,112,105,107,116,97,0,112,105,108,0,112,105,108,106,0,112,105,108,107,0,112,105,108,110,0,112,105,108,110,111,0,112,105,109,0,112,105,109,108,0,112,105,110,0,112,105,110,116,97,0,112,105,110,99,0,112,105,110,99,97,0,112,105,110,100,0,112,105,110,102,0,112,105,110,106,0,112,105,110,106,105,0,112,105,110,107,0,112,105,110,115,0,112,105,110,115,105,0,112,105,110,116,0,112,105,110,120,0,112,105,110,120,101,0,112,105,112,0,112,105,112,110,0,112,105,114,0,112,105,120,114,97,0,112,105,115,0,112,105,116,0,112,108,105,116,97,0,112,105,118,0,112,105,120,0,112,105,120,114,0,112,105,122,0,112,105,0,112,108,97,0,112,108,97,116,117,0,112,108,97,110,0,112,108,97,110,97,0,112,108,97,116,0,112,108,101,0,112,108,101,106,0,112,108,105,0,112,108,105,98,0,112,108,105,110,0,112,108,105,110,105,0,112,108,105,112,0,112,108,105,115,0,112,108,105,115,101,0,112,108,105,116,0,112,108,105,120,0,112,108,111,0,112,111,108,106,101,0,112,108,117,0,112,108,117,106,0,112,108,117,107,0,112,108,117,107,97,0,112,108,117,116,0,112,111,39,97,0,115,112,111,106,97,0,112,111,39,101,0,112,111,110,115,101,0,112,111,39,105,0,112,111,114,112,105,0,112,111,39,111,0,112,111,110,106,111,0,112,111,39,117,0,115,112,111,102,117,0,112,111,102,0,112,111,105,0,112,111,114,115,105,0,112,111,106,0,112,111,108,0,112,111,108,110,111,0,112,111,108,106,0,112,111,108,110,0,112,111,110,0,112,111,110,106,0,112,111,110,115,0,112,111,112,0,112,111,114,0,112,111,114,112,0,112,111,114,115,0,112,111,114,116,0,112,111,114,116,111,0,112,111,115,0,112,111,116,0,112,114,97,0,112,114,97,108,0,112,114,97,109,0,112,114,97,110,0,112,114,101,0,112,114,101,110,117,0,112,114,101,106,0,112,114,101,110,0,112,114,101,116,0,112,114,101,116,105,0,112,114,105,0,112,114,105,110,97,0,112,114,105,106,0,112,114,105,110,0,112,114,105,116,0,112,114,105,116,117,0,112,114,111,0,112,114,111,115,0,112,114,111,115,97,0,112,114,117,0,112,117,114,99,105,0,112,114,117,99,0,112,114,117,99,101,0,112,114,117,110,0,112,114,117,110,105,0,112,114,117,120,0,112,114,117,120,105,0,112,117,39,97,0,112,117,39,101,0,112,117,108,99,101,0,112,117,39,105,0,112,117,110,106,105,0,112,117,39,111,0,112,117,114,109,111,0,112,117,39,117,0,115,112,117,116,117,0,112,117,99,0,112,117,100,0,112,117,114,100,105,0,112,117,106,0,112,117,107,0,112,117,108,0,112,117,110,108,105,0,112,117,108,99,0,112,117,108,106,0,112,117,108,106,105,0,112,117,108,110,0,112,117,108,110,105,0,112,117,109,0,112,117,110,0,112,117,110,106,0,112,117,110,108,0,112,117,114,0,112,117,114,99,0,112,117,114,100,0,112,117,114,109,0,112,117,115,0,112,117,116,0,112,117,118,0,114,97,39,97,0,115,114,97,110,97,0,114,97,39,101,0,114,97,108,116,101,0,114,97,39,105,0,114,97,110,106,105,0,114,97,39,111,0,114,97,100,110,111,0,114,97,39,117,0,114,97,107,116,117,0,114,97,98,0,120,114,97,98,111,0,114,97,99,0,114,97,108,99,105,0,114,97,99,108,0,114,97,99,108,105,0,114,97,99,116,0,114,97,99,116,117,0,114,97,100,0,114,97,110,100,97,0,114,97,100,110,0,114,97,102,0,114,97,102,115,105,0,114,97,102,115,0,114,97,103,0,114,97,110,103,111,0,114,97,103,118,0,114,97,103,118,101,0,114,97,105,0,116,114,97,106,105,0,114,97,106,0,115,114,97,106,105,0,114,97,107,0,115,114,97,107,117,0,114,97,107,115,0,114,97,107,115,111,0,114,97,107,116,0,114,97,108,0,114,97,108,106,117,0,114,97,108,99,0,114,97,108,106,0,114,97,108,116,0,114,97,109,0,114,97,110,109,105,0,114,97,110,0,114,97,110,116,105,0,114,97,110,100,0,114,97,110,103,0,114,97,110,106,0,114,97,110,109,0,114,97,110,115,0,114,97,110,115,117,0,114,97,110,116,0,114,97,110,120,0,114,97,110,120,105,0,114,97,112,0,114,97,112,108,105,0,114,97,112,108,0,114,97,114,0,114,97,114,110,97,0,114,97,114,110,0,114,97,115,0,114,97,116,0,114,97,116,110,105,0,114,97,116,99,0,114,97,116,99,117,0,114,97,116,110,0,114,97,117,0,114,97,118,0,114,97,120,0,114,97,122,0,114,101,39,97,0,114,101,109,110,97,0,114,101,39,101,0,116,114,101,110,101,0,114,101,39,105,0,114,101,110,118,105,0,114,101,39,111,0,114,101,110,114,111,0,114,101,39,117,0,114,101,99,116,117,0,114,101,98,0,114,101,98,108,97,0,114,101,98,108,0,114,101,99,0,114,101,99,116,0,114,101,100,0,114,101,102,0,114,101,105,0,114,101,106,0,118,114,101,106,105,0,114,101,107,0,114,101,108,0,114,101,0,114,101,109,0,114,101,109,110,0,114,101,110,0,114,101,110,114,0,114,101,110,118,0,114,101,112,0,114,101,114,0,114,101,115,0,114,101,115,112,97,0,114,101,115,112,0,114,101,116,0,114,101,118,0,114,105,39,97,0,114,105,110,107,97,0,114,105,39,101,0,114,105,114,120,101,0,114,105,39,105,0,114,105,116,108,105,0,114,105,39,111,0,114,105,39,117,0,114,105,110,106,117,0,114,105,98,0,114,105,99,0,116,114,105,99,117,0,114,105,99,102,0,114,105,100,0,114,105,102,0,114,105,103,0,114,105,103,110,105,0,114,105,103,110,0,114,105,106,0,114,105,106,110,111,0,114,105,106,110,0,114,105,107,0,114,105,108,0,114,105,108,116,105,0,114,105,108,116,0,114,105,109,0,114,105,109,110,105,0,114,105,109,110,0,114,105,110,0,114,105,110,99,0,114,105,110,99,105,0,114,105,110,106,0,114,105,110,107,0,114,105,110,115,0,114,105,110,115,97,0,114,105,112,0,114,105,114,0,114,105,114,110,105,0,114,105,114,99,0,114,105,114,99,105,0,114,105,114,110,0,114,105,114,120,0,114,105,115,0,114,105,115,109,105,0,114,105,115,109,0,114,105,115,110,0,114,105,115,110,97,0,114,105,116,0,114,105,116,108,0,114,105,118,0,114,105,118,98,105,0,114,105,118,98,0,114,105,120,0,116,114,105,120,101,0,114,111,39,97,0,114,111,39,105,0,114,111,107,99,105,0,114,111,39,111,0,114,111,112,110,111,0,114,111,39,117,0,114,111,116,115,117,0,114,111,100,0,98,114,111,100,97,0,114,111,103,0,114,111,109,103,101,0,114,111,105,0,114,111,107,0,114,111,107,99,0,114,111,108,0,114,111,0,114,111,109,0,114,111,109,103,0,114,111,110,0,114,111,112,110,0,114,111,114,0,114,111,114,99,105,0,114,111,114,99,0,114,111,115,0,114,111,116,0,114,111,116,115,0,114,111,122,0,114,111,122,103,117,0,114,111,122,103,0,114,117,39,97,0,115,114,117,109,97,0,114,117,39,101,0,114,117,39,105,0,114,117,39,111,0,114,117,115,107,111,0,114,117,39,117,0,114,117,112,110,117,0,114,117,98,0,114,117,98,108,0,114,117,99,0,114,117,100,0,114,117,102,0,114,117,102,115,117,0,114,117,102,115,0,114,117,106,0,114,117,107,0,114,117,108,0,120,114,117,108,97,0,114,117,109,0,114,117,110,109,101,0,114,117,110,0,114,117,116,110,105,0,114,117,110,109,0,114,117,110,116,0,114,117,110,116,97,0,114,117,112,0,114,117,112,110,0,114,117,114,0,115,114,117,114,105,0,114,117,115,0,114,117,115,107,0,114,117,116,0,114,117,116,110,0,114,117,118,0,114,117,120,0,115,97,39,97,0,115,97,110,103,97,0,115,97,39,101,0,115,97,116,114,101,0,115,97,39,105,0,115,97,110,108,105,0,115,97,39,111,0,115,97,108,112,111,0,115,97,39,117,0,115,97,114,99,117,0,115,97,98,0,115,97,98,106,105,0,115,97,98,106,0,115,97,98,110,0,115,97,98,110,117,0,115,97,99,0,115,116,97,99,101,0,115,97,99,107,0,115,97,99,107,105,0,115,97,99,108,0,115,97,99,108,117,0,115,97,100,0,115,110,97,100,97,0,115,97,100,106,0,115,97,103,0,115,97,105,0,115,97,110,109,105,0,115,97,106,0,115,97,110,106,105,0,115,97,107,0,115,97,107,99,105,0,115,97,107,99,0,115,97,107,108,0,115,97,107,108,105,0,115,97,107,116,0,115,97,107,116,97,0,115,97,108,0,115,97,108,99,0,115,97,108,99,105,0,115,97,108,112,0,115,97,108,116,0,115,97,108,116,97,0,115,97,109,0,115,107,97,109,105,0,115,97,109,99,0,115,97,109,99,117,0,115,97,109,112,0,115,97,109,112,117,0,115,97,110,0,115,112,97,110,111,0,115,97,110,99,0,115,97,110,99,101,0,115,97,110,103,0,115,97,110,106,0,115,97,110,108,0,115,97,110,109,0,115,97,110,115,0,115,97,110,115,111,0,115,97,110,116,0,115,97,110,116,97,0,115,97,112,0,115,97,114,0,115,108,97,114,105,0,115,97,114,99,0,115,97,114,106,0,115,97,114,106,105,0,115,97,114,108,0,115,97,114,108,117,0,115,97,114,120,0,115,97,114,120,101,0,115,97,115,0,115,114,97,115,117,0,115,97,115,107,0,115,97,115,107,101,0,115,97,116,0,115,97,116,99,0,115,97,116,99,105,0,115,97,116,114,0,115,97,117,0,115,108,97,98,117,0,115,97,118,0,115,97,118,114,117,0,115,97,118,114,0,115,97,120,0,115,97,122,0,115,97,122,114,105,0,115,97,122,114,0,115,101,39,97,0,115,101,116,99,97,0,115,101,39,105,0,115,101,118,122,105,0,115,101,39,117,0,115,101,108,102,117,0,115,101,98,0,115,116,101,98,97,0,115,101,99,0,115,101,110,99,105,0,115,101,100,0,115,116,101,100,117,0,115,101,102,0,115,101,102,116,0,115,101,102,116,97,0,115,101,105,0,115,101,112,108,105,0,115,101,108,0,115,101,0,115,101,108,99,0,115,101,108,99,105,0,115,101,108,102,0,115,101,109,116,0,115,101,109,116,111,0,115,101,110,0,115,101,110,112,105,0,115,101,110,99,0,115,101,110,112,0,115,101,110,116,0,115,101,110,116,97,0,115,101,110,118,0,115,101,110,118,97,0,115,101,112,0,115,101,112,108,0,115,101,114,0,115,101,114,116,105,0,115,101,114,116,0,115,101,116,0,115,101,116,99,0,115,101,118,0,115,101,118,122,0,115,101,122,0,115,102,97,0,115,102,97,115,97,0,115,102,97,110,0,115,102,97,110,105,0,115,102,97,115,0,115,102,101,0,115,102,111,0,115,102,111,102,97,0,115,102,111,102,0,115,102,117,0,115,117,102,116,105,0,115,102,117,98,0,115,102,117,98,117,0,115,105,39,97,0,115,105,110,109,97,0,115,105,39,101,0,115,110,105,109,101,0,115,105,39,105,0,115,105,99,110,105,0,115,105,39,111,0,115,105,100,98,111,0,115,105,39,117,0,115,105,109,120,117,0,115,105,98,0,115,105,99,0,115,116,105,99,105,0,115,105,99,108,0,115,105,99,108,117,0,115,105,99,110,0,115,105,100,0,115,116,105,100,105,0,115,105,100,98,0,115,105,100,106,0,115,105,103,0,115,105,103,106,97,0,115,105,103,106,0,115,105,106,0,115,107,105,106,105,0,115,105,107,0,115,105,108,107,97,0,115,105,108,0,115,105,108,107,0,115,105,108,110,0,115,105,108,110,97,0,115,105,109,0,115,105,109,108,0,115,105,109,115,0,115,105,109,115,97,0,115,105,109,120,0,115,105,110,0,116,115,105,110,97,0,115,105,110,99,0,115,105,110,99,101,0,115,105,110,109,0,115,105,110,115,0,115,105,110,115,111,0,115,105,110,120,0,115,105,110,120,97,0,115,105,112,0,115,105,112,110,97,0,115,105,112,110,0,115,105,114,0,115,105,114,106,105,0,115,105,114,106,0,115,105,114,120,0,115,105,114,120,111,0,115,105,115,0,115,105,115,107,117,0,115,105,115,107,0,115,105,115,116,0,115,105,115,116,105,0,115,105,116,0,115,105,116,110,97,0,115,105,116,110,0,115,105,118,0,115,105,118,110,105,0,115,105,118,110,0,115,105,120,0,115,105,122,0,115,107,97,0,115,107,97,114,105,0,115,107,97,99,0,115,107,97,99,105,0,115,107,97,109,0,115,107,97,112,0,115,107,97,114,0,115,107,101,0,115,107,105,0,115,107,105,99,117,0,115,107,105,99,0,115,107,105,106,0,115,107,105,110,0,115,107,111,0,115,107,111,114,105,0,115,107,111,114,0,115,107,111,116,0,115,107,117,0,115,107,117,114,0,115,108,97,0,115,108,97,98,0,115,108,97,107,0,115,108,97,107,97,0,115,108,97,109,0,115,108,97,109,105,0,115,108,97,110,0,115,108,97,110,117,0,115,108,97,114,0,115,108,97,115,0,115,108,101,0,115,108,105,0,115,108,105,108,117,0,115,108,105,103,0,115,108,105,108,0,115,108,105,114,0,115,108,105,114,105,0,115,108,111,0,115,111,108,106,105,0,115,108,111,118,0,115,108,117,0,115,108,117,106,105,0,115,108,117,106,0,115,108,117,110,0,115,108,117,110,105,0,115,109,97,0,115,109,97,106,105,0,115,109,97,99,0,115,109,97,99,117,0,115,109,97,100,0,115,109,97,100,105,0,115,109,97,106,0,115,109,97,110,0,115,109,97,110,105,0,115,109,101,0,115,109,105,0,115,109,111,0,115,109,111,107,97,0,115,109,111,107,0,115,109,117,0,115,109,117,99,0,115,109,117,110,0,115,110,97,0,115,110,97,100,0,115,110,97,110,0,115,110,101,0,115,110,105,0,115,110,105,100,0,115,110,105,109,0,115,110,105,112,0,115,110,111,0,115,110,117,0,115,110,117,106,0,115,110,117,114,0,115,110,117,116,0,115,111,39,97,0,115,111,118,100,97,0,115,111,39,101,0,115,111,98,100,101,0,115,111,39,105,0,115,111,39,111,0,115,111,109,98,111,0,115,111,98,0,115,111,98,100,0,115,111,99,0,115,111,114,99,117,0,115,111,100,0,115,111,100,118,97,0,115,111,100,110,0,115,111,100,110,97,0,115,111,100,118,0,115,111,102,0,115,111,102,116,111,0,115,111,102,116,0,115,111,103,0,115,111,114,103,117,0,115,111,105,0,115,111,110,99,105,0,115,111,106,0,115,111,108,0,115,111,108,114,105,0,115,111,108,106,0,115,111,108,114,0,115,111,109,0,115,111,109,98,0,115,111,110,0,115,111,110,99,0,115,111,112,0,115,111,114,0,115,111,114,99,0,115,111,114,103,0,115,111,115,0,115,111,116,0,115,111,39,117,0,115,111,118,0,115,111,118,100,0,115,111,122,0,115,111,0,115,112,97,0,115,112,97,116,105,0,115,112,97,106,0,115,112,97,108,0,115,112,97,108,105,0,115,112,97,110,0,115,112,97,116,0,115,112,101,0,115,112,101,110,105,0,115,112,101,110,0,115,112,105,0,115,112,105,115,97,0,115,112,105,115,0,115,112,105,116,0,115,112,105,116,97,0,115,112,111,0,115,112,111,102,0,115,112,111,106,0,115,112,117,0,115,112,117,100,97,0,115,112,117,100,0,115,112,117,116,0,115,114,97,0,115,114,97,106,0,115,114,97,107,0,115,114,97,108,0,115,114,97,108,111,0,115,114,97,110,0,115,114,97,115,0,115,114,101,0,115,114,101,114,97,0,115,114,101,114,0,115,114,105,0,115,114,105,116,0,115,114,105,116,111,0,115,114,111,0,115,114,117,0,115,114,117,109,0,115,114,117,114,0,115,116,97,0,115,116,97,108,105,0,115,116,97,99,0,115,116,97,103,0,115,116,97,103,105,0,115,116,97,107,0,115,116,97,107,117,0,115,116,97,108,0,115,116,97,110,0,115,116,97,110,105,0,115,116,97,112,0,115,116,97,112,97,0,115,116,97,115,0,115,116,97,115,117,0,115,116,97,116,0,115,116,97,116,105,0,115,116,101,0,115,116,101,98,0,115,116,101,99,0,115,116,101,99,105,0,115,116,101,100,0,115,116,101,108,0,115,116,101,108,97,0,115,116,101,114,0,115,116,101,114,111,0,115,116,105,0,115,116,105,99,0,115,116,105,100,0,115,116,105,107,0,115,116,105,107,97,0,115,116,105,122,0,115,116,105,122,117,0,115,116,111,0,115,116,111,100,105,0,115,116,111,100,0,115,116,117,0,115,116,117,122,105,0,115,116,117,110,0,115,116,117,110,97,0,115,116,117,114,0,115,116,117,114,97,0,115,116,117,122,0,115,117,39,97,0,115,117,39,101,0,115,117,39,105,0,115,117,109,116,105,0,115,117,39,111,0,115,117,39,117,0,115,117,98,0,115,117,99,0,115,117,99,116,97,0,115,117,99,116,0,115,117,100,0,115,117,100,103,97,0,115,117,100,103,0,115,117,102,116,0,115,117,103,0,115,117,110,103,97,0,115,117,106,0,115,117,109,106,105,0,115,117,107,0,115,117,107,115,97,0,115,117,107,115,0,115,117,108,0,115,117,110,108,97,0,115,117,109,0,115,117,109,106,0,115,117,109,110,0,115,117,109,110,101,0,115,117,109,116,0,115,117,110,0,115,117,110,103,0,115,117,110,108,0,115,117,112,0,115,117,114,0,115,117,114,108,97,0,115,117,114,108,0,115,117,116,0,115,117,116,114,97,0,115,117,116,114,0,115,117,118,0,115,117,122,0,116,97,39,97,0,116,97,118,108,97,0,116,97,39,101,0,116,97,110,120,101,0,116,97,39,105,0,116,97,116,112,105,0,116,97,39,111,0,116,97,110,98,111,0,116,97,39,117,0,116,97,120,102,117,0,116,97,98,0,116,97,98,110,111,0,116,97,98,110,0,116,97,98,114,0,116,97,98,114,97,0,116,97,99,0,116,97,110,99,101,0,116,97,100,0,116,97,100,110,105,0,116,97,100,106,0,116,97,100,106,105,0,116,97,100,110,0,116,97,102,0,116,97,103,0,116,97,103,106,105,0,116,97,103,106,0,116,97,105,0,116,97,114,109,105,0,116,97,106,0,116,97,109,106,105,0,116,97,107,0,116,97,108,0,116,97,108,115,97,0,116,97,108,115,0,116,97,109,0,116,97,109,99,0,116,97,109,99,97,0,116,97,109,106,0,116,97,109,110,0,116,97,109,110,101,0,116,97,110,0,116,115,97,110,105,0,116,97,110,98,0,116,97,110,99,0,116,97,110,106,0,116,97,110,106,111,0,116,97,110,107,0,116,97,110,107,111,0,116,97,110,114,0,116,97,110,114,117,0,116,97,110,115,0,116,97,110,115,105,0,116,97,110,120,0,116,97,112,0,116,97,112,108,0,116,97,112,108,97,0,116,97,114,0,116,97,114,99,105,0,116,97,114,98,0,116,97,114,98,105,0,116,97,114,99,0,116,97,114,108,0,116,97,114,108,97,0,116,97,114,109,0,116,97,114,116,0,116,97,114,116,105,0,116,97,115,0,116,97,115,107,0,116,97,115,107,101,0,116,97,116,0,116,97,116,114,117,0,116,97,116,112,0,116,97,116,114,0,116,97,117,0,116,97,118,0,116,97,118,108,0,116,97,120,0,116,97,120,102,0,116,97,122,0,116,97,0,116,99,97,0,116,99,97,100,117,0,116,99,97,99,0,116,99,97,100,0,116,99,97,110,0,116,99,97,110,97,0,116,99,97,116,0,116,99,97,116,105,0,116,99,101,0,116,99,101,110,0,116,99,101,110,97,0,116,99,105,0,116,117,116,99,105,0,116,99,105,99,0,116,99,105,99,97,0,116,99,105,100,0,116,99,105,100,117,0,116,99,105,107,0,116,99,105,107,97,0,116,99,105,108,0,116,99,105,108,97,0,116,99,105,109,0,116,99,105,109,97,0,116,99,105,110,0,116,99,105,110,105,0,116,99,105,116,0,116,99,105,116,97,0,116,99,111,0,116,99,117,0,116,101,39,97,0,116,101,114,112,97,0,116,101,39,105,0,116,101,39,111,0,116,101,39,117,0,116,101,110,103,117,0,116,101,98,0,116,101,99,0,116,101,100,0,116,101,114,100,105,0,116,101,102,0,116,101,110,102,97,0,116,101,103,0,116,101,105,0,116,101,109,99,105,0,116,101,107,0,116,101,108,0,116,101,109,0,116,101,109,99,0,116,101,110,0,116,101,110,102,0,116,101,110,103,0,116,101,112,0,116,101,114,0,116,101,0,116,101,114,100,0,116,101,114,112,0,116,101,114,116,0,116,101,114,116,111,0,116,101,116,0,116,105,39,97,0,116,105,39,101,0,116,105,39,105,0,116,105,39,111,0,116,105,39,117,0,116,105,120,110,117,0,116,105,98,0,116,105,110,98,101,0,116,105,99,0,116,105,100,0,116,105,102,0,116,105,0,116,105,103,0,116,105,103,110,105,0,116,105,103,110,0,116,105,106,0,116,105,108,106,117,0,116,105,107,0,116,105,107,112,0,116,105,107,112,97,0,116,105,108,0,116,105,108,106,0,116,105,109,0,116,105,110,0,116,105,114,110,97,0,116,105,110,98,0,116,105,110,99,0,116,105,110,99,105,0,116,105,110,115,0,116,105,110,115,97,0,116,105,112,0,116,105,114,0,116,105,114,115,101,0,116,105,114,110,0,116,105,114,115,0,116,105,114,120,0,116,105,114,120,117,0,116,105,115,0,116,105,115,110,97,0,116,105,115,110,0,116,105,116,0,116,105,116,108,97,0,116,105,116,108,0,116,105,118,0,116,105,118,110,105,0,116,105,118,110,0,116,105,120,0,116,105,120,110,0,116,105,122,0,116,111,39,97,0,116,111,110,103,97,0,116,111,39,101,0,116,111,39,105,0,116,111,114,110,105,0,116,111,39,117,0,116,111,114,100,117,0,116,111,99,0,116,114,111,99,105,0,116,111,100,0,116,111,108,100,105,0,116,111,103,0,116,111,105,0,116,111,107,0,116,111,107,110,117,0,116,111,107,110,0,116,111,108,0,116,111,108,100,0,116,111,110,0,116,111,110,103,0,116,111,114,0,116,111,114,100,0,116,111,114,110,0,116,114,97,0,116,114,97,106,0,116,114,97,110,0,116,114,97,110,111,0,116,114,97,116,0,116,114,97,116,105,0,116,114,101,0,116,114,101,110,0,116,114,105,0,116,114,105,110,97,0,116,114,105,99,0,116,114,105,110,0,116,114,105,120,0,116,114,111,0,116,114,111,99,0,116,114,117,0,116,117,114,110,105,0,116,115,97,0,116,115,97,108,105,0,116,115,97,108,0,116,115,97,110,0,116,115,97,112,0,116,115,97,112,105,0,116,115,101,0,122,117,116,115,101,0,116,115,105,0,116,115,105,106,117,0,116,115,105,106,0,116,115,105,110,0,116,115,117,0,116,117,39,97,0,116,117,109,108,97,0,116,117,39,101,0,116,117,112,108,101,0,116,117,39,105,0,116,117,103,110,105,0,116,117,39,111,0,116,117,110,108,111,0,116,117,39,117,0,116,117,98,110,117,0,116,117,98,0,116,117,110,98,97,0,116,117,98,110,0,116,117,102,0,116,117,0,116,117,103,0,116,117,103,110,0,116,117,106,0,116,117,106,108,105,0,116,117,106,108,0,116,117,107,0,116,117,110,107,97,0,116,117,108,0,116,117,109,0,116,117,109,108,0,116,117,110,0,116,117,110,116,97,0,116,117,110,98,0,116,117,110,107,0,116,117,110,108,0,116,117,110,116,0,116,117,112,0,116,117,112,108,0,116,117,114,0,116,117,114,110,0,116,117,116,0,116,117,116,114,97,0,116,117,116,99,0,116,117,116,114,0,116,117,122,0,118,97,39,105,0,118,97,109,106,105,0,118,97,39,117,0,118,97,115,120,117,0,118,97,98,0,118,97,110,98,105,0,118,97,99,0,118,97,110,99,105,0,118,97,99,114,0,118,97,99,114,105,0,118,97,105,0,118,97,106,110,105,0,118,97,106,0,118,97,106,110,0,118,97,108,0,118,97,108,115,105,0,118,97,108,115,0,118,97,109,0,118,97,109,106,0,118,97,109,116,0,118,97,109,116,117,0,118,97,110,0,118,97,110,106,117,0,118,97,110,98,0,118,97,110,99,0,118,97,110,106,0,118,97,114,0,118,97,115,0,118,97,115,114,117,0,118,97,115,114,0,118,97,115,120,0,118,97,116,0,118,97,117,0,118,97,120,0,118,97,122,0,118,97,0,118,101,39,97,0,118,101,114,98,97,0,118,101,39,101,0,118,101,39,117,0,118,101,99,110,117,0,118,101,99,110,0,118,101,102,0,118,101,110,102,117,0,118,101,105,0,118,101,108,0,118,101,0,118,101,110,0,118,101,110,102,0,118,101,110,115,0,118,101,110,115,97,0,118,101,114,0,118,101,114,98,0,118,101,115,0,118,105,39,97,0,118,105,115,107,97,0,118,105,39,101,0,118,105,116,107,101,0,118,105,39,105,0,118,105,107,109,105,0,118,105,39,111,0,118,105,116,110,111,0,118,105,39,117,0,118,105,109,99,117,0,118,105,98,0,118,105,98,110,97,0,118,105,98,110,0,118,105,99,0,118,105,100,0,118,105,110,100,117,0,118,105,100,110,0,118,105,100,110,105,0,118,105,100,114,0,118,105,100,114,117,0,118,105,102,0,118,105,102,110,101,0,118,105,102,110,0,118,105,106,0,118,105,110,106,105,0,118,105,107,0,118,105,107,110,117,0,118,105,107,109,0,118,105,107,110,0,118,105,108,0,118,108,105,108,101,0,118,105,109,0,118,105,109,99,0,118,105,110,0,118,105,110,100,0,118,105,110,106,0,118,105,112,0,118,105,112,115,105,0,118,105,112,115,0,118,105,114,0,118,105,114,110,0,118,105,114,110,117,0,118,105,115,0,118,105,115,107,0,118,105,116,0,118,105,116,99,105,0,118,105,116,99,0,118,105,116,107,0,118,105,116,110,0,118,105,122,0,118,105,0,118,108,97,0,118,108,97,103,0,118,108,101,0,122,105,118,108,101,0,118,108,105,0,118,108,105,112,97,0,118,108,105,108,0,118,108,105,110,0,118,108,105,110,97,0,118,108,105,112,0,118,111,39,97,0,118,111,107,115,97,0,118,111,102,108,0,118,111,102,108,105,0,118,111,105,0,118,111,107,0,118,111,107,115,0,118,111,108,0,118,111,110,0,118,111,0,118,111,114,0,118,111,114,109,101,0,118,111,114,109,0,118,114,97,0,118,114,97,103,97,0,118,114,97,103,0,118,114,101,0,118,114,101,116,97,0,118,114,101,106,0,118,114,101,116,0,118,114,105,0,118,114,105,99,0,118,114,105,99,105,0,118,114,111,0,118,114,117,0,118,114,117,100,0,118,114,117,100,101,0,118,114,117,115,0,118,114,117,115,105,0,118,117,39,101,0,118,117,39,105,0,118,117,39,111,0,118,117,107,114,111,0,118,117,100,0,118,117,107,114,0,118,117,114,0,118,117,115,0,118,117,122,0,118,117,0,120,97,39,97,0,120,97,116,114,97,0,120,97,39,101,0,120,97,110,99,101,0,120,97,39,105,0,120,97,114,99,105,0,120,97,39,111,0,120,97,109,112,111,0,120,97,39,117,0,120,97,98,106,117,0,120,97,98,0,120,97,100,98,97,0,120,97,98,106,0,120,97,99,0,120,97,100,0,120,97,100,110,105,0,120,97,100,98,0,120,97,100,110,0,120,97,103,0,120,97,109,103,117,0,120,97,103,106,0,120,97,103,106,105,0,120,97,103,114,0,120,97,103,114,105,0,120,97,105,0,120,114,97,110,105,0,120,97,106,0,120,97,114,106,117,0,120,97,106,109,0,120,97,106,109,105,0,120,97,107,0,120,97,107,115,117,0,120,97,107,115,0,120,97,108,0,120,97,108,107,97,0,120,97,108,98,0,120,97,108,98,111,0,120,97,108,107,0,120,97,108,110,0,120,97,108,110,105,0,120,97,109,0,120,97,109,103,0,120,97,109,112,0,120,97,109,115,0,120,97,109,115,105,0,120,97,110,0,120,97,110,99,0,120,97,110,107,0,120,97,110,107,97,0,120,97,110,114,0,120,97,110,114,105,0,120,97,110,116,0,120,97,110,116,111,0,120,97,112,0,120,97,114,0,120,97,114,99,0,120,97,114,106,0,120,97,114,110,0,120,97,114,110,117,0,120,97,115,0,120,97,115,108,0,120,97,115,108,105,0,120,97,115,110,0,120,97,115,110,101,0,120,97,116,0,120,97,116,115,105,0,120,97,116,114,0,120,97,116,115,0,120,97,117,0,120,97,118,0,120,97,0,120,97,122,0,120,97,122,100,111,0,120,97,122,100,0,120,101,39,97,0,120,101,100,106,97,0,120,101,39,105,0,120,101,107,114,105,0,120,101,39,111,0,120,101,110,100,111,0,120,101,39,117,0,120,101,110,114,117,0,120,101,98,0,120,101,98,110,0,120,101,98,110,105,0,120,101,98,114,0,120,101,99,116,0,120,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+102402);
/* memory initializer */ allocate([100,0,120,101,100,106,0,120,101,105,0,120,101,106,0,120,101,107,0,120,101,107,114,0,120,101,108,0,120,101,0,120,101,108,115,0,120,101,108,115,111,0,120,101,110,0,120,101,110,100,0,120,101,110,114,0,120,101,114,0,120,101,115,0,120,101,116,0,120,101,120,0,120,101,120,115,111,0,120,101,120,115,0,120,105,39,97,0,120,105,114,109,97,0,120,105,39,111,0,120,114,105,115,111,0,120,105,39,117,0,120,105,115,108,117,0,120,105,108,0,120,105,109,0,120,105,110,109,111,0,120,105,110,0,120,105,110,100,111,0,120,105,110,100,0,120,105,110,109,0,120,105,112,0,120,105,115,112,111,0,120,105,114,0,120,105,114,109,0,120,105,115,0,120,105,115,108,0,120,105,115,112,0,120,108,97,0,120,108,97,108,105,0,120,108,97,108,0,120,108,101,0,120,108,105,0,120,108,117,0,120,108,117,114,97,0,120,108,117,114,0,120,111,105,0,120,111,116,108,105,0,120,111,108,0,120,111,116,108,0,120,114,97,0,120,114,97,98,0,120,114,97,110,0,120,114,101,0,120,114,105,0,120,114,105,115,0,120,114,117,0,120,114,117,116,105,0,120,114,117,98,0,120,114,117,98,97,0,120,114,117,107,0,120,114,117,107,105,0,120,114,117,108,0,120,114,117,116,0,120,117,39,97,0,120,117,115,114,97,0,120,117,39,101,0,120,117,110,114,101,0,120,117,39,105,0,120,117,107,109,105,0,120,117,39,111,0,120,117,114,100,111,0,120,117,98,0,120,117,107,0,120,117,107,109,0,120,117,108,0,120,117,116,108,97,0,120,117,109,0,120,117,110,0,120,117,110,114,0,120,117,114,0,120,117,114,100,0,120,117,115,0,120,117,115,114,0,120,117,116,108,0,122,97,39,97,0,122,97,98,110,97,0,122,97,39,105,0,122,97,115,116,105,0,122,97,39,111,0,122,97,39,117,0,122,97,114,103,117,0,122,97,98,110,0,122,97,99,0,122,97,114,99,105,0,122,97,103,0,122,97,105,0,122,97,106,0,122,97,106,98,97,0,122,97,106,98,0,122,97,108,0,122,97,108,118,105,0,122,97,108,118,0,122,97,110,0,122,97,110,114,0,122,97,110,114,117,0,122,97,114,0,122,97,114,99,0,122,97,114,103,0,122,97,115,0,122,97,115,110,105,0,122,97,115,110,0,122,97,115,116,0,122,97,116,0,122,97,117,0,122,97,122,0,122,98,97,0,122,98,97,115,117,0,122,98,97,98,0,122,98,97,110,0,122,98,97,110,105,0,122,98,97,115,0,122,98,101,0,122,98,101,112,105,0,122,98,101,112,0,122,98,105,0,122,100,97,0,122,100,97,110,105,0,122,100,97,110,0,122,100,105,0,122,100,105,108,101,0,122,100,105,108,0,122,100,111,0,122,101,39,97,0,122,101,110,98,97,0,122,101,39,101,0,122,101,39,111,0,122,101,105,0,122,101,107,114,105,0,122,101,107,114,0,122,101,108,0,122,101,0,122,101,110,0,122,101,110,98,0,122,101,112,0,122,101,112,116,105,0,122,101,112,116,0,122,101,114,0,122,101,116,0,122,101,116,114,111,0,122,101,116,114,0,122,101,118,0,122,103,97,0,122,103,97,110,97,0,122,103,97,110,0,122,103,105,0,122,103,105,107,0,122,103,117,0,122,105,39,101,0,122,105,102,114,101,0,122,105,39,105,0,122,105,110,107,105,0,122,105,39,111,0,122,105,39,117,0,122,105,114,112,117,0,122,105,102,0,122,105,102,114,0,122,105,108,0,122,105,110,0,122,105,110,107,0,122,105,112,0,122,105,114,0,122,105,114,112,0,122,105,118,0,122,105,118,108,0,122,109,97,0,122,109,97,100,0,122,109,101,0,122,109,105,0,122,109,105,107,117,0,122,109,105,107,0,122,109,117,0,122,117,109,114,105,0,122,111,39,97,0,122,111,39,105,0,122,111,110,0,122,111,114,0,122,117,39,101,0,122,117,107,116,101,0,122,117,39,105,0,122,117,110,116,105,0,122,117,103,0,122,117,110,103,105,0,122,117,107,0,122,117,107,116,0,122,117,108,0,122,117,110,108,101,0,122,117,109,0,122,117,39,111,0,122,117,109,114,0,122,117,110,0,122,117,110,103,0,122,117,110,108,0,122,117,110,116,0,122,117,116,0,122,117,116,115,0,122,118,97,0,122,118,97,116,105,0,122,118,97,116,0,92,116,101,120,116,115,108,123,92,102,111,111,116,110,111,116,101,115,105,122,101,123,125,37,115,125,10,0,92,116,101,120,116,115,108,123,92,102,111,111,116,110,111,116,101,115,105,122,101,123,125,37,115,37,115,32,40,37,115,41,125,10,0,92,116,101,120,116,115,108,123,92,102,111,111,116,110,111,116,101,115,105,122,101,123,125,37,115,37,115,32,37,115,125,10,0,92,116,101,120,116,115,108,123,92,102,111,111,116,110,111,116,101,115,105,122,101,123,125,44,32,125,10,0,92,116,101,120,116,115,108,123,92,102,111,111,116,110,111,116,101,115,105,122,101,123,125,126,58,93,32,125,0,92,116,101,120,116,115,108,123,92,102,111,111,116,110,111,116,101,115,105,122,101,123,125,91,125,0,92,116,101,120,116,115,108,123,92,115,109,97,108,108,123,125,37,115,125,0,92,109,98,111,120,123,92,116,101,120,116,98,102,123,37,115,125,92,47,125,0,123,125,36,94,123,92,116,101,120,116,105,116,123,92,115,99,114,105,112,116,115,105,122,101,32,37,100,125,125,36,0,123,92,108,97,114,103,101,123,125,32,36,92,116,114,105,97,110,103,108,101,114,105,103,104,116,36,125,0,123,92,108,97,114,103,101,123,125,32,36,92,116,114,105,97,110,103,108,101,108,101,102,116,36,125,0,10,10,92,118,115,112,97,99,101,123,37,46,50,102,101,120,125,0,92,101,110,100,123,100,111,99,117,109,101,110,116,125,10,0,92,100,111,99,117,109,101,110,116,99,108,97,115,115,91,49,48,112,116,93,123,97,114,116,105,99,108,101,125,10,92,117,115,101,112,97,99,107,97,103,101,123,103,101,111,109,101,116,114,121,125,10,92,105,102,120,92,112,100,102,116,101,120,118,101,114,115,105,111,110,92,117,110,100,101,114,102,105,110,101,100,10,92,117,115,101,112,97,99,107,97,103,101,91,100,118,105,112,115,93,123,103,114,97,112,104,105,99,120,125,10,92,101,108,115,101,10,92,117,115,101,112,97,99,107,97,103,101,91,112,100,102,116,101,120,93,123,103,114,97,112,104,105,99,120,125,10,92,112,100,102,99,111,109,112,114,101,115,115,108,101,118,101,108,61,57,10,92,102,105,92,100,101,102,92,114,109,100,101,102,97,117,108,116,123,112,104,118,125,10,92,100,101,102,92,109,100,100,101,102,97,117,108,116,123,109,99,125,10,92,100,101,102,92,98,102,100,101,102,97,117,108,116,123,98,99,125,10,92,103,101,111,109,101,116,114,121,123,108,101,102,116,61,48,46,55,53,105,110,44,116,111,112,61,48,46,53,105,110,44,98,111,116,116,111,109,61,48,46,53,105,110,44,114,105,103,104,116,61,48,46,55,53,105,110,44,110,111,104,101,97,100,102,111,111,116,125,10,92,112,97,103,101,115,116,121,108,101,123,101,109,112,116,121,125,10,92,115,101,116,108,101,110,103,116,104,123,92,112,97,114,105,110,100,101,110,116,125,123,48,112,116,125,10,92,102,111,110,116,92,122,100,32,61,32,112,122,100,114,32,97,116,32,49,48,112,116,10,0,92,98,101,103,105,110,123,100,111,99,117,109,101,110,116,125,10,0,37,115,37,115,32,40,37,115,41,10,0,37,115,37,115,32,37,115,10,0,38,97,109,112,59,0,38,108,116,59,0,38,103,116,59,0,58,93,32,60,47,70,79,78,84,62,60,47,85,62,0,60,85,62,60,70,79,78,84,32,83,73,90,69,61,45,49,62,91,0,60,73,62,37,115,60,47,73,62,0,38,108,116,59,45,0,60,70,79,78,84,32,83,73,90,69,61,43,50,62,38,113,117,111,116,59,60,47,70,79,78,84,62,0,60,66,62,37,115,60,47,66,62,0,60,83,85,66,62,60,70,79,78,84,32,83,73,90,69,61,34,45,51,34,62,37,100,60,47,70,79,78,84,62,60,47,83,85,66,62,0,38,103,116,59,38,103,116,59,0,38,108,116,59,38,108,116,59,0,10,60,80,62,60,80,62,10,0,60,47,66,79,68,89,62,10,0,60,72,84,77,76,62,10,60,72,69,65,68,62,10,60,84,73,84,76,69,62,76,111,106,98,97,110,32,116,114,97,110,115,108,97,116,105,111,110,60,47,84,73,84,76,69,62,10,60,66,79,68,89,62,10,0,0,1,2,3,4,5,6,7,8,5,9,10,6,7,8,9,10,3,6,7,10,0,6,7,10,6,7,10,0,1,2,3,4,5,3,6,7,10,0,6,7,10,2,5,9,10,6,7,8,2,6,7,8,9,10,2,5,9,10,2,6,7,8,9,10,6,7,8,9,10,6,7,8,9,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,9,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,8,8,6,1,8,8,8,2,8,8,7,8,8,3,8,8,8,8,8,4,8,8,8,5,8,11,11,11,11,11,11,0,8,8,6,1,8,8,8,2,8,8,7,8,8,3,8,8,8,8,8,4,8,8,8,5,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,87,97,114,110,105,110,103,58,32,83,101,110,116,101,110,99,101,32,109,97,121,32,98,101,32,109,105,115,115,105,110,103,32,115,101,108,98,114,105,32,97,116,32,108,105,110,101,32,37,100,32,99,111,108,117,109,110,32,37,100,63,10,0,10,10,92,118,115,112,97,99,101,123,50,101,120,125,0,92,66,84,91,116,93,123,108,125,123,92,98,102,32,37,115,125,92,92,123,92,105,116,32,37,115,125,92,92,91,45,51,112,116,93,0,123,92,73,83,83,123,125,0,125,92,92,91,45,51,112,116,93,123,92,73,83,83,123,125,0,125,92,69,84,10,0,123,92,114,101,102,108,101,99,116,98,111,120,123,92,122,100,92,99,104,97,114,50,51,51,125,125,0,123,125,36,94,123,92,73,83,123,37,100,125,125,36,0,92,125,0,36,92,114,97,110,103,108,101,36,0,36,92,114,99,101,105,108,36,0,36,92,114,102,108,111,111,114,36,0,92,84,82,123,125,0,92,123,0,36,92,108,97,110,103,108,101,36,0,36,92,108,99,101,105,108,36,0,36,92,108,102,108,111,111,114,36,0,92,84,76,123,125,0,92,100,111,99,117,109,101,110,116,99,108,97,115,115,91,49,48,112,116,93,123,97,114,116,105,99,108,101,125,10,92,117,115,101,112,97,99,107,97,103,101,123,103,101,111,109,101,116,114,121,125,10,92,105,102,120,92,112,100,102,116,101,120,118,101,114,115,105,111,110,92,117,110,100,101,114,102,105,110,101,100,10,92,117,115,101,112,97,99,107,97,103,101,91,100,118,105,112,115,93,123,103,114,97,112,104,105,99,120,125,10,92,101,108,115,101,10,92,117,115,101,112,97,99,107,97,103,101,91,112,100,102,116,101,120,93,123,103,114,97,112,104,105,99,120,125,10,92,112,100,102,99,111,109,112,114,101,115,115,108,101,118,101,108,61,57,10,92,102,105,92,100,101,102,92,114,109,100,101,102,97,117,108,116,123,112,104,118,125,10,92,100,101,102,92,109,100,100,101,102,97,117,108,116,123,109,99,125,10,92,100,101,102,92,98,102,100,101,102,97,117,108,116,123,98,99,125,10,92,100,101,102,92,73,83,35,49,123,92,116,101,120,116,105,116,123,92,115,99,114,105,112,116,115,105,122,101,32,35,49,125,125,10,92,100,101,102,92,73,83,83,123,92,105,116,92,115,99,114,105,112,116,115,105,122,101,125,10,92,100,101,102,92,66,84,123,92,98,101,103,105,110,123,116,97,98,117,108,97,114,125,125,10,92,100,101,102,92,69,84,123,92,101,110,100,123,116,97,98,117,108,97,114,125,126,125,10,92,100,101,102,92,84,76,123,92,98,101,103,105,110,103,114,111,117,112,92,110,111,114,109,97,108,115,105,122,101,123,125,36,92,116,114,105,97,110,103,108,101,108,101,102,116,36,92,101,110,100,103,114,111,117,112,125,10,92,100,101,102,92,84,82,123,92,98,101,103,105,110,103,114,111,117,112,92,110,111,114,109,97,108,115,105,122,101,123,125,36,92,116,114,105,97,110,103,108,101,114,105,103,104,116,36,92,101,110,100,103,114,111,117,112,125,10,92,103,101,111,109,101,116,114,121,123,108,101,102,116,61,48,46,55,53,105,110,44,116,111,112,61,48,46,53,105,110,44,98,111,116,116,111,109,61,48,46,53,105,110,44,114,105,103,104,116,61,48,46,55,53,105,110,44,110,111,104,101,97,100,102,111,111,116,125,10,92,112,97,103,101,115,116,121,108,101,123,101,109,112,116,121,125,10,92,115,101,116,108,101,110,103,116,104,123,92,112,97,114,105,110,100,101,110,116,125,123,48,112,116,125,10,92,115,101,116,108,101,110,103,116,104,123,92,112,97,114,115,107,105,112,125,123,49,101,120,32,112,108,117,115,48,46,53,101,120,32,109,105,110,117,115,48,46,53,101,120,125,10,92,115,101,116,108,101,110,103,116,104,123,92,116,97,98,99,111,108,115,101,112,125,123,48,112,116,125,10,92,101,109,101,114,103,101,110,99,121,115,116,114,101,116,99,104,61,50,48,48,112,116,10,92,102,111,110,116,92,122,100,32,61,32,112,122,100,114,32,97,116,32,49,48,112,116,10,0,92,68,101,99,108,97,114,101,83,121,109,98,111,108,70,111,110,116,123,65,77,83,97,125,123,85,125,123,109,115,97,125,123,109,125,123,110,125,10,92,68,101,99,108,97,114,101,77,97,116,104,68,101,108,105,109,105,116,101,114,92,117,108,99,111,114,110,101,114,123,52,125,123,65,77,83,97,125,123,34,55,48,125,123,65,77,83,97,125,123,34,55,48,125,10,92,68,101,99,108,97,114,101,77,97,116,104,68,101,108,105,109,105,116,101,114,92,117,114,99,111,114,110,101,114,123,53,125,123,65,77,83,97,125,123,34,55,49,125,123,65,77,83,97,125,123,34,55,49,125,10,92,68,101,99,108,97,114,101,77,97,116,104,68,101,108,105,109,105,116,101,114,92,108,108,99,111,114,110,101,114,123,52,125,123,65,77,83,97,125,123,34,55,56,125,123,65,77,83,97,125,123,34,55,56,125,10,92,68,101,99,108,97,114,101,77,97,116,104,68,101,108,105,109,105,116,101,114,92,108,114,99,111,114,110,101,114,123,53,125,123,65,77,83,97,125,123,34,55,57,125,123,65,77,83,97,125,123,34,55,57,125,10,0,92,98,101,103,105,110,123,100,111,99,117,109,101,110,116,125,10,92,115,109,97,108,108,10,0,37,115,0,37,115,37,115,32,40,37,115,41,0,37,115,37,115,32,37,115,0,44,32,0,58,93,0,47,37,115,47,0,96,96,0,39,39,0,94,0,10,10,0,37,115,37,115,32,0,40,37,115,41,32,0,37,115,32,0,10,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,0,10,0,32,0,36,76,69,70,84,65,82,82,79,87,0,60,45,0,36,79,80,69,78,81,85,79,84,69,0,34,0,36,67,76,79,83,69,81,85,79,84,69,0,41,0,93,0,125,0,62,0,92,0,32,124,0,47,0,62,62,0,37,100,32,0,40,0,91,0,123,0,60,0,32,47,0,124,0,32,92,0,60,60,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,47,112,114,111,99,47,115,101,108,102,47,102,100,47,0,114,119,97,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+112642);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

   

   

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

   

  function _abort() {
      Module['abort']();
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall197(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_fstat64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___lock() {}

  function ___unlock() {}

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   

  
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   


   

  
  var __sigalrm_handler=0;function _signal(sig, func) {
      if (sig == 14 /*SIGALRM*/) {
        __sigalrm_handler = func;
      } else {
        Module.printErr('Calling stub instead of signal()');
      }
      return 0;
    }

   

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _yyparse() {
  Module['printErr']('missing function: yyparse'); abort(-1);
  }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _full_yyparse() {
  Module['printErr']('missing function: full_yyparse'); abort(-1);
  }

  function _yydebug() {
  Module['printErr']('missing function: yydebug'); abort(-1);
  }
___buildEnvironment(ENV);;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_v": nullFunc_v, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_v": invoke_v, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "___syscall221": ___syscall221, "___syscall6": ___syscall6, "___assert_fail": ___assert_fail, "___buildEnvironment": ___buildEnvironment, "_signal": _signal, "___setErrNo": ___setErrNo, "___syscall197": ___syscall197, "___syscall195": ___syscall195, "__exit": __exit, "_full_yyparse": _full_yyparse, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_getenv": _getenv, "___syscall54": ___syscall54, "___unlock": ___unlock, "___lock": ___lock, "_abort": _abort, "___syscall5": ___syscall5, "_yyparse": _yyparse, "___syscall140": ___syscall140, "_exit": _exit, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "_yydebug": _yydebug };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var _yydebug=env._yydebug|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_v=env.invoke_v;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var ___syscall221=env.___syscall221;
  var ___syscall6=env.___syscall6;
  var ___assert_fail=env.___assert_fail;
  var ___buildEnvironment=env.___buildEnvironment;
  var _signal=env._signal;
  var ___setErrNo=env.___setErrNo;
  var ___syscall197=env.___syscall197;
  var ___syscall195=env.___syscall195;
  var __exit=env.__exit;
  var _full_yyparse=env._full_yyparse;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _getenv=env._getenv;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var ___lock=env.___lock;
  var _abort=env._abort;
  var ___syscall5=env.___syscall5;
  var _yyparse=env._yyparse;
  var ___syscall140=env.___syscall140;
  var _exit=env._exit;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _handle_signal($x) {
 $x = $x|0;
 var $0 = 0, $vararg_buffer = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $x$addr = $x;
 $0 = HEAP32[7856]|0;
 (_fprintf($0,42023,$vararg_buffer)|0);
 _exit(1);
 // unreachable;
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$ptr = 0, $argc$addr = 0, $argv$addr = 0, $block = 0, $call = 0, $call11 = 0, $call132 = 0, $call15 = 0, $call160 = 0;
 var $call162 = 0, $call19 = 0, $call2 = 0, $call23 = 0, $call27 = 0, $call31 = 0, $call35 = 0, $call39 = 0, $call43 = 0, $call47 = 0, $call51 = 0, $call55 = 0, $call59 = 0, $call63 = 0, $call67 = 0, $call7 = 0, $call71 = 0, $call74 = 0, $call80 = 0, $call82 = 0;
 var $call86 = 0, $call90 = 0, $call94 = 0, $cmp = 0, $cmp164 = 0, $cond = 0, $cond182 = 0, $cond187 = 0, $cond205 = 0, $cond207 = 0, $debug = 0, $dec = 0, $dec78 = 0, $filename = 0, $full_tree = 0, $gloss = 0, $htmlout = 0, $in = 0, $incdec$ptr = 0, $incdec$ptr79 = 0;
 var $latex = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0, $result = 0, $retval = 0, $show_memory = 0, $show_tree = 0, $textout = 0, $tobool = 0, $tobool1 = 0, $tobool12 = 0, $tobool122 = 0, $tobool123 = 0, $tobool130 = 0, $tobool133 = 0, $tobool138 = 0, $tobool139 = 0, $tobool143 = 0;
 var $tobool146 = 0, $tobool150 = 0, $tobool153 = 0, $tobool158 = 0, $tobool16 = 0, $tobool166 = 0, $tobool168 = 0, $tobool170 = 0, $tobool174 = 0, $tobool175 = 0, $tobool177 = 0, $tobool179 = 0, $tobool181 = 0, $tobool184 = 0, $tobool186 = 0, $tobool189 = 0, $tobool198 = 0, $tobool20 = 0, $tobool201 = 0, $tobool204 = 0;
 var $tobool24 = 0, $tobool28 = 0, $tobool3 = 0, $tobool32 = 0, $tobool36 = 0, $tobool40 = 0, $tobool44 = 0, $tobool48 = 0, $tobool52 = 0, $tobool56 = 0, $tobool60 = 0, $tobool64 = 0, $tobool68 = 0, $tobool72 = 0, $tobool8 = 0, $tobool83 = 0, $tobool87 = 0, $tobool91 = 0, $tobool95 = 0, $token_lists = 0;
 var $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $retval = 0;
 $argc$addr = $argc;
 $argv$addr = $argv;
 $filename = 0;
 $in = 0;
 $debug = 0;
 $token_lists = 0;
 $show_tree = 0;
 $full_tree = 0;
 $gloss = 0;
 $latex = 0;
 $textout = 0;
 $htmlout = 0;
 $block = 0;
 $show_memory = 0;
 HEAP32[29719] = 79;
 HEAP32[29720] = 0;
 HEAP32[29721] = 0;
 HEAP32[29722] = 0;
 HEAP32[29723] = 0;
 HEAP32[29724] = 0;
 HEAP32[29725] = 0;
 HEAP32[29726] = 0;
 HEAP32[29727] = 0;
 while(1) {
  $0 = $argv$addr;
  $incdec$ptr = ((($0)) + 4|0);
  $argv$addr = $incdec$ptr;
  $1 = $argc$addr;
  $dec = (($1) + -1)|0;
  $argc$addr = $dec;
  $tobool = ($dec|0)!=(0);
  if (!($tobool)) {
   label = 53;
   break;
  }
  $2 = $argv$addr;
  $3 = HEAP32[$2>>2]|0;
  $call = (_strcmp($3,42382)|0);
  $tobool1 = ($call|0)!=(0);
  if (!($tobool1)) {
   $debug = 1;
   continue;
  }
  $4 = $argv$addr;
  $5 = HEAP32[$4>>2]|0;
  $call2 = (_strcmp($5,42385)|0);
  $tobool3 = ($call2|0)!=(0);
  if (!($tobool3)) {
   label = 6;
   break;
  }
  $7 = $argv$addr;
  $8 = HEAP32[$7>>2]|0;
  $call7 = (_strcmp($8,42408)|0);
  $tobool8 = ($call7|0)!=(0);
  if (!($tobool8)) {
   $token_lists = 1;
   continue;
  }
  $9 = $argv$addr;
  $10 = HEAP32[$9>>2]|0;
  $call11 = (_strcmp($10,42411)|0);
  $tobool12 = ($call11|0)!=(0);
  if (!($tobool12)) {
   $gloss = 1;
   continue;
  }
  $11 = $argv$addr;
  $12 = HEAP32[$11>>2]|0;
  $call15 = (_strcmp($12,42414)|0);
  $tobool16 = ($call15|0)!=(0);
  if (!($tobool16)) {
   $show_tree = 1;
   continue;
  }
  $13 = $argv$addr;
  $14 = HEAP32[$13>>2]|0;
  $call19 = (_strcmp($14,42417)|0);
  $tobool20 = ($call19|0)!=(0);
  if (!($tobool20)) {
   $show_tree = 1;
   $full_tree = 1;
   continue;
  }
  $15 = $argv$addr;
  $16 = HEAP32[$15>>2]|0;
  $call23 = (_strcmp($16,42421)|0);
  $tobool24 = ($call23|0)!=(0);
  if (!($tobool24)) {
   $latex = 1;
   continue;
  }
  $17 = $argv$addr;
  $18 = HEAP32[$17>>2]|0;
  $call27 = (_strcmp($18,42424)|0);
  $tobool28 = ($call27|0)!=(0);
  if (!($tobool28)) {
   $textout = 1;
   continue;
  }
  $19 = $argv$addr;
  $20 = HEAP32[$19>>2]|0;
  $call31 = (_strcmp($20,42427)|0);
  $tobool32 = ($call31|0)!=(0);
  if (!($tobool32)) {
   $htmlout = 1;
   continue;
  }
  $21 = $argv$addr;
  $22 = HEAP32[$21>>2]|0;
  $call35 = (_strcmp($22,42430)|0);
  $tobool36 = ($call35|0)!=(0);
  if (!($tobool36)) {
   $block = 1;
   continue;
  }
  $23 = $argv$addr;
  $24 = HEAP32[$23>>2]|0;
  $call39 = (_strcmp($24,42433)|0);
  $tobool40 = ($call39|0)!=(0);
  if (!($tobool40)) {
   $show_memory = 1;
   continue;
  }
  $25 = $argv$addr;
  $26 = HEAP32[$25>>2]|0;
  $call43 = (_strcmp($26,42436)|0);
  $tobool44 = ($call43|0)!=(0);
  if (!($tobool44)) {
   HEAP32[29720] = 1;
   continue;
  }
  $27 = $argv$addr;
  $28 = HEAP32[$27>>2]|0;
  $call47 = (_strcmp($28,42440)|0);
  $tobool48 = ($call47|0)!=(0);
  if (!($tobool48)) {
   HEAP32[29721] = 1;
   continue;
  }
  $29 = $argv$addr;
  $30 = HEAP32[$29>>2]|0;
  $call51 = (_strcmp($30,42444)|0);
  $tobool52 = ($call51|0)!=(0);
  if (!($tobool52)) {
   HEAP32[29722] = 1;
   continue;
  }
  $31 = $argv$addr;
  $32 = HEAP32[$31>>2]|0;
  $call55 = (_strcmp($32,42448)|0);
  $tobool56 = ($call55|0)!=(0);
  if (!($tobool56)) {
   HEAP32[29722] = 1;
   HEAP32[29723] = 1;
   continue;
  }
  $33 = $argv$addr;
  $34 = HEAP32[$33>>2]|0;
  $call59 = (_strcmp($34,42453)|0);
  $tobool60 = ($call59|0)!=(0);
  if (!($tobool60)) {
   HEAP32[29724] = 1;
   continue;
  }
  $35 = $argv$addr;
  $36 = HEAP32[$35>>2]|0;
  $call63 = (_strcmp($36,42457)|0);
  $tobool64 = ($call63|0)!=(0);
  if (!($tobool64)) {
   HEAP32[29725] = 1;
   continue;
  }
  $37 = $argv$addr;
  $38 = HEAP32[$37>>2]|0;
  $call67 = (_strcmp($38,42461)|0);
  $tobool68 = ($call67|0)!=(0);
  if (!($tobool68)) {
   HEAP32[29726] = 1;
   continue;
  }
  $39 = $argv$addr;
  $40 = HEAP32[$39>>2]|0;
  $call71 = (_strncmp($40,42465,2)|0);
  $tobool72 = ($call71|0)!=(0);
  $41 = $argv$addr;
  $42 = HEAP32[$41>>2]|0;
  if (!($tobool72)) {
   $call74 = (_strlen($42)|0);
   $cmp = ($call74>>>0)>(2);
   if ($cmp) {
    $43 = $argv$addr;
    $44 = HEAP32[$43>>2]|0;
    $add$ptr = ((($44)) + 2|0);
    $$sink = $add$ptr;
   } else {
    $45 = $argc$addr;
    $dec78 = (($45) + -1)|0;
    $argc$addr = $dec78;
    $46 = $argv$addr;
    $incdec$ptr79 = ((($46)) + 4|0);
    $argv$addr = $incdec$ptr79;
    $47 = $argv$addr;
    $48 = HEAP32[$47>>2]|0;
    $$sink = $48;
   }
   $call80 = (_atoi($$sink)|0);
   HEAP32[29719] = $call80;
   continue;
  }
  $call82 = (_strcmp($42,42468)|0);
  $tobool83 = ($call82|0)!=(0);
  if (!($tobool83)) {
   label = 45;
   break;
  }
  $49 = $argv$addr;
  $50 = HEAP32[$49>>2]|0;
  $call86 = (_strcmp($50,42475)|0);
  $tobool87 = ($call86|0)!=(0);
  if (!($tobool87)) {
   label = 47;
   break;
  }
  $51 = $argv$addr;
  $52 = HEAP32[$51>>2]|0;
  $call90 = (_strcmp($52,42478)|0);
  $tobool91 = ($call90|0)!=(0);
  if (!($tobool91)) {
   label = 49;
   break;
  }
  $53 = $argv$addr;
  $54 = HEAP32[$53>>2]|0;
  $call94 = (_strncmp($54,91432,1)|0);
  $tobool95 = ($call94|0)!=(0);
  if (!($tobool95)) {
   label = 51;
   break;
  }
  $58 = $argv$addr;
  $59 = HEAP32[$58>>2]|0;
  $filename = $59;
 }
 if ((label|0) == 6) {
  $6 = HEAP32[7856]|0;
  HEAP32[$vararg_buffer>>2] = 42016;
  (_fprintf($6,42388,$vararg_buffer)|0);
  _exit(0);
  // unreachable;
 }
 else if ((label|0) == 45) {
  _show_usage();
  _exit(0);
  // unreachable;
 }
 else if ((label|0) == 47) {
  _show_usage();
  _exit(0);
  // unreachable;
 }
 else if ((label|0) == 49) {
  _show_usage();
  _exit(0);
  // unreachable;
 }
 else if ((label|0) == 51) {
  $55 = HEAP32[7856]|0;
  $56 = $argv$addr;
  $57 = HEAP32[$56>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $57;
  (_fprintf($55,42481,$vararg_buffer4)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 53) {
  $60 = HEAP32[29721]|0;
  $tobool122 = ($60|0)!=(0);
  $61 = HEAP32[29722]|0;
  $tobool123 = ($61|0)!=(0);
  $or$cond = $tobool122 & $tobool123;
  if ($or$cond) {
   $62 = HEAP32[7856]|0;
   (_fprintf($62,42518,$vararg_buffer7)|0);
   HEAP32[29722] = 0;
  }
  (_signal(6,(71|0))|0);
  (_signal(7,(71|0))|0);
  (_signal(11,(71|0))|0);
  _lex2_initialise();
  $63 = $filename;
  $tobool130 = ($63|0)!=(0|0);
  if ($tobool130) {
   $64 = $filename;
   $call132 = (_fopen($64,77058)|0);
   $in = $call132;
   $65 = $in;
   $tobool133 = ($65|0)!=(0|0);
   if (!($tobool133)) {
    $66 = HEAP32[7856]|0;
    $67 = $filename;
    HEAP32[$vararg_buffer9>>2] = $67;
    (_fprintf($66,42572,$vararg_buffer9)|0);
    _exit(1);
    // unreachable;
   }
  }
  $68 = $in;
  $tobool138 = ($68|0)!=(0|0);
  $69 = $in;
  $70 = HEAP32[7949]|0;
  $cond = $tobool138 ? $69 : $70;
  _parse_file($cond);
  $71 = $in;
  $tobool139 = ($71|0)!=(0|0);
  if ($tobool139) {
   $72 = $in;
   (_fclose($72)|0);
  }
  $73 = HEAP32[29727]|0;
  $tobool143 = ($73|0)!=(0);
  if ($tobool143) {
   $retval = 3;
   $109 = $retval;
   STACKTOP = sp;return ($109|0);
  }
  $74 = $token_lists;
  $tobool146 = ($74|0)!=(0);
  if ($tobool146) {
   (_printf(42601,$vararg_buffer12)|0);
   _show_tokens();
  }
  _preprocess_tokens();
  $75 = HEAP32[29727]|0;
  $tobool150 = ($75|0)!=(0);
  if ($tobool150) {
   $retval = 3;
   $109 = $retval;
   STACKTOP = sp;return ($109|0);
  }
  $76 = $token_lists;
  $tobool153 = ($76|0)!=(0);
  if ($tobool153) {
   (_printf(42636,$vararg_buffer14)|0);
   _show_tokens();
   (_printf(42700,$vararg_buffer16)|0);
  }
  $77 = $debug;
  HEAP32[_yydebug>>2] = $77;
  HEAP32[29718] = 0;
  $78 = HEAP32[29721]|0;
  $tobool158 = ($78|0)!=(0);
  if ($tobool158) {
   $call160 = (_full_yyparse()|0);
   $result = $call160;
  } else {
   $call162 = (_yyparse()|0);
   $result = $call162;
  }
  $79 = $result;
  $cmp164 = ($79|0)!=(0);
  $80 = HEAP32[29718]|0;
  $tobool166 = ($80|0)!=(0);
  $or$cond1 = $cmp164 | $tobool166;
  do {
   if (!($or$cond1)) {
    $81 = HEAP32[29728]|0;
    _expand_bahe_ui($81);
    $82 = HEAP32[29728]|0;
    _error_scan($82);
    $83 = $show_tree;
    $tobool168 = ($83|0)!=(0);
    if ($tobool168) {
     $84 = $full_tree;
     $tobool170 = ($84|0)!=(0);
     if (!($tobool170)) {
      $85 = HEAP32[29728]|0;
      _compress_singletons($85);
     }
     $86 = HEAP32[29728]|0;
     _print_parse_tree($86);
     break;
    }
    $87 = $latex;
    $tobool174 = ($87|0)!=(0);
    $88 = $textout;
    $tobool175 = ($88|0)!=(0);
    $or$cond2 = $tobool174 | $tobool175;
    $89 = $htmlout;
    $tobool177 = ($89|0)!=(0);
    $or$cond3 = $or$cond2 | $tobool177;
    $90 = HEAP32[29728]|0;
    if (!($or$cond3)) {
     _compress_singletons($90);
     $104 = HEAP32[29728]|0;
     $105 = $gloss;
     _print_bracketed_text($104,$105);
     break;
    }
    _terms_processing($90);
    $91 = HEAP32[29728]|0;
    _do_conversions($91);
    $92 = HEAP32[29728]|0;
    _tense_processing($92);
    $93 = HEAP32[29728]|0;
    _connectives_processing($93);
    $94 = HEAP32[29728]|0;
    _relative_clause_processing($94);
    $95 = HEAP32[29728]|0;
    _add_bracketing_tags($95);
    $96 = $latex;
    $tobool179 = ($96|0)!=(0);
    if ($tobool179) {
     $97 = HEAP32[29728]|0;
     $98 = $block;
     $tobool181 = ($98|0)!=(0);
     $cond182 = $tobool181 ? 31264 : 31000;
     _do_output($97,$cond182);
     break;
    }
    $99 = $textout;
    $tobool184 = ($99|0)!=(0);
    if ($tobool184) {
     $100 = HEAP32[29728]|0;
     $101 = $block;
     $tobool186 = ($101|0)!=(0);
     $cond187 = $tobool186 ? 31368 : 31316;
     _do_output($100,$cond187);
     break;
    }
    $102 = $htmlout;
    $tobool189 = ($102|0)!=(0);
    if ($tobool189) {
     $103 = HEAP32[29728]|0;
     _do_output($103,31052);
    }
   }
  } while(0);
  $106 = $show_memory;
  $tobool198 = ($106|0)!=(0);
  if ($tobool198) {
   _print_memory_statistics();
  }
  $107 = $result;
  $tobool201 = ($107|0)!=(0);
  if ($tobool201) {
   $cond207 = 1;
  } else {
   $108 = HEAP32[29718]|0;
   $tobool204 = ($108|0)!=(0);
   $cond205 = $tobool204 ? 2 : 0;
   $cond207 = $cond205;
  }
  $retval = $cond207;
  $109 = $retval;
  STACKTOP = sp;return ($109|0);
 }
 return (0)|0;
}
function _show_usage() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[7856]|0;
 HEAP32[$vararg_buffer>>2] = 42016;
 (_fprintf($0,42388,$vararg_buffer)|0);
 $1 = HEAP32[7856]|0;
 (_fprintf($1,42733,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function _parse_file($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $buffer = 0, $c = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp14 = 0, $cmp17 = 0, $cmp3 = 0, $cmp30 = 0, $cmp33 = 0, $cmp48 = 0;
 var $cmp54 = 0, $cmp58 = 0, $cmp61 = 0, $cmp7 = 0, $column = 0, $conv = 0, $dec = 0, $f$addr = 0, $inc = 0, $inc5 = 0, $inc56 = 0, $inc9 = 0, $incdec$ptr = 0, $line = 0, $new_tok = 0, $or$cond = 0, $p = 0, $paren_depth = 0, $start_column = 0, $start_line = 0;
 var $sub = 0, $tobool = 0, $tobool39 = 0, $tobool64 = 0, $tobool70 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1072|0);
 $vararg_buffer = sp;
 $buffer = sp + 40|0;
 $f$addr = $f;
 $start_line = 1;
 $start_column = 0;
 $paren_depth = 0;
 HEAP8[119616] = 0;
 HEAP32[29729] = 0;
 $line = 1;
 $column = 0;
 $new_tok = 1;
 $p = $buffer;
 L1: while(1) {
  $0 = $f$addr;
  $call = (_fgetc($0)|0);
  $c = $call;
  $1 = $column;
  $inc = (($1) + 1)|0;
  $column = $inc;
  $2 = $paren_depth;
  $cmp = ($2|0)>(0);
  $3 = $c;
  if ($cmp) {
   $cmp1 = ($3|0)==(41);
   if ($cmp1) {
    $4 = $paren_depth;
    $dec = (($4) + -1)|0;
    $paren_depth = $dec;
    $new_tok = 1;
    continue;
   }
   $5 = $c;
   $cmp3 = ($5|0)==(40);
   if ($cmp3) {
    $6 = $paren_depth;
    $inc5 = (($6) + 1)|0;
    $paren_depth = $inc5;
    continue;
   }
   $7 = $c;
   $cmp7 = ($7|0)==(10);
   if (!($cmp7)) {
    continue;
   }
   $8 = $line;
   $inc9 = (($8) + 1)|0;
   $line = $inc9;
   $column = 0;
   continue;
  }
  $cmp13 = ($3|0)>=(48);
  $9 = $c;
  $cmp14 = ($9|0)<=(57);
  $or$cond = $cmp13 & $cmp14;
  if ($or$cond) {
   $10 = $p;
   HEAP8[$10>>0] = 0;
   $11 = $p;
   $cmp17 = ($11>>>0)>($buffer>>>0);
   if ($cmp17) {
    $12 = $start_line;
    $13 = $start_column;
    (_process_word($buffer,$12,$13)|0);
    $new_tok = 1;
    $p = $buffer;
   }
   $14 = $new_tok;
   $tobool = ($14|0)!=(0);
   if ($tobool) {
    $new_tok = 0;
    $15 = $line;
    $start_line = $15;
    $16 = $column;
    $start_column = $16;
   }
   $17 = $c;
   $sub = (($17) - 48)|0;
   $arrayidx = (8 + ($sub<<2)|0);
   $18 = HEAP32[$arrayidx>>2]|0;
   (_strcpy($buffer,$18)|0);
   $19 = $start_line;
   $20 = $start_column;
   (_process_word($buffer,$19,$20)|0);
   continue;
  }
  $21 = $c;
  $cmp30 = ($21|0)==(58);
  if ($cmp30) {
   $22 = $p;
   HEAP8[$22>>0] = 0;
   $23 = $p;
   $cmp33 = ($23>>>0)>($buffer>>>0);
   if ($cmp33) {
    $24 = $start_line;
    $25 = $start_column;
    (_process_word($buffer,$24,$25)|0);
    $new_tok = 1;
    $p = $buffer;
   }
   $26 = $new_tok;
   $tobool39 = ($26|0)!=(0);
   if ($tobool39) {
    $new_tok = 0;
    $27 = $line;
    $start_line = $27;
    $28 = $column;
    $start_column = $28;
   }
   (_strcpy($buffer,105831)|0);
   $29 = $start_line;
   $30 = $start_column;
   (_process_word($buffer,$29,$30)|0);
   continue;
  }
  $31 = $c;
  switch ($31|0) {
  case -1: case 62: case 40: case 46: case 10: case 9: case 32:  {
   break;
  }
  default: {
   $40 = $new_tok;
   $tobool64 = ($40|0)!=(0);
   if ($tobool64) {
    $new_tok = 0;
    $41 = $line;
    $start_line = $41;
    $42 = $column;
    $start_column = $42;
   }
   $43 = $c;
   $conv = $43&255;
   $44 = $p;
   $incdec$ptr = ((($44)) + 1|0);
   $p = $incdec$ptr;
   HEAP8[$44>>0] = $conv;
   continue L1;
  }
  }
  $32 = $p;
  HEAP8[$32>>0] = 0;
  $33 = $p;
  $cmp48 = ($33>>>0)>($buffer>>>0);
  if ($cmp48) {
   $34 = $start_line;
   $35 = $start_column;
   (_process_word($buffer,$34,$35)|0);
   $new_tok = 1;
   $p = $buffer;
  }
  $36 = $c;
  $cmp54 = ($36|0)==(10);
  if ($cmp54) {
   _mark_eol();
   $37 = $line;
   $inc56 = (($37) + 1)|0;
   $line = $inc56;
   $column = 0;
  }
  $38 = $c;
  $cmp58 = ($38|0)==(40);
  if ($cmp58) {
   $paren_depth = 1;
  }
  $39 = $c;
  $cmp61 = ($39|0)==(-1);
  if ($cmp61) {
   break;
  }
 }
 $45 = HEAP32[29730]|0;
 $tobool70 = ($45|0)!=(0|0);
 if (!($tobool70)) {
  STACKTOP = sp;return;
 }
 $46 = HEAP32[7856]|0;
 HEAP32[$vararg_buffer>>2] = 119680;
 (_fprintf($46,43988,$vararg_buffer)|0);
 HEAP32[29727] = 1;
 STACKTOP = sp;return;
}
function _process_word($buf,$start_line,$start_column) {
 $buf = $buf|0;
 $start_line = $start_line|0;
 $start_column = $start_column|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $add = 0, $add$ptr = 0;
 var $add10 = 0, $add20 = 0, $add21 = 0, $add26 = 0, $add27 = 0, $add73 = 0, $buf$addr = 0, $buf2 = 0, $call = 0, $call11 = 0, $call12 = 0, $call19 = 0, $call22 = 0, $call23 = 0, $call24 = 0, $call25 = 0, $call28 = 0, $call29 = 0, $call3 = 0, $call35 = 0;
 var $call36 = 0, $call38 = 0, $call43 = 0, $call48 = 0, $call6 = 0, $call7 = 0, $call8 = 0, $call9 = 0, $can_split = 0, $cmp = 0, $cmp66 = 0, $cmp67 = 0, $cmp68 = 0, $column = 0, $conv = 0, $data = 0, $data13 = 0, $data15 = 0, $inc = 0, $incdec$ptr = 0;
 var $incdec$ptr71 = 0, $incdec$ptr74 = 0, $incr = 0, $ladoi = 0, $morf_type = 0, $mx = 0, $p = 0, $pw = 0, $pwe = 0, $pws = 0, $q = 0, $retval = 0, $start_column$addr = 0, $start_column5 = 0, $start_line$addr = 0, $start_line4 = 0, $tail = 0, $term = 0, $text = 0, $tobool = 0;
 var $tobool1 = 0, $tobool17 = 0, $tobool32 = 0, $tobool39 = 0, $tobool44 = 0, $tobool69 = 0, $tok = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $word_starts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5232|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5232|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $buf2 = sp + 4200|0;
 $word_starts = sp + 80|0;
 $pwe = sp + 68|0;
 $mx = sp + 48|0;
 $column = sp + 44|0;
 $buf$addr = $buf;
 $start_line$addr = $start_line;
 $start_column$addr = $start_column;
 $0 = HEAP32[29730]|0;
 $tobool = ($0|0)!=(0|0);
 if ($tobool) {
  $1 = $buf$addr;
  $call = (_strcmp($1,119616)|0);
  $tobool1 = ($call|0)!=(0);
  if ($tobool1) {
   $12 = HEAP32[29730]|0;
   $13 = HEAP8[$12>>0]|0;
   $tobool17 = ($13<<24>>24)!=(0);
   if ($tobool17) {
    $14 = HEAP32[29730]|0;
    $15 = HEAP32[29730]|0;
    $call19 = (_strlen($15)|0);
    $add20 = (($call19) + 1)|0;
    $add21 = (($add20) + 1)|0;
    $call22 = (_Realloc($14,$add21)|0);
    $call23 = (_strcat($call22,116343)|0);
    HEAP32[29730] = $call23;
   }
   $16 = HEAP32[29730]|0;
   $17 = HEAP32[29730]|0;
   $call24 = (_strlen($17)|0);
   $18 = $buf$addr;
   $call25 = (_strlen($18)|0);
   $add26 = (($call24) + ($call25))|0;
   $add27 = (($add26) + 1)|0;
   $call28 = (_Realloc($16,$add27)|0);
   $19 = $buf$addr;
   $call29 = (_strcat($call28,$19)|0);
   HEAP32[29730] = $call29;
  } else {
   $call3 = (_new_node()|0);
   $tok = $call3;
   $2 = HEAP32[29731]|0;
   $3 = $tok;
   $start_line4 = ((($3)) + 32|0);
   HEAP32[$start_line4>>2] = $2;
   $4 = HEAP32[29732]|0;
   $5 = $tok;
   $start_column5 = ((($5)) + 36|0);
   HEAP32[$start_column5>>2] = $4;
   $6 = $tok;
   $type = ((($6)) + 40|0);
   HEAP32[$type>>2] = 3;
   $call6 = (_strlen(119680)|0);
   $add = (1 + ($call6))|0;
   $call7 = (_Malloc($add)|0);
   $call8 = (_strcpy($call7,119680)|0);
   $7 = $tok;
   $data = ((($7)) + 44|0);
   HEAP32[$data>>2] = $call8;
   $call9 = (_strlen(119616)|0);
   $add10 = (1 + ($call9))|0;
   $call11 = (_Malloc($add10)|0);
   $call12 = (_strcpy($call11,119616)|0);
   $8 = $tok;
   $data13 = ((($8)) + 44|0);
   $term = ((($data13)) + 4|0);
   HEAP32[$term>>2] = $call12;
   $9 = HEAP32[29730]|0;
   $10 = $tok;
   $data15 = ((($10)) + 44|0);
   $text = ((($data15)) + 8|0);
   HEAP32[$text>>2] = $9;
   $11 = $tok;
   _add_token($11);
   HEAP32[29730] = 0;
   HEAP8[119616] = 0;
  }
  $retval = 1;
  $97 = $retval;
  STACKTOP = sp;return ($97|0);
 }
 $20 = HEAP32[29729]|0;
 $tobool32 = ($20|0)!=(0);
 $21 = $buf$addr;
 if ($tobool32) {
  (_strcpy(119616,$21)|0);
  $call35 = (_Malloc(1)|0);
  $call36 = (_strcpy($call35,215176)|0);
  HEAP32[29730] = $call36;
  HEAP32[29729] = 0;
  $retval = 1;
  $97 = $retval;
  STACKTOP = sp;return ($97|0);
 }
 $call38 = (_strcmp($21,78861)|0);
 $tobool39 = ($call38|0)!=(0);
 if (!($tobool39)) {
  (_strcpy(119680,78861)|0);
  HEAP32[29729] = 1;
  $22 = $start_line$addr;
  HEAP32[29731] = $22;
  $23 = $start_column$addr;
  HEAP32[29732] = $23;
  $retval = 1;
  $97 = $retval;
  STACKTOP = sp;return ($97|0);
 }
 $24 = $buf$addr;
 $call43 = (_strcmp($24,102095)|0);
 $tobool44 = ($call43|0)!=(0);
 if (!($tobool44)) {
  (_strcpy(119680,102095)|0);
  HEAP32[29729] = 1;
  $25 = $start_line$addr;
  HEAP32[29731] = $25;
  $26 = $start_column$addr;
  HEAP32[29732] = $26;
  $retval = 1;
  $97 = $retval;
  STACKTOP = sp;return ($97|0);
 }
 HEAP32[$pwe>>2] = $word_starts;
 $pws = $word_starts;
 $27 = $buf$addr;
 $call48 = (_morf_scan($27,$pwe,$mx)|0);
 $morf_type = $call48;
 $28 = $start_column$addr;
 HEAP32[$column>>2] = $28;
 $29 = $morf_type;
 L24: do {
  switch ($29|0) {
  case 0:  {
   $30 = HEAP32[7856]|0;
   $31 = $buf$addr;
   $32 = $start_line$addr;
   $33 = HEAP32[$column>>2]|0;
   HEAP32[$vararg_buffer>>2] = $31;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $32;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $33;
   (_fprintf($30,44029,$vararg_buffer)|0);
   HEAP32[29727] = 1;
   break;
  }
  case 10:  {
   $34 = HEAP32[7856]|0;
   $35 = $buf$addr;
   $36 = $start_line$addr;
   $37 = HEAP32[$column>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $35;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $36;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $37;
   (_fprintf($34,44076,$vararg_buffer3)|0);
   HEAP32[29727] = 1;
   break;
  }
  case 1:  {
   $38 = $pws;
   $39 = HEAP32[$pwe>>2]|0;
   $40 = $start_line$addr;
   _add_preceding_cmavo($38,$39,$40,$column);
   $41 = HEAP32[$pwe>>2]|0;
   $42 = HEAP32[$41>>2]|0;
   $43 = $start_line$addr;
   $44 = HEAP32[$column>>2]|0;
   _add_brivla_token($42,$43,$44,0);
   break;
  }
  case 2:  {
   $45 = $pws;
   $46 = HEAP32[$pwe>>2]|0;
   $47 = $start_line$addr;
   _add_preceding_cmavo($45,$46,$47,$column);
   $48 = HEAP32[$pwe>>2]|0;
   $49 = HEAP32[$48>>2]|0;
   $50 = $start_line$addr;
   $51 = HEAP32[$column>>2]|0;
   _add_brivla_token($49,$50,$51,1);
   break;
  }
  case 6: case 5: case 4: case 3:  {
   $52 = $pws;
   $53 = HEAP32[$pwe>>2]|0;
   $54 = $start_line$addr;
   _add_preceding_cmavo($52,$53,$54,$column);
   $55 = HEAP32[$pwe>>2]|0;
   $56 = HEAP32[$55>>2]|0;
   $57 = $start_line$addr;
   $58 = HEAP32[$column>>2]|0;
   _add_brivla_token($56,$57,$58,2);
   break;
  }
  case 7:  {
   $59 = $pws;
   $60 = HEAP32[$pwe>>2]|0;
   $61 = $start_line$addr;
   _add_preceding_cmavo($59,$60,$61,$column);
   $62 = HEAP32[$pwe>>2]|0;
   $63 = HEAP32[$62>>2]|0;
   $64 = $start_line$addr;
   $65 = HEAP32[$column>>2]|0;
   _add_brivla_token($63,$64,$65,3);
   break;
  }
  case 9:  {
   $66 = $buf$addr;
   $67 = $start_line$addr;
   $68 = HEAP32[$column>>2]|0;
   $69 = HEAP32[$mx>>2]|0;
   $can_split = ((($mx)) + 4|0);
   $70 = HEAP32[$can_split>>2]|0;
   $ladoi = ((($mx)) + 8|0);
   $71 = HEAP32[$ladoi>>2]|0;
   $tail = ((($mx)) + 12|0);
   $72 = HEAP32[$tail>>2]|0;
   _process_cmene($66,$67,$68,$69,$70,$71,$72);
   break;
  }
  case 8:  {
   $73 = $pws;
   $pw = $73;
   while(1) {
    $74 = $pw;
    $75 = HEAP32[$pwe>>2]|0;
    $cmp = ($74>>>0)<=($75>>>0);
    if (!($cmp)) {
     break L24;
    }
    $incr = 0;
    $76 = $pw;
    $77 = HEAP32[$76>>2]|0;
    $p = $77;
    $q = $buf2;
    while(1) {
     $78 = $pw;
     $79 = HEAP32[$pwe>>2]|0;
     $cmp66 = ($78>>>0)<($79>>>0);
     if ($cmp66) {
      $80 = $p;
      $81 = $pw;
      $add$ptr = ((($81)) + 4|0);
      $82 = HEAP32[$add$ptr>>2]|0;
      $cmp67 = ($80>>>0)<($82>>>0);
      if (!($cmp67)) {
       label = 27;
      }
     } else {
      label = 27;
     }
     if ((label|0) == 27) {
      label = 0;
      $83 = $pw;
      $84 = HEAP32[$pwe>>2]|0;
      $cmp68 = ($83|0)==($84|0);
      if (!($cmp68)) {
       break;
      }
      $85 = $p;
      $86 = HEAP8[$85>>0]|0;
      $conv = $86 << 24 >> 24;
      $tobool69 = ($conv|0)!=(0);
      if (!($tobool69)) {
       break;
      }
     }
     $87 = $p;
     $incdec$ptr = ((($87)) + 1|0);
     $p = $incdec$ptr;
     $88 = HEAP8[$87>>0]|0;
     $89 = $q;
     $incdec$ptr71 = ((($89)) + 1|0);
     $q = $incdec$ptr71;
     HEAP8[$89>>0] = $88;
     $90 = $incr;
     $inc = (($90) + 1)|0;
     $incr = $inc;
    }
    $91 = $q;
    HEAP8[$91>>0] = 0;
    $92 = $start_line$addr;
    $93 = HEAP32[$column>>2]|0;
    _process_cmavo($buf2,$92,$93);
    $94 = $incr;
    $95 = HEAP32[$column>>2]|0;
    $add73 = (($95) + ($94))|0;
    HEAP32[$column>>2] = $add73;
    $96 = $pw;
    $incdec$ptr74 = ((($96)) + 4|0);
    $pw = $incdec$ptr74;
   }
   break;
  }
  default: {
   ___assert_fail((80680|0),(44137|0),357,(44144|0));
   // unreachable;
  }
  }
 } while(0);
 $retval = 1;
 $97 = $retval;
 STACKTOP = sp;return ($97|0);
}
function _add_preceding_cmavo($pws,$pwe,$start_line,$column) {
 $pws = $pws|0;
 $pwe = $pwe|0;
 $start_line = $start_line|0;
 $column = $column|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add$ptr = 0, $buf2 = 0, $cmp = 0, $cmp2 = 0, $column$addr = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $incdec$ptr6 = 0, $incr = 0, $p = 0, $pw = 0, $pwe$addr = 0, $pws$addr = 0, $q = 0, $start_line$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $buf2 = sp + 32|0;
 $pws$addr = $pws;
 $pwe$addr = $pwe;
 $start_line$addr = $start_line;
 $column$addr = $column;
 $0 = $pws$addr;
 $pw = $0;
 while(1) {
  $1 = $pw;
  $2 = $pwe$addr;
  $cmp = ($1>>>0)<($2>>>0);
  if (!($cmp)) {
   break;
  }
  $incr = 0;
  $3 = $pw;
  $4 = HEAP32[$3>>2]|0;
  $p = $4;
  $q = $buf2;
  while(1) {
   $5 = $p;
   $6 = $pw;
   $add$ptr = ((($6)) + 4|0);
   $7 = HEAP32[$add$ptr>>2]|0;
   $cmp2 = ($5>>>0)<($7>>>0);
   if (!($cmp2)) {
    break;
   }
   $8 = $p;
   $incdec$ptr = ((($8)) + 1|0);
   $p = $incdec$ptr;
   $9 = HEAP8[$8>>0]|0;
   $10 = $q;
   $incdec$ptr4 = ((($10)) + 1|0);
   $q = $incdec$ptr4;
   HEAP8[$10>>0] = $9;
   $11 = $incr;
   $inc = (($11) + 1)|0;
   $incr = $inc;
  }
  $12 = $q;
  HEAP8[$12>>0] = 0;
  $13 = $start_line$addr;
  $14 = $column$addr;
  $15 = HEAP32[$14>>2]|0;
  _process_cmavo($buf2,$13,$15);
  $16 = $incr;
  $17 = $column$addr;
  $18 = HEAP32[$17>>2]|0;
  $add = (($18) + ($16))|0;
  HEAP32[$17>>2] = $add;
  $19 = $pw;
  $incdec$ptr6 = ((($19)) + 4|0);
  $pw = $incdec$ptr6;
 }
 STACKTOP = sp;return;
}
function _add_brivla_token($x,$start_line,$start_column,$brivla_type) {
 $x = $x|0;
 $start_line = $start_line|0;
 $start_column = $start_column|0;
 $brivla_type = $brivla_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $brivla_type$addr = 0, $call = 0, $call3 = 0, $call4 = 0, $call5 = 0, $data = 0, $data6 = 0, $start_column$addr = 0;
 var $start_column2 = 0, $start_line$addr = 0, $start_line1 = 0, $tok = 0, $type = 0, $type8 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $start_line$addr = $start_line;
 $start_column$addr = $start_column;
 $brivla_type$addr = $brivla_type;
 $call = (_new_node()|0);
 $tok = $call;
 $0 = $start_line$addr;
 $1 = $tok;
 $start_line1 = ((($1)) + 32|0);
 HEAP32[$start_line1>>2] = $0;
 $2 = $start_column$addr;
 $3 = $tok;
 $start_column2 = ((($3)) + 36|0);
 HEAP32[$start_column2>>2] = $2;
 $4 = $tok;
 $type = ((($4)) + 40|0);
 HEAP32[$type>>2] = 8;
 $5 = $x$addr;
 $call3 = (_strlen($5)|0);
 $add = (1 + ($call3))|0;
 $call4 = (_Malloc($add)|0);
 $6 = $x$addr;
 $call5 = (_strcpy($call4,$6)|0);
 $7 = $tok;
 $data = ((($7)) + 44|0);
 HEAP32[$data>>2] = $call5;
 $8 = $brivla_type$addr;
 $9 = $tok;
 $data6 = ((($9)) + 44|0);
 $type8 = ((($data6)) + 4|0);
 HEAP32[$type8>>2] = $8;
 $10 = $tok;
 _add_token($10);
 STACKTOP = sp;return;
}
function _process_cmene($buf,$start_line,$start_column,$is_bad,$can_split,$ladoi,$tail) {
 $buf = $buf|0;
 $start_line = $start_line|0;
 $start_column = $start_column|0;
 $is_bad = $is_bad|0;
 $can_split = $can_split|0;
 $ladoi = $ladoi|0;
 $tail = $tail|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add16 = 0, $add17 = 0;
 var $add23 = 0, $buf$addr = 0, $call19 = 0, $call22 = 0, $call24 = 0, $call25 = 0, $can_split$addr = 0, $cmp = 0, $cmp4 = 0, $data = 0, $inc = 0, $inc9 = 0, $incdec$ptr = 0, $incdec$ptr1 = 0, $incdec$ptr6 = 0, $incdec$ptr7 = 0, $is_bad$addr = 0, $labuf = 0, $ladoi$addr = 0, $len1 = 0;
 var $len2 = 0, $p = 0, $prefix = 0, $q = 0, $start_column$addr = 0, $start_column21 = 0, $start_line$addr = 0, $start_line20 = 0, $tail$addr = 0, $tobool = 0, $tobool11 = 0, $tok = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1088|0);
 $prefix = sp + 56|0;
 $labuf = sp + 48|0;
 $buf$addr = $buf;
 $start_line$addr = $start_line;
 $start_column$addr = $start_column;
 $is_bad$addr = $is_bad;
 $can_split$addr = $can_split;
 $ladoi$addr = $ladoi;
 $tail$addr = $tail;
 $0 = $is_bad$addr;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  $call19 = (_new_node()|0);
  $tok = $call19;
  $28 = $start_line$addr;
  $29 = $tok;
  $start_line20 = ((($29)) + 32|0);
  HEAP32[$start_line20>>2] = $28;
  $30 = $start_column$addr;
  $31 = $tok;
  $start_column21 = ((($31)) + 36|0);
  HEAP32[$start_column21>>2] = $30;
  $32 = $tok;
  $type = ((($32)) + 40|0);
  HEAP32[$type>>2] = 9;
  $33 = $buf$addr;
  $call22 = (_strlen($33)|0);
  $add23 = (1 + ($call22))|0;
  $call24 = (_Malloc($add23)|0);
  $34 = $buf$addr;
  $call25 = (_strcpy($call24,$34)|0);
  $35 = $tok;
  $data = ((($35)) + 44|0);
  HEAP32[$data>>2] = $call25;
  $36 = $tok;
  _add_token($36);
  STACKTOP = sp;return;
 }
 $1 = $buf$addr;
 $p = $1;
 $q = $prefix;
 $len1 = 0;
 while(1) {
  $2 = $p;
  $3 = $ladoi$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $p;
  $incdec$ptr = ((($4)) + 1|0);
  $p = $incdec$ptr;
  $5 = HEAP8[$4>>0]|0;
  $6 = $q;
  $incdec$ptr1 = ((($6)) + 1|0);
  $q = $incdec$ptr1;
  HEAP8[$6>>0] = $5;
  $7 = $len1;
  $inc = (($7) + 1)|0;
  $len1 = $inc;
 }
 $8 = $q;
 HEAP8[$8>>0] = 0;
 $9 = $ladoi$addr;
 $p = $9;
 $q = $labuf;
 $len2 = 0;
 while(1) {
  $10 = $p;
  $11 = $tail$addr;
  $cmp4 = ($10|0)!=($11|0);
  if (!($cmp4)) {
   break;
  }
  $12 = $p;
  $incdec$ptr6 = ((($12)) + 1|0);
  $p = $incdec$ptr6;
  $13 = HEAP8[$12>>0]|0;
  $14 = $q;
  $incdec$ptr7 = ((($14)) + 1|0);
  $q = $incdec$ptr7;
  HEAP8[$14>>0] = $13;
  $15 = $len2;
  $inc9 = (($15) + 1)|0;
  $len2 = $inc9;
 }
 $16 = $q;
 HEAP8[$16>>0] = 0;
 $17 = HEAP8[$prefix>>0]|0;
 $tobool11 = ($17<<24>>24)!=(0);
 if ($tobool11) {
  $18 = $start_line$addr;
  $19 = $start_column$addr;
  (_process_word($prefix,$18,$19)|0);
 }
 $20 = $start_line$addr;
 $21 = $start_column$addr;
 $22 = $len1;
 $add = (($21) + ($22))|0;
 (_process_word($labuf,$20,$add)|0);
 $23 = $tail$addr;
 $24 = $start_line$addr;
 $25 = $start_column$addr;
 $26 = $len1;
 $add16 = (($25) + ($26))|0;
 $27 = $len2;
 $add17 = (($add16) + ($27))|0;
 (_process_word($23,$24,$add17)|0);
 STACKTOP = sp;return;
}
function _process_cmavo($buf,$start_line,$start_column) {
 $buf = $buf|0;
 $start_line = $start_line|0;
 $start_column = $start_column|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $arrayidx = 0, $arrayidx13 = 0, $arrayidx20 = 0, $buf$addr = 0, $call = 0, $call1 = 0, $call14 = 0, $call26 = 0, $call27 = 0, $call28 = 0, $call6 = 0, $call7 = 0, $cmp = 0, $cmp10 = 0, $cmp8 = 0, $code = 0, $conv = 0, $conv21 = 0, $data = 0, $data22 = 0;
 var $data29 = 0, $hash = 0, $i = 0, $inc = 0, $n = 0, $node = 0, $ok = 0, $or$cond = 0, $selmao = 0, $start_column$addr = 0, $start_column19 = 0, $start_column32 = 0, $start_line$addr = 0, $start_line18 = 0, $start_line31 = 0, $tobool = 0, $tobool15 = 0, $tobool2 = 0, $type = 0, $type30 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $buf$addr = $buf;
 $start_line$addr = $start_line;
 $start_column$addr = $start_column;
 $0 = $buf$addr;
 $call = (_strlen($0)|0);
 $n = $call;
 $ok = 1;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = $n;
  $cmp = ($1|0)<($2|0);
  if (!($cmp)) {
   break;
  }
  $3 = $buf$addr;
  $4 = $i;
  $arrayidx = (($3) + ($4)|0);
  $5 = HEAP8[$arrayidx>>0]|0;
  $conv = $5 << 24 >> 24;
  $call1 = (_strchr(44157,$conv)|0);
  $tobool = ($call1|0)!=(0|0);
  if (!($tobool)) {
   label = 4;
   break;
  }
  $6 = $i;
  $inc = (($6) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 4) {
  $ok = 0;
 }
 $7 = $ok;
 $tobool2 = ($7|0)!=(0);
 if (!($tobool2)) {
  $8 = HEAP32[7856]|0;
  $9 = $buf$addr;
  HEAP32[$vararg_buffer>>2] = $9;
  (_fprintf($8,44182,$vararg_buffer)|0);
  HEAP32[29727] = 1;
  STACKTOP = sp;return;
 }
 $10 = $buf$addr;
 $call6 = (_hash_cmavo($10)|0);
 $hash = $call6;
 $call7 = (_new_node()|0);
 $node = $call7;
 $11 = $hash;
 $cmp8 = ($11|0)>=(0);
 $12 = $hash;
 $cmp10 = ($12|0)<=(1750);
 $or$cond = $cmp8 & $cmp10;
 if ($or$cond) {
  $13 = $buf$addr;
  $14 = $hash;
  $arrayidx13 = (46450 + (($14*14)|0)|0);
  $15 = HEAPU8[$arrayidx13>>0]|(HEAPU8[$arrayidx13+1>>0]<<8)|(HEAPU8[$arrayidx13+2>>0]<<16)|(HEAPU8[$arrayidx13+3>>0]<<24);
  $call14 = (_strcmp($13,$15)|0);
  $tobool15 = ($call14|0)!=(0);
  if ($tobool15) {
   label = 11;
  } else {
   $16 = $hash;
   $17 = $node;
   $data = ((($17)) + 44|0);
   $code = ((($data)) + 4|0);
   HEAP32[$code>>2] = $16;
   $18 = $node;
   $type = ((($18)) + 40|0);
   HEAP32[$type>>2] = 2;
   $19 = $start_line$addr;
   $20 = $node;
   $start_line18 = ((($20)) + 32|0);
   HEAP32[$start_line18>>2] = $19;
   $21 = $start_column$addr;
   $22 = $node;
   $start_column19 = ((($22)) + 36|0);
   HEAP32[$start_column19>>2] = $21;
   $23 = $hash;
   $arrayidx20 = (46450 + (($23*14)|0)|0);
   $selmao = ((($arrayidx20)) + 4|0);
   $24 = HEAPU8[$selmao>>0]|(HEAPU8[$selmao+1>>0]<<8);
   $conv21 = $24 << 16 >> 16;
   $25 = $node;
   $data22 = ((($25)) + 44|0);
   HEAP32[$data22>>2] = $conv21;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $26 = HEAP32[7856]|0;
  $27 = $buf$addr;
  $28 = $start_line$addr;
  $29 = $start_column$addr;
  HEAP32[$vararg_buffer1>>2] = $27;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $28;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $29;
  (_fprintf($26,44198,$vararg_buffer1)|0);
  HEAP32[29727] = 1;
  $30 = $buf$addr;
  $call26 = (_strlen($30)|0);
  $add = (1 + ($call26))|0;
  $call27 = (_Malloc($add)|0);
  $31 = $buf$addr;
  $call28 = (_strcpy($call27,$31)|0);
  $32 = $node;
  $data29 = ((($32)) + 44|0);
  HEAP32[$data29>>2] = $call28;
  $33 = $node;
  $type30 = ((($33)) + 40|0);
  HEAP32[$type30>>2] = 1;
  $34 = $start_line$addr;
  $35 = $node;
  $start_line31 = ((($35)) + 32|0);
  HEAP32[$start_line31>>2] = $34;
  $36 = $start_column$addr;
  $37 = $node;
  $start_column32 = ((($37)) + 36|0);
  HEAP32[$start_column32>>2] = $36;
 }
 $38 = $node;
 _add_token($38);
 STACKTOP = sp;return;
}
function _hash_cmavo($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add26 = 0, $add37 = 0, $arrayidx = 0, $arrayidx14 = 0;
 var $arrayidx36 = 0, $buf$addr = 0, $cmp = 0, $cmp20 = 0, $cmp23 = 0, $cmp3 = 0, $cmp30 = 0, $cmp8 = 0, $conv = 0, $conv12 = 0, $conv19 = 0, $conv2 = 0, $conv22 = 0, $conv29 = 0, $conv34 = 0, $conv7 = 0, $incdec$ptr = 0, $incdec$ptr16 = 0, $incdec$ptr27 = 0, $mul = 0;
 var $mul15 = 0, $p = 0, $retval = 0, $sub = 0, $sub13 = 0, $sub35 = 0, $tobool = 0, $v = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $buf$addr = $buf;
 $val = 0;
 $0 = $buf$addr;
 $p = $0;
 $1 = $p;
 $2 = HEAP8[$1>>0]|0;
 $conv = $2 << 24 >> 24;
 $cmp = ($conv|0)==(39);
 if ($cmp) {
  $retval = -1;
  $34 = $retval;
  STACKTOP = sp;return ($34|0);
 }
 $3 = $p;
 $4 = HEAP8[$3>>0]|0;
 $conv2 = $4 << 24 >> 24;
 $sub = (($conv2) - 97)|0;
 $arrayidx = (48 + ($sub<<2)|0);
 $5 = HEAP32[$arrayidx>>2]|0;
 $v = $5;
 $6 = $v;
 $cmp3 = ($6|0)>(0);
 if ($cmp3) {
  $7 = $v;
  $mul = ($7*98)|0;
  $val = $mul;
  $8 = $p;
  $incdec$ptr = ((($8)) + 1|0);
  $p = $incdec$ptr;
 }
 $9 = $p;
 $10 = HEAP8[$9>>0]|0;
 $conv7 = $10 << 24 >> 24;
 $cmp8 = ($conv7|0)==(39);
 if ($cmp8) {
  $retval = -1;
  $34 = $retval;
  STACKTOP = sp;return ($34|0);
 }
 $11 = $p;
 $12 = HEAP8[$11>>0]|0;
 $conv12 = $12 << 24 >> 24;
 $sub13 = (($conv12) - 97)|0;
 $arrayidx14 = (152 + ($sub13<<2)|0);
 $13 = HEAP32[$arrayidx14>>2]|0;
 $v = $13;
 $14 = $v;
 $mul15 = ($14*14)|0;
 $15 = $val;
 $add = (($15) + ($mul15))|0;
 $val = $add;
 $16 = $p;
 $incdec$ptr16 = ((($16)) + 1|0);
 $p = $incdec$ptr16;
 $17 = $p;
 $18 = HEAP8[$17>>0]|0;
 $tobool = ($18<<24>>24)!=(0);
 if (!($tobool)) {
  $19 = $val;
  $retval = $19;
  $34 = $retval;
  STACKTOP = sp;return ($34|0);
 }
 $20 = $p;
 $21 = HEAP8[$20>>0]|0;
 $conv19 = $21 << 24 >> 24;
 $cmp20 = ($conv19|0)==(39);
 if ($cmp20) {
  label = 11;
 } else {
  $22 = $p;
  $23 = HEAP8[$22>>0]|0;
  $conv22 = $23 << 24 >> 24;
  $cmp23 = ($conv22|0)==(44);
  if ($cmp23) {
   label = 11;
  }
 }
 if ((label|0) == 11) {
  $24 = $val;
  $add26 = (($24) + 7)|0;
  $val = $add26;
  $25 = $p;
  $incdec$ptr27 = ((($25)) + 1|0);
  $p = $incdec$ptr27;
 }
 $26 = $p;
 $27 = HEAP8[$26>>0]|0;
 $conv29 = $27 << 24 >> 24;
 $cmp30 = ($conv29|0)==(39);
 if ($cmp30) {
  $retval = -1;
  $34 = $retval;
  STACKTOP = sp;return ($34|0);
 } else {
  $28 = $p;
  $29 = HEAP8[$28>>0]|0;
  $conv34 = $29 << 24 >> 24;
  $sub35 = (($conv34) - 97)|0;
  $arrayidx36 = (152 + ($sub35<<2)|0);
  $30 = HEAP32[$arrayidx36>>2]|0;
  $v = $30;
  $31 = $v;
  $32 = $val;
  $add37 = (($32) + ($31))|0;
  $val = $add37;
  $33 = $val;
  $retval = $33;
  $34 = $retval;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _lex2_initialise() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(260)>>2] = 256;
 HEAP32[64] = 256;
 $0 = HEAP32[64]|0;
 HEAP32[29733] = $0;
 return;
}
function _add_token($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $node$addr = 0, $prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $node$addr = $node;
 $0 = $node$addr;
 HEAP32[$0>>2] = 256;
 $1 = HEAP32[(260)>>2]|0;
 $2 = $node$addr;
 $prev = ((($2)) + 4|0);
 HEAP32[$prev>>2] = $1;
 $3 = $node$addr;
 $4 = HEAP32[(260)>>2]|0;
 HEAP32[$4>>2] = $3;
 $5 = $node$addr;
 HEAP32[(260)>>2] = $5;
 STACKTOP = sp;return;
}
function _mark_eol() {
 var $0 = 0, $1 = 0, $eols = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(260)>>2]|0;
 $eols = ((($0)) + 28|0);
 $1 = HEAP32[$eols>>2]|0;
 $inc = (($1) + 1)|0;
 HEAP32[$eols>>2] = $inc;
 return;
}
function _delete_node($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $prev = 0, $prev1 = 0, $prev3 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $prev = ((($0)) + 4|0);
 $1 = HEAP32[$prev>>2]|0;
 $2 = $x$addr;
 $3 = HEAP32[$2>>2]|0;
 $prev1 = ((($3)) + 4|0);
 HEAP32[$prev1>>2] = $1;
 $4 = $x$addr;
 $5 = HEAP32[$4>>2]|0;
 $6 = $x$addr;
 $prev3 = ((($6)) + 4|0);
 $7 = HEAP32[$prev3>>2]|0;
 HEAP32[$7>>2] = $5;
 $8 = $x$addr;
 _Free($8);
 STACKTOP = sp;return;
}
function _free_node($x) {
 $x = $x|0;
 var $0 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 _Free($0);
 STACKTOP = sp;return;
}
function _show_tokens() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[64]|0;
 $x = $0;
 while(1) {
  $1 = $x;
  $cmp = ($1|0)!=(256|0);
  if (!($cmp)) {
   break;
  }
  $2 = $x;
  _show_token($2);
  $3 = $x;
  $4 = HEAP32[$3>>2]|0;
  $x = $4;
 }
 STACKTOP = sp;return;
}
function _show_token($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx8 = 0, $call24 = 0, $code = 0, $code6 = 0, $data = 0, $data11 = 0, $data15 = 0, $data19 = 0, $data2 = 0, $data28 = 0, $data32 = 0, $data36 = 0, $data5 = 0, $meaning = 0;
 var $text = 0, $text12 = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr7 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer33 = sp + 96|0;
 $vararg_buffer30 = sp + 88|0;
 $vararg_buffer27 = sp + 80|0;
 $vararg_buffer24 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $x$addr = $x;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 do {
  switch ($1|0) {
  case 1:  {
   $2 = $x$addr;
   $data = ((($2)) + 44|0);
   $3 = HEAP32[$data>>2]|0;
   HEAP32[$vararg_buffer>>2] = $3;
   (_printf(44235,$vararg_buffer)|0);
   STACKTOP = sp;return;
   break;
  }
  case 0:  {
   $4 = $x$addr;
   $data2 = ((($4)) + 44|0);
   $text = ((($data2)) + 4|0);
   $5 = HEAP32[$text>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $5;
   (_printf(44245,$vararg_buffer1)|0);
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $6 = $x$addr;
   $data5 = ((($6)) + 44|0);
   $code6 = ((($data5)) + 4|0);
   $7 = HEAP32[$code6>>2]|0;
   $code = $7;
   $8 = $code;
   $arrayidx = (46450 + (($8*14)|0)|0);
   $9 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
   $10 = $code;
   $arrayidx8 = (46450 + (($10*14)|0)|0);
   $meaning = ((($arrayidx8)) + 10|0);
   $11 = HEAPU8[$meaning>>0]|(HEAPU8[$meaning+1>>0]<<8)|(HEAPU8[$meaning+2>>0]<<16)|(HEAPU8[$meaning+3>>0]<<24);
   HEAP32[$vararg_buffer4>>2] = $9;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $11;
   (_printf(44255,$vararg_buffer4)|0);
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $12 = $x$addr;
   $data11 = ((($12)) + 44|0);
   $text12 = ((($data11)) + 8|0);
   $13 = HEAP32[$text12>>2]|0;
   HEAP32[$vararg_buffer8>>2] = $13;
   (_printf(44744,$vararg_buffer8)|0);
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $14 = $x$addr;
   $data15 = ((($14)) + 44|0);
   $15 = HEAP32[$data15>>2]|0;
   HEAP32[$vararg_buffer11>>2] = $15;
   (_printf(44754,$vararg_buffer11)|0);
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $16 = $x$addr;
   $data19 = ((($16)) + 44|0);
   $17 = HEAP32[$data19>>2]|0;
   HEAP32[$vararg_buffer14>>2] = $17;
   (_printf(44764,$vararg_buffer14)|0);
   STACKTOP = sp;return;
   break;
  }
  case 6:  {
   (_printf(44270,$vararg_buffer17)|0);
   $18 = $x$addr;
   $call24 = (_build_string_from_node($18)|0);
   HEAP32[$vararg_buffer19>>2] = $call24;
   (_printf(116219,$vararg_buffer19)|0);
   (_printf(116341,$vararg_buffer22)|0);
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $19 = $x$addr;
   $data28 = ((($19)) + 44|0);
   $20 = HEAP32[$data28>>2]|0;
   HEAP32[$vararg_buffer24>>2] = $20;
   (_printf(44786,$vararg_buffer24)|0);
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $21 = $x$addr;
   $data32 = ((($21)) + 44|0);
   $22 = HEAP32[$data32>>2]|0;
   HEAP32[$vararg_buffer27>>2] = $22;
   (_printf(44277,$vararg_buffer27)|0);
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   $23 = $x$addr;
   $data36 = ((($23)) + 44|0);
   $24 = HEAP32[$data36>>2]|0;
   HEAP32[$vararg_buffer30>>2] = $24;
   (_printf(44287,$vararg_buffer30)|0);
   STACKTOP = sp;return;
   break;
  }
  case 11:  {
   (_printf(44297,$vararg_buffer33)|0);
   STACKTOP = sp;return;
   break;
  }
  case 10:  {
   ___assert_fail((80680|0),(44321|0),163,(44328|0));
   // unreachable;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _build_string_from_node($the_node) {
 $the_node = $the_node|0;
 var $0 = 0, $1 = 0, $call = 0, $the_node$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $the_node$addr = $the_node;
 $0 = $the_node$addr;
 $1 = $the_node$addr;
 $call = (_build_string_from_nodes($0,$1)|0);
 STACKTOP = sp;return ($call|0);
}
function _build_string_from_nodes($start,$end) {
 $start = $start|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add10 = 0, $add15 = 0, $add19 = 0, $add20 = 0, $add25 = 0, $add26 = 0, $add30 = 0, $add32 = 0, $add34 = 0, $add5 = 0, $arrayidx = 0, $arrayidx48 = 0, $call = 0;
 var $call14 = 0, $call18 = 0, $call24 = 0, $call29 = 0, $call35 = 0, $call4 = 0, $call9 = 0, $cmp = 0, $cmp83 = 0, $code = 0, $code47 = 0, $data = 0, $data12 = 0, $data17 = 0, $data2 = 0, $data22 = 0, $data28 = 0, $data40 = 0, $data45 = 0, $data52 = 0;
 var $data57 = 0, $data63 = 0, $data7 = 0, $data70 = 0, $data75 = 0, $end$addr = 0, $inc = 0, $len = 0, $result = 0, $sep_with_zei = 0, $sep_with_zei77 = 0, $start$addr = 0, $text = 0, $text65 = 0, $type = 0, $type38 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $start$addr = $start;
 $end$addr = $end;
 $len = 0;
 $0 = $start$addr;
 $y = $0;
 L1: while(1) {
  $1 = $y;
  $type = ((($1)) + 40|0);
  $2 = HEAP32[$type>>2]|0;
  switch ($2|0) {
  case 7: case 5: case 0: case 10:  {
   label = 11;
   break L1;
   break;
  }
  case 1:  {
   $3 = $y;
   $data = ((($3)) + 44|0);
   $4 = HEAP32[$data>>2]|0;
   $call = (_strlen($4)|0);
   $5 = $len;
   $add = (($5) + ($call))|0;
   $len = $add;
   break;
  }
  case 2:  {
   $6 = $y;
   $data2 = ((($6)) + 44|0);
   $code = ((($data2)) + 4|0);
   $7 = HEAP32[$code>>2]|0;
   $arrayidx = (46450 + (($7*14)|0)|0);
   $8 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
   $call4 = (_strlen($8)|0);
   $9 = $len;
   $add5 = (($9) + ($call4))|0;
   $len = $add5;
   break;
  }
  case 8:  {
   $10 = $y;
   $data7 = ((($10)) + 44|0);
   $11 = HEAP32[$data7>>2]|0;
   $call9 = (_strlen($11)|0);
   $12 = $len;
   $add10 = (($12) + ($call9))|0;
   $len = $add10;
   break;
  }
  case 9:  {
   $13 = $y;
   $data12 = ((($13)) + 44|0);
   $14 = HEAP32[$data12>>2]|0;
   $call14 = (_strlen($14)|0);
   $15 = $len;
   $add15 = (($15) + ($call14))|0;
   $len = $add15;
   break;
  }
  case 3:  {
   $16 = $y;
   $data17 = ((($16)) + 44|0);
   $text = ((($data17)) + 8|0);
   $17 = HEAP32[$text>>2]|0;
   $call18 = (_strlen($17)|0);
   $add19 = (6 + ($call18))|0;
   $18 = $len;
   $add20 = (($18) + ($add19))|0;
   $len = $add20;
   break;
  }
  case 4:  {
   $19 = $y;
   $data22 = ((($19)) + 44|0);
   $20 = HEAP32[$data22>>2]|0;
   $call24 = (_strlen($20)|0);
   $add25 = (3 + ($call24))|0;
   $21 = $len;
   $add26 = (($21) + ($add25))|0;
   $len = $add26;
   break;
  }
  case 6:  {
   $22 = $y;
   $data28 = ((($22)) + 44|0);
   $sep_with_zei = ((($data28)) + 12|0);
   $23 = HEAP32[$sep_with_zei>>2]|0;
   $call29 = (_strlen($23)|0);
   $24 = $len;
   $add30 = (($24) + ($call29))|0;
   $len = $add30;
   break;
  }
  case 11:  {
   $25 = $len;
   $add32 = (($25) + 19)|0;
   $len = $add32;
   break;
  }
  default: {
  }
  }
  $26 = $y;
  $27 = $end$addr;
  $cmp = ($26|0)==($27|0);
  $28 = $len;
  if ($cmp) {
   break;
  }
  $inc = (($28) + 1)|0;
  $len = $inc;
  $29 = $y;
  $30 = HEAP32[$29>>2]|0;
  $y = $30;
 }
 if ((label|0) == 11) {
  ___assert_fail((80680|0),(44321|0),239,(44339|0));
  // unreachable;
 }
 $add34 = (1 + ($28))|0;
 $call35 = (_Malloc($add34)|0);
 $result = $call35;
 $31 = $result;
 HEAP8[$31>>0] = 0;
 $32 = $start$addr;
 $y = $32;
 L17: while(1) {
  $33 = $y;
  $type38 = ((($33)) + 40|0);
  $34 = HEAP32[$type38>>2]|0;
  switch ($34|0) {
  case 7: case 5: case 0: case 10:  {
   label = 24;
   break L17;
   break;
  }
  case 1:  {
   $35 = $result;
   $36 = $y;
   $data40 = ((($36)) + 44|0);
   $37 = HEAP32[$data40>>2]|0;
   (_strcat($35,$37)|0);
   break;
  }
  case 2:  {
   $38 = $result;
   $39 = $y;
   $data45 = ((($39)) + 44|0);
   $code47 = ((($data45)) + 4|0);
   $40 = HEAP32[$code47>>2]|0;
   $arrayidx48 = (46450 + (($40*14)|0)|0);
   $41 = HEAPU8[$arrayidx48>>0]|(HEAPU8[$arrayidx48+1>>0]<<8)|(HEAPU8[$arrayidx48+2>>0]<<16)|(HEAPU8[$arrayidx48+3>>0]<<24);
   (_strcat($38,$41)|0);
   break;
  }
  case 8:  {
   $42 = $result;
   $43 = $y;
   $data52 = ((($43)) + 44|0);
   $44 = HEAP32[$data52>>2]|0;
   (_strcat($42,$44)|0);
   break;
  }
  case 9:  {
   $45 = $result;
   $46 = $y;
   $data57 = ((($46)) + 44|0);
   $47 = HEAP32[$data57>>2]|0;
   (_strcat($45,$47)|0);
   break;
  }
  case 3:  {
   $48 = $result;
   (_strcat($48,44363)|0);
   $49 = $result;
   $50 = $y;
   $data63 = ((($50)) + 44|0);
   $text65 = ((($data63)) + 8|0);
   $51 = HEAP32[$text65>>2]|0;
   (_strcat($49,$51)|0);
   $52 = $result;
   (_strcat($52,116370)|0);
   break;
  }
  case 4:  {
   $53 = $result;
   (_strcat($53,44369)|0);
   $54 = $result;
   $55 = $y;
   $data70 = ((($55)) + 44|0);
   $56 = HEAP32[$data70>>2]|0;
   (_strcat($54,$56)|0);
   break;
  }
  case 6:  {
   $57 = $result;
   $58 = $y;
   $data75 = ((($58)) + 44|0);
   $sep_with_zei77 = ((($data75)) + 12|0);
   $59 = HEAP32[$sep_with_zei77>>2]|0;
   (_strcat($57,$59)|0);
   break;
  }
  case 11:  {
   $60 = $result;
   (_strcat($60,44373)|0);
   break;
  }
  default: {
  }
  }
  $61 = $y;
  $62 = $end$addr;
  $cmp83 = ($61|0)==($62|0);
  $63 = $result;
  if ($cmp83) {
   label = 27;
   break;
  }
  (_strcat($63,116343)|0);
  $64 = $y;
  $65 = HEAP32[$64>>2]|0;
  $y = $65;
 }
 if ((label|0) == 24) {
  ___assert_fail((80680|0),(44321|0),292,(44339|0));
  // unreachable;
 }
 else if ((label|0) == 27) {
  STACKTOP = sp;return ($63|0);
 }
 return (0)|0;
}
function _preprocess_tokens() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _handle_zo();
 _handle_lohu();
 _do_erasures(256);
 _handle_zei();
 _handle_bahe();
 _handle_bu();
 _handle_indicators();
 _categorize_tokens(256);
 return;
}
function _handle_zo() {
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add27 = 0, $add40 = 0, $add53 = 0, $add66 = 0;
 var $arrayidx = 0, $arrayidx13 = 0, $arrayidx20 = 0, $call15 = 0, $call16 = 0, $call22 = 0, $call26 = 0, $call28 = 0, $call32 = 0, $call39 = 0, $call41 = 0, $call45 = 0, $call52 = 0, $call54 = 0, $call58 = 0, $call65 = 0, $call67 = 0, $call7 = 0, $call71 = 0, $call71$sink = 0;
 var $cmp = 0, $cmp1 = 0, $cmp2 = 0, $cmp4 = 0, $code = 0, $code12 = 0, $code19 = 0, $conv = 0, $data = 0, $data10 = 0, $data17 = 0, $data25 = 0, $data29 = 0, $data37 = 0, $data42 = 0, $data50 = 0, $data55 = 0, $data63 = 0, $data68 = 0, $data72 = 0;
 var $data78 = 0, $data79 = 0, $nt = 0, $prev = 0, $selmao = 0, $text64 = 0, $text70 = 0, $type = 0, $type76 = 0, $type77 = 0, $type8 = 0, $type9 = 0, $vararg_buffer = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[64]|0;
 $x = $0;
 L1: while(1) {
  $1 = $x;
  $cmp = ($1|0)!=(256|0);
  if (!($cmp)) {
   label = 17;
   break;
  }
  $2 = $x;
  $type = ((($2)) + 40|0);
  $3 = HEAP32[$type>>2]|0;
  $cmp1 = ($3|0)==(2);
  if ($cmp1) {
   $4 = $x;
   $data = ((($4)) + 44|0);
   $code = ((($data)) + 4|0);
   $5 = HEAP32[$code>>2]|0;
   $arrayidx = (46450 + (($5*14)|0)|0);
   $selmao = ((($arrayidx)) + 4|0);
   $6 = HEAPU8[$selmao>>0]|(HEAPU8[$selmao+1>>0]<<8);
   $conv = $6 << 16 >> 16;
   $cmp2 = ($conv|0)==(382);
   if ($cmp2) {
    $7 = $x;
    $8 = HEAP32[$7>>2]|0;
    $y = $8;
    $9 = $y;
    $cmp4 = ($9|0)==(256|0);
    if ($cmp4) {
     label = 6;
     break;
    }
    $call7 = (_new_node()|0);
    $nt = $call7;
    $11 = $nt;
    $type8 = ((($11)) + 40|0);
    HEAP32[$type8>>2] = 4;
    $12 = $y;
    $type9 = ((($12)) + 40|0);
    $13 = HEAP32[$type9>>2]|0;
    switch ($13|0) {
    case 11: case 6: case 7: case 0: case 5: case 4: case 10:  {
     label = 13;
     break L1;
     break;
    }
    case 2:  {
     $14 = $y;
     $data10 = ((($14)) + 44|0);
     $code12 = ((($data10)) + 4|0);
     $15 = HEAP32[$code12>>2]|0;
     $arrayidx13 = (46450 + (($15*14)|0)|0);
     $16 = HEAPU8[$arrayidx13>>0]|(HEAPU8[$arrayidx13+1>>0]<<8)|(HEAPU8[$arrayidx13+2>>0]<<16)|(HEAPU8[$arrayidx13+3>>0]<<24);
     $call15 = (_strlen($16)|0);
     $add = (1 + ($call15))|0;
     $call16 = (_Malloc($add)|0);
     $17 = $y;
     $data17 = ((($17)) + 44|0);
     $code19 = ((($data17)) + 4|0);
     $18 = HEAP32[$code19>>2]|0;
     $arrayidx20 = (46450 + (($18*14)|0)|0);
     $19 = HEAPU8[$arrayidx20>>0]|(HEAPU8[$arrayidx20+1>>0]<<8)|(HEAPU8[$arrayidx20+2>>0]<<16)|(HEAPU8[$arrayidx20+3>>0]<<24);
     $call22 = (_strcpy($call16,$19)|0);
     $20 = $nt;
     $$sink = $20;$call71$sink = $call16;
     label = 14;
     break;
    }
    case 1:  {
     $21 = $y;
     $data25 = ((($21)) + 44|0);
     $22 = HEAP32[$data25>>2]|0;
     $call26 = (_strlen($22)|0);
     $add27 = (1 + ($call26))|0;
     $call28 = (_Malloc($add27)|0);
     $23 = $y;
     $data29 = ((($23)) + 44|0);
     $24 = HEAP32[$data29>>2]|0;
     $call32 = (_strcpy($call28,$24)|0);
     $25 = $nt;
     $$sink = $25;$call71$sink = $call28;
     label = 14;
     break;
    }
    case 8:  {
     $26 = $y;
     $data37 = ((($26)) + 44|0);
     $27 = HEAP32[$data37>>2]|0;
     $call39 = (_strlen($27)|0);
     $add40 = (1 + ($call39))|0;
     $call41 = (_Malloc($add40)|0);
     $28 = $y;
     $data42 = ((($28)) + 44|0);
     $29 = HEAP32[$data42>>2]|0;
     $call45 = (_strcpy($call41,$29)|0);
     $30 = $nt;
     $$sink = $30;$call71$sink = $call41;
     label = 14;
     break;
    }
    case 9:  {
     $31 = $y;
     $data50 = ((($31)) + 44|0);
     $32 = HEAP32[$data50>>2]|0;
     $call52 = (_strlen($32)|0);
     $add53 = (1 + ($call52))|0;
     $call54 = (_Malloc($add53)|0);
     $33 = $y;
     $data55 = ((($33)) + 44|0);
     $34 = HEAP32[$data55>>2]|0;
     $call58 = (_strcpy($call54,$34)|0);
     $35 = $nt;
     $$sink = $35;$call71$sink = $call54;
     label = 14;
     break;
    }
    case 3:  {
     $36 = $y;
     $data63 = ((($36)) + 44|0);
     $text64 = ((($data63)) + 8|0);
     $37 = HEAP32[$text64>>2]|0;
     $call65 = (_strlen($37)|0);
     $add66 = (1 + ($call65))|0;
     $call67 = (_Malloc($add66)|0);
     $38 = $y;
     $data68 = ((($38)) + 44|0);
     $text70 = ((($data68)) + 8|0);
     $39 = HEAP32[$text70>>2]|0;
     $call71 = (_strcpy($call67,$39)|0);
     $40 = $nt;
     $$sink = $40;$call71$sink = $call67;
     label = 14;
     break;
    }
    default: {
    }
    }
    if ((label|0) == 14) {
     label = 0;
     $data72 = ((($$sink)) + 44|0);
     HEAP32[$data72>>2] = $call71$sink;
    }
    $41 = $nt;
    $type76 = ((($41)) + 40|0);
    $42 = HEAP32[$type76>>2]|0;
    $43 = $x;
    $type77 = ((($43)) + 40|0);
    HEAP32[$type77>>2] = $42;
    $44 = $x;
    $data78 = ((($44)) + 44|0);
    $45 = $nt;
    $data79 = ((($45)) + 44|0);
    ;HEAP32[$data78>>2]=HEAP32[$data79>>2]|0;HEAP32[$data78+4>>2]=HEAP32[$data79+4>>2]|0;HEAP32[$data78+8>>2]=HEAP32[$data79+8>>2]|0;HEAP32[$data78+12>>2]=HEAP32[$data79+12>>2]|0;HEAP32[$data78+16>>2]=HEAP32[$data79+16>>2]|0;HEAP32[$data78+20>>2]=HEAP32[$data79+20>>2]|0;
    $46 = $x;
    $47 = $y;
    $48 = HEAP32[$47>>2]|0;
    $prev = ((($48)) + 4|0);
    HEAP32[$prev>>2] = $46;
    $49 = $y;
    $50 = HEAP32[$49>>2]|0;
    $51 = $x;
    HEAP32[$51>>2] = $50;
   }
  }
  $52 = $x;
  $53 = HEAP32[$52>>2]|0;
  $x = $53;
 }
 if ((label|0) == 6) {
  $10 = HEAP32[7856]|0;
  (_fprintf($10,44551,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 13) {
  ___assert_fail((80680|0),(44321|0),373,(44597|0));
  // unreachable;
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
}
function _handle_lohu() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call16 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp2 = 0, $cmp3 = 0, $cmp6 = 0, $data = 0, $data17 = 0;
 var $data8 = 0, $end = 0, $prev = 0, $prev19 = 0, $start = 0, $term = 0, $type = 0, $type15 = 0, $type5 = 0, $vararg_buffer = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $0 = HEAP32[64]|0;
 $x = $0;
 L1: while(1) {
  $1 = $x;
  $cmp = ($1|0)!=(256|0);
  if (!($cmp)) {
   label = 13;
   break;
  }
  $2 = $x;
  $type = ((($2)) + 40|0);
  $3 = HEAP32[$type>>2]|0;
  $cmp1 = ($3|0)==(2);
  if ($cmp1) {
   $4 = $x;
   $data = ((($4)) + 44|0);
   $5 = HEAP32[$data>>2]|0;
   $cmp2 = ($5|0)==(323);
   if ($cmp2) {
    $6 = $x;
    $7 = HEAP32[$6>>2]|0;
    $start = $7;
    $y = $7;
    while(1) {
     $8 = $y;
     $cmp3 = ($8|0)==(256|0);
     if ($cmp3) {
      label = 7;
      break L1;
     }
     $10 = $y;
     $type5 = ((($10)) + 40|0);
     $11 = HEAP32[$type5>>2]|0;
     $cmp6 = ($11|0)==(2);
     if ($cmp6) {
      $12 = $y;
      $data8 = ((($12)) + 44|0);
      $13 = HEAP32[$data8>>2]|0;
      $cmp11 = ($13|0)==(319);
      if ($cmp11) {
       break;
      }
     }
     $27 = $y;
     $28 = HEAP32[$27>>2]|0;
     $y = $28;
    }
    $14 = $y;
    $term = $14;
    $15 = $term;
    $prev = ((($15)) + 4|0);
    $16 = HEAP32[$prev>>2]|0;
    $end = $16;
    $17 = $x;
    $type15 = ((($17)) + 40|0);
    HEAP32[$type15>>2] = 5;
    $18 = $start;
    $19 = $end;
    $call16 = (_build_string_from_nodes($18,$19)|0);
    $20 = $x;
    $data17 = ((($20)) + 44|0);
    HEAP32[$data17>>2] = $call16;
    $21 = $x;
    $22 = $term;
    $23 = HEAP32[$22>>2]|0;
    $prev19 = ((($23)) + 4|0);
    HEAP32[$prev19>>2] = $21;
    $24 = $term;
    $25 = HEAP32[$24>>2]|0;
    $26 = $x;
    HEAP32[$26>>2] = $25;
   }
  }
  $29 = $x;
  $30 = HEAP32[$29>>2]|0;
  $x = $30;
 }
 if ((label|0) == 7) {
  $9 = HEAP32[7856]|0;
  (_fprintf($9,44511,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 13) {
  STACKTOP = sp;return;
 }
}
function _handle_zei() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $add = 0, $add33 = 0, $add34 = 0, $add41 = 0, $add42 = 0, $arrayidx = 0, $arrayidx27 = 0;
 var $arrayidx28 = 0, $arrayidx72 = 0, $arrayidx77 = 0, $arrayidx79 = 0, $call = 0, $call13 = 0, $call15 = 0, $call19 = 0, $call26 = 0, $call29 = 0, $call36 = 0, $call44 = 0, $children = 0, $children25 = 0, $cmp = 0, $cmp12 = 0, $cmp21 = 0, $cmp56 = 0, $cmp58 = 0, $cmp6 = 0;
 var $components = 0, $count = 0, $data = 0, $data16 = 0, $data23 = 0, $data37 = 0, $data45 = 0, $data47 = 0, $data51 = 0, $data60 = 0, $data64 = 0, $data69 = 0, $data74 = 0, $first = 0, $i = 0, $inc = 0, $inc30 = 0, $inc81 = 0, $left = 0, $mul = 0;
 var $mul18 = 0, $mul35 = 0, $mul40 = 0, $mul43 = 0, $nt = 0, $prev = 0, $prev83 = 0, $prev84 = 0, $prev85 = 0, $prev86 = 0, $prev89 = 0, $right = 0, $sep_with_plus = 0, $sep_with_plus49 = 0, $sep_with_plus62 = 0, $sep_with_plus71 = 0, $sep_with_zei = 0, $sep_with_zei53 = 0, $sep_with_zei66 = 0, $sep_with_zei76 = 0;
 var $sub = 0, $sub39 = 0, $tobool = 0, $tobool1 = 0, $tobool14 = 0, $total_comp_length = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $x = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $first = 1;
 $0 = HEAP32[64]|0;
 $x = $0;
 while(1) {
  $1 = $x;
  $cmp = ($1|0)!=(256|0);
  if (!($cmp)) {
   break;
  }
  $2 = $x;
  $3 = HEAP32[$2>>2]|0;
  $nt = $3;
  $4 = $x;
  $call = (_is_zei($4)|0);
  $tobool = ($call|0)!=(0);
  do {
   if ($tobool) {
    $count = 1;
    $5 = $first;
    $tobool1 = ($5|0)!=(0);
    if ($tobool1) {
     $6 = HEAP32[7856]|0;
     (_fprintf($6,44419,$vararg_buffer)|0);
     HEAP32[29727] = 1;
     $7 = $x;
     $8 = HEAP32[$7>>2]|0;
     $nt = $8;
     break;
    }
    $9 = $x;
    $z = $9;
    while(1) {
     $10 = $z;
     $11 = HEAP32[$10>>2]|0;
     $y = $11;
     $12 = $y;
     $cmp6 = ($12|0)==(256|0);
     if ($cmp6) {
      label = 8;
      break;
     }
     $16 = $count;
     $inc = (($16) + 1)|0;
     $count = $inc;
     $17 = $y;
     $18 = HEAP32[$17>>2]|0;
     $z = $18;
     $19 = $z;
     $cmp12 = ($19|0)!=(256|0);
     if (!($cmp12)) {
      break;
     }
     $20 = $z;
     $call13 = (_is_zei($20)|0);
     $tobool14 = ($call13|0)!=(0);
     if (!($tobool14)) {
      break;
     }
    }
    if ((label|0) == 8) {
     label = 0;
     $13 = HEAP32[7856]|0;
     (_fprintf($13,44463,$vararg_buffer1)|0);
     HEAP32[29727] = 1;
     $14 = $x;
     $15 = HEAP32[$14>>2]|0;
     $nt = $15;
     break;
    }
    $21 = $x;
    $type = ((($21)) + 40|0);
    HEAP32[$type>>2] = 6;
    $22 = $count;
    $23 = $x;
    $data = ((($23)) + 44|0);
    HEAP32[$data>>2] = $22;
    $24 = $count;
    $mul = $24<<2;
    $call15 = (_Malloc($mul)|0);
    $25 = $x;
    $data16 = ((($25)) + 44|0);
    $children = ((($data16)) + 4|0);
    HEAP32[$children>>2] = $call15;
    $26 = $count;
    $mul18 = $26<<2;
    $call19 = (_Malloc($mul18)|0);
    $components = $call19;
    $total_comp_length = 0;
    $i = 0;
    $27 = $x;
    $prev = ((($27)) + 4|0);
    $28 = HEAP32[$prev>>2]|0;
    $y = $28;
    while(1) {
     $29 = $i;
     $30 = $count;
     $cmp21 = ($29|0)<($30|0);
     if (!($cmp21)) {
      break;
     }
     $31 = $y;
     $32 = $x;
     $data23 = ((($32)) + 44|0);
     $children25 = ((($data23)) + 4|0);
     $33 = HEAP32[$children25>>2]|0;
     $34 = $i;
     $arrayidx = (($33) + ($34<<2)|0);
     HEAP32[$arrayidx>>2] = $31;
     $35 = $y;
     $call26 = (_build_string_from_node($35)|0);
     $36 = $components;
     $37 = $i;
     $arrayidx27 = (($36) + ($37<<2)|0);
     HEAP32[$arrayidx27>>2] = $call26;
     $38 = $components;
     $39 = $i;
     $arrayidx28 = (($38) + ($39<<2)|0);
     $40 = HEAP32[$arrayidx28>>2]|0;
     $call29 = (_strlen($40)|0);
     $41 = $total_comp_length;
     $add = (($41) + ($call29))|0;
     $total_comp_length = $add;
     $42 = $i;
     $inc30 = (($42) + 1)|0;
     $i = $inc30;
     $43 = $y;
     $44 = HEAP32[$43>>2]|0;
     $45 = HEAP32[$44>>2]|0;
     $y = $45;
    }
    $46 = $total_comp_length;
    $47 = $count;
    $sub = (($47) - 1)|0;
    $add33 = (($46) + ($sub))|0;
    $add34 = (($add33) + 1)|0;
    $mul35 = $add34;
    $call36 = (_Malloc($mul35)|0);
    $48 = $x;
    $data37 = ((($48)) + 44|0);
    $sep_with_plus = ((($data37)) + 8|0);
    HEAP32[$sep_with_plus>>2] = $call36;
    $49 = $total_comp_length;
    $50 = $count;
    $sub39 = (($50) - 1)|0;
    $mul40 = ($sub39*5)|0;
    $add41 = (($49) + ($mul40))|0;
    $add42 = (($add41) + 1)|0;
    $mul43 = $add42;
    $call44 = (_Malloc($mul43)|0);
    $51 = $x;
    $data45 = ((($51)) + 44|0);
    $sep_with_zei = ((($data45)) + 12|0);
    HEAP32[$sep_with_zei>>2] = $call44;
    $52 = $x;
    $data47 = ((($52)) + 44|0);
    $sep_with_plus49 = ((($data47)) + 8|0);
    $53 = HEAP32[$sep_with_plus49>>2]|0;
    HEAP8[$53>>0] = 0;
    $54 = $x;
    $data51 = ((($54)) + 44|0);
    $sep_with_zei53 = ((($data51)) + 12|0);
    $55 = HEAP32[$sep_with_zei53>>2]|0;
    HEAP8[$55>>0] = 0;
    $i = 0;
    while(1) {
     $56 = $i;
     $57 = $count;
     $cmp56 = ($56|0)<($57|0);
     if (!($cmp56)) {
      break;
     }
     $58 = $i;
     $cmp58 = ($58|0)>(0);
     if ($cmp58) {
      $59 = $x;
      $data60 = ((($59)) + 44|0);
      $sep_with_plus62 = ((($data60)) + 8|0);
      $60 = HEAP32[$sep_with_plus62>>2]|0;
      (_strcat($60,92232)|0);
      $61 = $x;
      $data64 = ((($61)) + 44|0);
      $sep_with_zei66 = ((($data64)) + 12|0);
      $62 = HEAP32[$sep_with_zei66>>2]|0;
      (_strcat($62,44505)|0);
     }
     $63 = $x;
     $data69 = ((($63)) + 44|0);
     $sep_with_plus71 = ((($data69)) + 8|0);
     $64 = HEAP32[$sep_with_plus71>>2]|0;
     $65 = $components;
     $66 = $i;
     $arrayidx72 = (($65) + ($66<<2)|0);
     $67 = HEAP32[$arrayidx72>>2]|0;
     (_strcat($64,$67)|0);
     $68 = $x;
     $data74 = ((($68)) + 44|0);
     $sep_with_zei76 = ((($data74)) + 12|0);
     $69 = HEAP32[$sep_with_zei76>>2]|0;
     $70 = $components;
     $71 = $i;
     $arrayidx77 = (($70) + ($71<<2)|0);
     $72 = HEAP32[$arrayidx77>>2]|0;
     (_strcat($69,$72)|0);
     $73 = $components;
     $74 = $i;
     $arrayidx79 = (($73) + ($74<<2)|0);
     $75 = HEAP32[$arrayidx79>>2]|0;
     _Free($75);
     $76 = $i;
     $inc81 = (($76) + 1)|0;
     $i = $inc81;
    }
    $77 = $components;
    _Free($77);
    $78 = $x;
    $prev83 = ((($78)) + 4|0);
    $79 = HEAP32[$prev83>>2]|0;
    $prev84 = ((($79)) + 4|0);
    $80 = HEAP32[$prev84>>2]|0;
    $left = $80;
    $81 = $y;
    $prev85 = ((($81)) + 4|0);
    $82 = HEAP32[$prev85>>2]|0;
    $right = $82;
    $83 = $x;
    $84 = $right;
    $prev86 = ((($84)) + 4|0);
    HEAP32[$prev86>>2] = $83;
    $85 = $x;
    $86 = $left;
    HEAP32[$86>>2] = $85;
    $87 = $right;
    $88 = $x;
    HEAP32[$88>>2] = $87;
    $89 = $left;
    $90 = $x;
    $prev89 = ((($90)) + 4|0);
    HEAP32[$prev89>>2] = $89;
    $91 = $right;
    $nt = $91;
   }
  } while(0);
  $92 = $nt;
  $x = $92;
  $first = 0;
 }
 STACKTOP = sp;return;
}
function _handle_bahe() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bahe = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp2 = 0, $cmp4 = 0, $cmp7 = 0, $data = 0, $data9 = 0, $nt = 0, $prev = 0, $prev15 = 0, $prev16 = 0, $type = 0;
 var $type6 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[64]|0;
 $x = $0;
 while(1) {
  $1 = $x;
  $cmp = ($1|0)!=(256|0);
  if (!($cmp)) {
   break;
  }
  $2 = $x;
  $type = ((($2)) + 40|0);
  $3 = HEAP32[$type>>2]|0;
  $cmp1 = ($3|0)==(2);
  do {
   if ($cmp1) {
    $4 = $x;
    $data = ((($4)) + 44|0);
    $5 = HEAP32[$data>>2]|0;
    $cmp2 = ($5|0)==(260);
    if ($cmp2) {
     $6 = $x;
     $7 = HEAP32[$6>>2]|0;
     $y = $7;
     $8 = $x;
     $9 = HEAP32[$8>>2]|0;
     $nt = $9;
     $10 = $y;
     $cmp4 = ($10|0)!=(256|0);
     if ($cmp4) {
      $11 = $y;
      $type6 = ((($11)) + 40|0);
      $12 = HEAP32[$type6>>2]|0;
      $cmp7 = ($12|0)==(2);
      if ($cmp7) {
       $13 = $y;
       $data9 = ((($13)) + 44|0);
       $14 = HEAP32[$data9>>2]|0;
       $cmp12 = ($14|0)==(286);
       if ($cmp12) {
        break;
       }
      }
      $15 = $x;
      $16 = $y;
      $bahe = ((($16)) + 12|0);
      HEAP32[$bahe>>2] = $15;
      $17 = $y;
      $18 = $x;
      $prev = ((($18)) + 4|0);
      $19 = HEAP32[$prev>>2]|0;
      HEAP32[$19>>2] = $17;
      $20 = $x;
      $prev15 = ((($20)) + 4|0);
      $21 = HEAP32[$prev15>>2]|0;
      $22 = $y;
      $prev16 = ((($22)) + 4|0);
      HEAP32[$prev16>>2] = $21;
     }
    } else {
     label = 9;
    }
   } else {
    label = 9;
   }
  } while(0);
  if ((label|0) == 9) {
   label = 0;
   $23 = $x;
   $24 = HEAP32[$23>>2]|0;
   $nt = $24;
  }
  $25 = $nt;
  $x = $25;
 }
 STACKTOP = sp;return;
}
function _handle_bu() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $add = 0, $add120 = 0, $add20 = 0, $add33 = 0, $add46 = 0, $add58 = 0, $add71 = 0, $add98 = 0, $arrayidx = 0, $arrayidx12 = 0, $call = 0, $call100 = 0, $call119 = 0, $call122 = 0;
 var $call14 = 0, $call142 = 0, $call143 = 0, $call19 = 0, $call21 = 0, $call25 = 0, $call32 = 0, $call34 = 0, $call38 = 0, $call45 = 0, $call47 = 0, $call51 = 0, $call57 = 0, $call59 = 0, $call63 = 0, $call70 = 0, $call72 = 0, $call8 = 0, $call88 = 0, $call97 = 0;
 var $cmp = 0, $cmp1 = 0, $cmp2 = 0, $code = 0, $code11 = 0, $data = 0, $data101 = 0, $data104 = 0, $data107 = 0, $data111 = 0, $data117 = 0, $data123 = 0, $data126 = 0, $data130 = 0, $data133 = 0, $data137 = 0, $data144 = 0, $data15 = 0, $data17 = 0, $data22 = 0;
 var $data26 = 0, $data30 = 0, $data35 = 0, $data39 = 0, $data43 = 0, $data48 = 0, $data5 = 0, $data52 = 0, $data56 = 0, $data60 = 0, $data64 = 0, $data68 = 0, $data73 = 0, $data76 = 0, $data80 = 0, $data83 = 0, $data89 = 0, $data9 = 0, $data94 = 0, $len = 0;
 var $len116 = 0, $len93 = 0, $mul = 0, $mul121 = 0, $mul99 = 0, $nt = 0, $prev = 0, $prev148 = 0, $prev150 = 0, $prev151 = 0, $text = 0, $text62 = 0, $type = 0, $type3 = 0, $type4 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = HEAP32[64]|0;
 $x = $0;
 L1: while(1) {
  $1 = $x;
  $cmp = ($1|0)!=(256|0);
  if (!($cmp)) {
   label = 19;
   break;
  }
  $2 = $x;
  $3 = HEAP32[$2>>2]|0;
  $nt = $3;
  $4 = $x;
  $type = ((($4)) + 40|0);
  $5 = HEAP32[$type>>2]|0;
  $cmp1 = ($5|0)==(2);
  if ($cmp1) {
   $6 = $x;
   $data = ((($6)) + 44|0);
   $7 = HEAP32[$data>>2]|0;
   $cmp2 = ($7|0)==(270);
   if ($cmp2) {
    $8 = $x;
    $prev = ((($8)) + 4|0);
    $9 = HEAP32[$prev>>2]|0;
    $y = $9;
    $10 = $x;
    $type3 = ((($10)) + 40|0);
    HEAP32[$type3>>2] = 7;
    $11 = $y;
    $type4 = ((($11)) + 40|0);
    $12 = HEAP32[$type4>>2]|0;
    do {
     switch ($12|0) {
     case 0: case 10:  {
      label = 16;
      break L1;
      break;
     }
     case 2:  {
      $13 = $y;
      $data5 = ((($13)) + 44|0);
      $code = ((($data5)) + 4|0);
      $14 = HEAP32[$code>>2]|0;
      $arrayidx = (46450 + (($14*14)|0)|0);
      $15 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
      $call = (_strlen($15)|0);
      $add = (1 + ($call))|0;
      $call8 = (_Malloc($add)|0);
      $16 = $y;
      $data9 = ((($16)) + 44|0);
      $code11 = ((($data9)) + 4|0);
      $17 = HEAP32[$code11>>2]|0;
      $arrayidx12 = (46450 + (($17*14)|0)|0);
      $18 = HEAPU8[$arrayidx12>>0]|(HEAPU8[$arrayidx12+1>>0]<<8)|(HEAPU8[$arrayidx12+2>>0]<<16)|(HEAPU8[$arrayidx12+3>>0]<<24);
      $call14 = (_strcpy($call8,$18)|0);
      $19 = $x;
      $data15 = ((($19)) + 44|0);
      HEAP32[$data15>>2] = $call14;
      break;
     }
     case 1:  {
      $20 = $y;
      $data17 = ((($20)) + 44|0);
      $21 = HEAP32[$data17>>2]|0;
      $call19 = (_strlen($21)|0);
      $add20 = (1 + ($call19))|0;
      $call21 = (_Malloc($add20)|0);
      $22 = $y;
      $data22 = ((($22)) + 44|0);
      $23 = HEAP32[$data22>>2]|0;
      $call25 = (_strcpy($call21,$23)|0);
      $24 = $x;
      $data26 = ((($24)) + 44|0);
      HEAP32[$data26>>2] = $call25;
      break;
     }
     case 8:  {
      $25 = $y;
      $data30 = ((($25)) + 44|0);
      $26 = HEAP32[$data30>>2]|0;
      $call32 = (_strlen($26)|0);
      $add33 = (1 + ($call32))|0;
      $call34 = (_Malloc($add33)|0);
      $27 = $y;
      $data35 = ((($27)) + 44|0);
      $28 = HEAP32[$data35>>2]|0;
      $call38 = (_strcpy($call34,$28)|0);
      $29 = $x;
      $data39 = ((($29)) + 44|0);
      HEAP32[$data39>>2] = $call38;
      break;
     }
     case 9:  {
      $30 = $y;
      $data43 = ((($30)) + 44|0);
      $31 = HEAP32[$data43>>2]|0;
      $call45 = (_strlen($31)|0);
      $add46 = (1 + ($call45))|0;
      $call47 = (_Malloc($add46)|0);
      $32 = $y;
      $data48 = ((($32)) + 44|0);
      $33 = HEAP32[$data48>>2]|0;
      $call51 = (_strcpy($call47,$33)|0);
      $34 = $x;
      $data52 = ((($34)) + 44|0);
      HEAP32[$data52>>2] = $call51;
      break;
     }
     case 3:  {
      $35 = $y;
      $data56 = ((($35)) + 44|0);
      $text = ((($data56)) + 8|0);
      $36 = HEAP32[$text>>2]|0;
      $call57 = (_strlen($36)|0);
      $add58 = (1 + ($call57))|0;
      $call59 = (_Malloc($add58)|0);
      $37 = $y;
      $data60 = ((($37)) + 44|0);
      $text62 = ((($data60)) + 8|0);
      $38 = HEAP32[$text62>>2]|0;
      $call63 = (_strcpy($call59,$38)|0);
      $39 = $x;
      $data64 = ((($39)) + 44|0);
      HEAP32[$data64>>2] = $call63;
      break;
     }
     case 4:  {
      $40 = $y;
      $data68 = ((($40)) + 44|0);
      $41 = HEAP32[$data68>>2]|0;
      $call70 = (_strlen($41)|0);
      $len = $call70;
      $42 = $len;
      $add71 = (($42) + 3)|0;
      $len = $add71;
      $43 = $len;
      $mul = $43;
      $call72 = (_Malloc($mul)|0);
      $44 = $x;
      $data73 = ((($44)) + 44|0);
      HEAP32[$data73>>2] = $call72;
      $45 = $x;
      $data76 = ((($45)) + 44|0);
      $46 = HEAP32[$data76>>2]|0;
      (_strcpy($46,78845)|0);
      $47 = $x;
      $data80 = ((($47)) + 44|0);
      $48 = HEAP32[$data80>>2]|0;
      $49 = $y;
      $data83 = ((($49)) + 44|0);
      $50 = HEAP32[$data83>>2]|0;
      (_strcat($48,$50)|0);
      break;
     }
     case 6:  {
      $51 = $y;
      $call88 = (_build_string_from_node($51)|0);
      $52 = $x;
      $data89 = ((($52)) + 44|0);
      HEAP32[$data89>>2] = $call88;
      break;
     }
     case 7:  {
      $53 = $y;
      $data94 = ((($53)) + 44|0);
      $54 = HEAP32[$data94>>2]|0;
      $call97 = (_strlen($54)|0);
      $len93 = $call97;
      $55 = $len93;
      $add98 = (($55) + 4)|0;
      $len93 = $add98;
      $56 = $len93;
      $mul99 = $56;
      $call100 = (_Malloc($mul99)|0);
      $57 = $x;
      $data101 = ((($57)) + 44|0);
      HEAP32[$data101>>2] = $call100;
      $58 = $x;
      $data104 = ((($58)) + 44|0);
      $59 = HEAP32[$data104>>2]|0;
      $60 = $y;
      $data107 = ((($60)) + 44|0);
      $61 = HEAP32[$data107>>2]|0;
      (_strcpy($59,$61)|0);
      $62 = $x;
      $data111 = ((($62)) + 44|0);
      $63 = HEAP32[$data111>>2]|0;
      (_strcat($63,44393)|0);
      break;
     }
     case 5:  {
      $64 = $y;
      $data117 = ((($64)) + 44|0);
      $65 = HEAP32[$data117>>2]|0;
      $call119 = (_strlen($65)|0);
      $len116 = $call119;
      $66 = $len116;
      $add120 = (($66) + 11)|0;
      $len116 = $add120;
      $67 = $len116;
      $mul121 = $67;
      $call122 = (_Malloc($mul121)|0);
      $68 = $x;
      $data123 = ((($68)) + 44|0);
      HEAP32[$data123>>2] = $call122;
      $69 = $x;
      $data126 = ((($69)) + 44|0);
      $70 = HEAP32[$data126>>2]|0;
      (_strcpy($70,44397)|0);
      $71 = $x;
      $data130 = ((($71)) + 44|0);
      $72 = HEAP32[$data130>>2]|0;
      $73 = $y;
      $data133 = ((($73)) + 44|0);
      $74 = HEAP32[$data133>>2]|0;
      (_strcat($72,$74)|0);
      $75 = $x;
      $data137 = ((($75)) + 44|0);
      $76 = HEAP32[$data137>>2]|0;
      (_strcat($76,44403)|0);
      break;
     }
     case 11:  {
      $call142 = (_Malloc(20)|0);
      $call143 = (_strcpy($call142,44373)|0);
      $77 = $x;
      $data144 = ((($77)) + 44|0);
      HEAP32[$data144>>2] = $call143;
      break;
     }
     default: {
     }
     }
    } while(0);
    $78 = $x;
    $79 = $y;
    $prev148 = ((($79)) + 4|0);
    $80 = HEAP32[$prev148>>2]|0;
    HEAP32[$80>>2] = $78;
    $81 = $y;
    $prev150 = ((($81)) + 4|0);
    $82 = HEAP32[$prev150>>2]|0;
    $83 = $x;
    $prev151 = ((($83)) + 4|0);
    HEAP32[$prev151>>2] = $82;
    $84 = $y;
    _free_node($84);
   }
  }
  $85 = $nt;
  $x = $85;
 }
 if ((label|0) == 16) {
  ___assert_fail((80680|0),(44321|0),651,(44409|0));
  // unreachable;
 }
 else if ((label|0) == 19) {
  STACKTOP = sp;return;
 }
}
function _handle_indicators() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call14 = 0, $call20 = 0, $call7 = 0, $cmp = 0, $end = 0;
 var $nt = 0, $prev = 0, $prev23 = 0, $prev24 = 0, $prev27 = 0, $start = 0, $state = 0, $target = 0, $tobool = 0, $tobool15 = 0, $tobool2 = 0, $tobool21 = 0, $tobool8 = 0, $ui_next = 0, $ui_next28 = 0, $ui_prev = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x = sp + 20|0;
 $state = 0;
 _pair_off_indicator_suffixes();
 $0 = HEAP32[64]|0;
 HEAP32[$x>>2] = $0;
 while(1) {
  $1 = HEAP32[$x>>2]|0;
  $cmp = ($1|0)!=(256|0);
  if (!($cmp)) {
   break;
  }
  $2 = $state;
  L4: do {
   switch ($2|0) {
   case 0:  {
    $3 = HEAP32[$x>>2]|0;
    $call = (_is_fuhe($3)|0);
    $tobool = ($call|0)!=(0);
    do {
     if ($tobool) {
      $state = 1;
     } else {
      $4 = HEAP32[$x>>2]|0;
      $call1 = (_is_indicator_cmavo($4)|0);
      $tobool2 = ($call1|0)!=(0);
      if ($tobool2) {
       $state = 2;
       break;
      } else {
       $state = 3;
       break;
      }
     }
    } while(0);
    $5 = HEAP32[$x>>2]|0;
    $6 = HEAP32[$5>>2]|0;
    $nt = $6;
    break;
   }
   case 1:  {
    $7 = HEAP32[$x>>2]|0;
    $call7 = (_is_indicator_cmavo($7)|0);
    $tobool8 = ($call7|0)!=(0);
    if ($tobool8) {
     $state = 2;
    } else {
     $state = 3;
    }
    $8 = HEAP32[$x>>2]|0;
    $9 = HEAP32[$8>>2]|0;
    $nt = $9;
    break;
   }
   case 2:  {
    $10 = HEAP32[$x>>2]|0;
    $call14 = (_is_indicator_cmavo($10)|0);
    $tobool15 = ($call14|0)!=(0);
    if (!($tobool15)) {
     $state = 3;
    }
    $11 = HEAP32[$x>>2]|0;
    $12 = HEAP32[$11>>2]|0;
    $nt = $12;
    break;
   }
   case 3:  {
    $13 = HEAP32[$x>>2]|0;
    $call20 = (_is_indicator_cmavo($13)|0);
    $tobool21 = ($call20|0)!=(0);
    $14 = HEAP32[$x>>2]|0;
    if ($tobool21) {
     $prev = ((($14)) + 4|0);
     $15 = HEAP32[$prev>>2]|0;
     $target = $15;
     $16 = HEAP32[$x>>2]|0;
     $start = $16;
     _advance_indicator($x);
     $17 = HEAP32[$x>>2]|0;
     $nt = $17;
     $18 = $nt;
     $prev23 = ((($18)) + 4|0);
     $19 = HEAP32[$prev23>>2]|0;
     $end = $19;
     $20 = $target;
     $21 = $nt;
     $prev24 = ((($21)) + 4|0);
     HEAP32[$prev24>>2] = $20;
     $22 = $nt;
     $23 = $target;
     HEAP32[$23>>2] = $22;
     $24 = $target;
     $ui_next = ((($24)) + 16|0);
     $25 = $end;
     HEAP32[$25>>2] = $ui_next;
     $26 = $start;
     $prev27 = ((($26)) + 4|0);
     HEAP32[$prev27>>2] = $ui_next;
     $27 = $start;
     $28 = $target;
     $ui_next28 = ((($28)) + 16|0);
     HEAP32[$ui_next28>>2] = $27;
     $29 = $end;
     $30 = $target;
     $ui_prev = ((($30)) + 20|0);
     HEAP32[$ui_prev>>2] = $29;
     break L4;
    } else {
     $31 = HEAP32[$14>>2]|0;
     $nt = $31;
     break L4;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $32 = $nt;
  HEAP32[$x>>2] = $32;
 }
 STACKTOP = sp;return;
}
function _pair_off_indicator_suffixes() {
 var $$sink = 0, $$sink1 = 0, $$sink2 = 0, $$sink3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call19 = 0, $call23 = 0, $call28 = 0, $call33 = 0, $call38 = 0, $call43 = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0;
 var $cmp17 = 0, $cmp2 = 0, $cmp4 = 0, $cmp56 = 0, $cmp59 = 0, $cmp64 = 0, $cmp9 = 0, $code = 0, $data = 0, $data14 = 0, $data20 = 0, $data61 = 0, $nt = 0, $prev = 0, $prev55 = 0, $prev77 = 0, $tobool = 0, $tobool24 = 0, $tobool29 = 0, $tobool34 = 0;
 var $tobool39 = 0, $tobool44 = 0, $tok = 0, $type = 0, $type11 = 0, $type58 = 0, $v = 0, $w = 0, $x = 0, $xci = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = HEAP32[64]|0;
 $x = $0;
 L1: while(1) {
  $1 = $x;
  $cmp = ($1|0)!=(256|0);
  if (!($cmp)) {
   label = 35;
   break;
  }
  $2 = $x;
  $3 = HEAP32[$2>>2]|0;
  $y = $3;
  $4 = $x;
  $call = (_is_indicator_cmavo($4)|0);
  $tobool = ($call|0)!=(0);
  $5 = $y;
  if ($tobool) {
   $cmp1 = ($5|0)!=(256|0);
   if ($cmp1) {
    $6 = $y;
    $type = ((($6)) + 40|0);
    $7 = HEAP32[$type>>2]|0;
    $cmp2 = ($7|0)==(2);
    if ($cmp2) {
     $8 = $y;
     $data = ((($8)) + 44|0);
     $9 = HEAP32[$data>>2]|0;
     $cmp4 = ($9|0)==(336);
     if ($cmp4) {
      $10 = $y;
      $11 = HEAP32[$10>>2]|0;
      $z = $11;
      $12 = $x;
      (_prop_neg_indicator($12,1)|0);
      $13 = $z;
      $14 = $x;
      HEAP32[$14>>2] = $13;
      $15 = $x;
      $16 = $z;
      $prev = ((($16)) + 4|0);
      HEAP32[$prev>>2] = $15;
      $17 = $z;
      $nt = $17;
     } else {
      label = 8;
     }
    } else {
     label = 8;
    }
   } else {
    label = 8;
   }
   if ((label|0) == 8) {
    label = 0;
    $18 = $y;
    $nt = $18;
   }
   $19 = $nt;
   $z = $19;
   $20 = $z;
   $cmp9 = ($20|0)!=(256|0);
   if ($cmp9) {
    $21 = $z;
    $type11 = ((($21)) + 40|0);
    $22 = HEAP32[$type11>>2]|0;
    $cmp12 = ($22|0)==(2);
    if ($cmp12) {
     $23 = $z;
     $data14 = ((($23)) + 44|0);
     $24 = HEAP32[$data14>>2]|0;
     $cmp17 = ($24|0)==(273);
     if ($cmp17) {
      $25 = $x;
      $call19 = (_prop_cai_indicator($25,1)|0);
      $xci = $call19;
      $26 = $z;
      $data20 = ((($26)) + 44|0);
      $code = ((($data20)) + 4|0);
      $27 = HEAP32[$code>>2]|0;
      $arrayidx = (46450 + (($27*14)|0)|0);
      $28 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
      $tok = $28;
      $29 = $tok;
      $call23 = (_strcmp($29,93786)|0);
      $tobool24 = ($call23|0)!=(0);
      do {
       if ($tobool24) {
        $31 = $tok;
        $call28 = (_strcmp($31,107934)|0);
        $tobool29 = ($call28|0)!=(0);
        if (!($tobool29)) {
         $32 = $xci;
         $$sink = 1;$$sink1 = $32;
         break;
        }
        $33 = $tok;
        $call33 = (_strcmp($33,107639)|0);
        $tobool34 = ($call33|0)!=(0);
        if (!($tobool34)) {
         $34 = $xci;
         $$sink = 2;$$sink1 = $34;
         break;
        }
        $35 = $tok;
        $call38 = (_strcmp($35,95719)|0);
        $tobool39 = ($call38|0)!=(0);
        if (!($tobool39)) {
         $36 = $xci;
         $$sink = 3;$$sink1 = $36;
         break;
        }
        $37 = $tok;
        $call43 = (_strcmp($37,105668)|0);
        $tobool44 = ($call43|0)!=(0);
        if ($tobool44) {
         label = 22;
         break L1;
        }
        $38 = $xci;
        $$sink = 7;$$sink1 = $38;
       } else {
        $30 = $xci;
        $$sink = 0;$$sink1 = $30;
       }
      } while(0);
      HEAP32[$$sink1>>2] = $$sink;
      $39 = $z;
      $40 = HEAP32[$39>>2]|0;
      $w = $40;
      $41 = $w;
      $42 = $x;
      HEAP32[$42>>2] = $41;
      $43 = $x;
      $44 = $w;
      $prev55 = ((($44)) + 4|0);
      HEAP32[$prev55>>2] = $43;
      $45 = $w;
      $nt = $45;
      $46 = $w;
      $cmp56 = ($46|0)!=(256|0);
      if ($cmp56) {
       $47 = $w;
       $type58 = ((($47)) + 40|0);
       $48 = HEAP32[$type58>>2]|0;
       $cmp59 = ($48|0)==(2);
       if ($cmp59) {
        $49 = $w;
        $data61 = ((($49)) + 44|0);
        $50 = HEAP32[$data61>>2]|0;
        $cmp64 = ($50|0)==(336);
        if ($cmp64) {
         $51 = $xci;
         $52 = HEAP32[$51>>2]|0;
         switch ($52|0) {
         case 0:  {
          $53 = $xci;
          $$sink2 = 6;$$sink3 = $53;
          label = 31;
          break;
         }
         case 1:  {
          $54 = $xci;
          $$sink2 = 5;$$sink3 = $54;
          label = 31;
          break;
         }
         case 2:  {
          $55 = $xci;
          $$sink2 = 4;$$sink3 = $55;
          label = 31;
          break;
         }
         case 7:  {
          $56 = $xci;
          $$sink2 = 8;$$sink3 = $56;
          label = 31;
          break;
         }
         default: {
         }
         }
         if ((label|0) == 31) {
          label = 0;
          HEAP32[$$sink3>>2] = $$sink2;
         }
         $57 = $w;
         $58 = HEAP32[$57>>2]|0;
         $v = $58;
         $59 = $v;
         $60 = $x;
         HEAP32[$60>>2] = $59;
         $61 = $x;
         $62 = $v;
         $prev77 = ((($62)) + 4|0);
         HEAP32[$prev77>>2] = $61;
         $63 = $v;
         $nt = $63;
        }
       }
      }
     }
    }
   }
  } else {
   $nt = $5;
  }
  $64 = $nt;
  $x = $64;
 }
 if ((label|0) == 22) {
  _abort();
  // unreachable;
 }
 else if ((label|0) == 35) {
  STACKTOP = sp;return;
 }
}
function _is_fuhe($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $cmp1 = 0, $data = 0, $retval = 0, $type = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(2);
 if ($cmp) {
  $2 = $x$addr;
  $data = ((($2)) + 44|0);
  $3 = HEAP32[$data>>2]|0;
  $cmp1 = ($3|0)==(292);
  if ($cmp1) {
   $retval = 1;
   $4 = $retval;
   STACKTOP = sp;return ($4|0);
  }
 }
 $retval = 0;
 $4 = $retval;
 STACKTOP = sp;return ($4|0);
}
function _is_indicator_cmavo($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp15 = 0, $cmp20 = 0;
 var $cmp25 = 0, $cmp5 = 0, $data = 0, $data12 = 0, $data17 = 0, $data2 = 0, $data22 = 0, $data7 = 0, $retval = 0, $type = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(2);
 if (!($cmp)) {
  $retval = 0;
  $14 = $retval;
  STACKTOP = sp;return ($14|0);
 }
 $2 = $x$addr;
 $data = ((($2)) + 44|0);
 $3 = HEAP32[$data>>2]|0;
 $cmp1 = ($3|0)==(366);
 if (!($cmp1)) {
  $4 = $x$addr;
  $data2 = ((($4)) + 44|0);
  $5 = HEAP32[$data2>>2]|0;
  $cmp5 = ($5|0)==(273);
  if (!($cmp5)) {
   $6 = $x$addr;
   $data7 = ((($6)) + 44|0);
   $7 = HEAP32[$data7>>2]|0;
   $cmp10 = ($7|0)==(376);
   if (!($cmp10)) {
    $8 = $x$addr;
    $data12 = ((($8)) + 44|0);
    $9 = HEAP32[$data12>>2]|0;
    $cmp15 = ($9|0)==(281);
    if (!($cmp15)) {
     $10 = $x$addr;
     $data17 = ((($10)) + 44|0);
     $11 = HEAP32[$data17>>2]|0;
     $cmp20 = ($11|0)==(292);
     if (!($cmp20)) {
      $12 = $x$addr;
      $data22 = ((($12)) + 44|0);
      $13 = HEAP32[$data22>>2]|0;
      $cmp25 = ($13|0)==(293);
      if (!($cmp25)) {
       $retval = 0;
       $14 = $retval;
       STACKTOP = sp;return ($14|0);
      }
     }
    }
   }
  }
 }
 $retval = 1;
 $14 = $retval;
 STACKTOP = sp;return ($14|0);
}
function _advance_indicator($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $tobool = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 while(1) {
  $0 = $x$addr;
  $1 = HEAP32[$0>>2]|0;
  $call = (_is_indicator_cmavo($1)|0);
  $tobool = ($call|0)!=(0);
  if (!($tobool)) {
   break;
  }
  $2 = $x$addr;
  $3 = HEAP32[$2>>2]|0;
  $4 = HEAP32[$3>>2]|0;
  $5 = $x$addr;
  HEAP32[$5>>2] = $4;
 }
 STACKTOP = sp;return;
}
function _is_zei($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $cmp1 = 0, $data = 0, $land$ext = 0, $type = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(2);
 if ($cmp) {
  $2 = $x$addr;
  $data = ((($2)) + 44|0);
  $3 = HEAP32[$data>>2]|0;
  $cmp1 = ($3|0)==(379);
  $4 = $cmp1;
 } else {
  $4 = 0;
 }
 $land$ext = $4&1;
 STACKTOP = sp;return ($land$ext|0);
}
function _compress_singletons($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx17 = 0, $child = 0, $children = 0, $children12 = 0, $children16 = 0, $cmp = 0, $cmp1 = 0, $cmp5 = 0, $cmp9 = 0, $data = 0, $data10 = 0, $data14 = 0, $data2 = 0, $data6 = 0, $grandchild = 0;
 var $i = 0, $inc = 0, $n = 0, $type = 0, $type4 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $2 = $x$addr;
 $data = ((($2)) + 44|0);
 $3 = HEAP32[$data>>2]|0;
 $n = $3;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $n;
  $cmp1 = ($4|0)<($5|0);
  if (!($cmp1)) {
   break;
  }
  $6 = $x$addr;
  $data2 = ((($6)) + 44|0);
  $children = ((($data2)) + 16|0);
  $7 = HEAP32[$children>>2]|0;
  $8 = $i;
  $arrayidx = (($7) + ($8<<2)|0);
  $9 = HEAP32[$arrayidx>>2]|0;
  $child = $9;
  while(1) {
   $10 = $child;
   $type4 = ((($10)) + 40|0);
   $11 = HEAP32[$type4>>2]|0;
   $cmp5 = ($11|0)==(10);
   if ($cmp5) {
    $12 = $child;
    $data6 = ((($12)) + 44|0);
    $13 = HEAP32[$data6>>2]|0;
    $cmp9 = ($13|0)==(1);
    $23 = $cmp9;
   } else {
    $23 = 0;
   }
   $14 = $child;
   if (!($23)) {
    break;
   }
   $data10 = ((($14)) + 44|0);
   $children12 = ((($data10)) + 16|0);
   $15 = HEAP32[$children12>>2]|0;
   $16 = HEAP32[$15>>2]|0;
   $grandchild = $16;
   $17 = $child;
   _free_node($17);
   $18 = $grandchild;
   $19 = $x$addr;
   $data14 = ((($19)) + 44|0);
   $children16 = ((($data14)) + 16|0);
   $20 = HEAP32[$children16>>2]|0;
   $21 = $i;
   $arrayidx17 = (($20) + ($21<<2)|0);
   HEAP32[$arrayidx17>>2] = $18;
   $child = $18;
  }
  _compress_singletons($14);
  $22 = $i;
  $inc = (($22) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _print_parse_tree($x) {
 $x = $x|0;
 var $0 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 _print_tree($0,0);
 STACKTOP = sp;return;
}
function _print_tree($x,$indent) {
 $x = $x|0;
 $indent = $indent|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx19 = 0, $arrayidx22 = 0, $arrayidx23 = 0, $arrayidx27 = 0, $arrayidx30 = 0, $arrayidx32 = 0, $arrayidx69 = 0, $call17 = 0;
 var $call21 = 0, $call36 = 0, $call41 = 0, $call75 = 0, $children = 0, $cmp = 0, $cmp1 = 0, $cmp33 = 0, $cmp5 = 0, $cmp72 = 0, $code = 0, $code16 = 0, $conv = 0, $conv71 = 0, $data = 0, $data101 = 0, $data105 = 0, $data15 = 0, $data2 = 0, $data84 = 0;
 var $data87 = 0, $data9 = 0, $data91 = 0, $data95 = 0, $data98 = 0, $i = 0, $idxprom = 0, $idxprom29 = 0, $inc = 0, $indent$addr = 0, $n = 0, $selmao = 0, $selmao70 = 0, $sep_with_zei = 0, $ssm_code = 0, $ssm_code28 = 0, $text = 0, $tobool = 0, $tobool37 = 0, $tobool42 = 0;
 var $tobool76 = 0, $type = 0, $type11 = 0, $type4 = 0, $type8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0;
 var $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer54 = 0, $vararg_buffer57 = 0, $vararg_buffer60 = 0, $vararg_buffer9 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $x$addr = 0, $xci = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $vararg_buffer60 = sp + 200|0;
 $vararg_buffer57 = sp + 192|0;
 $vararg_buffer54 = sp + 184|0;
 $vararg_buffer51 = sp + 176|0;
 $vararg_buffer48 = sp + 168|0;
 $vararg_buffer45 = sp + 160|0;
 $vararg_buffer42 = sp + 152|0;
 $vararg_buffer39 = sp + 144|0;
 $vararg_buffer37 = sp + 136|0;
 $vararg_buffer35 = sp + 128|0;
 $vararg_buffer33 = sp + 120|0;
 $vararg_buffer31 = sp + 112|0;
 $vararg_buffer29 = sp + 104|0;
 $vararg_buffer27 = sp + 96|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $x$addr = $x;
 $indent$addr = $indent;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 L1: do {
  if ($cmp) {
   $2 = $x$addr;
   $data = ((($2)) + 44|0);
   $3 = HEAP32[$data>>2]|0;
   $n = $3;
   $i = 0;
   while(1) {
    $4 = $i;
    $5 = $n;
    $cmp1 = ($4|0)<($5|0);
    if (!($cmp1)) {
     break L1;
    }
    $6 = $x$addr;
    $data2 = ((($6)) + 44|0);
    $children = ((($data2)) + 16|0);
    $7 = HEAP32[$children>>2]|0;
    $8 = $i;
    $arrayidx = (($7) + ($8<<2)|0);
    $9 = HEAP32[$arrayidx>>2]|0;
    $10 = $indent$addr;
    $add = (($10) + 1)|0;
    _print_tree($9,$add);
    $11 = $i;
    $inc = (($11) + 1)|0;
    $i = $inc;
   }
  }
 } while(0);
 $12 = $x$addr;
 $type4 = ((($12)) + 40|0);
 $13 = HEAP32[$type4>>2]|0;
 $cmp5 = ($13|0)!=(0);
 if ($cmp5) {
  $14 = $indent$addr;
  _show_indent($14);
 }
 $15 = $x$addr;
 $type8 = ((($15)) + 40|0);
 $16 = HEAP32[$type8>>2]|0;
 do {
  switch ($16|0) {
  case 10:  {
   $17 = $x$addr;
   $data9 = ((($17)) + 44|0);
   $type11 = ((($data9)) + 12|0);
   $18 = HEAP32[$type11>>2]|0;
   $arrayidx12 = (7056 + ($18<<2)|0);
   $19 = HEAP32[$arrayidx12>>2]|0;
   HEAP32[$vararg_buffer>>2] = $19;
   (_printf(44607,$vararg_buffer)|0);
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $20 = $x$addr;
   $data15 = ((($20)) + 44|0);
   $code16 = ((($data15)) + 4|0);
   $21 = HEAP32[$code16>>2]|0;
   $code = $21;
   $22 = $x$addr;
   $call17 = (_prop_elidable($22,0)|0);
   $tobool = ($call17|0)!=(0|0);
   $23 = $code;
   $arrayidx19 = (46450 + (($23*14)|0)|0);
   $24 = HEAPU8[$arrayidx19>>0]|(HEAPU8[$arrayidx19+1>>0]<<8)|(HEAPU8[$arrayidx19+2>>0]<<16)|(HEAPU8[$arrayidx19+3>>0]<<24);
   if ($tobool) {
    $call21 = (_make_uppercase($24)|0);
    $25 = $code;
    $arrayidx22 = (46450 + (($25*14)|0)|0);
    $ssm_code = ((($arrayidx22)) + 8|0);
    $26 = HEAPU8[$ssm_code>>0]|(HEAPU8[$ssm_code+1>>0]<<8);
    $idxprom = $26 << 16 >> 16;
    $arrayidx23 = (324 + ($idxprom<<2)|0);
    $27 = HEAP32[$arrayidx23>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $call21;
    $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $27;
    (_printf(44611,$vararg_buffer1)|0);
    STACKTOP = sp;return;
   }
   $28 = $code;
   $arrayidx27 = (46450 + (($28*14)|0)|0);
   $ssm_code28 = ((($arrayidx27)) + 8|0);
   $29 = HEAPU8[$ssm_code28>>0]|(HEAPU8[$ssm_code28+1>>0]<<8);
   $idxprom29 = $29 << 16 >> 16;
   $arrayidx30 = (324 + ($idxprom29<<2)|0);
   $30 = HEAP32[$arrayidx30>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $24;
   $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $30;
   (_printf(44611,$vararg_buffer5)|0);
   $31 = $code;
   $arrayidx32 = (46450 + (($31*14)|0)|0);
   $selmao = ((($arrayidx32)) + 4|0);
   $32 = HEAPU8[$selmao>>0]|(HEAPU8[$selmao+1>>0]<<8);
   $conv = $32 << 16 >> 16;
   $cmp33 = ($conv|0)==(366);
   if (!($cmp33)) {
    $52 = $code;
    $arrayidx69 = (46450 + (($52*14)|0)|0);
    $selmao70 = ((($arrayidx69)) + 4|0);
    $53 = HEAPU8[$selmao70>>0]|(HEAPU8[$selmao70+1>>0]<<8);
    $conv71 = $53 << 16 >> 16;
    $cmp72 = ($conv71|0)==(273);
    if (!($cmp72)) {
     STACKTOP = sp;return;
    }
    $54 = $x$addr;
    $call75 = (_prop_neg_indicator($54,0)|0);
    $tobool76 = ($call75|0)!=(0|0);
    if (!($tobool76)) {
     STACKTOP = sp;return;
    }
    (_printf(44628,$vararg_buffer37)|0);
    STACKTOP = sp;return;
   }
   $33 = $x$addr;
   $call36 = (_prop_neg_indicator($33,0)|0);
   $tobool37 = ($call36|0)!=(0|0);
   if ($tobool37) {
    $34 = $indent$addr;
    _show_indent($34);
    (_printf(44628,$vararg_buffer9)|0);
   }
   $35 = $x$addr;
   $call41 = (_prop_cai_indicator($35,0)|0);
   $xci = $call41;
   $36 = $xci;
   $tobool42 = ($36|0)!=(0|0);
   if (!($tobool42)) {
    STACKTOP = sp;return;
   }
   $37 = $xci;
   $38 = HEAP32[$37>>2]|0;
   do {
    switch ($38|0) {
    case 0:  {
     $39 = $indent$addr;
     _show_indent($39);
     (_printf(44647,$vararg_buffer11)|0);
     STACKTOP = sp;return;
     break;
    }
    case 1:  {
     $40 = $indent$addr;
     _show_indent($40);
     (_printf(44666,$vararg_buffer13)|0);
     STACKTOP = sp;return;
     break;
    }
    case 2:  {
     $41 = $indent$addr;
     _show_indent($41);
     (_printf(44685,$vararg_buffer15)|0);
     STACKTOP = sp;return;
     break;
    }
    case 3:  {
     $42 = $indent$addr;
     _show_indent($42);
     (_printf(44705,$vararg_buffer17)|0);
     STACKTOP = sp;return;
     break;
    }
    case 7:  {
     $43 = $indent$addr;
     _show_indent($43);
     (_printf(44725,$vararg_buffer19)|0);
     STACKTOP = sp;return;
     break;
    }
    case 6:  {
     $44 = $indent$addr;
     _show_indent($44);
     (_printf(44647,$vararg_buffer21)|0);
     $45 = $indent$addr;
     _show_indent($45);
     (_printf(44628,$vararg_buffer23)|0);
     STACKTOP = sp;return;
     break;
    }
    case 5:  {
     $46 = $indent$addr;
     _show_indent($46);
     (_printf(44666,$vararg_buffer25)|0);
     $47 = $indent$addr;
     _show_indent($47);
     (_printf(44628,$vararg_buffer27)|0);
     STACKTOP = sp;return;
     break;
    }
    case 4:  {
     $48 = $indent$addr;
     _show_indent($48);
     (_printf(44685,$vararg_buffer29)|0);
     $49 = $indent$addr;
     _show_indent($49);
     (_printf(44628,$vararg_buffer31)|0);
     STACKTOP = sp;return;
     break;
    }
    case 8:  {
     $50 = $indent$addr;
     _show_indent($50);
     (_printf(44725,$vararg_buffer33)|0);
     $51 = $indent$addr;
     _show_indent($51);
     (_printf(44628,$vararg_buffer35)|0);
     STACKTOP = sp;return;
     break;
    }
    default: {
     STACKTOP = sp;return;
    }
    }
   } while(0);
   break;
  }
  case 3:  {
   $55 = $x$addr;
   $data84 = ((($55)) + 44|0);
   $text = ((($data84)) + 8|0);
   $56 = HEAP32[$text>>2]|0;
   HEAP32[$vararg_buffer39>>2] = $56;
   (_printf(44744,$vararg_buffer39)|0);
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $57 = $x$addr;
   $data87 = ((($57)) + 44|0);
   $58 = HEAP32[$data87>>2]|0;
   HEAP32[$vararg_buffer42>>2] = $58;
   (_printf(44754,$vararg_buffer42)|0);
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $59 = $x$addr;
   $data91 = ((($59)) + 44|0);
   $60 = HEAP32[$data91>>2]|0;
   HEAP32[$vararg_buffer45>>2] = $60;
   (_printf(44764,$vararg_buffer45)|0);
   STACKTOP = sp;return;
   break;
  }
  case 6:  {
   $61 = $x$addr;
   $data95 = ((($61)) + 44|0);
   $sep_with_zei = ((($data95)) + 12|0);
   $62 = HEAP32[$sep_with_zei>>2]|0;
   HEAP32[$vararg_buffer48>>2] = $62;
   (_printf(44776,$vararg_buffer48)|0);
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $63 = $x$addr;
   $data98 = ((($63)) + 44|0);
   $64 = HEAP32[$data98>>2]|0;
   HEAP32[$vararg_buffer51>>2] = $64;
   (_printf(44786,$vararg_buffer51)|0);
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $65 = $x$addr;
   $data101 = ((($65)) + 44|0);
   $66 = HEAP32[$data101>>2]|0;
   HEAP32[$vararg_buffer54>>2] = $66;
   (_printf(44795,$vararg_buffer54)|0);
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   $67 = $x$addr;
   $data105 = ((($67)) + 44|0);
   $68 = HEAP32[$data105>>2]|0;
   HEAP32[$vararg_buffer57>>2] = $68;
   (_printf(44808,$vararg_buffer57)|0);
   STACKTOP = sp;return;
   break;
  }
  case 0:  {
   STACKTOP = sp;return;
   break;
  }
  default: {
   (_printf(44820,$vararg_buffer60)|0);
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _show_indent($indent) {
 $indent = $indent|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp1 = 0, $dec = 0, $i = 0, $indent$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $indent$addr = $indent;
 $0 = $indent$addr;
 $i = $0;
 while(1) {
  $1 = $i;
  $cmp = ($1|0)>(0);
  if (!($cmp)) {
   break;
  }
  $2 = $i;
  $cmp1 = ($2|0)==(1);
  if ($cmp1) {
   (_printf(44828,$vararg_buffer)|0);
  } else {
   (_printf(44831,$vararg_buffer1)|0);
  }
  $3 = $i;
  $dec = (($3) + -1)|0;
  $i = $dec;
 }
 STACKTOP = sp;return;
}
function _print_bracketed_text($top,$gloss) {
 $top = $top|0;
 $gloss = $gloss|0;
 var $0 = 0, $1 = 0, $gloss$addr = 0, $state = 0, $top$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $state = sp + 4|0;
 $top$addr = $top;
 $gloss$addr = $gloss;
 HEAP32[$state>>2] = 0;
 $0 = $gloss$addr;
 HEAP32[29734] = $0;
 $1 = $top$addr;
 _print_bracketed($1,0,$state,0);
 (_printf(116341,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _print_bracketed($x,$depth,$state,$conv) {
 $x = $x|0;
 $depth = $depth|0;
 $state = $state|0;
 $conv = $conv|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $add = 0, $add270 = 0, $add283 = 0, $add293 = 0, $add307 = 0, $add71 = 0, $add78 = 0, $arrayidx = 0, $arrayidx105 = 0, $arrayidx108 = 0, $arrayidx143 = 0, $arrayidx169 = 0, $arrayidx17 = 0, $arrayidx178 = 0, $arrayidx190 = 0, $arrayidx202 = 0, $arrayidx214 = 0, $arrayidx228 = 0, $arrayidx27 = 0, $arrayidx34 = 0;
 var $arrayidx43 = 0, $arrayidx52 = 0, $arrayidx65 = 0, $arrayidx70 = 0, $arrayidx77 = 0, $arrayidx96 = 0, $buffer = 0, $c1 = 0, $c2 = 0, $call114 = 0, $call119 = 0, $call149 = 0, $call171 = 0, $call182 = 0, $call194 = 0, $call206 = 0, $call218 = 0, $call230 = 0, $call29 = 0, $call343 = 0;
 var $call349 = 0, $call36 = 0, $call366 = 0, $call376 = 0, $call386 = 0, $call396 = 0, $call405 = 0, $call411 = 0, $call45 = 0, $call54 = 0, $call90 = 0, $call98 = 0, $child_conv = 0, $children = 0, $children16 = 0, $children64 = 0, $children69 = 0, $cmp = 0, $cmp111 = 0, $cmp146 = 0;
 var $cmp162 = 0, $cmp19 = 0, $cmp2 = 0, $cmp22 = 0, $cmp239 = 0, $cmp242 = 0, $cmp257 = 0, $cmp260 = 0, $cmp272 = 0, $cmp275 = 0, $cmp285 = 0, $cmp288 = 0, $cmp295 = 0, $cmp298 = 0, $cmp310 = 0, $cmp313 = 0, $cmp323 = 0, $cmp326 = 0, $cmp337 = 0, $cmp4 = 0;
 var $cmp422 = 0, $cmp425 = 0, $cmp7 = 0, $cmp82 = 0, $cmp85 = 0, $cmp9 = 0, $code = 0, $code101 = 0, $code168 = 0, $code177 = 0, $code189 = 0, $code201 = 0, $code213 = 0, $code227 = 0, $code33 = 0, $code42 = 0, $code51 = 0, $code95 = 0, $conv$addr = 0, $conv110 = 0;
 var $conv145 = 0, $data = 0, $data12 = 0, $data14 = 0, $data159 = 0, $data166 = 0, $data175 = 0, $data187 = 0, $data199 = 0, $data21 = 0, $data211 = 0, $data225 = 0, $data248 = 0, $data249 = 0, $data25 = 0, $data251 = 0, $data266 = 0, $data281 = 0, $data304 = 0, $data31 = 0;
 var $data319 = 0, $data332 = 0, $data340 = 0, $data346 = 0, $data359 = 0, $data369 = 0, $data379 = 0, $data389 = 0, $data40 = 0, $data402 = 0, $data408 = 0, $data431 = 0, $data49 = 0, $data62 = 0, $data67 = 0, $data93 = 0, $depth$addr = 0, $english = 0, $eols = 0, $i = 0;
 var $inc = 0, $n = 0, $selmao109 = 0, $selmao144 = 0, $sep_with_zei = 0, $state$addr = 0, $sub = 0, $term = 0, $term253 = 0, $text = 0, $tobool = 0, $tobool115 = 0, $tobool120 = 0, $tobool150 = 0, $tobool157 = 0, $tobool220 = 0, $tobool231 = 0, $tobool335 = 0, $tobool344 = 0, $tobool351 = 0;
 var $tobool37 = 0, $tobool398 = 0, $tobool406 = 0, $tobool413 = 0, $tobool46 = 0, $tobool55 = 0, $tobool91 = 0, $type = 0, $type18 = 0, $type81 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0;
 var $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer38 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer57 = 0, $vararg_buffer60 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer67 = 0, $vararg_buffer70 = 0;
 var $vararg_buffer73 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer8 = 0, $vararg_buffer81 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $x$addr = 0, $xci = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2384|0);
 $vararg_buffer81 = sp + 280|0;
 $vararg_buffer79 = sp + 272|0;
 $vararg_buffer76 = sp + 264|0;
 $vararg_buffer73 = sp + 256|0;
 $vararg_buffer70 = sp + 248|0;
 $vararg_buffer67 = sp + 240|0;
 $vararg_buffer65 = sp + 232|0;
 $vararg_buffer62 = sp + 224|0;
 $vararg_buffer60 = sp + 216|0;
 $vararg_buffer57 = sp + 208|0;
 $vararg_buffer55 = sp + 200|0;
 $vararg_buffer53 = sp + 192|0;
 $vararg_buffer50 = sp + 184|0;
 $vararg_buffer48 = sp + 176|0;
 $vararg_buffer45 = sp + 168|0;
 $vararg_buffer43 = sp + 160|0;
 $vararg_buffer38 = sp + 144|0;
 $vararg_buffer36 = sp + 136|0;
 $vararg_buffer33 = sp + 128|0;
 $vararg_buffer30 = sp + 120|0;
 $vararg_buffer28 = sp + 112|0;
 $vararg_buffer26 = sp + 104|0;
 $vararg_buffer24 = sp + 96|0;
 $vararg_buffer22 = sp + 88|0;
 $vararg_buffer20 = sp + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $buffer = sp + 336|0;
 $x$addr = $x;
 $depth$addr = $depth;
 $state$addr = $state;
 $conv$addr = $conv;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 $2 = $state$addr;
 _clear_eols($2);
 if ($cmp) {
  $3 = $state$addr;
  $4 = HEAP32[$3>>2]|0;
  $cmp2 = ($4|0)==(1);
  if ($cmp2) {
   label = 4;
  } else {
   $5 = $state$addr;
   $6 = HEAP32[$5>>2]|0;
   $cmp4 = ($6|0)==(2);
   if ($cmp4) {
    label = 4;
   }
  }
  if ((label|0) == 4) {
   (_printf(116343,$vararg_buffer)|0);
  }
  $7 = $depth$addr;
  _print_open($7);
  $8 = $state$addr;
  HEAP32[$8>>2] = 0;
  $9 = $x$addr;
  $data = ((($9)) + 44|0);
  $10 = HEAP32[$data>>2]|0;
  $n = $10;
  $i = 0;
  while(1) {
   $11 = $i;
   $12 = $n;
   $cmp7 = ($11|0)<($12|0);
   if (!($cmp7)) {
    break;
   }
   $13 = $i;
   $cmp9 = ($13|0)>(0);
   $14 = $x$addr;
   $data12 = ((($14)) + 44|0);
   $children = ((($data12)) + 16|0);
   $15 = HEAP32[$children>>2]|0;
   $16 = $i;
   do {
    if ($cmp9) {
     $sub = (($16) - 1)|0;
     $arrayidx = (($15) + ($sub<<2)|0);
     $17 = HEAP32[$arrayidx>>2]|0;
     $c1 = $17;
     $18 = $x$addr;
     $data14 = ((($18)) + 44|0);
     $children16 = ((($data14)) + 16|0);
     $19 = HEAP32[$children16>>2]|0;
     $20 = $i;
     $arrayidx17 = (($19) + ($20<<2)|0);
     $21 = HEAP32[$arrayidx17>>2]|0;
     $c2 = $21;
     $22 = $c1;
     $type18 = ((($22)) + 40|0);
     $23 = HEAP32[$type18>>2]|0;
     $cmp19 = ($23|0)==(2);
     if ($cmp19) {
      $24 = $c1;
      $data21 = ((($24)) + 44|0);
      $25 = HEAP32[$data21>>2]|0;
      $cmp22 = ($25|0)==(353);
      if ($cmp22) {
       $26 = $c1;
       $data25 = ((($26)) + 44|0);
       $code = ((($data25)) + 4|0);
       $27 = HEAP32[$code>>2]|0;
       $arrayidx27 = (46450 + (($27*14)|0)|0);
       $28 = HEAPU8[$arrayidx27>>0]|(HEAPU8[$arrayidx27+1>>0]<<8)|(HEAPU8[$arrayidx27+2>>0]<<16)|(HEAPU8[$arrayidx27+3>>0]<<24);
       $call29 = (_strcmp($28,108346)|0);
       $tobool = ($call29|0)!=(0);
       do {
        if ($tobool) {
         $29 = $c1;
         $data31 = ((($29)) + 44|0);
         $code33 = ((($data31)) + 4|0);
         $30 = HEAP32[$code33>>2]|0;
         $arrayidx34 = (46450 + (($30*14)|0)|0);
         $31 = HEAPU8[$arrayidx34>>0]|(HEAPU8[$arrayidx34+1>>0]<<8)|(HEAPU8[$arrayidx34+2>>0]<<16)|(HEAPU8[$arrayidx34+3>>0]<<24);
         $call36 = (_strcmp($31,110725)|0);
         $tobool37 = ($call36|0)!=(0);
         if (!($tobool37)) {
          $child_conv = 2;
          break;
         }
         $32 = $c1;
         $data40 = ((($32)) + 44|0);
         $code42 = ((($data40)) + 4|0);
         $33 = HEAP32[$code42>>2]|0;
         $arrayidx43 = (46450 + (($33*14)|0)|0);
         $34 = HEAPU8[$arrayidx43>>0]|(HEAPU8[$arrayidx43+1>>0]<<8)|(HEAPU8[$arrayidx43+2>>0]<<16)|(HEAPU8[$arrayidx43+3>>0]<<24);
         $call45 = (_strcmp($34,111675)|0);
         $tobool46 = ($call45|0)!=(0);
         if (!($tobool46)) {
          $child_conv = 3;
          break;
         }
         $35 = $c1;
         $data49 = ((($35)) + 44|0);
         $code51 = ((($data49)) + 4|0);
         $36 = HEAP32[$code51>>2]|0;
         $arrayidx52 = (46450 + (($36*14)|0)|0);
         $37 = HEAPU8[$arrayidx52>>0]|(HEAPU8[$arrayidx52+1>>0]<<8)|(HEAPU8[$arrayidx52+2>>0]<<16)|(HEAPU8[$arrayidx52+3>>0]<<24);
         $call54 = (_strcmp($37,112678)|0);
         $tobool55 = ($call54|0)!=(0);
         if ($tobool55) {
          $child_conv = 0;
          break;
         } else {
          $child_conv = 4;
          break;
         }
        } else {
         $child_conv = 1;
        }
       } while(0);
       $38 = $x$addr;
       $data62 = ((($38)) + 44|0);
       $children64 = ((($data62)) + 16|0);
       $39 = HEAP32[$children64>>2]|0;
       $40 = $i;
       $arrayidx65 = (($39) + ($40<<2)|0);
       $41 = HEAP32[$arrayidx65>>2]|0;
       $42 = $depth$addr;
       $add = (($42) + 1)|0;
       $43 = $state$addr;
       $44 = $child_conv;
       _print_bracketed($41,$add,$43,$44);
       break;
      }
     }
     $45 = $x$addr;
     $data67 = ((($45)) + 44|0);
     $children69 = ((($data67)) + 16|0);
     $46 = HEAP32[$children69>>2]|0;
     $47 = $i;
     $arrayidx70 = (($46) + ($47<<2)|0);
     $48 = HEAP32[$arrayidx70>>2]|0;
     $49 = $depth$addr;
     $add71 = (($49) + 1)|0;
     $50 = $state$addr;
     _print_bracketed($48,$add71,$50,0);
    } else {
     $arrayidx77 = (($15) + ($16<<2)|0);
     $51 = HEAP32[$arrayidx77>>2]|0;
     $52 = $depth$addr;
     $add78 = (($52) + 1)|0;
     $53 = $state$addr;
     _print_bracketed($51,$add78,$53,0);
    }
   } while(0);
   $54 = $i;
   $inc = (($54) + 1)|0;
   $i = $inc;
  }
  $55 = $depth$addr;
  _print_close($55);
  $56 = $state$addr;
  HEAP32[$56>>2] = 2;
  STACKTOP = sp;return;
 }
 $57 = $x$addr;
 $type81 = ((($57)) + 40|0);
 $58 = HEAP32[$type81>>2]|0;
 L35: do {
  switch ($58|0) {
  case 2:  {
   $59 = $state$addr;
   $60 = HEAP32[$59>>2]|0;
   $cmp82 = ($60|0)==(1);
   if ($cmp82) {
    label = 27;
   } else {
    $61 = $state$addr;
    $62 = HEAP32[$61>>2]|0;
    $cmp85 = ($62|0)==(2);
    if ($cmp85) {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    (_printf(116343,$vararg_buffer1)|0);
   }
   $63 = $state$addr;
   HEAP32[$63>>2] = 1;
   $64 = $x$addr;
   $call90 = (_prop_elidable($64,0)|0);
   $tobool91 = ($call90|0)!=(0|0);
   $65 = $x$addr;
   $data93 = ((($65)) + 44|0);
   $code95 = ((($data93)) + 4|0);
   $66 = HEAP32[$code95>>2]|0;
   L42: do {
    if ($tobool91) {
     $arrayidx96 = (46450 + (($66*14)|0)|0);
     $67 = HEAPU8[$arrayidx96>>0]|(HEAPU8[$arrayidx96+1>>0]<<8)|(HEAPU8[$arrayidx96+2>>0]<<16)|(HEAPU8[$arrayidx96+3>>0]<<24);
     $call98 = (_make_uppercase($67)|0);
     HEAP32[$vararg_buffer3>>2] = $call98;
     (_printf(116219,$vararg_buffer3)|0);
    } else {
     $code101 = $66;
     $68 = $code101;
     $arrayidx105 = (46450 + (($68*14)|0)|0);
     $69 = HEAPU8[$arrayidx105>>0]|(HEAPU8[$arrayidx105+1>>0]<<8)|(HEAPU8[$arrayidx105+2>>0]<<16)|(HEAPU8[$arrayidx105+3>>0]<<24);
     HEAP32[$vararg_buffer5>>2] = $69;
     (_printf(116219,$vararg_buffer5)|0);
     $70 = $code101;
     $arrayidx108 = (46450 + (($70*14)|0)|0);
     $selmao109 = ((($arrayidx108)) + 4|0);
     $71 = HEAPU8[$selmao109>>0]|(HEAPU8[$selmao109+1>>0]<<8);
     $conv110 = $71 << 16 >> 16;
     $cmp111 = ($conv110|0)==(366);
     if (!($cmp111)) {
      $77 = $code101;
      $arrayidx143 = (46450 + (($77*14)|0)|0);
      $selmao144 = ((($arrayidx143)) + 4|0);
      $78 = HEAPU8[$selmao144>>0]|(HEAPU8[$selmao144+1>>0]<<8);
      $conv145 = $78 << 16 >> 16;
      $cmp146 = ($conv145|0)==(273);
      if (!($cmp146)) {
       break;
      }
      $79 = $x$addr;
      $call149 = (_prop_neg_indicator($79,0)|0);
      $tobool150 = ($call149|0)!=(0|0);
      if (!($tobool150)) {
       break;
      }
      (_printf(44834,$vararg_buffer28)|0);
      break;
     }
     $72 = $x$addr;
     $call114 = (_prop_neg_indicator($72,0)|0);
     $tobool115 = ($call114|0)!=(0|0);
     if ($tobool115) {
      (_printf(44834,$vararg_buffer8)|0);
     }
     $73 = $x$addr;
     $call119 = (_prop_cai_indicator($73,0)|0);
     $xci = $call119;
     $74 = $xci;
     $tobool120 = ($74|0)!=(0|0);
     if ($tobool120) {
      $75 = $xci;
      $76 = HEAP32[$75>>2]|0;
      switch ($76|0) {
      case 0:  {
       (_printf(90952,$vararg_buffer10)|0);
       break L42;
       break;
      }
      case 1:  {
       (_printf(90957,$vararg_buffer12)|0);
       break L42;
       break;
      }
      case 2:  {
       (_printf(90962,$vararg_buffer14)|0);
       break L42;
       break;
      }
      case 3:  {
       (_printf(90968,$vararg_buffer16)|0);
       break L42;
       break;
      }
      case 7:  {
       (_printf(90999,$vararg_buffer18)|0);
       break L42;
       break;
      }
      case 6:  {
       (_printf(44839,$vararg_buffer20)|0);
       break L42;
       break;
      }
      case 5:  {
       (_printf(44848,$vararg_buffer22)|0);
       break L42;
       break;
      }
      case 4:  {
       (_printf(44857,$vararg_buffer24)|0);
       break L42;
       break;
      }
      case 8:  {
       (_printf(90999,$vararg_buffer26)|0);
       break L42;
       break;
      }
      default: {
       break L42;
      }
      }
     }
    }
   } while(0);
   $80 = HEAP32[29734]|0;
   $tobool157 = ($80|0)!=(0);
   if ($tobool157) {
    $81 = $x$addr;
    $data159 = ((($81)) + 44|0);
    $82 = HEAP32[$data159>>2]|0;
    $cmp162 = ($82|0)==(261);
    if (!($cmp162)) {
     $101 = $x$addr;
     $data225 = ((($101)) + 44|0);
     $code227 = ((($data225)) + 4|0);
     $102 = HEAP32[$code227>>2]|0;
     $arrayidx228 = (46450 + (($102*14)|0)|0);
     $103 = HEAPU8[$arrayidx228>>0]|(HEAPU8[$arrayidx228+1>>0]<<8)|(HEAPU8[$arrayidx228+2>>0]<<16)|(HEAPU8[$arrayidx228+3>>0]<<24);
     $call230 = (_translate($103)|0);
     $english = $call230;
     $104 = $english;
     $tobool231 = ($104|0)!=(0|0);
     if (!($tobool231)) {
      break L35;
     }
     $105 = $english;
     HEAP32[$vararg_buffer33>>2] = $105;
     (_printf(44874,$vararg_buffer33)|0);
     break L35;
    }
    $english = 0;
    $83 = $conv$addr;
    switch ($83|0) {
    case 0:  {
     $84 = $x$addr;
     $data166 = ((($84)) + 44|0);
     $code168 = ((($data166)) + 4|0);
     $85 = HEAP32[$code168>>2]|0;
     $arrayidx169 = (46450 + (($85*14)|0)|0);
     $86 = HEAPU8[$arrayidx169>>0]|(HEAPU8[$arrayidx169+1>>0]<<8)|(HEAPU8[$arrayidx169+2>>0]<<16)|(HEAPU8[$arrayidx169+3>>0]<<24);
     $call171 = (_translate($86)|0);
     $english = $call171;
     break;
    }
    case 1:  {
     (_strcpy($buffer,108346)|0);
     $87 = $x$addr;
     $data175 = ((($87)) + 44|0);
     $code177 = ((($data175)) + 4|0);
     $88 = HEAP32[$code177>>2]|0;
     $arrayidx178 = (46450 + (($88*14)|0)|0);
     $89 = HEAPU8[$arrayidx178>>0]|(HEAPU8[$arrayidx178+1>>0]<<8)|(HEAPU8[$arrayidx178+2>>0]<<16)|(HEAPU8[$arrayidx178+3>>0]<<24);
     (_strcat($buffer,$89)|0);
     $call182 = (_translate($buffer)|0);
     $english = $call182;
     break;
    }
    case 2:  {
     (_strcpy($buffer,110725)|0);
     $90 = $x$addr;
     $data187 = ((($90)) + 44|0);
     $code189 = ((($data187)) + 4|0);
     $91 = HEAP32[$code189>>2]|0;
     $arrayidx190 = (46450 + (($91*14)|0)|0);
     $92 = HEAPU8[$arrayidx190>>0]|(HEAPU8[$arrayidx190+1>>0]<<8)|(HEAPU8[$arrayidx190+2>>0]<<16)|(HEAPU8[$arrayidx190+3>>0]<<24);
     (_strcat($buffer,$92)|0);
     $call194 = (_translate($buffer)|0);
     $english = $call194;
     break;
    }
    case 3:  {
     (_strcpy($buffer,111675)|0);
     $93 = $x$addr;
     $data199 = ((($93)) + 44|0);
     $code201 = ((($data199)) + 4|0);
     $94 = HEAP32[$code201>>2]|0;
     $arrayidx202 = (46450 + (($94*14)|0)|0);
     $95 = HEAPU8[$arrayidx202>>0]|(HEAPU8[$arrayidx202+1>>0]<<8)|(HEAPU8[$arrayidx202+2>>0]<<16)|(HEAPU8[$arrayidx202+3>>0]<<24);
     (_strcat($buffer,$95)|0);
     $call206 = (_translate($buffer)|0);
     $english = $call206;
     break;
    }
    case 4:  {
     (_strcpy($buffer,112678)|0);
     $96 = $x$addr;
     $data211 = ((($96)) + 44|0);
     $code213 = ((($data211)) + 4|0);
     $97 = HEAP32[$code213>>2]|0;
     $arrayidx214 = (46450 + (($97*14)|0)|0);
     $98 = HEAPU8[$arrayidx214>>0]|(HEAPU8[$arrayidx214+1>>0]<<8)|(HEAPU8[$arrayidx214+2>>0]<<16)|(HEAPU8[$arrayidx214+3>>0]<<24);
     (_strcat($buffer,$98)|0);
     $call218 = (_translate($buffer)|0);
     $english = $call218;
     break;
    }
    default: {
    }
    }
    $99 = $english;
    $tobool220 = ($99|0)!=(0|0);
    if ($tobool220) {
     $100 = $english;
     HEAP32[$vararg_buffer30>>2] = $100;
     (_printf(44867,$vararg_buffer30)|0);
    }
   }
   break;
  }
  case 3:  {
   $106 = $state$addr;
   $107 = HEAP32[$106>>2]|0;
   $cmp239 = ($107|0)==(1);
   if ($cmp239) {
    label = 61;
   } else {
    $108 = $state$addr;
    $109 = HEAP32[$108>>2]|0;
    $cmp242 = ($109|0)==(2);
    if ($cmp242) {
     label = 61;
    }
   }
   if ((label|0) == 61) {
    (_printf(116343,$vararg_buffer36)|0);
   }
   $110 = $state$addr;
   HEAP32[$110>>2] = 1;
   $111 = $x$addr;
   $data248 = ((($111)) + 44|0);
   $term = ((($data248)) + 4|0);
   $112 = HEAP32[$term>>2]|0;
   $113 = $x$addr;
   $data249 = ((($113)) + 44|0);
   $text = ((($data249)) + 8|0);
   $114 = HEAP32[$text>>2]|0;
   $115 = $x$addr;
   $data251 = ((($115)) + 44|0);
   $term253 = ((($data251)) + 4|0);
   $116 = HEAP32[$term253>>2]|0;
   HEAP32[$vararg_buffer38>>2] = $112;
   $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
   HEAP32[$vararg_ptr41>>2] = $114;
   $vararg_ptr42 = ((($vararg_buffer38)) + 8|0);
   HEAP32[$vararg_ptr42>>2] = $116;
   (_printf(44880,$vararg_buffer38)|0);
   break;
  }
  case 4:  {
   $117 = $state$addr;
   $118 = HEAP32[$117>>2]|0;
   $cmp257 = ($118|0)==(1);
   if ($cmp257) {
    label = 65;
   } else {
    $119 = $state$addr;
    $120 = HEAP32[$119>>2]|0;
    $cmp260 = ($120|0)==(2);
    if ($cmp260) {
     label = 65;
    }
   }
   if ((label|0) == 65) {
    (_printf(116343,$vararg_buffer43)|0);
   }
   $121 = $state$addr;
   HEAP32[$121>>2] = 1;
   $122 = $x$addr;
   $data266 = ((($122)) + 44|0);
   $123 = HEAP32[$data266>>2]|0;
   HEAP32[$vararg_buffer45>>2] = $123;
   (_printf(90823,$vararg_buffer45)|0);
   break;
  }
  case 6:  {
   $124 = $depth$addr;
   $add270 = (($124) + 1)|0;
   _print_open($add270);
   $125 = $state$addr;
   HEAP32[$125>>2] = 0;
   $126 = $state$addr;
   $127 = HEAP32[$126>>2]|0;
   $cmp272 = ($127|0)==(1);
   if ($cmp272) {
    label = 69;
   } else {
    $128 = $state$addr;
    $129 = HEAP32[$128>>2]|0;
    $cmp275 = ($129|0)==(2);
    if ($cmp275) {
     label = 69;
    }
   }
   if ((label|0) == 69) {
    (_printf(116343,$vararg_buffer48)|0);
   }
   $130 = $state$addr;
   HEAP32[$130>>2] = 1;
   $131 = $x$addr;
   $data281 = ((($131)) + 44|0);
   $sep_with_zei = ((($data281)) + 12|0);
   $132 = HEAP32[$sep_with_zei>>2]|0;
   HEAP32[$vararg_buffer50>>2] = $132;
   (_printf(44607,$vararg_buffer50)|0);
   $133 = $depth$addr;
   $add283 = (($133) + 1)|0;
   _print_close($add283);
   $134 = $state$addr;
   HEAP32[$134>>2] = 2;
   break;
  }
  case 5:  {
   $135 = $state$addr;
   $136 = HEAP32[$135>>2]|0;
   $cmp285 = ($136|0)==(1);
   if ($cmp285) {
    label = 73;
   } else {
    $137 = $state$addr;
    $138 = HEAP32[$137>>2]|0;
    $cmp288 = ($138|0)==(2);
    if ($cmp288) {
     label = 73;
    }
   }
   if ((label|0) == 73) {
    (_printf(116343,$vararg_buffer53)|0);
   }
   $139 = $depth$addr;
   $add293 = (($139) + 1)|0;
   _print_open($add293);
   $140 = $state$addr;
   HEAP32[$140>>2] = 0;
   $141 = $state$addr;
   $142 = HEAP32[$141>>2]|0;
   $cmp295 = ($142|0)==(1);
   if ($cmp295) {
    label = 76;
   } else {
    $143 = $state$addr;
    $144 = HEAP32[$143>>2]|0;
    $cmp298 = ($144|0)==(2);
    if ($cmp298) {
     label = 76;
    }
   }
   if ((label|0) == 76) {
    (_printf(116343,$vararg_buffer55)|0);
   }
   $145 = $state$addr;
   HEAP32[$145>>2] = 1;
   $146 = $x$addr;
   $data304 = ((($146)) + 44|0);
   $147 = HEAP32[$data304>>2]|0;
   HEAP32[$vararg_buffer57>>2] = $147;
   (_printf(90844,$vararg_buffer57)|0);
   $148 = $depth$addr;
   $add307 = (($148) + 1)|0;
   _print_close($add307);
   $149 = $state$addr;
   HEAP32[$149>>2] = 2;
   break;
  }
  case 7:  {
   $150 = $state$addr;
   $151 = HEAP32[$150>>2]|0;
   $cmp310 = ($151|0)==(1);
   if ($cmp310) {
    label = 80;
   } else {
    $152 = $state$addr;
    $153 = HEAP32[$152>>2]|0;
    $cmp313 = ($153|0)==(2);
    if ($cmp313) {
     label = 80;
    }
   }
   if ((label|0) == 80) {
    (_printf(116343,$vararg_buffer60)|0);
   }
   $154 = $state$addr;
   HEAP32[$154>>2] = 1;
   $155 = $x$addr;
   $data319 = ((($155)) + 44|0);
   $156 = HEAP32[$data319>>2]|0;
   HEAP32[$vararg_buffer62>>2] = $156;
   (_printf(44893,$vararg_buffer62)|0);
   break;
  }
  case 8:  {
   $157 = $state$addr;
   $158 = HEAP32[$157>>2]|0;
   $cmp323 = ($158|0)==(1);
   if ($cmp323) {
    label = 84;
   } else {
    $159 = $state$addr;
    $160 = HEAP32[$159>>2]|0;
    $cmp326 = ($160|0)==(2);
    if ($cmp326) {
     label = 84;
    }
   }
   if ((label|0) == 84) {
    (_printf(116343,$vararg_buffer65)|0);
   }
   $161 = $state$addr;
   HEAP32[$161>>2] = 1;
   $162 = $x$addr;
   $data332 = ((($162)) + 44|0);
   $163 = HEAP32[$data332>>2]|0;
   HEAP32[$vararg_buffer67>>2] = $163;
   (_printf(116219,$vararg_buffer67)|0);
   $164 = HEAP32[29734]|0;
   $tobool335 = ($164|0)!=(0);
   if ($tobool335) {
    $english = 0;
    $165 = $conv$addr;
    $cmp337 = ($165|0)==(0);
    if ($cmp337) {
     $166 = $x$addr;
     $data340 = ((($166)) + 44|0);
     $167 = HEAP32[$data340>>2]|0;
     $call343 = (_translate($167)|0);
     $english = $call343;
     $168 = $english;
     $tobool344 = ($168|0)!=(0|0);
     if (!($tobool344)) {
      $169 = $x$addr;
      $data346 = ((($169)) + 44|0);
      $170 = HEAP32[$data346>>2]|0;
      $call349 = (_translate_unknown($170,1,0)|0);
      $english = $call349;
     }
     $171 = $english;
     $tobool351 = ($171|0)!=(0|0);
     if (!($tobool351)) {
      break L35;
     }
     $172 = $english;
     HEAP32[$vararg_buffer70>>2] = $172;
     (_printf(44874,$vararg_buffer70)|0);
     break L35;
    }
    $173 = $conv$addr;
    switch ($173|0) {
    case 0:  {
     _abort();
     // unreachable;
     break;
    }
    case 1:  {
     $174 = $x$addr;
     $data359 = ((($174)) + 44|0);
     $175 = HEAP32[$data359>>2]|0;
     (_strcpy($buffer,$175)|0);
     (_strcat($buffer,76739)|0);
     $call366 = (_translate($buffer)|0);
     $english = $call366;
     break;
    }
    case 2:  {
     $176 = $x$addr;
     $data369 = ((($176)) + 44|0);
     $177 = HEAP32[$data369>>2]|0;
     (_strcpy($buffer,$177)|0);
     (_strcat($buffer,72120)|0);
     $call376 = (_translate($buffer)|0);
     $english = $call376;
     break;
    }
    case 3:  {
     $178 = $x$addr;
     $data379 = ((($178)) + 44|0);
     $179 = HEAP32[$data379>>2]|0;
     (_strcpy($buffer,$179)|0);
     (_strcat($buffer,78345)|0);
     $call386 = (_translate($buffer)|0);
     $english = $call386;
     break;
    }
    case 4:  {
     $180 = $x$addr;
     $data389 = ((($180)) + 44|0);
     $181 = HEAP32[$data389>>2]|0;
     (_strcpy($buffer,$181)|0);
     (_strcat($buffer,75615)|0);
     $call396 = (_translate($buffer)|0);
     $english = $call396;
     break;
    }
    default: {
    }
    }
    $182 = $english;
    $tobool398 = ($182|0)!=(0|0);
    if ($tobool398) {
     $183 = $english;
     HEAP32[$vararg_buffer73>>2] = $183;
     (_printf(44867,$vararg_buffer73)|0);
     break L35;
    }
    $184 = $x$addr;
    $data402 = ((($184)) + 44|0);
    $185 = HEAP32[$data402>>2]|0;
    $call405 = (_translate($185)|0);
    $english = $call405;
    $186 = $english;
    $tobool406 = ($186|0)!=(0|0);
    if (!($tobool406)) {
     $187 = $x$addr;
     $data408 = ((($187)) + 44|0);
     $188 = HEAP32[$data408>>2]|0;
     $call411 = (_translate_unknown($188,1,0)|0);
     $english = $call411;
    }
    $189 = $english;
    $tobool413 = ($189|0)!=(0|0);
    if ($tobool413) {
     $190 = $english;
     HEAP32[$vararg_buffer76>>2] = $190;
     (_printf(44874,$vararg_buffer76)|0);
    }
   }
   break;
  }
  case 9:  {
   $191 = $state$addr;
   $192 = HEAP32[$191>>2]|0;
   $cmp422 = ($192|0)==(1);
   if ($cmp422) {
    label = 105;
   } else {
    $193 = $state$addr;
    $194 = HEAP32[$193>>2]|0;
    $cmp425 = ($194|0)==(2);
    if ($cmp425) {
     label = 105;
    }
   }
   if ((label|0) == 105) {
    (_printf(116343,$vararg_buffer79)|0);
   }
   $195 = $state$addr;
   HEAP32[$195>>2] = 1;
   $196 = $x$addr;
   $data431 = ((($196)) + 44|0);
   $197 = HEAP32[$data431>>2]|0;
   HEAP32[$vararg_buffer81>>2] = $197;
   (_printf(116219,$vararg_buffer81)|0);
   break;
  }
  default: {
  }
  }
 } while(0);
 $198 = $x$addr;
 $eols = ((($198)) + 28|0);
 $199 = HEAP32[$eols>>2]|0;
 HEAP32[29735] = $199;
 STACKTOP = sp;return;
}
function _clear_eols($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $cmp1 = 0, $i = 0, $inc = 0, $state$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $state$addr = $state;
 $0 = HEAP32[29735]|0;
 $cmp = ($0|0)>(0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = HEAP32[29735]|0;
  $cmp1 = ($1|0)<($2|0);
  if (!($cmp1)) {
   break;
  }
  (_printf(116341,$vararg_buffer)|0);
  $3 = $i;
  $inc = (($3) + 1)|0;
  $i = $inc;
 }
 $4 = $state$addr;
 HEAP32[$4>>2] = 0;
 HEAP32[29735] = 0;
 STACKTOP = sp;return;
}
function _print_open($depth) {
 $depth = $depth|0;
 var $0 = 0, $1 = 0, $depth$addr = 0, $div = 0, $rem = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $depth$addr = $depth;
 $0 = $depth$addr;
 $rem = (($0|0) % 4)&-1;
 switch ($rem|0) {
 case 0:  {
  $1 = $depth$addr;
  $div = (($1|0) / 4)&-1;
  HEAP32[$vararg_buffer>>2] = $div;
  (_printf(44903,$vararg_buffer)|0);
  break;
 }
 case 1:  {
  (_printf(116408,$vararg_buffer1)|0);
  break;
 }
 case 2:  {
  (_printf(116410,$vararg_buffer3)|0);
  break;
 }
 case 3:  {
  (_printf(116412,$vararg_buffer5)|0);
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function _print_close($depth) {
 $depth = $depth|0;
 var $0 = 0, $1 = 0, $depth$addr = 0, $div = 0, $rem = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $depth$addr = $depth;
 $0 = $depth$addr;
 $rem = (($0|0) % 4)&-1;
 switch ($rem|0) {
 case 0:  {
  $1 = $depth$addr;
  $div = (($1|0) / 4)&-1;
  HEAP32[$vararg_buffer>>2] = $div;
  (_printf(44899,$vararg_buffer)|0);
  break;
 }
 case 1:  {
  (_printf(116386,$vararg_buffer1)|0);
  break;
 }
 case 2:  {
  (_printf(116388,$vararg_buffer3)|0);
  break;
 }
 case 3:  {
  (_printf(116390,$vararg_buffer5)|0);
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function _expand_bahe_ui($top) {
 $top = $top|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $cmp = 0, $cmp1 = 0, $data = 0, $i = 0, $inc = 0, $n = 0, $top$addr = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $top$addr = $top;
 $0 = $top$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $2 = $top$addr;
 $data = ((($2)) + 44|0);
 $3 = HEAP32[$data>>2]|0;
 $n = $3;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $n;
  $cmp1 = ($4|0)<($5|0);
  if (!($cmp1)) {
   break;
  }
  $6 = $top$addr;
  $7 = $i;
  _expand_bahe_ui_internal($6,$7);
  $8 = $i;
  $inc = (($8) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _expand_bahe_ui_internal($x,$pos) {
 $x = $x|0;
 $pos = $pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add29 = 0, $arrayidx = 0, $arrayidx48 = 0, $arrayidx57 = 0, $arrayidx67 = 0, $arrayidx76 = 0, $bahe = 0, $bahe14 = 0, $bahe40 = 0, $bahe49 = 0, $bahe50 = 0, $bahe8 = 0, $brackets = 0, $c = 0, $call = 0, $call36 = 0, $children = 0, $children39 = 0, $children46 = 0;
 var $children55 = 0, $children65 = 0, $children75 = 0, $cmp = 0, $cmp19 = 0, $cmp3 = 0, $cmp5 = 0, $cmp61 = 0, $cmp81 = 0, $data = 0, $data1 = 0, $data24 = 0, $data27 = 0, $data30 = 0, $data33 = 0, $data37 = 0, $data44 = 0, $data53 = 0, $data63 = 0, $data73 = 0;
 var $data78 = 0, $i = 0, $inc = 0, $inc12 = 0, $inc21 = 0, $inc47 = 0, $inc56 = 0, $inc66 = 0, $inc84 = 0, $j = 0, $mul = 0, $n = 0, $n_b = 0, $n_ui = 0, $nn = 0, $nz = 0, $pos$addr = 0, $sub = 0, $tobool = 0, $tobool10 = 0;
 var $tobool42 = 0, $type = 0, $type26 = 0, $type7 = 0, $ui_next = 0, $ui_next16 = 0, $ui_next18 = 0, $ui_next4 = 0, $ui_next58 = 0, $ui_next60 = 0, $ui_next71 = 0, $ui_next72 = 0, $ui_prev = 0, $ui_start = 0, $x$addr = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $x$addr = $x;
 $pos$addr = $pos;
 $0 = $x$addr;
 $data = ((($0)) + 44|0);
 $children = ((($data)) + 16|0);
 $1 = HEAP32[$children>>2]|0;
 $2 = $pos$addr;
 $arrayidx = (($1) + ($2<<2)|0);
 $3 = HEAP32[$arrayidx>>2]|0;
 $y = $3;
 $4 = $y;
 $type = ((($4)) + 40|0);
 $5 = HEAP32[$type>>2]|0;
 $cmp = ($5|0)==(10);
 $6 = $y;
 if ($cmp) {
  $data1 = ((($6)) + 44|0);
  $7 = HEAP32[$data1>>2]|0;
  $n = $7;
  $i = 0;
  while(1) {
   $8 = $i;
   $9 = $n;
   $cmp3 = ($8|0)<($9|0);
   if (!($cmp3)) {
    break;
   }
   $10 = $y;
   $11 = $i;
   _expand_bahe_ui_internal($10,$11);
   $12 = $i;
   $inc = (($12) + 1)|0;
   $i = $inc;
  }
  STACKTOP = sp;return;
 }
 $bahe = ((($6)) + 12|0);
 $13 = HEAP32[$bahe>>2]|0;
 $tobool = ($13|0)!=(0|0);
 if (!($tobool)) {
  $14 = $y;
  $ui_next = ((($14)) + 16|0);
  $15 = HEAP32[$ui_next>>2]|0;
  $16 = $y;
  $ui_next4 = ((($16)) + 16|0);
  $cmp5 = ($15|0)!=($ui_next4|0);
  if (!($cmp5)) {
   STACKTOP = sp;return;
  }
 }
 $call = (_new_node()|0);
 $nn = $call;
 $17 = $nn;
 $type7 = ((($17)) + 40|0);
 HEAP32[$type7>>2] = 10;
 $18 = $y;
 $bahe8 = ((($18)) + 12|0);
 $19 = HEAP32[$bahe8>>2]|0;
 $z = $19;
 $n_b = 0;
 while(1) {
  $20 = $z;
  $tobool10 = ($20|0)!=(0|0);
  if (!($tobool10)) {
   break;
  }
  $21 = $n_b;
  $inc12 = (($21) + 1)|0;
  $n_b = $inc12;
  $22 = $z;
  $bahe14 = ((($22)) + 12|0);
  $23 = HEAP32[$bahe14>>2]|0;
  $z = $23;
 }
 $n_ui = 0;
 $24 = $y;
 $ui_next16 = ((($24)) + 16|0);
 $25 = HEAP32[$ui_next16>>2]|0;
 $c = $25;
 while(1) {
  $26 = $c;
  $27 = $y;
  $ui_next18 = ((($27)) + 16|0);
  $cmp19 = ($26|0)!=($ui_next18|0);
  if (!($cmp19)) {
   break;
  }
  $28 = $n_ui;
  $inc21 = (($28) + 1)|0;
  $n_ui = $inc21;
  $29 = $c;
  $30 = HEAP32[$29>>2]|0;
  $c = $30;
 }
 $31 = $nn;
 $data24 = ((($31)) + 44|0);
 $type26 = ((($data24)) + 12|0);
 HEAP32[$type26>>2] = 1;
 $32 = $nn;
 $data27 = ((($32)) + 44|0);
 $brackets = ((($data27)) + 8|0);
 HEAP32[$brackets>>2] = 0;
 $33 = $n_b;
 $add = (($33) + 1)|0;
 $34 = $n_ui;
 $add29 = (($add) + ($34))|0;
 $35 = $nn;
 $data30 = ((($35)) + 44|0);
 HEAP32[$data30>>2] = $add29;
 $36 = $nn;
 $data33 = ((($36)) + 44|0);
 $37 = HEAP32[$data33>>2]|0;
 $mul = $37<<2;
 $call36 = (_Malloc($mul)|0);
 $38 = $nn;
 $data37 = ((($38)) + 44|0);
 $children39 = ((($data37)) + 16|0);
 HEAP32[$children39>>2] = $call36;
 $j = 0;
 $39 = $y;
 $bahe40 = ((($39)) + 12|0);
 $40 = HEAP32[$bahe40>>2]|0;
 $z = $40;
 while(1) {
  $41 = $z;
  $tobool42 = ($41|0)!=(0|0);
  if (!($tobool42)) {
   break;
  }
  $42 = $z;
  $43 = $nn;
  $data44 = ((($43)) + 44|0);
  $children46 = ((($data44)) + 16|0);
  $44 = HEAP32[$children46>>2]|0;
  $45 = $n_b;
  $46 = $j;
  $inc47 = (($46) + 1)|0;
  $j = $inc47;
  $sub = (($45) - ($inc47))|0;
  $arrayidx48 = (($44) + ($sub<<2)|0);
  HEAP32[$arrayidx48>>2] = $42;
  $47 = $z;
  $bahe49 = ((($47)) + 12|0);
  $48 = HEAP32[$bahe49>>2]|0;
  $nz = $48;
  $49 = $z;
  $bahe50 = ((($49)) + 12|0);
  HEAP32[$bahe50>>2] = 0;
  $50 = $nz;
  $z = $50;
 }
 $51 = $y;
 $52 = $nn;
 $data53 = ((($52)) + 44|0);
 $children55 = ((($data53)) + 16|0);
 $53 = HEAP32[$children55>>2]|0;
 $54 = $j;
 $inc56 = (($54) + 1)|0;
 $j = $inc56;
 $arrayidx57 = (($53) + ($54<<2)|0);
 HEAP32[$arrayidx57>>2] = $51;
 $55 = $j;
 $ui_start = $55;
 $56 = $y;
 $ui_next58 = ((($56)) + 16|0);
 $57 = HEAP32[$ui_next58>>2]|0;
 $c = $57;
 while(1) {
  $58 = $c;
  $59 = $y;
  $ui_next60 = ((($59)) + 16|0);
  $cmp61 = ($58|0)!=($ui_next60|0);
  if (!($cmp61)) {
   break;
  }
  $60 = $c;
  $61 = $nn;
  $data63 = ((($61)) + 44|0);
  $children65 = ((($data63)) + 16|0);
  $62 = HEAP32[$children65>>2]|0;
  $63 = $j;
  $inc66 = (($63) + 1)|0;
  $j = $inc66;
  $arrayidx67 = (($62) + ($63<<2)|0);
  HEAP32[$arrayidx67>>2] = $60;
  $64 = $c;
  $65 = HEAP32[$64>>2]|0;
  $c = $65;
 }
 $66 = $y;
 $ui_next71 = ((($66)) + 16|0);
 $67 = $y;
 $ui_prev = ((($67)) + 20|0);
 HEAP32[$ui_prev>>2] = $ui_next71;
 $68 = $y;
 $ui_next72 = ((($68)) + 16|0);
 HEAP32[$ui_next72>>2] = $ui_next71;
 $69 = $nn;
 $70 = $x$addr;
 $data73 = ((($70)) + 44|0);
 $children75 = ((($data73)) + 16|0);
 $71 = HEAP32[$children75>>2]|0;
 $72 = $pos$addr;
 $arrayidx76 = (($71) + ($72<<2)|0);
 HEAP32[$arrayidx76>>2] = $69;
 $73 = $ui_start;
 $j = $73;
 while(1) {
  $74 = $j;
  $75 = $nn;
  $data78 = ((($75)) + 44|0);
  $76 = HEAP32[$data78>>2]|0;
  $cmp81 = ($74|0)<($76|0);
  if (!($cmp81)) {
   break;
  }
  $77 = $nn;
  $78 = $j;
  _expand_bahe_ui_internal($77,$78);
  $79 = $j;
  $inc84 = (($79) + 1)|0;
  $j = $inc84;
 }
 STACKTOP = sp;return;
}
function _prop_conversion($x,$create) {
 $x = $x|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $call = 0, $create$addr = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $create$addr = $create;
 $0 = $x$addr;
 $1 = $create$addr;
 $call = (_fetch_conversion($0,$1,0)|0);
 STACKTOP = sp;return ($call|0);
}
function _fetch_conversion($x,$create,$type) {
 $x = $x|0;
 $create = $create|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $cond = 0, $create$addr = 0, $data = 0, $retval = 0, $tobool = 0, $tobool2 = 0, $type$addr = 0, $x$addr = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $create$addr = $create;
 $type$addr = $type;
 $0 = $create$addr;
 $tobool = ($0|0)!=(0);
 $1 = $x$addr;
 $2 = $type$addr;
 if ($tobool) {
  $call = (_obtain_extension($1,$2)|0);
  $cond = $call;
 } else {
  $call1 = (_lookup_extension($1,$2)|0);
  $cond = $call1;
 }
 $y = $cond;
 $3 = $y;
 $tobool2 = ($3|0)!=(0|0);
 if ($tobool2) {
  $4 = $y;
  $data = ((($4)) + 8|0);
  $retval = $data;
  $5 = $retval;
  STACKTOP = sp;return ($5|0);
 } else {
  $retval = 0;
  $5 = $retval;
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function _obtain_extension($x,$type) {
 $x = $x|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $ext = 0, $ext3 = 0, $tobool = 0, $type$addr = 0, $type2 = 0, $x$addr = 0, $y = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $type$addr = $type;
 $0 = $x$addr;
 $1 = $type$addr;
 $call = (_lookup_extension($0,$1)|0);
 $y = $call;
 $2 = $y;
 $tobool = ($2|0)!=(0|0);
 if ($tobool) {
  $10 = $y;
  STACKTOP = sp;return ($10|0);
 }
 $call1 = (_Malloc(64)|0);
 $y = $call1;
 $3 = $type$addr;
 $4 = $y;
 $type2 = ((($4)) + 4|0);
 HEAP32[$type2>>2] = $3;
 $5 = $x$addr;
 $ext = ((($5)) + 24|0);
 $6 = HEAP32[$ext>>2]|0;
 $7 = $y;
 HEAP32[$7>>2] = $6;
 $8 = $y;
 $9 = $x$addr;
 $ext3 = ((($9)) + 24|0);
 HEAP32[$ext3>>2] = $8;
 $10 = $y;
 STACKTOP = sp;return ($10|0);
}
function _lookup_extension($x,$type) {
 $x = $x|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $cmp = 0, $ext = 0, $tobool = 0, $type$addr = 0, $type1 = 0, $x$addr = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $type$addr = $type;
 $0 = $x$addr;
 $ext = ((($0)) + 24|0);
 $1 = HEAP32[$ext>>2]|0;
 $y = $1;
 while(1) {
  $2 = $y;
  $tobool = ($2|0)!=(0|0);
  if ($tobool) {
   $3 = $y;
   $type1 = ((($3)) + 4|0);
   $4 = HEAP32[$type1>>2]|0;
   $5 = $type$addr;
   $cmp = ($4|0)!=($5|0);
   $8 = $cmp;
  } else {
   $8 = 0;
  }
  $6 = $y;
  if (!($8)) {
   break;
  }
  $7 = HEAP32[$6>>2]|0;
  $y = $7;
 }
 STACKTOP = sp;return ($6|0);
}
function _prop_bai_conversion($x,$create) {
 $x = $x|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $call = 0, $create$addr = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $create$addr = $create;
 $0 = $x$addr;
 $1 = $create$addr;
 $call = (_fetch_conversion($0,$1,1)|0);
 STACKTOP = sp;return ($call|0);
}
function _prop_dont_gloss($x,$create) {
 $x = $x|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $call = 0, $create$addr = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $create$addr = $create;
 $0 = $x$addr;
 $1 = $create$addr;
 $call = (_fetch_conversion($0,$1,2)|0);
 STACKTOP = sp;return ($call|0);
}
function _prop_term_vectors($x,$create) {
 $x = $x|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $call = 0, $create$addr = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $create$addr = $create;
 $0 = $x$addr;
 $1 = $create$addr;
 $call = (_fetch_conversion($0,$1,3)|0);
 STACKTOP = sp;return ($call|0);
}
function _prop_term_vector($x,$create) {
 $x = $x|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $call = 0, $create$addr = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $create$addr = $create;
 $0 = $x$addr;
 $1 = $create$addr;
 $call = (_fetch_conversion($0,$1,4)|0);
 STACKTOP = sp;return ($call|0);
}
function _prop_term_tags($x,$create) {
 $x = $x|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $call = 0, $create$addr = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $create$addr = $create;
 $0 = $x$addr;
 $1 = $create$addr;
 $call = (_fetch_conversion($0,$1,5)|0);
 STACKTOP = sp;return ($call|0);
}
function _prop_glosstype($x,$create) {
 $x = $x|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call2 = 0, $create$addr = 0, $is_tertau = 0, $or$cond = 0, $result = 0, $tobool = 0, $tobool1 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $create$addr = $create;
 $0 = $x$addr;
 $call = (_fetch_conversion($0,0,6)|0);
 $result = $call;
 $1 = $result;
 $tobool = ($1|0)==(0|0);
 $2 = $create$addr;
 $tobool1 = ($2|0)!=(0);
 $or$cond = $tobool & $tobool1;
 if (!($or$cond)) {
  $5 = $result;
  STACKTOP = sp;return ($5|0);
 }
 $3 = $x$addr;
 $call2 = (_fetch_conversion($3,1,6)|0);
 $result = $call2;
 $4 = $result;
 $is_tertau = ((($4)) + 4|0);
 HEAP32[$is_tertau>>2] = 0;
 $5 = $result;
 STACKTOP = sp;return ($5|0);
}
function _prop_done_tu1($x,$create) {
 $x = $x|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $call = 0, $create$addr = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $create$addr = $create;
 $0 = $x$addr;
 $1 = $create$addr;
 $call = (_fetch_conversion($0,$1,7)|0);
 STACKTOP = sp;return ($call|0);
}
function _prop_done_s3($x,$create) {
 $x = $x|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $call = 0, $create$addr = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $create$addr = $create;
 $0 = $x$addr;
 $1 = $create$addr;
 $call = (_fetch_conversion($0,$1,8)|0);
 STACKTOP = sp;return ($call|0);
}
function _prop_tense_ctx($x,$create) {
 $x = $x|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $call = 0, $create$addr = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $create$addr = $create;
 $0 = $x$addr;
 $1 = $create$addr;
 $call = (_fetch_conversion($0,$1,9)|0);
 STACKTOP = sp;return ($call|0);
}
function _prop_neg_indicator($x,$create) {
 $x = $x|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $call = 0, $create$addr = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $create$addr = $create;
 $0 = $x$addr;
 $1 = $create$addr;
 $call = (_fetch_conversion($0,$1,10)|0);
 STACKTOP = sp;return ($call|0);
}
function _prop_cai_indicator($x,$create) {
 $x = $x|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $call = 0, $create$addr = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $create$addr = $create;
 $0 = $x$addr;
 $1 = $create$addr;
 $call = (_fetch_conversion($0,$1,11)|0);
 STACKTOP = sp;return ($call|0);
}
function _prop_connective($x,$create) {
 $x = $x|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $call = 0, $create$addr = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $create$addr = $create;
 $0 = $x$addr;
 $1 = $create$addr;
 $call = (_fetch_conversion($0,$1,12)|0);
 STACKTOP = sp;return ($call|0);
}
function _prop_antecedent($x,$create) {
 $x = $x|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $call = 0, $create$addr = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $create$addr = $create;
 $0 = $x$addr;
 $1 = $create$addr;
 $call = (_fetch_conversion($0,$1,13)|0);
 STACKTOP = sp;return ($call|0);
}
function _prop_require_brac($x,$create) {
 $x = $x|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $call = 0, $create$addr = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $create$addr = $create;
 $0 = $x$addr;
 $1 = $create$addr;
 $call = (_fetch_conversion($0,$1,14)|0);
 STACKTOP = sp;return ($call|0);
}
function _prop_rel_clause_link($x,$create) {
 $x = $x|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $call = 0, $create$addr = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $create$addr = $create;
 $0 = $x$addr;
 $1 = $create$addr;
 $call = (_fetch_conversion($0,$1,15)|0);
 STACKTOP = sp;return ($call|0);
}
function _prop_contains_keha($x,$create) {
 $x = $x|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $call = 0, $create$addr = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $create$addr = $create;
 $0 = $x$addr;
 $1 = $create$addr;
 $call = (_fetch_conversion($0,$1,16)|0);
 STACKTOP = sp;return ($call|0);
}
function _prop_elidable($x,$create) {
 $x = $x|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $call = 0, $create$addr = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $create$addr = $create;
 $0 = $x$addr;
 $1 = $create$addr;
 $call = (_fetch_conversion($0,$1,17)|0);
 STACKTOP = sp;return ($call|0);
}
function _do_conversions($top) {
 $top = $top|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $top$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $top$addr = $top;
 $0 = $top$addr;
 _conv_tag_se_bai($0);
 $1 = $top$addr;
 _conv_mark_tu2s($1);
 $2 = $top$addr;
 _conv_mark_gloss_types($2,0);
 $3 = $top$addr;
 _selbri_scan($3,0);
 STACKTOP = sp;return;
}
function _conv_tag_se_bai($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx20 = 0, $arrayidx7 = 0, $c = 0, $c1 = 0, $c2 = 0, $call = 0, $call11 = 0;
 var $call15 = 0, $call8 = 0, $call9 = 0, $children = 0, $children13 = 0, $children19 = 0, $children6 = 0, $cmp = 0, $cmp17 = 0, $cmp4 = 0, $conv = 0, $data = 0, $data3 = 0, $edg = 0, $ext = 0, $i = 0, $inc = 0, $nc = 0, $nt = 0, $type = 0;
 var $type2 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $x$addr = $x;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $2 = $x$addr;
 $data = ((($2)) + 44|0);
 $nt = $data;
 $3 = $nt;
 $type2 = ((($3)) + 12|0);
 $4 = HEAP32[$type2>>2]|0;
 switch ($4|0) {
 case 103:  {
  $5 = $nt;
  $children = ((($5)) + 16|0);
  $6 = HEAP32[$children>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $call = (_strip_attitudinal($7)|0);
  $c1 = $call;
  $8 = $c1;
  $data3 = ((($8)) + 44|0);
  $9 = HEAP32[$data3>>2]|0;
  $cmp4 = ($9|0)==(353);
  if (!($cmp4)) {
   ___assert_fail((45015|0),(44928|0),73,(45043|0));
   // unreachable;
  }
  $10 = $nt;
  $children6 = ((($10)) + 16|0);
  $11 = HEAP32[$children6>>2]|0;
  $arrayidx7 = ((($11)) + 4|0);
  $12 = HEAP32[$arrayidx7>>2]|0;
  $c2 = $12;
  $13 = $c1;
  $call8 = (_lookup_converted_place($13)|0);
  $conv = $call8;
  $14 = $c2;
  $call9 = (_prop_bai_conversion($14,1)|0);
  $ext = $call9;
  $15 = $conv;
  $16 = $ext;
  HEAP32[$16>>2] = $15;
  $17 = $c1;
  $call11 = (_prop_dont_gloss($17,1)|0);
  $edg = $call11;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $18 = $nt;
  $children13 = ((($18)) + 16|0);
  $19 = HEAP32[$children13>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $c1 = $20;
  $21 = $c1;
  $call15 = (_prop_bai_conversion($21,1)|0);
  $ext = $call15;
  $22 = $ext;
  HEAP32[$22>>2] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $23 = $nt;
  $24 = HEAP32[$23>>2]|0;
  $nc = $24;
  $i = 0;
  while(1) {
   $25 = $i;
   $26 = $nc;
   $cmp17 = ($25|0)<($26|0);
   if (!($cmp17)) {
    break;
   }
   $27 = $nt;
   $children19 = ((($27)) + 16|0);
   $28 = HEAP32[$children19>>2]|0;
   $29 = $i;
   $arrayidx20 = (($28) + ($29<<2)|0);
   $30 = HEAP32[$arrayidx20>>2]|0;
   $c = $30;
   $31 = $c;
   _conv_tag_se_bai($31);
   $32 = $i;
   $inc = (($32) + 1)|0;
   $i = $inc;
  }
  STACKTOP = sp;return;
 }
 }
}
function _conv_mark_tu2s($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $c = 0, $children = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp17 = 0, $cmp20 = 0;
 var $cmp3 = 0, $cmp7 = 0, $cmp9 = 0, $data = 0, $data14 = 0, $data8 = 0, $i = 0, $inc = 0, $nc = 0, $nt = 0, $parent = 0, $parent11 = 0, $parent18 = 0, $type = 0, $type12 = 0, $type16 = 0, $type19 = 0, $type2 = 0, $type6 = 0, $x$addr = 0;
 var $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $0 = $x$addr;
 $data = ((($0)) + 44|0);
 $nt = $data;
 $1 = $x$addr;
 $type = ((($1)) + 40|0);
 $2 = HEAP32[$type>>2]|0;
 $cmp = ($2|0)==(10);
 if ($cmp) {
  $3 = $nt;
  $4 = HEAP32[$3>>2]|0;
  $nc = $4;
  $i = 0;
  while(1) {
   $5 = $i;
   $6 = $nc;
   $cmp1 = ($5|0)<($6|0);
   if (!($cmp1)) {
    break;
   }
   $7 = $nt;
   $children = ((($7)) + 16|0);
   $8 = HEAP32[$children>>2]|0;
   $9 = $i;
   $arrayidx = (($8) + ($9<<2)|0);
   $10 = HEAP32[$arrayidx>>2]|0;
   $c = $10;
   $11 = $c;
   _conv_mark_tu2s($11);
   $12 = $i;
   $inc = (($12) + 1)|0;
   $i = $inc;
  }
  STACKTOP = sp;return;
 }
 $13 = $x$addr;
 $type2 = ((($13)) + 40|0);
 $14 = HEAP32[$type2>>2]|0;
 $cmp3 = ($14|0)==(8);
 $15 = $x$addr;
 if ($cmp3) {
  $parent = ((($15)) + 8|0);
  $16 = HEAP32[$parent>>2]|0;
  $17 = $x$addr;
  _compute_tu2_conv($16,$17);
  STACKTOP = sp;return;
 }
 $type6 = ((($15)) + 40|0);
 $18 = HEAP32[$type6>>2]|0;
 $cmp7 = ($18|0)==(2);
 if (!($cmp7)) {
  STACKTOP = sp;return;
 }
 $19 = $x$addr;
 $data8 = ((($19)) + 44|0);
 $20 = HEAP32[$data8>>2]|0;
 $cmp9 = ($20|0)==(340);
 if (!($cmp9)) {
  STACKTOP = sp;return;
 }
 $21 = $x$addr;
 $parent11 = ((($21)) + 8|0);
 $22 = HEAP32[$parent11>>2]|0;
 $y = $22;
 $23 = $y;
 $type12 = ((($23)) + 40|0);
 $24 = HEAP32[$type12>>2]|0;
 $cmp13 = ($24|0)==(10);
 if (!($cmp13)) {
  ___assert_fail((44907|0),(44928|0),246,(44941|0));
  // unreachable;
 }
 while(1) {
  $25 = $y;
  $data14 = ((($25)) + 44|0);
  $type16 = ((($data14)) + 12|0);
  $26 = HEAP32[$type16>>2]|0;
  $cmp17 = ($26|0)!=(136);
  $27 = $y;
  if (!($cmp17)) {
   break;
  }
  $parent18 = ((($27)) + 8|0);
  $28 = HEAP32[$parent18>>2]|0;
  $y = $28;
  $29 = $y;
  $type19 = ((($29)) + 40|0);
  $30 = HEAP32[$type19>>2]|0;
  $cmp20 = ($30|0)==(10);
  if (!($cmp20)) {
   label = 14;
   break;
  }
 }
 if ((label|0) == 14) {
  ___assert_fail((44907|0),(44928|0),249,(44941|0));
  // unreachable;
 }
 $31 = $x$addr;
 _compute_tu2_conv($27,$31);
 STACKTOP = sp;return;
}
function _conv_mark_gloss_types($x,$g) {
 $x = $x|0;
 $g = $g|0;
 var $$old = 0, $$sink = 0, $$sink1 = 0, $$sink3 = 0, $$sink4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $arrayidx = 0, $c = 0, $call = 0, $call29 = 0, $call5 = 0, $children = 0, $cjai = 0, $cmp = 0, $cmp14 = 0, $cmp17 = 0, $cmp20 = 0, $cmp23 = 0, $cmp25 = 0, $cmp27 = 0, $cmp27$old = 0, $cmp3 = 0, $cmp30 = 0, $cmp32 = 0;
 var $cmp6 = 0, $cmp7 = 0, $data = 0, $data24 = 0, $g$addr = 0, $gt = 0, $i = 0, $inc = 0, $nc = 0, $ng = 0, $nt = 0, $or$cond = 0, $or$cond2 = 0, $or$cond5 = 0, $type = 0, $type1 = 0, $type16 = 0, $type19 = 0, $type22 = 0, $x$addr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $x$addr = $x;
 $g$addr = $g;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 $2 = $x$addr;
 if (!($cmp)) {
  $type16 = ((($2)) + 40|0);
  $24 = HEAP32[$type16>>2]|0;
  $cmp17 = ($24|0)==(8);
  if ($cmp17) {
   label = 18;
  } else {
   $25 = $x$addr;
   $type19 = ((($25)) + 40|0);
   $26 = HEAP32[$type19>>2]|0;
   $cmp20 = ($26|0)==(6);
   if ($cmp20) {
    label = 18;
   } else {
    $27 = $x$addr;
    $type22 = ((($27)) + 40|0);
    $28 = HEAP32[$type22>>2]|0;
    $cmp23 = ($28|0)==(2);
    if (!($cmp23)) {
     STACKTOP = sp;return;
    }
    $29 = $x$addr;
    $data24 = ((($29)) + 44|0);
    $30 = HEAP32[$data24>>2]|0;
    $cmp25 = ($30|0)==(340);
    $31 = $g$addr;
    $cmp27 = ($31|0)!=(0);
    $or$cond5 = $cmp25 & $cmp27;
    if (!($or$cond5)) {
     STACKTOP = sp;return;
    }
   }
  }
  if ((label|0) == 18) {
   $$old = $g$addr;
   $cmp27$old = ($$old|0)!=(0);
   if (!($cmp27$old)) {
    STACKTOP = sp;return;
   }
  }
  $32 = $x$addr;
  $call29 = (_prop_glosstype($32,1)|0);
  $gt = $call29;
  $33 = $g$addr;
  $cmp30 = ($33|0)==(1);
  $34 = $g$addr;
  $cmp32 = ($34|0)==(3);
  $or$cond2 = $cmp30 | $cmp32;
  $35 = $gt;
  $36 = $gt;
  $$sink4 = $or$cond2 ? $36 : $35;
  $$sink3 = $or$cond2 ? 1 : 0;
  HEAP32[$$sink4>>2] = $$sink3;
  STACKTOP = sp;return;
 }
 $data = ((($2)) + 44|0);
 $nt = $data;
 $3 = $nt;
 $4 = HEAP32[$3>>2]|0;
 $nc = $4;
 $5 = $nt;
 $type1 = ((($5)) + 12|0);
 $6 = HEAP32[$type1>>2]|0;
 switch ($6|0) {
 case 59: case 57:  {
  $ng = 1;
  break;
 }
 case 36: case 35:  {
  $7 = $x$addr;
  $call = (_child_ref($7,0)|0);
  $cjai = $call;
  $8 = $g$addr;
  $cmp3 = ($8|0)!=(0);
  if ($cmp3) {
   $9 = $cjai;
   $call5 = (_prop_glosstype($9,1)|0);
   $gt = $call5;
   $10 = $g$addr;
   $cmp6 = ($10|0)==(1);
   $11 = $g$addr;
   $cmp7 = ($11|0)==(3);
   $or$cond = $cmp6 | $cmp7;
   $12 = $gt;
   $13 = $gt;
   $$sink1 = $or$cond ? $13 : $12;
   $$sink = $or$cond ? 1 : 0;
   HEAP32[$$sink1>>2] = $$sink;
  }
  $ng = 3;
  break;
 }
 case 119:  {
  $ng = 2;
  break;
 }
 case 65: case 81: case 14:  {
  $ng = 0;
  break;
 }
 case 10:  {
  $ng = 4;
  break;
 }
 default: {
  $14 = $g$addr;
  $ng = $14;
 }
 }
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = $nc;
  $cmp14 = ($15|0)<($16|0);
  if (!($cmp14)) {
   break;
  }
  $17 = $nt;
  $children = ((($17)) + 16|0);
  $18 = HEAP32[$children>>2]|0;
  $19 = $i;
  $arrayidx = (($18) + ($19<<2)|0);
  $20 = HEAP32[$arrayidx>>2]|0;
  $c = $20;
  $21 = $c;
  $22 = $ng;
  _conv_mark_gloss_types($21,$22);
  $23 = $i;
  $inc = (($23) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _selbri_scan($x,$is_tertau) {
 $x = $x|0;
 $is_tertau = $is_tertau|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $arrayidx = 0, $c = 0, $c47 = 0, $call = 0, $call104 = 0, $call106 = 0, $call107 = 0, $call11 = 0, $call12 = 0, $call17 = 0, $call19 = 0, $call23 = 0, $call24 = 0, $call29 = 0, $call33 = 0, $call39 = 0;
 var $call40 = 0, $call45 = 0, $call48 = 0, $call54 = 0, $call63 = 0, $call68 = 0, $call73 = 0, $call77 = 0, $call78 = 0, $call80 = 0, $call83 = 0, $call87 = 0, $call88 = 0, $call90 = 0, $call99 = 0, $cc = 0, $cc72 = 0, $cc75 = 0, $children = 0, $cjai = 0;
 var $cks3 = 0, $cmp = 0, $cmp10 = 0, $cmp113 = 0, $cmp50 = 0, $cmp52 = 0, $cmp57 = 0, $cmp65 = 0, $cmp98 = 0, $cs3 = 0, $cs3103 = 0, $cs4 = 0, $cs4102 = 0, $cs5 = 0, $cs522 = 0, $cs6 = 0, $cs627 = 0, $ctu = 0, $ctu1 = 0, $ctu2 = 0;
 var $data = 0, $data1 = 0, $data59 = 0, $gt = 0, $gt67 = 0, $gt76 = 0, $gt82 = 0, $i = 0, $inc = 0, $is_tertau$addr = 0, $is_tertau55 = 0, $is_tertau69 = 0, $is_tertau79 = 0, $is_tertau89 = 0, $nc = 0, $nns = 0, $nt = 0, $nu = 0, $tobool = 0, $tobool100 = 0;
 var $tobool109 = 0, $tobool13 = 0, $tobool15 = 0, $tobool25 = 0, $tobool30 = 0, $tobool35 = 0, $tobool42 = 0, $tobool85 = 0, $tu = 0, $type = 0, $type49 = 0, $type5 = 0, $type51 = 0, $type56 = 0, $type61 = 0, $type64 = 0, $x$addr = 0, $xds3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $x$addr = $x;
 $is_tertau$addr = $is_tertau;
 $0 = $x$addr;
 $data = ((($0)) + 44|0);
 $nt = $data;
 $1 = $nt;
 $2 = HEAP32[$1>>2]|0;
 $nc = $2;
 $3 = $x$addr;
 $type = ((($3)) + 40|0);
 $4 = HEAP32[$type>>2]|0;
 $cmp = ($4|0)==(10);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $5 = $x$addr;
 $data1 = ((($5)) + 44|0);
 $nt = $data1;
 $6 = $nt;
 $7 = HEAP32[$6>>2]|0;
 $nc = $7;
 $8 = $is_tertau$addr;
 $tobool = ($8|0)!=(0);
 $9 = $nt;
 $type5 = ((($9)) + 12|0);
 $10 = HEAP32[$type5>>2]|0;
 L4: do {
  if ($tobool) {
   switch ($10|0) {
   case 136:  {
    $40 = $x$addr;
    $call48 = (_child_ref($40,0)|0);
    $c47 = $call48;
    $41 = $c47;
    $type49 = ((($41)) + 40|0);
    $42 = HEAP32[$type49>>2]|0;
    $cmp50 = ($42|0)==(8);
    if (!($cmp50)) {
     $43 = $c47;
     $type51 = ((($43)) + 40|0);
     $44 = HEAP32[$type51>>2]|0;
     $cmp52 = ($44|0)==(6);
     if (!($cmp52)) {
      $47 = $c47;
      $type56 = ((($47)) + 40|0);
      $48 = HEAP32[$type56>>2]|0;
      $cmp57 = ($48|0)==(10);
      if (!($cmp57)) {
       break L4;
      }
      $49 = $c47;
      $data59 = ((($49)) + 44|0);
      $type61 = ((($data59)) + 12|0);
      $50 = HEAP32[$type61>>2]|0;
      switch ($50|0) {
      case 1:  {
       $51 = $c47;
       $call63 = (_strip_attitudinal($51)|0);
       $cc = $call63;
       $52 = $cc;
       $type64 = ((($52)) + 40|0);
       $53 = HEAP32[$type64>>2]|0;
       $cmp65 = ($53|0)==(8);
       if (!($cmp65)) {
        break L4;
       }
       $54 = $cc;
       $call68 = (_prop_glosstype($54,1)|0);
       $gt67 = $call68;
       $55 = $gt67;
       $is_tertau69 = ((($55)) + 4|0);
       HEAP32[$is_tertau69>>2] = 1;
       break L4;
       break;
      }
      case 68: case 36: case 104:  {
       $56 = $c47;
       $call73 = (_find_nth_child($56,1,136)|0);
       $cc72 = $call73;
       $57 = $cc72;
       _selbri_scan($57,1);
       break L4;
       break;
      }
      case 35:  {
       $58 = $c47;
       $call77 = (_child_ref($58,0)|0);
       $cjai = $call77;
       $59 = $cjai;
       $call78 = (_prop_glosstype($59,1)|0);
       $gt76 = $call78;
       $60 = $gt76;
       $is_tertau79 = ((($60)) + 4|0);
       HEAP32[$is_tertau79>>2] = 1;
       $61 = $c47;
       $call80 = (_find_nth_child($61,1,136)|0);
       $cc75 = $call80;
       $62 = $cc75;
       _selbri_scan($62,1);
       break L4;
       break;
      }
      case 0:  {
       $63 = $c47;
       $call83 = (_child_ref($63,0)|0);
       $nns = $call83;
       while(1) {
        $64 = $nns;
        $tobool85 = ($64|0)!=(0|0);
        if (!($tobool85)) {
         break L4;
        }
        $65 = $nns;
        $call87 = (_find_nth_cmavo_child($65,1,340)|0);
        $nu = $call87;
        $66 = $nu;
        $call88 = (_prop_glosstype($66,1)|0);
        $gt82 = $call88;
        $67 = $gt82;
        $is_tertau89 = ((($67)) + 4|0);
        HEAP32[$is_tertau89>>2] = 1;
        $68 = $nns;
        $call90 = (_find_nth_child($68,1,76)|0);
        $nns = $call90;
       }
       break;
      }
      default: {
       break L4;
      }
      }
     }
    }
    $45 = $c47;
    $call54 = (_prop_glosstype($45,1)|0);
    $gt = $call54;
    $46 = $gt;
    $is_tertau55 = ((($46)) + 4|0);
    HEAP32[$is_tertau55>>2] = 1;
    break L4;
    break;
   }
   case 135:  {
    $38 = $x$addr;
    $call45 = (_find_nth_child($38,1,136)|0);
    $ctu2 = $call45;
    $39 = $ctu2;
    _selbri_scan($39,1);
    break L4;
    break;
   }
   case 134:  {
    $33 = $x$addr;
    $ctu = $33;
    while(1) {
     $34 = $ctu;
     $call39 = (_find_nth_child($34,1,135)|0);
     $ctu1 = $call39;
     $35 = $ctu1;
     _selbri_scan($35,1);
     $36 = $ctu;
     $call40 = (_find_nth_child($36,1,134)|0);
     $ctu = $call40;
     $37 = $ctu;
     $tobool42 = ($37|0)!=(0|0);
     if (!($tobool42)) {
      break;
     }
    }
    break;
   }
   case 101:  {
    $27 = $x$addr;
    $cs627 = $27;
    while(1) {
     $28 = $cs627;
     $call29 = (_find_nth_child($28,1,134)|0);
     $tu = $call29;
     $29 = $tu;
     $tobool30 = ($29|0)!=(0|0);
     if ($tobool30) {
      $30 = $tu;
      _selbri_scan($30,1);
     }
     $31 = $cs627;
     $call33 = (_find_nth_child($31,1,101)|0);
     $cs627 = $call33;
     $32 = $cs627;
     $tobool35 = ($32|0)!=(0|0);
     if (!($tobool35)) {
      break;
     }
    }
    break;
   }
   case 99:  {
    $11 = $x$addr;
    $cs4 = $11;
    while(1) {
     $12 = $cs4;
     $call = (_nch($12)|0);
     $cmp10 = ($call|0)>(1);
     $13 = $cs4;
     $call11 = (_find_nth_child($13,1,100)|0);
     $cs5 = $call11;
     if (!($cmp10)) {
      break;
     }
     $14 = $cs4;
     $call12 = (_find_nth_child($14,1,50)|0);
     $cks3 = $call12;
     $15 = $cs5;
     $tobool13 = ($15|0)!=(0|0);
     if ($tobool13) {
      $16 = $cs5;
      _selbri_scan($16,1);
     }
     $17 = $cks3;
     $tobool15 = ($17|0)!=(0|0);
     if ($tobool15) {
      $18 = $cks3;
      $call17 = (_find_nth_child($18,1,98)|0);
      $cs3 = $call17;
      $19 = $cs3;
      _selbri_scan($19,0);
     }
     $20 = $cs4;
     $call19 = (_find_nth_child($20,1,99)|0);
     $cs4 = $call19;
    }
    $21 = $cs5;
    _selbri_scan($21,1);
    break L4;
    break;
   }
   case 100:  {
    $22 = $x$addr;
    $cs522 = $22;
    while(1) {
     $23 = $cs522;
     $call23 = (_find_nth_child($23,1,101)|0);
     $cs6 = $call23;
     $24 = $cs6;
     _selbri_scan($24,1);
     $25 = $cs522;
     $call24 = (_find_nth_child($25,1,100)|0);
     $cs522 = $call24;
     $26 = $cs522;
     $tobool25 = ($26|0)!=(0|0);
     if (!($tobool25)) {
      break;
     }
    }
    break;
   }
   default: {
    break L4;
   }
   }
  } else {
   $cmp98 = ($10|0)==(98);
   if ($cmp98) {
    $69 = $x$addr;
    $call99 = (_prop_done_s3($69,0)|0);
    $tobool100 = ($call99|0)!=(0|0);
    if (!($tobool100)) {
     $70 = $x$addr;
     $cs3103 = $70;
     $71 = $cs3103;
     $call104 = (_find_nth_child($71,1,99)|0);
     $cs4102 = $call104;
     while(1) {
      $72 = $cs3103;
      $call106 = (_prop_done_s3($72,1)|0);
      $xds3 = $call106;
      $73 = $cs3103;
      $call107 = (_find_nth_child($73,1,98)|0);
      $cs3103 = $call107;
      $74 = $cs3103;
      $tobool109 = ($74|0)!=(0|0);
      if (!($tobool109)) {
       break;
      }
     }
     $75 = $cs4102;
     _selbri_scan($75,1);
    }
   }
  }
 } while(0);
 $i = 0;
 while(1) {
  $76 = $i;
  $77 = $nc;
  $cmp113 = ($76|0)<($77|0);
  if (!($cmp113)) {
   break;
  }
  $78 = $nt;
  $children = ((($78)) + 16|0);
  $79 = HEAP32[$children>>2]|0;
  $80 = $i;
  $arrayidx = (($79) + ($80<<2)|0);
  $81 = HEAP32[$arrayidx>>2]|0;
  $c = $81;
  $82 = $c;
  _selbri_scan($82,0);
  $83 = $i;
  $inc = (($83) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _compute_tu2_conv($tu2,$apply_to) {
 $tu2 = $tu2|0;
 $apply_to = $apply_to|0;
 var $$sink = 0, $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $apply_to$addr = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx15 = 0, $arrayidx31 = 0, $arrayidx37 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $call = 0, $call11 = 0, $call2 = 0, $call3 = 0, $call30 = 0, $call36 = 0, $call6 = 0, $cmp = 0, $cmp22 = 0;
 var $cmp28 = 0, $cmp5 = 0, $data = 0, $data19 = 0, $data25 = 0, $data4 = 0, $edg = 0, $ext = 0, $ext35 = 0, $i = 0, $inc = 0, $p = 0, $parent = 0, $parent13 = 0, $parent16 = 0, $parent18 = 0, $parent23 = 0, $parent24 = 0, $parent33 = 0, $places = 0;
 var $se = 0, $t = 0, $tobool = 0, $tu2$addr = 0, $type = 0, $type21 = 0, $type27 = 0, $vararg_buffer = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $places = sp + 40|0;
 $tu2$addr = $tu2;
 $apply_to$addr = $apply_to;
 $0 = $apply_to$addr;
 $call = (_prop_conversion($0,0)|0);
 $tobool = ($call|0)!=(0|0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $1 = $tu2$addr;
 $x = $1;
 $i = 1;
 while(1) {
  $2 = $i;
  $cmp = ($2|0)<=(5);
  if (!($cmp)) {
   break;
  }
  $3 = $i;
  $4 = $i;
  $arrayidx = (($places) + ($4<<2)|0);
  HEAP32[$arrayidx>>2] = $3;
  $5 = $i;
  $inc = (($5) + 1)|0;
  $i = $inc;
 }
 L7: while(1) {
  $6 = $x;
  $data = ((($6)) + 44|0);
  $type = ((($data)) + 12|0);
  $7 = HEAP32[$type>>2]|0;
  switch ($7|0) {
  case 97:  {
   label = 15;
   break L7;
   break;
  }
  case 104:  {
   $8 = $x;
   $call2 = (_child_ref($8,0)|0);
   $call3 = (_strip_attitudinal($call2)|0);
   $se = $call3;
   $9 = $se;
   $data4 = ((($9)) + 44|0);
   $10 = HEAP32[$data4>>2]|0;
   $cmp5 = ($10|0)==(353);
   if (!($cmp5)) {
    label = 7;
    break L7;
   }
   $11 = $se;
   $call6 = (_lookup_converted_place($11)|0);
   $p = $call6;
   $arrayidx7 = ((($places)) + 4|0);
   $12 = HEAP32[$arrayidx7>>2]|0;
   $t = $12;
   $13 = $p;
   $arrayidx8 = (($places) + ($13<<2)|0);
   $14 = HEAP32[$arrayidx8>>2]|0;
   $arrayidx9 = ((($places)) + 4|0);
   HEAP32[$arrayidx9>>2] = $14;
   $15 = $t;
   $16 = $p;
   $arrayidx10 = (($places) + ($16<<2)|0);
   HEAP32[$arrayidx10>>2] = $15;
   $17 = $se;
   $call11 = (_prop_dont_gloss($17,1)|0);
   $edg = $call11;
   $18 = $x;
   $parent = ((($18)) + 8|0);
   $19 = HEAP32[$parent>>2]|0;
   $x = $19;
   continue L7;
   break;
  }
  case 49: case 50: case 98: case 100: case 101: case 134: case 135: case 68: case 136:  {
   $20 = $x;
   $parent13 = ((($20)) + 8|0);
   $21 = HEAP32[$parent13>>2]|0;
   $x = $21;
   continue L7;
   break;
  }
  case 35: case 36:  {
   $arrayidx15 = ((($places)) + 4|0);
   HEAP32[$arrayidx15>>2] = 0;
   $22 = $x;
   $parent16 = ((($22)) + 8|0);
   $23 = HEAP32[$parent16>>2]|0;
   $x = $23;
   continue L7;
   break;
  }
  case 99:  {
   $24 = $x;
   $parent18 = ((($24)) + 8|0);
   $25 = HEAP32[$parent18>>2]|0;
   $data19 = ((($25)) + 44|0);
   $type21 = ((($data19)) + 12|0);
   $26 = HEAP32[$type21>>2]|0;
   $cmp22 = ($26|0)==(98);
   if ($cmp22) {
    $27 = $x;
    $parent23 = ((($27)) + 8|0);
    $28 = HEAP32[$parent23>>2]|0;
    $parent24 = ((($28)) + 8|0);
    $29 = HEAP32[$parent24>>2]|0;
    $data25 = ((($29)) + 44|0);
    $type27 = ((($data25)) + 12|0);
    $30 = HEAP32[$type27>>2]|0;
    $cmp28 = ($30|0)==(98);
    if ($cmp28) {
     label = 13;
     break L7;
    }
   }
   $34 = $x;
   $parent33 = ((($34)) + 8|0);
   $35 = HEAP32[$parent33>>2]|0;
   $x = $35;
   continue L7;
   break;
  }
  default: {
   label = 16;
   break L7;
  }
  }
 }
 if ((label|0) == 7) {
  ___assert_fail((45594|0),(44928|0),149,(44956|0));
  // unreachable;
 }
 else if ((label|0) == 13) {
  $31 = $apply_to$addr;
  $call30 = (_prop_conversion($31,1)|0);
  $ext = $call30;
  $arrayidx31 = ((($places)) + 4|0);
  $32 = HEAP32[$arrayidx31>>2]|0;
  $33 = $ext;
  $$sink = $32;$$sink1 = $33;
 }
 else if ((label|0) == 15) {
  $36 = $apply_to$addr;
  $call36 = (_prop_conversion($36,1)|0);
  $ext35 = $call36;
  $arrayidx37 = ((($places)) + 4|0);
  $37 = HEAP32[$arrayidx37>>2]|0;
  $38 = $ext35;
  $$sink = $37;$$sink1 = $38;
 }
 else if ((label|0) == 16) {
  $39 = HEAP32[7856]|0;
  (_fprintf($39,44973,$vararg_buffer)|0);
  ___assert_fail((80680|0),(44928|0),208,(44956|0));
  // unreachable;
 }
 HEAP32[$$sink1>>2] = $$sink;
 STACKTOP = sp;return;
}
function _lookup_converted_place($se_cmavo) {
 $se_cmavo = $se_cmavo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx = 0, $call = 0, $call10 = 0, $call2 = 0, $call6 = 0, $code = 0, $conv = 0, $data = 0, $se = 0, $se_cmavo$addr = 0, $tobool = 0, $tobool11 = 0;
 var $tobool3 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $se_cmavo$addr = $se_cmavo;
 $0 = $se_cmavo$addr;
 $data = ((($0)) + 44|0);
 $code = ((($data)) + 4|0);
 $1 = HEAP32[$code>>2]|0;
 $arrayidx = (46450 + (($1*14)|0)|0);
 $2 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
 $se = $2;
 $3 = $se;
 $call = (_strcmp($3,108346)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  $conv = 2;
  $7 = $conv;
  STACKTOP = sp;return ($7|0);
 }
 $4 = $se;
 $call2 = (_strcmp($4,110725)|0);
 $tobool3 = ($call2|0)!=(0);
 if (!($tobool3)) {
  $conv = 3;
  $7 = $conv;
  STACKTOP = sp;return ($7|0);
 }
 $5 = $se;
 $call6 = (_strcmp($5,111675)|0);
 $tobool7 = ($call6|0)!=(0);
 if (!($tobool7)) {
  $conv = 4;
  $7 = $conv;
  STACKTOP = sp;return ($7|0);
 }
 $6 = $se;
 $call10 = (_strcmp($6,112678)|0);
 $tobool11 = ($call10|0)!=(0);
 if ($tobool11) {
  ___assert_fail((80680|0),(44928|0),44,(44992|0));
  // unreachable;
 }
 $conv = 5;
 $7 = $conv;
 STACKTOP = sp;return ($7|0);
}
function _new_node() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $bahe = 0, $call = 0, $eols = 0, $ext = 0, $result = 0, $ui_next = 0, $ui_next1 = 0, $ui_prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $call = (_Malloc(68)|0);
 $result = $call;
 $0 = $result;
 $ext = ((($0)) + 24|0);
 HEAP32[$ext>>2] = 0;
 $1 = $result;
 $bahe = ((($1)) + 12|0);
 HEAP32[$bahe>>2] = 0;
 $2 = $result;
 $ui_next = ((($2)) + 16|0);
 $3 = $result;
 $ui_prev = ((($3)) + 20|0);
 HEAP32[$ui_prev>>2] = $ui_next;
 $4 = $result;
 $ui_next1 = ((($4)) + 16|0);
 HEAP32[$ui_next1>>2] = $ui_next;
 $5 = $result;
 $eols = ((($5)) + 28|0);
 HEAP32[$eols>>2] = 0;
 $6 = $result;
 STACKTOP = sp;return ($6|0);
}
function _type_check($x,$type) {
 $x = $x|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $cmp3 = 0, $data = 0, $type$addr = 0, $type1 = 0, $type2 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $type$addr = $type;
 $0 = $x$addr;
 $type1 = ((($0)) + 40|0);
 $1 = HEAP32[$type1>>2]|0;
 $cmp = ($1|0)==(10);
 if (!($cmp)) {
  ___assert_fail((45071|0),(45059|0),464,(45128|0));
  // unreachable;
 }
 $2 = $x$addr;
 $data = ((($2)) + 44|0);
 $type2 = ((($data)) + 12|0);
 $3 = HEAP32[$type2>>2]|0;
 $4 = $type$addr;
 $cmp3 = ($3|0)==($4|0);
 if ($cmp3) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((45071|0),(45059|0),464,(45128|0));
  // unreachable;
 }
}
function _nch($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $data = 0, $type = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 if ($cmp) {
  $2 = $x$addr;
  $data = ((($2)) + 44|0);
  $3 = HEAP32[$data>>2]|0;
  STACKTOP = sp;return ($3|0);
 } else {
  ___assert_fail((45139|0),(45059|0),479,(45160|0));
  // unreachable;
 }
 return (0)|0;
}
function _child_ref($x,$i) {
 $x = $x|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $children = 0, $cmp = 0, $cmp1 = 0, $cmp5 = 0, $data = 0, $i$addr = 0, $nt = 0, $type = 0;
 var $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $i$addr = $i;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 if (!($cmp)) {
  ___assert_fail((45139|0),(45059|0),498,(45164|0));
  // unreachable;
 }
 $2 = $i$addr;
 $cmp1 = ($2|0)>=(0);
 if (!($cmp1)) {
  ___assert_fail((45174|0),(45059|0),499,(45164|0));
  // unreachable;
 }
 $3 = $x$addr;
 $data = ((($3)) + 44|0);
 $nt = $data;
 $4 = $i$addr;
 $5 = $nt;
 $6 = HEAP32[$5>>2]|0;
 $cmp5 = ($4|0)<($6|0);
 if ($cmp5) {
  $7 = $nt;
  $children = ((($7)) + 16|0);
  $8 = HEAP32[$children>>2]|0;
  $9 = $i$addr;
  $arrayidx = (($8) + ($9<<2)|0);
  $10 = HEAP32[$arrayidx>>2]|0;
  STACKTOP = sp;return ($10|0);
 } else {
  ___assert_fail((45179|0),(45059|0),501,(45164|0));
  // unreachable;
 }
 return (0)|0;
}
function _find_nth_child($x,$n,$type) {
 $x = $x|0;
 $n = $n|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $arrayidx = 0, $c = 0, $children = 0, $cmp = 0, $cmp2 = 0, $cmp4 = 0, $cmp8 = 0, $cmp9 = 0, $data = 0, $data5 = 0, $dec = 0, $i = 0, $inc = 0, $n$addr = 0, $nc = 0, $nt = 0, $retval = 0, $togo = 0;
 var $type$addr = 0, $type1 = 0, $type3 = 0, $type7 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $x$addr = $x;
 $n$addr = $n;
 $type$addr = $type;
 $0 = $x$addr;
 $type1 = ((($0)) + 40|0);
 $1 = HEAP32[$type1>>2]|0;
 $cmp = ($1|0)==(10);
 if (!($cmp)) {
  ___assert_fail((45139|0),(45059|0),519,(45197|0));
  // unreachable;
 }
 $2 = $x$addr;
 $data = ((($2)) + 44|0);
 $nt = $data;
 $3 = $n$addr;
 $togo = $3;
 $4 = $nt;
 $5 = HEAP32[$4>>2]|0;
 $nc = $5;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $nc;
  $cmp2 = ($6|0)<($7|0);
  if (!($cmp2)) {
   label = 10;
   break;
  }
  $8 = $nt;
  $children = ((($8)) + 16|0);
  $9 = HEAP32[$children>>2]|0;
  $10 = $i;
  $arrayidx = (($9) + ($10<<2)|0);
  $11 = HEAP32[$arrayidx>>2]|0;
  $c = $11;
  $12 = $c;
  $type3 = ((($12)) + 40|0);
  $13 = HEAP32[$type3>>2]|0;
  $cmp4 = ($13|0)==(10);
  if ($cmp4) {
   $14 = $c;
   $data5 = ((($14)) + 44|0);
   $type7 = ((($data5)) + 12|0);
   $15 = HEAP32[$type7>>2]|0;
   $16 = $type$addr;
   $cmp8 = ($15|0)==($16|0);
   if ($cmp8) {
    $17 = $togo;
    $dec = (($17) + -1)|0;
    $togo = $dec;
    $18 = $togo;
    $cmp9 = ($18|0)==(0);
    if ($cmp9) {
     label = 8;
     break;
    }
   }
  }
  $20 = $i;
  $inc = (($20) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 8) {
  $19 = $c;
  $retval = $19;
  $21 = $retval;
  STACKTOP = sp;return ($21|0);
 }
 else if ((label|0) == 10) {
  $retval = 0;
  $21 = $retval;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _find_nth_cmavo_child($x,$n,$selmao) {
 $x = $x|0;
 $n = $n|0;
 $selmao = $selmao|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx24 = 0, $c = 0, $cc = 0, $children = 0, $children23 = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp15 = 0, $cmp21 = 0, $cmp26 = 0, $cmp3 = 0, $cmp31 = 0, $cmp34 = 0, $cmp6 = 0;
 var $cmp7 = 0, $data = 0, $data12 = 0, $data17 = 0, $data28 = 0, $data4 = 0, $dec = 0, $dec33 = 0, $i = 0, $inc = 0, $inc41 = 0, $j = 0, $n$addr = 0, $nc = 0, $ncc = 0, $nt = 0, $ntc = 0, $retval = 0, $selmao$addr = 0, $togo = 0;
 var $type = 0, $type14 = 0, $type2 = 0, $type25 = 0, $type9 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $x$addr = $x;
 $n$addr = $n;
 $selmao$addr = $selmao;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 if (!($cmp)) {
  ___assert_fail((45139|0),(45059|0),562,(45212|0));
  // unreachable;
 }
 $2 = $x$addr;
 $data = ((($2)) + 44|0);
 $nt = $data;
 $3 = $n$addr;
 $togo = $3;
 $4 = $nt;
 $5 = HEAP32[$4>>2]|0;
 $nc = $5;
 $i = 0;
 L4: while(1) {
  $6 = $i;
  $7 = $nc;
  $cmp1 = ($6|0)<($7|0);
  if (!($cmp1)) {
   label = 19;
   break;
  }
  $8 = $nt;
  $children = ((($8)) + 16|0);
  $9 = HEAP32[$children>>2]|0;
  $10 = $i;
  $arrayidx = (($9) + ($10<<2)|0);
  $11 = HEAP32[$arrayidx>>2]|0;
  $c = $11;
  $12 = $c;
  $type2 = ((($12)) + 40|0);
  $13 = HEAP32[$type2>>2]|0;
  $cmp3 = ($13|0)==(2);
  if ($cmp3) {
   $14 = $c;
   $data4 = ((($14)) + 44|0);
   $15 = HEAP32[$data4>>2]|0;
   $16 = $selmao$addr;
   $cmp6 = ($15|0)==($16|0);
   if ($cmp6) {
    $17 = $togo;
    $dec = (($17) + -1)|0;
    $togo = $dec;
    $18 = $togo;
    $cmp7 = ($18|0)==(0);
    if ($cmp7) {
     label = 8;
     break;
    }
   } else {
    label = 9;
   }
  } else {
   label = 9;
  }
  L10: do {
   if ((label|0) == 9) {
    label = 0;
    $20 = $c;
    $type9 = ((($20)) + 40|0);
    $21 = HEAP32[$type9>>2]|0;
    $cmp10 = ($21|0)==(10);
    if ($cmp10) {
     $22 = $c;
     $data12 = ((($22)) + 44|0);
     $type14 = ((($data12)) + 12|0);
     $23 = HEAP32[$type14>>2]|0;
     $cmp15 = ($23|0)==(1);
     if ($cmp15) {
      $24 = $c;
      $data17 = ((($24)) + 44|0);
      $ntc = $data17;
      $25 = $ntc;
      $26 = HEAP32[$25>>2]|0;
      $ncc = $26;
      $j = 0;
      while(1) {
       $27 = $j;
       $28 = $ncc;
       $cmp21 = ($27|0)<($28|0);
       if (!($cmp21)) {
        break L10;
       }
       $29 = $ntc;
       $children23 = ((($29)) + 16|0);
       $30 = HEAP32[$children23>>2]|0;
       $31 = $j;
       $arrayidx24 = (($30) + ($31<<2)|0);
       $32 = HEAP32[$arrayidx24>>2]|0;
       $cc = $32;
       $33 = $cc;
       $type25 = ((($33)) + 40|0);
       $34 = HEAP32[$type25>>2]|0;
       $cmp26 = ($34|0)==(2);
       if ($cmp26) {
        $35 = $cc;
        $data28 = ((($35)) + 44|0);
        $36 = HEAP32[$data28>>2]|0;
        $37 = $selmao$addr;
        $cmp31 = ($36|0)==($37|0);
        if ($cmp31) {
         $38 = $togo;
         $dec33 = (($38) + -1)|0;
         $togo = $dec33;
         $39 = $togo;
         $cmp34 = ($39|0)==(0);
         if ($cmp34) {
          label = 16;
          break L4;
         }
        }
       }
       $41 = $j;
       $inc = (($41) + 1)|0;
       $j = $inc;
      }
     }
    }
   }
  } while(0);
  $42 = $i;
  $inc41 = (($42) + 1)|0;
  $i = $inc41;
 }
 if ((label|0) == 8) {
  $19 = $c;
  $retval = $19;
  $43 = $retval;
  STACKTOP = sp;return ($43|0);
 }
 else if ((label|0) == 16) {
  $40 = $cc;
  $retval = $40;
  $43 = $retval;
  STACKTOP = sp;return ($43|0);
 }
 else if ((label|0) == 19) {
  $retval = 0;
  $43 = $retval;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _strip_attitudinal($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $N = 0, $child = 0, $child0 = 0, $children = 0, $cmp = 0, $cmp10 = 0, $cmp2 = 0, $cmp5 = 0, $cmp7 = 0, $cmp9 = 0, $data = 0, $data8 = 0, $incdec$ptr = 0, $nt = 0, $retval = 0, $sub$ptr$div = 0;
 var $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $type = 0, $type1 = 0, $type4 = 0, $type6 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(2);
 $2 = $x$addr;
 if ($cmp) {
  $retval = $2;
  $22 = $retval;
  STACKTOP = sp;return ($22|0);
 }
 $type1 = ((($2)) + 40|0);
 $3 = HEAP32[$type1>>2]|0;
 $cmp2 = ($3|0)==(10);
 if (!($cmp2)) {
  $22 = $retval;
  STACKTOP = sp;return ($22|0);
 }
 $4 = $x$addr;
 $data = ((($4)) + 44|0);
 $nt = $data;
 $5 = $nt;
 $type4 = ((($5)) + 12|0);
 $6 = HEAP32[$type4>>2]|0;
 $cmp5 = ($6|0)==(1);
 if (!($cmp5)) {
  ___assert_fail((45233|0),(45059|0),613,(45255|0));
  // unreachable;
 }
 $7 = $nt;
 $8 = HEAP32[$7>>2]|0;
 $N = $8;
 $9 = $nt;
 $children = ((($9)) + 16|0);
 $10 = HEAP32[$children>>2]|0;
 $child0 = $10;
 $child = $10;
 while(1) {
  $11 = $child;
  $12 = HEAP32[$11>>2]|0;
  $type6 = ((($12)) + 40|0);
  $13 = HEAP32[$type6>>2]|0;
  $cmp7 = ($13|0)==(2);
  if ($cmp7) {
   $14 = $child;
   $15 = HEAP32[$14>>2]|0;
   $data8 = ((($15)) + 44|0);
   $16 = HEAP32[$data8>>2]|0;
   $cmp9 = ($16|0)==(260);
   $23 = $cmp9;
  } else {
   $23 = 0;
  }
  $17 = $child;
  if (!($23)) {
   break;
  }
  $incdec$ptr = ((($17)) + 4|0);
  $child = $incdec$ptr;
  $18 = $child;
  $19 = $child0;
  $sub$ptr$lhs$cast = $18;
  $sub$ptr$rhs$cast = $19;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $sub$ptr$div = (($sub$ptr$sub|0) / 4)&-1;
  $20 = $N;
  $cmp10 = ($sub$ptr$div|0)<($20|0);
  if (!($cmp10)) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  ___assert_fail((45273|0),(45059|0),618,(45255|0));
  // unreachable;
 }
 $21 = HEAP32[$17>>2]|0;
 $retval = $21;
 $22 = $retval;
 STACKTOP = sp;return ($22|0);
}
function _maybe_strip_attitudinal($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $cmp = 0, $cmp2 = 0, $data = 0, $retval = 0, $type = 0, $type1 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 if ($cmp) {
  $2 = $x$addr;
  $data = ((($2)) + 44|0);
  $type1 = ((($data)) + 12|0);
  $3 = HEAP32[$type1>>2]|0;
  $cmp2 = ($3|0)==(1);
  if ($cmp2) {
   $4 = $x$addr;
   $call = (_strip_attitudinal($4)|0);
   $retval = $call;
   $6 = $retval;
   STACKTOP = sp;return ($6|0);
  }
 }
 $5 = $x$addr;
 $retval = $5;
 $6 = $retval;
 STACKTOP = sp;return ($6|0);
}
function _make_uppercase($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call1 = 0, $conv = 0, $conv2 = 0, $incdec$ptr = 0, $p = 0, $s$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $0 = $s$addr;
 (_strcpy(119688,$0)|0);
 $p = 119688;
 while(1) {
  $1 = $p;
  $2 = HEAP8[$1>>0]|0;
  $tobool = ($2<<24>>24)!=(0);
  if (!($tobool)) {
   break;
  }
  $3 = $p;
  $4 = HEAP8[$3>>0]|0;
  $conv = $4 << 24 >> 24;
  $call1 = (_toupper($conv)|0);
  $conv2 = $call1&255;
  $5 = $p;
  HEAP8[$5>>0] = $conv2;
  $6 = $p;
  $incdec$ptr = ((($6)) + 1|0);
  $p = $incdec$ptr;
 }
 STACKTOP = sp;return (119688|0);
}
function _terms_processing($top) {
 $top = $top|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $top$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $top$addr = $top;
 $0 = $top$addr;
 _scan_tu1_phase1($0);
 $1 = $top$addr;
 _scan_for_sentence_parents($1);
 $2 = $top$addr;
 _scan_for_selbri_in_sumti($2);
 $3 = $top$addr;
 _scan_tu1_phase2($3);
 STACKTOP = sp;return;
}
function _scan_tu1_phase1($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $c = 0, $children = 0, $cmp = 0;
 var $cmp2 = 0, $cmp4 = 0, $data = 0, $i = 0, $inc = 0, $nc = 0, $nt = 0, $type = 0, $type1 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $2 = $x$addr;
 $data = ((($2)) + 44|0);
 $nt = $data;
 $3 = $nt;
 $type1 = ((($3)) + 12|0);
 $4 = HEAP32[$type1>>2]|0;
 $cmp2 = ($4|0)==(135);
 if ($cmp2) {
  $5 = $x$addr;
  _check_tu1_for_links($5);
 }
 $6 = $nt;
 $7 = HEAP32[$6>>2]|0;
 $nc = $7;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = $nc;
  $cmp4 = ($8|0)<($9|0);
  if (!($cmp4)) {
   break;
  }
  $10 = $nt;
  $children = ((($10)) + 16|0);
  $11 = HEAP32[$children>>2]|0;
  $12 = $i;
  $arrayidx = (($11) + ($12<<2)|0);
  $13 = HEAP32[$arrayidx>>2]|0;
  $c = $13;
  $14 = $c;
  _scan_tu1_phase1($14);
  $15 = $i;
  $inc = (($15) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _scan_for_sentence_parents($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $c = 0, $children = 0, $cmp = 0, $cmp13 = 0, $cmp18 = 0, $cmp2 = 0, $cmp5 = 0, $cmp9 = 0, $data = 0, $i = 0, $inc = 0, $nc = 0, $nt = 0, $type = 0;
 var $type1 = 0, $type12 = 0, $type4 = 0, $type8 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $2 = $x$addr;
 $data = ((($2)) + 44|0);
 $nt = $data;
 $3 = $nt;
 $type1 = ((($3)) + 12|0);
 $4 = HEAP32[$type1>>2]|0;
 $cmp2 = ($4|0)==(116);
 do {
  if ($cmp2) {
   $5 = $x$addr;
   _process_statement_3($5);
  } else {
   $6 = $nt;
   $type4 = ((($6)) + 12|0);
   $7 = HEAP32[$type4>>2]|0;
   $cmp5 = ($7|0)==(0);
   if ($cmp5) {
    $8 = $x$addr;
    _process_abstraction($8);
    break;
   }
   $9 = $nt;
   $type8 = ((($9)) + 12|0);
   $10 = HEAP32[$type8>>2]|0;
   $cmp9 = ($10|0)==(91);
   if ($cmp9) {
    $11 = $x$addr;
    _process_relative_clause($11);
    break;
   }
   $12 = $nt;
   $type12 = ((($12)) + 12|0);
   $13 = HEAP32[$type12>>2]|0;
   $cmp13 = ($13|0)==(58);
   if ($cmp13) {
    $14 = $x$addr;
    _process_metalinguistic($14);
   }
  }
 } while(0);
 $15 = $nt;
 $16 = HEAP32[$15>>2]|0;
 $nc = $16;
 $i = 0;
 while(1) {
  $17 = $i;
  $18 = $nc;
  $cmp18 = ($17|0)<($18|0);
  if (!($cmp18)) {
   break;
  }
  $19 = $nt;
  $children = ((($19)) + 16|0);
  $20 = HEAP32[$children>>2]|0;
  $21 = $i;
  $arrayidx = (($20) + ($21<<2)|0);
  $22 = HEAP32[$arrayidx>>2]|0;
  $c = $22;
  $23 = $c;
  _scan_for_sentence_parents($23);
  $24 = $i;
  $inc = (($24) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _scan_for_selbri_in_sumti($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0;
 var $c = 0, $children = 0, $cmp = 0, $cmp2 = 0, $cmp5 = 0, $cmp8 = 0, $data = 0, $i = 0, $inc = 0, $nc = 0, $nt = 0, $type = 0, $type1 = 0, $type4 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $2 = $x$addr;
 $data = ((($2)) + 44|0);
 $nt = $data;
 $3 = $nt;
 $type1 = ((($3)) + 12|0);
 $4 = HEAP32[$type1>>2]|0;
 $cmp2 = ($4|0)==(126);
 if ($cmp2) {
  $5 = $x$addr;
  _process_sumti_5b($5);
 } else {
  $6 = $nt;
  $type4 = ((($6)) + 12|0);
  $7 = HEAP32[$type4>>2]|0;
  $cmp5 = ($7|0)==(130);
  if ($cmp5) {
   $8 = $x$addr;
   _process_sumti_tail_1a($8);
  }
 }
 $9 = $nt;
 $10 = HEAP32[$9>>2]|0;
 $nc = $10;
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $nc;
  $cmp8 = ($11|0)<($12|0);
  if (!($cmp8)) {
   break;
  }
  $13 = $nt;
  $children = ((($13)) + 16|0);
  $14 = HEAP32[$children>>2]|0;
  $15 = $i;
  $arrayidx = (($14) + ($15<<2)|0);
  $16 = HEAP32[$arrayidx>>2]|0;
  $c = $16;
  $17 = $c;
  _scan_for_selbri_in_sumti($17);
  $18 = $i;
  $inc = (($18) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _scan_tu1_phase2($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $c = 0, $call = 0, $call4 = 0, $call7 = 0, $call8 = 0, $children = 0, $cmp = 0, $cmp10 = 0, $cmp2 = 0, $data = 0, $i = 0, $inc = 0, $lc = 0, $nc = 0, $nt = 0;
 var $or$cond = 0, $post = 0, $pre = 0, $tobool = 0, $tobool5 = 0, $tu2 = 0, $type = 0, $type1 = 0, $x$addr = 0, $xdtu1 = 0, $xtv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(768|0);
 $lc = sp + 492|0;
 $pre = sp + 244|0;
 $post = sp;
 $x$addr = $x;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $2 = $x$addr;
 $data = ((($2)) + 44|0);
 $nt = $data;
 $3 = $nt;
 $type1 = ((($3)) + 12|0);
 $4 = HEAP32[$type1>>2]|0;
 $cmp2 = ($4|0)==(135);
 if ($cmp2) {
  $5 = $x$addr;
  $call = (_prop_term_vector($5,0)|0);
  $xtv = $call;
  $6 = $x$addr;
  $call4 = (_prop_done_tu1($6,0)|0);
  $xdtu1 = $call4;
  $7 = $xtv;
  $tobool = ($7|0)==(0|0);
  $8 = $xdtu1;
  $tobool5 = ($8|0)!=(0|0);
  $or$cond = $tobool | $tobool5;
  if (!($or$cond)) {
   $9 = $x$addr;
   $call7 = (_child_ref($9,0)|0);
   $tu2 = $call7;
   _lc_init($lc);
   $10 = $xtv;
   $11 = HEAP32[$10>>2]|0;
   _lc_append_links($lc,$11);
   _tv_init($pre);
   _tv_init($post);
   $12 = $tu2;
   _process_tanru_unit_2_args($12,$pre,$post,$lc);
   $13 = $x$addr;
   $call8 = (_prop_done_tu1($13,1)|0);
   $xdtu1 = $call8;
  }
 }
 $14 = $nt;
 $15 = HEAP32[$14>>2]|0;
 $nc = $15;
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = $nc;
  $cmp10 = ($16|0)<($17|0);
  if (!($cmp10)) {
   break;
  }
  $18 = $nt;
  $children = ((($18)) + 16|0);
  $19 = HEAP32[$children>>2]|0;
  $20 = $i;
  $arrayidx = (($19) + ($20<<2)|0);
  $21 = HEAP32[$arrayidx>>2]|0;
  $c = $21;
  $22 = $c;
  _scan_tu1_phase2($22);
  $23 = $i;
  $inc = (($23) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _lc_init($lc) {
 $lc = $lc|0;
 var $0 = 0, $lc$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $lc$addr = $lc;
 $0 = $lc$addr;
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function _lc_append_links($lc,$v) {
 $lc = $lc|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx4 = 0, $arrayidx9 = 0, $call = 0, $cmp = 0;
 var $data = 0, $data5 = 0, $e = 0, $e2 = 0, $e7 = 0, $inc = 0, $lc$addr = 0, $v$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $lc$addr = $lc;
 $v$addr = $v;
 $0 = $lc$addr;
 $1 = HEAP32[$0>>2]|0;
 $cmp = ($1|0)<(20);
 if ($cmp) {
  $call = (_Malloc(244)|0);
  $2 = $lc$addr;
  $e = ((($2)) + 4|0);
  $3 = $lc$addr;
  $4 = HEAP32[$3>>2]|0;
  $arrayidx = (($e) + (($4*12)|0)|0);
  $data = ((($arrayidx)) + 4|0);
  HEAP32[$data>>2] = $call;
  $5 = $lc$addr;
  $e2 = ((($5)) + 4|0);
  $6 = $lc$addr;
  $7 = HEAP32[$6>>2]|0;
  $arrayidx4 = (($e2) + (($7*12)|0)|0);
  $data5 = ((($arrayidx4)) + 4|0);
  $8 = HEAP32[$data5>>2]|0;
  $9 = $v$addr;
  _memcpy(($8|0),($9|0),244)|0;
  $10 = $lc$addr;
  $e7 = ((($10)) + 4|0);
  $11 = $lc$addr;
  $12 = HEAP32[$11>>2]|0;
  $arrayidx9 = (($e7) + (($12*12)|0)|0);
  HEAP32[$arrayidx9>>2] = 0;
  $13 = $lc$addr;
  $14 = HEAP32[$13>>2]|0;
  $inc = (($14) + 1)|0;
  HEAP32[$13>>2] = $inc;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((45521|0),(45306|0),177,(45852|0));
  // unreachable;
 }
}
function _tv_init($tv) {
 $tv = $tv|0;
 var $0 = 0, $tv$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tv$addr = $tv;
 $0 = $tv$addr;
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function _process_tanru_unit_2_args($tu2,$pre,$post,$lc) {
 $tu2 = $tu2|0;
 $pre = $pre|0;
 $post = $post|0;
 $lc = $lc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $abstraction = 0, $brivla = 0, $c1 = 0, $c2 = 0, $call = 0, $call1 = 0, $call104 = 0, $call13 = 0, $call18 = 0, $call21 = 0, $call36 = 0, $call37 = 0, $call45 = 0, $call47 = 0, $call53 = 0, $call54 = 0, $call59 = 0, $call64 = 0, $call65 = 0;
 var $call7 = 0, $call74 = 0, $call78 = 0, $call8 = 0, $call85 = 0, $call92 = 0, $call93 = 0, $call94 = 0, $cmp = 0, $cmp101 = 0, $cmp119 = 0, $cmp23 = 0, $cmp29 = 0, $cmp41 = 0, $cmp43 = 0, $cmp96 = 0, $conv = 0, $cs3 = 0, $ctag = 0, $data = 0;
 var $data31 = 0, $data98 = 0, $goha = 0, $lc$addr = 0, $me = 0, $me11 = 0, $me9 = 0, $me_node = 0, $moi = 0, $moi40 = 0, $nai = 0, $newlc = 0, $newlc61 = 0, $newlc76 = 0, $nns = 0, $norl = 0, $nu = 0, $nuha = 0, $nuha19 = 0, $numbermoi = 0;
 var $numbermoi39 = 0, $post$addr = 0, $pre$addr = 0, $se_child = 0, $start_column = 0, $start_column113 = 0, $start_line = 0, $start_line112 = 0, $tobool = 0, $tobool105 = 0, $tobool48 = 0, $tobool55 = 0, $tobool66 = 0, $tobool70 = 0, $tobool79 = 0, $tobool86 = 0, $tt = 0, $tt122 = 0, $tt15 = 0, $tt25 = 0;
 var $tt35 = 0, $tt5 = 0, $tt91 = 0, $tu2$addr = 0, $tu2_child = 0, $tu2_child62 = 0, $tu2_child77 = 0, $tu2_child84 = 0, $type = 0, $type118 = 0, $type22 = 0, $type28 = 0, $type32 = 0, $type95 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $xrb = 0, $xrb16 = 0;
 var $xrb34 = 0, $xrb63 = 0, $zei = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1216|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1216|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $tt = sp + 1136|0;
 $tt5 = sp + 1084|0;
 $tt15 = sp + 1024|0;
 $tt25 = sp + 968|0;
 $tt35 = sp + 904|0;
 $newlc = sp + 656|0;
 $newlc61 = sp + 400|0;
 $newlc76 = sp + 144|0;
 $tt91 = sp + 68|0;
 $tt122 = sp + 16|0;
 $tu2$addr = $tu2;
 $pre$addr = $pre;
 $post$addr = $post;
 $lc$addr = $lc;
 $0 = $tu2$addr;
 _type_check($0,136);
 $1 = $tu2$addr;
 $call = (_child_ref($1,0)|0);
 $call1 = (_maybe_strip_attitudinal($call)|0);
 $c1 = $call1;
 $2 = $c1;
 $type = ((($2)) + 40|0);
 $3 = HEAP32[$type>>2]|0;
 $cmp = ($3|0)==(2);
 $4 = $c1;
 if ($cmp) {
  $data = ((($4)) + 44|0);
  $5 = HEAP32[$data>>2]|0;
  switch ($5|0) {
  case 299:  {
   HEAP32[$tt>>2] = 5;
   $6 = $c1;
   $goha = ((($tt)) + 32|0);
   HEAP32[$goha>>2] = $6;
   $7 = $pre$addr;
   $8 = $post$addr;
   $9 = $lc$addr;
   _assign_places($7,$8,$9,$tt);
   $10 = $lc$addr;
   $11 = $c1;
   _assign_conversion($10,$11);
   STACKTOP = sp;return;
   break;
  }
  case 328:  {
   HEAP32[$tt5>>2] = 4;
   $12 = $tu2$addr;
   $call7 = (_find_nth_child($12,1,119)|0);
   $me = ((($tt5)) + 28|0);
   HEAP32[$me>>2] = $call7;
   $13 = $tu2$addr;
   $call8 = (_find_nth_cmavo_child($13,1,328)|0);
   $me_node = $call8;
   $me9 = ((($tt5)) + 28|0);
   $14 = HEAP32[$me9>>2]|0;
   $tobool = ($14|0)!=(0|0);
   if (!($tobool)) {
    ___assert_fail((45294|0),(45306|0),741,(45314|0));
    // unreachable;
   }
   $me11 = ((($tt5)) + 28|0);
   $15 = HEAP32[$me11>>2]|0;
   $call13 = (_prop_require_brac($15,1)|0);
   $xrb = $call13;
   $16 = $pre$addr;
   $17 = $post$addr;
   $18 = $lc$addr;
   _assign_places($16,$17,$18,$tt5);
   STACKTOP = sp;return;
   break;
  }
  case 341:  {
   HEAP32[$tt15>>2] = 6;
   $19 = $tu2$addr;
   $call18 = (_find_nth_child($19,1,65)|0);
   $nuha = ((($tt15)) + 36|0);
   HEAP32[$nuha>>2] = $call18;
   $20 = $pre$addr;
   $21 = $post$addr;
   $22 = $lc$addr;
   _assign_places($20,$21,$22,$tt15);
   $23 = $lc$addr;
   $24 = $c1;
   _assign_conversion($23,$24);
   $nuha19 = ((($tt15)) + 36|0);
   $25 = HEAP32[$nuha19>>2]|0;
   $call21 = (_prop_require_brac($25,1)|0);
   $xrb16 = $call21;
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 }
 $type22 = ((($4)) + 40|0);
 $26 = HEAP32[$type22>>2]|0;
 $cmp23 = ($26|0)==(8);
 if ($cmp23) {
  HEAP32[$tt25>>2] = 0;
  $27 = $c1;
  $brivla = ((($tt25)) + 8|0);
  HEAP32[$brivla>>2] = $27;
  $28 = $pre$addr;
  $29 = $post$addr;
  $30 = $lc$addr;
  _assign_places($28,$29,$30,$tt25);
  $31 = $lc$addr;
  $32 = $c1;
  _assign_conversion($31,$32);
  STACKTOP = sp;return;
 }
 $33 = $c1;
 $type28 = ((($33)) + 40|0);
 $34 = HEAP32[$type28>>2]|0;
 $cmp29 = ($34|0)==(10);
 $35 = $c1;
 if (!($cmp29)) {
  $type118 = ((($35)) + 40|0);
  $114 = HEAP32[$type118>>2]|0;
  $cmp119 = ($114|0)==(6);
  if (!($cmp119)) {
   _abort();
   // unreachable;
  }
  HEAP32[$tt122>>2] = 8;
  $115 = $c1;
  $zei = ((($tt122)) + 48|0);
  HEAP32[$zei>>2] = $115;
  $116 = $pre$addr;
  $117 = $post$addr;
  $118 = $lc$addr;
  _assign_places($116,$117,$118,$tt122);
  $119 = $lc$addr;
  $120 = $c1;
  _assign_conversion($119,$120);
  STACKTOP = sp;return;
 }
 $data31 = ((($35)) + 44|0);
 $type32 = ((($data31)) + 12|0);
 $36 = HEAP32[$type32>>2]|0;
 switch ($36|0) {
 case 75:  {
  $37 = $c1;
  $call36 = (_child_ref($37,0)|0);
  $norl = $call36;
  $38 = $c1;
  $call37 = (_find_nth_cmavo_child($38,1,332)|0);
  $moi = $call37;
  HEAP32[$tt35>>2] = 7;
  $39 = $norl;
  $numbermoi = ((($tt35)) + 40|0);
  HEAP32[$numbermoi>>2] = $39;
  $40 = $moi;
  $numbermoi39 = ((($tt35)) + 40|0);
  $moi40 = ((($numbermoi39)) + 4|0);
  HEAP32[$moi40>>2] = $40;
  $41 = $pre$addr;
  $42 = $post$addr;
  $43 = $lc$addr;
  _assign_places($41,$42,$43,$tt35);
  $44 = $pre$addr;
  $45 = HEAP32[$44>>2]|0;
  $cmp41 = ($45|0)>(0);
  if (!($cmp41)) {
   $46 = $post$addr;
   $47 = HEAP32[$46>>2]|0;
   $cmp43 = ($47|0)>(0);
   if (!($cmp43)) {
    STACKTOP = sp;return;
   }
  }
  $48 = $norl;
  $call45 = (_prop_require_brac($48,1)|0);
  $xrb34 = $call45;
  STACKTOP = sp;return;
  break;
 }
 case 49:  {
  $49 = $c1;
  $call47 = (_find_nth_child($49,1,98)|0);
  $cs3 = $call47;
  $50 = $cs3;
  $tobool48 = ($50|0)!=(0|0);
  if (!($tobool48)) {
   ___assert_fail((45340|0),(45306|0),797,(45314|0));
   // unreachable;
  }
  $51 = $cs3;
  $52 = $pre$addr;
  $53 = $post$addr;
  $54 = $lc$addr;
  _process_selbri_3_args($51,$52,$53,$54);
  STACKTOP = sp;return;
  break;
 }
 case 104:  {
  $55 = $lc$addr;
  _lc_copy($55,$newlc);
  $56 = $c1;
  $call53 = (_child_ref($56,0)|0);
  $se_child = $call53;
  $57 = $c1;
  $call54 = (_find_nth_child($57,1,136)|0);
  $tu2_child = $call54;
  $58 = $tu2_child;
  $tobool55 = ($58|0)!=(0|0);
  if (!($tobool55)) {
   ___assert_fail((45344|0),(45306|0),811,(45314|0));
   // unreachable;
  }
  $59 = $se_child;
  $call59 = (_recover_se_conv($59)|0);
  $conv = $call59;
  $60 = $conv;
  $61 = $se_child;
  _lc_append_se($newlc,$60,$61);
  $62 = $tu2_child;
  $63 = $pre$addr;
  $64 = $post$addr;
  _process_tanru_unit_2_args($62,$63,$64,$newlc);
  STACKTOP = sp;return;
  break;
 }
 case 35:  {
  $65 = $lc$addr;
  _lc_copy($65,$newlc61);
  $66 = $c1;
  $call64 = (_find_nth_child($66,1,131)|0);
  $ctag = $call64;
  $67 = $c1;
  $call65 = (_find_nth_child($67,1,136)|0);
  $tu2_child62 = $call65;
  $68 = $ctag;
  $tobool66 = ($68|0)!=(0|0);
  if (!($tobool66)) {
   ___assert_fail((45354|0),(45306|0),830,(45314|0));
   // unreachable;
  }
  $69 = $tu2_child62;
  $tobool70 = ($69|0)!=(0|0);
  if (!($tobool70)) {
   ___assert_fail((45344|0),(45306|0),831,(45314|0));
   // unreachable;
  }
  $70 = $ctag;
  $71 = $tu2_child62;
  _lc_append_jai_tag($newlc61,$70,$71);
  $72 = $tu2_child62;
  $call74 = (_prop_require_brac($72,1)|0);
  $xrb63 = $call74;
  $73 = $tu2_child62;
  $74 = $pre$addr;
  $75 = $post$addr;
  _process_tanru_unit_2_args($73,$74,$75,$newlc61);
  STACKTOP = sp;return;
  break;
 }
 case 36:  {
  $76 = $lc$addr;
  _lc_copy($76,$newlc76);
  $77 = $c1;
  $call78 = (_find_nth_child($77,1,136)|0);
  $tu2_child77 = $call78;
  $78 = $tu2_child77;
  $tobool79 = ($78|0)!=(0|0);
  if (!($tobool79)) {
   ___assert_fail((45344|0),(45306|0),846,(45314|0));
   // unreachable;
  }
  _lc_append_jai($newlc76);
  $79 = $tu2_child77;
  $80 = $pre$addr;
  $81 = $post$addr;
  _process_tanru_unit_2_args($79,$80,$81,$newlc76);
  STACKTOP = sp;return;
  break;
 }
 case 68:  {
  $82 = $c1;
  $call85 = (_find_nth_child($82,1,136)|0);
  $tu2_child84 = $call85;
  $83 = $tu2_child84;
  $tobool86 = ($83|0)!=(0|0);
  if (!($tobool86)) {
   ___assert_fail((45344|0),(45306|0),856,(45314|0));
   // unreachable;
  }
  $84 = $tu2_child84;
  $85 = $pre$addr;
  $86 = $post$addr;
  $87 = $lc$addr;
  _process_tanru_unit_2_args($84,$85,$86,$87);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $88 = $c1;
  $call92 = (_child_ref($88,0)|0);
  $nns = $call92;
  $89 = $nns;
  _type_check($89,76);
  $90 = $nns;
  $call93 = (_child_ref($90,0)|0);
  $call94 = (_maybe_strip_attitudinal($call93)|0);
  $c2 = $call94;
  $91 = $c2;
  $type95 = ((($91)) + 40|0);
  $92 = HEAP32[$type95>>2]|0;
  $cmp96 = ($92|0)==(2);
  if ($cmp96) {
   $93 = $c2;
   $data98 = ((($93)) + 44|0);
   $94 = HEAP32[$data98>>2]|0;
   $cmp101 = ($94|0)==(340);
   if ($cmp101) {
    $95 = $c2;
    $nu = $95;
    $96 = $nns;
    $call104 = (_find_nth_child($96,1,336)|0);
    $nai = $call104;
    $97 = $nai;
    $tobool105 = ($97|0)!=(0|0);
    if ($tobool105) {
     $98 = HEAP32[7856]|0;
     $99 = $c1;
     $start_line = ((($99)) + 32|0);
     $100 = HEAP32[$start_line>>2]|0;
     $101 = $c1;
     $start_column = ((($101)) + 36|0);
     $102 = HEAP32[$start_column>>2]|0;
     HEAP32[$vararg_buffer>>2] = $100;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $102;
     (_fprintf($98,45359,$vararg_buffer)|0);
    }
    HEAP32[$tt91>>2] = 3;
    $103 = $nu;
    $abstraction = ((($tt91)) + 24|0);
    HEAP32[$abstraction>>2] = $103;
    $104 = $pre$addr;
    $105 = $post$addr;
    $106 = $lc$addr;
    _assign_places($104,$105,$106,$tt91);
    $107 = $lc$addr;
    $108 = $nu;
    _assign_conversion($107,$108);
    STACKTOP = sp;return;
   }
  }
  $109 = HEAP32[7856]|0;
  $110 = $c1;
  $start_line112 = ((($110)) + 32|0);
  $111 = HEAP32[$start_line112>>2]|0;
  $112 = $c1;
  $start_column113 = ((($112)) + 36|0);
  $113 = HEAP32[$start_column113>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $111;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $113;
  (_fprintf($109,45449,$vararg_buffer2)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _assign_places($pre,$post,$lc,$tt) {
 $pre = $pre|0;
 $post = $post|0;
 $lc = $lc|0;
 $tt = $tt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx12 = 0, $arrayidx15 = 0, $arrayidx16 = 0, $arrayidx17 = 0, $arrayidx18 = 0, $arrayidx2 = 0, $arrayidx20 = 0;
 var $arrayidx24 = 0, $arrayidx3 = 0, $arrayidx33 = 0, $arrayidx35 = 0, $arrayidx38 = 0, $arrayidx39 = 0, $arrayidx4 = 0, $arrayidx40 = 0, $arrayidx42 = 0, $arrayidx45 = 0, $arrayidx47 = 0, $arrayidx51 = 0, $arrayidx54 = 0, $arrayidx6 = 0, $arrayidx60 = 0, $arrayidx72 = 0, $arrayidx74 = 0, $arrayidx78 = 0, $arrayidx79 = 0, $arrayidx80 = 0;
 var $arrayidx82 = 0, $arrayidx86 = 0, $cmp = 0, $cmp10 = 0, $cmp30 = 0, $cmp69 = 0, $data = 0, $data46 = 0, $data52 = 0, $data87 = 0, $dec = 0, $dec76 = 0, $dec90 = 0, $e = 0, $e14 = 0, $e44 = 0, $e50 = 0, $e85 = 0, $fai = 0, $i = 0;
 var $inc = 0, $inc27 = 0, $inc66 = 0, $inner_tu2 = 0, $inner_tu256 = 0, $j = 0, $j22 = 0, $j58 = 0, $lc$addr = 0, $n = 0, $place = 0, $pos = 0, $post$addr = 0, $pre$addr = 0, $sub = 0, $sub34 = 0, $sub73 = 0, $tag48 = 0, $tag55 = 0, $taken = 0;
 var $taken7 = 0, $temp = 0, $tobool = 0, $tobool62 = 0, $tt$addr = 0, $valid = 0, $valid25 = 0, $valid43 = 0, $valid5 = 0, $valid61 = 0, $valid83 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1184|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1184|0);
 $place = sp + 608|0;
 $fai = sp + 48|0;
 $temp = sp + 12|0;
 $pre$addr = $pre;
 $post$addr = $post;
 $lc$addr = $lc;
 $tt$addr = $tt;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(20);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (($place) + (($1*28)|0)|0);
  $valid = ((($arrayidx)) + 4|0);
  HEAP32[$valid>>2] = 1;
  $2 = $i;
  $arrayidx1 = (($place) + (($2*28)|0)|0);
  $taken = ((($arrayidx1)) + 8|0);
  HEAP32[$taken>>2] = 0;
  $3 = $i;
  $arrayidx2 = (($place) + (($3*28)|0)|0);
  HEAP32[$arrayidx2>>2] = 0;
  $4 = $i;
  $5 = $i;
  $arrayidx3 = (($place) + (($5*28)|0)|0);
  $pos = ((($arrayidx3)) + 12|0);
  HEAP32[$pos>>2] = $4;
  $6 = $i;
  $arrayidx4 = (($fai) + (($6*28)|0)|0);
  $valid5 = ((($arrayidx4)) + 4|0);
  HEAP32[$valid5>>2] = 0;
  $7 = $i;
  $arrayidx6 = (($fai) + (($7*28)|0)|0);
  $taken7 = ((($arrayidx6)) + 8|0);
  HEAP32[$taken7>>2] = 0;
  $8 = $i;
  $inc = (($8) + 1)|0;
  $i = $inc;
 }
 $9 = $lc$addr;
 $10 = HEAP32[$9>>2]|0;
 $n = $10;
 $11 = $n;
 $sub = (($11) - 1)|0;
 $i = $sub;
 while(1) {
  $12 = $i;
  $cmp10 = ($12|0)>=(0);
  if (!($cmp10)) {
   break;
  }
  $13 = $lc$addr;
  $e = ((($13)) + 4|0);
  $14 = $i;
  $arrayidx12 = (($e) + (($14*12)|0)|0);
  $15 = HEAP32[$arrayidx12>>2]|0;
  switch ($15|0) {
  case 1:  {
   $16 = $lc$addr;
   $e14 = ((($16)) + 4|0);
   $17 = $i;
   $arrayidx15 = (($e14) + (($17*12)|0)|0);
   $data = ((($arrayidx15)) + 4|0);
   $j = $data;
   $arrayidx16 = ((($place)) + 28|0);
   ;HEAP32[$temp>>2]=HEAP32[$arrayidx16>>2]|0;HEAP32[$temp+4>>2]=HEAP32[$arrayidx16+4>>2]|0;HEAP32[$temp+8>>2]=HEAP32[$arrayidx16+8>>2]|0;HEAP32[$temp+12>>2]=HEAP32[$arrayidx16+12>>2]|0;HEAP32[$temp+16>>2]=HEAP32[$arrayidx16+16>>2]|0;HEAP32[$temp+20>>2]=HEAP32[$arrayidx16+20>>2]|0;HEAP32[$temp+24>>2]=HEAP32[$arrayidx16+24>>2]|0;
   $arrayidx17 = ((($place)) + 28|0);
   $18 = $j;
   $19 = HEAP32[$18>>2]|0;
   $arrayidx18 = (($place) + (($19*28)|0)|0);
   ;HEAP32[$arrayidx17>>2]=HEAP32[$arrayidx18>>2]|0;HEAP32[$arrayidx17+4>>2]=HEAP32[$arrayidx18+4>>2]|0;HEAP32[$arrayidx17+8>>2]=HEAP32[$arrayidx18+8>>2]|0;HEAP32[$arrayidx17+12>>2]=HEAP32[$arrayidx18+12>>2]|0;HEAP32[$arrayidx17+16>>2]=HEAP32[$arrayidx18+16>>2]|0;HEAP32[$arrayidx17+20>>2]=HEAP32[$arrayidx18+20>>2]|0;HEAP32[$arrayidx17+24>>2]=HEAP32[$arrayidx18+24>>2]|0;
   $20 = $j;
   $21 = HEAP32[$20>>2]|0;
   $arrayidx20 = (($place) + (($21*28)|0)|0);
   ;HEAP32[$arrayidx20>>2]=HEAP32[$temp>>2]|0;HEAP32[$arrayidx20+4>>2]=HEAP32[$temp+4>>2]|0;HEAP32[$arrayidx20+8>>2]=HEAP32[$temp+8>>2]|0;HEAP32[$arrayidx20+12>>2]=HEAP32[$temp+12>>2]|0;HEAP32[$arrayidx20+16>>2]=HEAP32[$temp+16>>2]|0;HEAP32[$arrayidx20+20>>2]=HEAP32[$temp+20>>2]|0;HEAP32[$arrayidx20+24>>2]=HEAP32[$temp+24>>2]|0;
   break;
  }
  case 3:  {
   $j22 = 1;
   while(1) {
    $22 = $j22;
    $arrayidx24 = (($fai) + (($22*28)|0)|0);
    $valid25 = ((($arrayidx24)) + 4|0);
    $23 = HEAP32[$valid25>>2]|0;
    $tobool = ($23|0)!=(0);
    if (!($tobool)) {
     break;
    }
    $24 = $j22;
    $inc27 = (($24) + 1)|0;
    $j22 = $inc27;
   }
   while(1) {
    $25 = $j22;
    $cmp30 = ($25|0)>(1);
    if (!($cmp30)) {
     break;
    }
    $26 = $j22;
    $arrayidx33 = (($fai) + (($26*28)|0)|0);
    $27 = $j22;
    $sub34 = (($27) - 1)|0;
    $arrayidx35 = (($fai) + (($sub34*28)|0)|0);
    ;HEAP32[$arrayidx33>>2]=HEAP32[$arrayidx35>>2]|0;HEAP32[$arrayidx33+4>>2]=HEAP32[$arrayidx35+4>>2]|0;HEAP32[$arrayidx33+8>>2]=HEAP32[$arrayidx35+8>>2]|0;HEAP32[$arrayidx33+12>>2]=HEAP32[$arrayidx35+12>>2]|0;HEAP32[$arrayidx33+16>>2]=HEAP32[$arrayidx35+16>>2]|0;HEAP32[$arrayidx33+20>>2]=HEAP32[$arrayidx35+20>>2]|0;HEAP32[$arrayidx33+24>>2]=HEAP32[$arrayidx35+24>>2]|0;
    $28 = $j22;
    $dec = (($28) + -1)|0;
    $j22 = $dec;
   }
   $arrayidx38 = ((($fai)) + 28|0);
   $arrayidx39 = ((($place)) + 28|0);
   ;HEAP32[$arrayidx38>>2]=HEAP32[$arrayidx39>>2]|0;HEAP32[$arrayidx38+4>>2]=HEAP32[$arrayidx39+4>>2]|0;HEAP32[$arrayidx38+8>>2]=HEAP32[$arrayidx39+8>>2]|0;HEAP32[$arrayidx38+12>>2]=HEAP32[$arrayidx39+12>>2]|0;HEAP32[$arrayidx38+16>>2]=HEAP32[$arrayidx39+16>>2]|0;HEAP32[$arrayidx38+20>>2]=HEAP32[$arrayidx39+20>>2]|0;HEAP32[$arrayidx38+24>>2]=HEAP32[$arrayidx39+24>>2]|0;
   $arrayidx40 = ((($place)) + 28|0);
   HEAP32[$arrayidx40>>2] = 1;
   $arrayidx42 = ((($place)) + 28|0);
   $valid43 = ((($arrayidx42)) + 4|0);
   HEAP32[$valid43>>2] = 1;
   $29 = $lc$addr;
   $e44 = ((($29)) + 4|0);
   $30 = $i;
   $arrayidx45 = (($e44) + (($30*12)|0)|0);
   $data46 = ((($arrayidx45)) + 4|0);
   $31 = HEAP32[$data46>>2]|0;
   $arrayidx47 = ((($place)) + 28|0);
   $tag48 = ((($arrayidx47)) + 16|0);
   HEAP32[$tag48>>2] = $31;
   $32 = $lc$addr;
   $e50 = ((($32)) + 4|0);
   $33 = $i;
   $arrayidx51 = (($e50) + (($33*12)|0)|0);
   $data52 = ((($arrayidx51)) + 4|0);
   $inner_tu2 = ((($data52)) + 4|0);
   $34 = HEAP32[$inner_tu2>>2]|0;
   $arrayidx54 = ((($place)) + 28|0);
   $tag55 = ((($arrayidx54)) + 16|0);
   $inner_tu256 = ((($tag55)) + 4|0);
   HEAP32[$inner_tu256>>2] = $34;
   break;
  }
  case 2:  {
   $j58 = 1;
   while(1) {
    $35 = $j58;
    $arrayidx60 = (($fai) + (($35*28)|0)|0);
    $valid61 = ((($arrayidx60)) + 4|0);
    $36 = HEAP32[$valid61>>2]|0;
    $tobool62 = ($36|0)!=(0);
    if (!($tobool62)) {
     break;
    }
    $37 = $j58;
    $inc66 = (($37) + 1)|0;
    $j58 = $inc66;
   }
   while(1) {
    $38 = $j58;
    $cmp69 = ($38|0)>(1);
    if (!($cmp69)) {
     break;
    }
    $39 = $j58;
    $arrayidx72 = (($fai) + (($39*28)|0)|0);
    $40 = $j58;
    $sub73 = (($40) - 1)|0;
    $arrayidx74 = (($fai) + (($sub73*28)|0)|0);
    ;HEAP32[$arrayidx72>>2]=HEAP32[$arrayidx74>>2]|0;HEAP32[$arrayidx72+4>>2]=HEAP32[$arrayidx74+4>>2]|0;HEAP32[$arrayidx72+8>>2]=HEAP32[$arrayidx74+8>>2]|0;HEAP32[$arrayidx72+12>>2]=HEAP32[$arrayidx74+12>>2]|0;HEAP32[$arrayidx72+16>>2]=HEAP32[$arrayidx74+16>>2]|0;HEAP32[$arrayidx72+20>>2]=HEAP32[$arrayidx74+20>>2]|0;HEAP32[$arrayidx72+24>>2]=HEAP32[$arrayidx74+24>>2]|0;
    $41 = $j58;
    $dec76 = (($41) + -1)|0;
    $j58 = $dec76;
   }
   $arrayidx78 = ((($fai)) + 28|0);
   $arrayidx79 = ((($place)) + 28|0);
   ;HEAP32[$arrayidx78>>2]=HEAP32[$arrayidx79>>2]|0;HEAP32[$arrayidx78+4>>2]=HEAP32[$arrayidx79+4>>2]|0;HEAP32[$arrayidx78+8>>2]=HEAP32[$arrayidx79+8>>2]|0;HEAP32[$arrayidx78+12>>2]=HEAP32[$arrayidx79+12>>2]|0;HEAP32[$arrayidx78+16>>2]=HEAP32[$arrayidx79+16>>2]|0;HEAP32[$arrayidx78+20>>2]=HEAP32[$arrayidx79+20>>2]|0;HEAP32[$arrayidx78+24>>2]=HEAP32[$arrayidx79+24>>2]|0;
   $arrayidx80 = ((($place)) + 28|0);
   HEAP32[$arrayidx80>>2] = 0;
   $arrayidx82 = ((($place)) + 28|0);
   $valid83 = ((($arrayidx82)) + 4|0);
   HEAP32[$valid83>>2] = 1;
   break;
  }
  case 0:  {
   $42 = $lc$addr;
   $e85 = ((($42)) + 4|0);
   $43 = $i;
   $arrayidx86 = (($e85) + (($43*12)|0)|0);
   $data87 = ((($arrayidx86)) + 4|0);
   $44 = HEAP32[$data87>>2]|0;
   $45 = $tt$addr;
   _assign_terms_to_places($44,$place,$fai,2,$45);
   break;
  }
  default: {
  }
  }
  $46 = $i;
  $dec90 = (($46) + -1)|0;
  $i = $dec90;
 }
 $47 = $pre$addr;
 $48 = $tt$addr;
 _assign_terms_to_places($47,$place,$fai,1,$48);
 $49 = $post$addr;
 $50 = $tt$addr;
 _assign_terms_to_places($49,$place,$fai,2,$50);
 STACKTOP = sp;return;
}
function _assign_conversion($lc,$convertible) {
 $lc = $lc|0;
 $convertible = $convertible|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx11 = 0, $arrayidx12 = 0, $arrayidx13 = 0, $arrayidx14 = 0, $arrayidx16 = 0, $arrayidx2 = 0, $arrayidx24 = 0, $arrayidx3 = 0, $arrayidx8 = 0, $call = 0, $call23 = 0;
 var $cmp = 0, $cmp6 = 0, $convertible$addr = 0, $data = 0, $dec = 0, $dg = 0, $e = 0, $e10 = 0, $ext = 0, $i = 0, $inc = 0, $j = 0, $lc$addr = 0, $n = 0, $place = 0, $pos = 0, $pos25 = 0, $senode = 0, $sub = 0, $taken = 0;
 var $temp = 0, $valid = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $vararg_buffer = sp;
 $place = sp + 56|0;
 $temp = sp + 12|0;
 $lc$addr = $lc;
 $convertible$addr = $convertible;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(20);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (($place) + (($1*28)|0)|0);
  $valid = ((($arrayidx)) + 4|0);
  HEAP32[$valid>>2] = 1;
  $2 = $i;
  $arrayidx1 = (($place) + (($2*28)|0)|0);
  $taken = ((($arrayidx1)) + 8|0);
  HEAP32[$taken>>2] = 0;
  $3 = $i;
  $arrayidx2 = (($place) + (($3*28)|0)|0);
  HEAP32[$arrayidx2>>2] = 0;
  $4 = $i;
  $5 = $i;
  $arrayidx3 = (($place) + (($5*28)|0)|0);
  $pos = ((($arrayidx3)) + 12|0);
  HEAP32[$pos>>2] = $4;
  $6 = $i;
  $inc = (($6) + 1)|0;
  $i = $inc;
 }
 $7 = $lc$addr;
 $8 = HEAP32[$7>>2]|0;
 $n = $8;
 $9 = $n;
 $sub = (($9) - 1)|0;
 $i = $sub;
 L5: while(1) {
  $10 = $i;
  $cmp6 = ($10|0)>=(0);
  if (!($cmp6)) {
   label = 10;
   break;
  }
  $11 = $lc$addr;
  $e = ((($11)) + 4|0);
  $12 = $i;
  $arrayidx8 = (($e) + (($12*12)|0)|0);
  $13 = HEAP32[$arrayidx8>>2]|0;
  switch ($13|0) {
  case 3:  {
   label = 10;
   break L5;
   break;
  }
  case 1:  {
   $14 = $lc$addr;
   $e10 = ((($14)) + 4|0);
   $15 = $i;
   $arrayidx11 = (($e10) + (($15*12)|0)|0);
   $data = ((($arrayidx11)) + 4|0);
   $j = $data;
   $arrayidx12 = ((($place)) + 28|0);
   ;HEAP32[$temp>>2]=HEAP32[$arrayidx12>>2]|0;HEAP32[$temp+4>>2]=HEAP32[$arrayidx12+4>>2]|0;HEAP32[$temp+8>>2]=HEAP32[$arrayidx12+8>>2]|0;HEAP32[$temp+12>>2]=HEAP32[$arrayidx12+12>>2]|0;HEAP32[$temp+16>>2]=HEAP32[$arrayidx12+16>>2]|0;HEAP32[$temp+20>>2]=HEAP32[$arrayidx12+20>>2]|0;HEAP32[$temp+24>>2]=HEAP32[$arrayidx12+24>>2]|0;
   $arrayidx13 = ((($place)) + 28|0);
   $16 = $j;
   $17 = HEAP32[$16>>2]|0;
   $arrayidx14 = (($place) + (($17*28)|0)|0);
   ;HEAP32[$arrayidx13>>2]=HEAP32[$arrayidx14>>2]|0;HEAP32[$arrayidx13+4>>2]=HEAP32[$arrayidx14+4>>2]|0;HEAP32[$arrayidx13+8>>2]=HEAP32[$arrayidx14+8>>2]|0;HEAP32[$arrayidx13+12>>2]=HEAP32[$arrayidx14+12>>2]|0;HEAP32[$arrayidx13+16>>2]=HEAP32[$arrayidx14+16>>2]|0;HEAP32[$arrayidx13+20>>2]=HEAP32[$arrayidx14+20>>2]|0;HEAP32[$arrayidx13+24>>2]=HEAP32[$arrayidx14+24>>2]|0;
   $18 = $j;
   $19 = HEAP32[$18>>2]|0;
   $arrayidx16 = (($place) + (($19*28)|0)|0);
   ;HEAP32[$arrayidx16>>2]=HEAP32[$temp>>2]|0;HEAP32[$arrayidx16+4>>2]=HEAP32[$temp+4>>2]|0;HEAP32[$arrayidx16+8>>2]=HEAP32[$temp+8>>2]|0;HEAP32[$arrayidx16+12>>2]=HEAP32[$temp+12>>2]|0;HEAP32[$arrayidx16+16>>2]=HEAP32[$temp+16>>2]|0;HEAP32[$arrayidx16+20>>2]=HEAP32[$temp+20>>2]|0;HEAP32[$arrayidx16+24>>2]=HEAP32[$temp+24>>2]|0;
   $20 = $j;
   $senode = ((($20)) + 4|0);
   $21 = HEAP32[$senode>>2]|0;
   $call = (_prop_dont_gloss($21,1)|0);
   $dg = $call;
   break;
  }
  case 2:  {
   $22 = HEAP32[7856]|0;
   (_fprintf($22,45756,$vararg_buffer)|0);
   break;
  }
  default: {
  }
  }
  $23 = $i;
  $dec = (($23) + -1)|0;
  $i = $dec;
 }
 if ((label|0) == 10) {
  $24 = $convertible$addr;
  $call23 = (_prop_conversion($24,1)|0);
  $ext = $call23;
  $arrayidx24 = ((($place)) + 28|0);
  $pos25 = ((($arrayidx24)) + 12|0);
  $25 = HEAP32[$pos25>>2]|0;
  $26 = $ext;
  HEAP32[$26>>2] = $25;
  STACKTOP = sp;return;
 }
}
function _process_selbri_3_args($s3,$pre,$post,$lc) {
 $s3 = $s3|0;
 $pre = $pre|0;
 $post = $post|0;
 $lc = $lc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call11 = 0, $call14 = 0, $call2 = 0, $call4 = 0, $call6 = 0, $cmp = 0, $cs3 = 0, $ks3 = 0, $lc$addr = 0, $post$addr = 0, $pre$addr = 0, $s3$addr = 0, $s4 = 0, $s5 = 0;
 var $tobool = 0, $tobool12 = 0, $tobool5 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $s3$addr = $s3;
 $pre$addr = $pre;
 $post$addr = $post;
 $lc$addr = $lc;
 $0 = $s3$addr;
 _type_check($0,98);
 $1 = $s3$addr;
 $call = (_find_nth_child($1,1,99)|0);
 $s4 = $call;
 $2 = $s4;
 $call1 = (_nch($2)|0);
 $cmp = ($call1|0)>(1);
 if (!($cmp)) {
  $19 = $s4;
  $call14 = (_find_nth_child($19,1,100)|0);
  $s5 = $call14;
  $20 = $s5;
  $21 = $pre$addr;
  $22 = $post$addr;
  $23 = $lc$addr;
  _process_selbri_5_args($20,$21,$22,$23);
  STACKTOP = sp;return;
 }
 while(1) {
  $3 = $s4;
  $call2 = (_find_nth_child($3,1,100)|0);
  $s5 = $call2;
  $4 = $s5;
  $tobool = ($4|0)!=(0|0);
  if ($tobool) {
   $5 = $s5;
   $6 = $pre$addr;
   $7 = $post$addr;
   $8 = $lc$addr;
   _process_selbri_5_args($5,$6,$7,$8);
  } else {
   $9 = $s4;
   $call4 = (_find_nth_child($9,1,50)|0);
   $ks3 = $call4;
   $10 = $ks3;
   $tobool5 = ($10|0)!=(0|0);
   if (!($tobool5)) {
    label = 5;
    break;
   }
   $11 = $ks3;
   $call6 = (_find_nth_child($11,1,98)|0);
   $cs3 = $call6;
   $12 = $cs3;
   $tobool7 = ($12|0)!=(0|0);
   if (!($tobool7)) {
    label = 7;
    break;
   }
   $13 = $cs3;
   $14 = $pre$addr;
   $15 = $post$addr;
   $16 = $lc$addr;
   _process_selbri_3_args($13,$14,$15,$16);
  }
  $17 = $s4;
  $call11 = (_find_nth_child($17,1,99)|0);
  $s4 = $call11;
  $18 = $s4;
  $tobool12 = ($18|0)!=(0|0);
  if (!($tobool12)) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 5) {
  ___assert_fail((45638|0),(45306|0),1025,(45642|0));
  // unreachable;
 }
 else if ((label|0) == 7) {
  ___assert_fail((45340|0),(45306|0),1027,(45642|0));
  // unreachable;
 }
 else if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function _lc_copy($src,$dest) {
 $src = $src|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $dest$addr = 0, $src$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $src$addr = $src;
 $dest$addr = $dest;
 $0 = $dest$addr;
 $1 = $src$addr;
 _memcpy(($0|0),($1|0),244)|0;
 STACKTOP = sp;return;
}
function _recover_se_conv($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call13 = 0, $call4 = 0, $call5 = 0, $call9 = 0, $cmp = 0, $code = 0;
 var $data = 0, $data1 = 0, $retval = 0, $se = 0, $se_code = 0, $se_str = 0, $tobool = 0, $tobool10 = 0, $tobool14 = 0, $tobool6 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $0 = $x$addr;
 $call = (_strip_attitudinal($0)|0);
 $se = $call;
 $1 = $se;
 $data = ((($1)) + 44|0);
 $2 = HEAP32[$data>>2]|0;
 $cmp = ($2|0)==(353);
 if (!($cmp)) {
  ___assert_fail((45594|0),(45306|0),205,(45622|0));
  // unreachable;
 }
 $3 = $se;
 $data1 = ((($3)) + 44|0);
 $code = ((($data1)) + 4|0);
 $4 = HEAP32[$code>>2]|0;
 $se_code = $4;
 $5 = $se_code;
 $arrayidx = (46450 + (($5*14)|0)|0);
 $6 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
 $se_str = $6;
 $7 = $se_str;
 $call4 = (_strcmp($7,108346)|0);
 $tobool = ($call4|0)!=(0);
 if (!($tobool)) {
  $retval = 2;
  $11 = $retval;
  STACKTOP = sp;return ($11|0);
 }
 $8 = $se_str;
 $call5 = (_strcmp($8,110725)|0);
 $tobool6 = ($call5|0)!=(0);
 if (!($tobool6)) {
  $retval = 3;
  $11 = $retval;
  STACKTOP = sp;return ($11|0);
 }
 $9 = $se_str;
 $call9 = (_strcmp($9,111675)|0);
 $tobool10 = ($call9|0)!=(0);
 if (!($tobool10)) {
  $retval = 4;
  $11 = $retval;
  STACKTOP = sp;return ($11|0);
 }
 $10 = $se_str;
 $call13 = (_strcmp($10,112678)|0);
 $tobool14 = ($call13|0)!=(0);
 if ($tobool14) {
  _abort();
  // unreachable;
 }
 $retval = 5;
 $11 = $retval;
 STACKTOP = sp;return ($11|0);
}
function _lc_append_se($lc,$conv,$senode) {
 $lc = $lc|0;
 $conv = $conv|0;
 $senode = $senode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx6 = 0, $cmp = 0, $conv$addr = 0;
 var $data = 0, $data7 = 0, $e = 0, $e10 = 0, $e4 = 0, $inc = 0, $lc$addr = 0, $senode$addr = 0, $senode9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $lc$addr = $lc;
 $conv$addr = $conv;
 $senode$addr = $senode;
 $0 = $lc$addr;
 $1 = HEAP32[$0>>2]|0;
 $cmp = ($1|0)<(20);
 if ($cmp) {
  $2 = $conv$addr;
  $3 = $lc$addr;
  $e = ((($3)) + 4|0);
  $4 = $lc$addr;
  $5 = HEAP32[$4>>2]|0;
  $arrayidx = (($e) + (($5*12)|0)|0);
  $data = ((($arrayidx)) + 4|0);
  HEAP32[$data>>2] = $2;
  $6 = $senode$addr;
  $7 = $lc$addr;
  $e4 = ((($7)) + 4|0);
  $8 = $lc$addr;
  $9 = HEAP32[$8>>2]|0;
  $arrayidx6 = (($e4) + (($9*12)|0)|0);
  $data7 = ((($arrayidx6)) + 4|0);
  $senode9 = ((($data7)) + 4|0);
  HEAP32[$senode9>>2] = $6;
  $10 = $lc$addr;
  $e10 = ((($10)) + 4|0);
  $11 = $lc$addr;
  $12 = HEAP32[$11>>2]|0;
  $arrayidx12 = (($e10) + (($12*12)|0)|0);
  HEAP32[$arrayidx12>>2] = 1;
  $13 = $lc$addr;
  $14 = HEAP32[$13>>2]|0;
  $inc = (($14) + 1)|0;
  HEAP32[$13>>2] = $inc;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((45521|0),(45306|0),145,(45581|0));
  // unreachable;
 }
}
function _lc_append_jai_tag($lc,$tag,$inner_tu2) {
 $lc = $lc|0;
 $tag = $tag|0;
 $inner_tu2 = $inner_tu2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx5 = 0, $cmp = 0, $data = 0;
 var $data6 = 0, $e = 0, $e3 = 0, $e9 = 0, $inc = 0, $inner_tu2$addr = 0, $inner_tu28 = 0, $lc$addr = 0, $tag$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $lc$addr = $lc;
 $tag$addr = $tag;
 $inner_tu2$addr = $inner_tu2;
 $0 = $lc$addr;
 $1 = HEAP32[$0>>2]|0;
 $cmp = ($1|0)<(20);
 if ($cmp) {
  $2 = $tag$addr;
  $3 = $lc$addr;
  $e = ((($3)) + 4|0);
  $4 = $lc$addr;
  $5 = HEAP32[$4>>2]|0;
  $arrayidx = (($e) + (($5*12)|0)|0);
  $data = ((($arrayidx)) + 4|0);
  HEAP32[$data>>2] = $2;
  $6 = $inner_tu2$addr;
  $7 = $lc$addr;
  $e3 = ((($7)) + 4|0);
  $8 = $lc$addr;
  $9 = HEAP32[$8>>2]|0;
  $arrayidx5 = (($e3) + (($9*12)|0)|0);
  $data6 = ((($arrayidx5)) + 4|0);
  $inner_tu28 = ((($data6)) + 4|0);
  HEAP32[$inner_tu28>>2] = $6;
  $10 = $lc$addr;
  $e9 = ((($10)) + 4|0);
  $11 = $lc$addr;
  $12 = HEAP32[$11>>2]|0;
  $arrayidx11 = (($e9) + (($12*12)|0)|0);
  HEAP32[$arrayidx11>>2] = 3;
  $13 = $lc$addr;
  $14 = HEAP32[$13>>2]|0;
  $inc = (($14) + 1)|0;
  HEAP32[$13>>2] = $inc;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((45521|0),(45306|0),155,(45563|0));
  // unreachable;
 }
}
function _lc_append_jai($lc) {
 $lc = $lc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arrayidx = 0, $cmp = 0, $e = 0, $inc = 0, $lc$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $lc$addr = $lc;
 $0 = $lc$addr;
 $1 = HEAP32[$0>>2]|0;
 $cmp = ($1|0)<(20);
 if ($cmp) {
  $2 = $lc$addr;
  $e = ((($2)) + 4|0);
  $3 = $lc$addr;
  $4 = HEAP32[$3>>2]|0;
  $arrayidx = (($e) + (($4*12)|0)|0);
  HEAP32[$arrayidx>>2] = 2;
  $5 = $lc$addr;
  $6 = HEAP32[$5>>2]|0;
  $inc = (($6) + 1)|0;
  HEAP32[$5>>2] = $inc;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((45521|0),(45306|0),166,(45549|0));
  // unreachable;
 }
}
function _process_selbri_5_args($s5,$pre,$post,$lc) {
 $s5 = $s5|0;
 $pre = $pre|0;
 $post = $post|0;
 $lc = $lc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $call1 = 0, $cs5 = 0, $lc$addr = 0, $post$addr = 0, $pre$addr = 0, $s5$addr = 0, $s6 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $s5$addr = $s5;
 $pre$addr = $pre;
 $post$addr = $post;
 $lc$addr = $lc;
 $0 = $s5$addr;
 $cs5 = $0;
 while(1) {
  $1 = $cs5;
  $call = (_find_nth_child($1,1,101)|0);
  $s6 = $call;
  $2 = $s6;
  $3 = $pre$addr;
  $4 = $post$addr;
  $5 = $lc$addr;
  _process_selbri_6_args($2,$3,$4,$5);
  $6 = $cs5;
  $call1 = (_find_nth_child($6,1,100)|0);
  $cs5 = $call1;
  $7 = $cs5;
  $tobool = ($7|0)!=(0|0);
  if (!($tobool)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _process_selbri_6_args($s6,$pre,$post,$lc) {
 $s6 = $s6|0;
 $pre = $pre|0;
 $post = $post|0;
 $lc = $lc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call10 = 0, $call12 = 0, $call13 = 0, $call2 = 0, $call6 = 0, $call8 = 0, $cmp = 0, $cmp3 = 0, $cs = 0;
 var $cs6 = 0, $lc$addr = 0, $post$addr = 0, $pre$addr = 0, $s6$addr = 0, $start_column = 0, $start_line = 0, $tobool = 0, $tu = 0, $tu1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $s6$addr = $s6;
 $pre$addr = $pre;
 $post$addr = $post;
 $lc$addr = $lc;
 $0 = $s6$addr;
 _type_check($0,101);
 $1 = $s6$addr;
 $call = (_nch($1)|0);
 $cmp = ($call|0)==(1);
 $2 = $s6$addr;
 if ($cmp) {
  $call1 = (_child_ref($2,0)|0);
  $tu = $call1;
  $3 = $tu;
  $call2 = (_nch($3)|0);
  $cmp3 = ($call2|0)>(1);
  if ($cmp3) {
   $4 = HEAP32[7856]|0;
   $5 = $tu;
   $start_line = ((($5)) + 32|0);
   $6 = HEAP32[$start_line>>2]|0;
   $7 = $tu;
   $start_column = ((($7)) + 36|0);
   $8 = HEAP32[$start_column>>2]|0;
   HEAP32[$vararg_buffer>>2] = $6;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $8;
   (_fprintf($4,45664,$vararg_buffer)|0);
   STACKTOP = sp;return;
  } else {
   $9 = $tu;
   $call6 = (_child_ref($9,0)|0);
   $tu1 = $call6;
   $10 = $tu1;
   $11 = $pre$addr;
   $12 = $post$addr;
   $13 = $lc$addr;
   _process_tanru_unit_1_args($10,$11,$12,$13);
   STACKTOP = sp;return;
  }
 } else {
  $call8 = (_find_nth_child($2,1,134)|0);
  $tu = $call8;
  $14 = $tu;
  $tobool = ($14|0)!=(0|0);
  $15 = $s6$addr;
  if ($tobool) {
   $call10 = (_find_nth_child($15,1,101)|0);
   $cs6 = $call10;
   $16 = $cs6;
   $17 = $pre$addr;
   $18 = $post$addr;
   $19 = $lc$addr;
   _process_selbri_6_args($16,$17,$18,$19);
   STACKTOP = sp;return;
  } else {
   $call12 = (_find_nth_child($15,1,95)|0);
   $cs = $call12;
   $20 = $s6$addr;
   $call13 = (_find_nth_child($20,1,101)|0);
   $cs6 = $call13;
   $21 = $cs;
   $22 = $pre$addr;
   $23 = $post$addr;
   $24 = $lc$addr;
   _process_selbri_args($21,$22,$23,$24);
   $25 = $cs6;
   $26 = $pre$addr;
   $27 = $post$addr;
   $28 = $lc$addr;
   _process_selbri_6_args($25,$26,$27,$28);
   STACKTOP = sp;return;
  }
 }
}
function _process_tanru_unit_1_args($tu1,$pre,$post,$lc) {
 $tu1 = $tu1|0;
 $pre = $pre|0;
 $post = $post|0;
 $lc = $lc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call2 = 0, $lc$addr = 0, $newlc = 0, $post$addr = 0;
 var $pre$addr = 0, $tobool = 0, $tu1$addr = 0, $tu2 = 0, $xdtu1 = 0, $xtv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $newlc = sp;
 $tu1$addr = $tu1;
 $pre$addr = $pre;
 $post$addr = $post;
 $lc$addr = $lc;
 $0 = $tu1$addr;
 $call = (_prop_term_vector($0,0)|0);
 $xtv = $call;
 $1 = $tu1$addr;
 $call1 = (_child_ref($1,0)|0);
 $tu2 = $call1;
 $2 = $xtv;
 $tobool = ($2|0)!=(0|0);
 if ($tobool) {
  $3 = $lc$addr;
  _lc_copy($3,$newlc);
  $4 = $xtv;
  $5 = HEAP32[$4>>2]|0;
  _lc_append_links($newlc,$5);
  $6 = $tu2;
  $7 = $pre$addr;
  $8 = $post$addr;
  _process_tanru_unit_2_args($6,$7,$8,$newlc);
  $13 = $tu1$addr;
  $call2 = (_prop_done_tu1($13,1)|0);
  $xdtu1 = $call2;
  STACKTOP = sp;return;
 } else {
  $9 = $tu2;
  $10 = $pre$addr;
  $11 = $post$addr;
  $12 = $lc$addr;
  _process_tanru_unit_2_args($9,$10,$11,$12);
  $13 = $tu1$addr;
  $call2 = (_prop_done_tu1($13,1)|0);
  $xdtu1 = $call2;
  STACKTOP = sp;return;
 }
}
function _process_selbri_args($s,$pre,$post,$lc) {
 $s = $s|0;
 $pre = $pre|0;
 $post = $post|0;
 $lc = $lc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $call = 0, $call1 = 0, $call10 = 0, $call11 = 0, $call2 = 0, $call5 = 0, $call6 = 0, $call8 = 0, $cmp = 0, $cmp9 = 0, $cs = 0, $empty_tv = 0, $lc$addr = 0, $lnot = 0, $post$addr = 0, $pre$addr = 0, $s$addr = 0, $s1 = 0, $s2 = 0, $s3 = 0;
 var $tobool = 0, $tobool3 = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $empty_tv = sp;
 $s$addr = $s;
 $pre$addr = $pre;
 $post$addr = $post;
 $lc$addr = $lc;
 _tv_init($empty_tv);
 $0 = $s$addr;
 _type_check($0,95);
 $1 = $s$addr;
 $cs = $1;
 while(1) {
  $2 = $cs;
  $call = (_find_nth_child($2,1,96)|0);
  $s1 = $call;
  $3 = $s1;
  $call1 = (_find_nth_child($3,1,97)|0);
  $s2 = $call1;
  $4 = $s2;
  $tobool = ($4|0)!=(0|0);
  if (!($tobool)) {
   $5 = $s1;
   $call2 = (_find_nth_child($5,1,95)|0);
   $cs = $call2;
   $6 = $cs;
   $tobool3 = ($6|0)!=(0|0);
   if (!($tobool3)) {
    label = 4;
    break;
   }
  }
  $7 = $s2;
  $tobool4 = ($7|0)!=(0|0);
  $lnot = $tobool4 ^ 1;
  if (!($lnot)) {
   break;
  }
 }
 if ((label|0) == 4) {
  ___assert_fail((45733|0),(45306|0),1061,(45736|0));
  // unreachable;
 }
 $8 = $s2;
 $call5 = (_child_ref($8,0)|0);
 $s3 = $call5;
 $9 = $s2;
 $call6 = (_nch($9)|0);
 $cmp = ($call6|0)>(1);
 $10 = $s3;
 $11 = $pre$addr;
 if (!($cmp)) {
  $18 = $post$addr;
  $19 = $lc$addr;
  _process_selbri_3_args($10,$11,$18,$19);
  STACKTOP = sp;return;
 }
 $12 = $lc$addr;
 _process_selbri_3_args($10,$11,$empty_tv,$12);
 while(1) {
  $13 = $s2;
  $call8 = (_nch($13)|0);
  $cmp9 = ($call8|0)>(1);
  $14 = $s2;
  if (!($cmp9)) {
   break;
  }
  $call10 = (_find_nth_child($14,1,97)|0);
  $s2 = $call10;
 }
 $call11 = (_child_ref($14,0)|0);
 $s3 = $call11;
 $15 = $s3;
 $16 = $post$addr;
 $17 = $lc$addr;
 _process_selbri_3_args($15,$empty_tv,$16,$17);
 STACKTOP = sp;return;
}
function _assign_terms_to_places($t,$place,$fai,$abase,$tt) {
 $t = $t|0;
 $place = $place|0;
 $fai = $fai|0;
 $abase = $abase|0;
 $tt = $tt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $abase$addr = 0, $add = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx11 = 0, $arrayidx12 = 0, $arrayidx14 = 0, $arrayidx19 = 0, $arrayidx21 = 0, $arrayidx22 = 0, $arrayidx3 = 0, $arrayidx34 = 0, $arrayidx36 = 0, $arrayidx45 = 0, $arrayidx47 = 0, $arrayidx48 = 0;
 var $arrayidx54 = 0, $arrayidx7 = 0, $base = 0, $cmp = 0, $cmp1 = 0, $cmp31 = 0, $cmp40 = 0, $cmp5 = 0, $cmp56 = 0, $fai$addr = 0, $i = 0, $inc = 0, $inc29 = 0, $inc39 = 0, $inc50 = 0, $inc60 = 0, $n = 0, $node = 0, $node20 = 0, $node46 = 0;
 var $nodes = 0, $nodes18 = 0, $nodes2 = 0, $nodes33 = 0, $nodes44 = 0, $nodes53 = 0, $nodes9 = 0, $place$addr = 0, $pos = 0, $pos4 = 0, $pos55 = 0, $sub = 0, $t$addr = 0, $taken = 0, $taken23 = 0, $taken37 = 0, $taken49 = 0, $tobool = 0, $tobool16 = 0, $tobool38 = 0;
 var $tt$addr = 0, $valid = 0, $valid15 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $t$addr = $t;
 $place$addr = $place;
 $fai$addr = $fai;
 $abase$addr = $abase;
 $tt$addr = $tt;
 $0 = $abase$addr;
 $base = $0;
 $1 = $t$addr;
 $2 = HEAP32[$1>>2]|0;
 $n = $2;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $n;
  $cmp = ($3|0)<($4|0);
  if (!($cmp)) {
   break;
  }
  $5 = $t$addr;
  $nodes = ((($5)) + 4|0);
  $6 = $i;
  $arrayidx = (($nodes) + (($6*12)|0)|0);
  $7 = HEAP32[$arrayidx>>2]|0;
  $cmp1 = ($7|0)==(1);
  do {
   if ($cmp1) {
    $8 = $t$addr;
    $nodes2 = ((($8)) + 4|0);
    $9 = $i;
    $arrayidx3 = (($nodes2) + (($9*12)|0)|0);
    $pos4 = ((($arrayidx3)) + 4|0);
    $10 = HEAP32[$pos4>>2]|0;
    $pos = $10;
    $11 = $pos;
    $cmp5 = ($11|0)<(101);
    if ($cmp5) {
     $12 = $place$addr;
     $13 = $pos;
     $arrayidx7 = (($12) + (($13*28)|0)|0);
     $valid = ((($arrayidx7)) + 4|0);
     $14 = HEAP32[$valid>>2]|0;
     $tobool = ($14|0)!=(0);
     if ($tobool) {
      $15 = $t$addr;
      $nodes9 = ((($15)) + 4|0);
      $16 = $i;
      $arrayidx10 = (($nodes9) + (($16*12)|0)|0);
      $node = ((($arrayidx10)) + 8|0);
      $17 = HEAP32[$node>>2]|0;
      $18 = $place$addr;
      $19 = $pos;
      $arrayidx11 = (($18) + (($19*28)|0)|0);
      $20 = $tt$addr;
      _fixup_term_place($17,$arrayidx11,$20);
      $21 = $place$addr;
      $22 = $pos;
      $arrayidx12 = (($21) + (($22*28)|0)|0);
      $taken = ((($arrayidx12)) + 8|0);
      HEAP32[$taken>>2] = 1;
      break;
     } else {
      $23 = HEAP32[7856]|0;
      (_fprintf($23,45811,$vararg_buffer)|0);
      break;
     }
    } else {
     $24 = $pos;
     $sub = (($24) - 101)|0;
     $pos = $sub;
     $25 = $pos;
     $inc = (($25) + 1)|0;
     $pos = $inc;
     $26 = $fai$addr;
     $27 = $pos;
     $arrayidx14 = (($26) + (($27*28)|0)|0);
     $valid15 = ((($arrayidx14)) + 4|0);
     $28 = HEAP32[$valid15>>2]|0;
     $tobool16 = ($28|0)!=(0);
     if ($tobool16) {
      $29 = $t$addr;
      $nodes18 = ((($29)) + 4|0);
      $30 = $i;
      $arrayidx19 = (($nodes18) + (($30*12)|0)|0);
      $node20 = ((($arrayidx19)) + 8|0);
      $31 = HEAP32[$node20>>2]|0;
      $32 = $fai$addr;
      $33 = $pos;
      $arrayidx21 = (($32) + (($33*28)|0)|0);
      $34 = $tt$addr;
      _fixup_term_place($31,$arrayidx21,$34);
      $35 = $fai$addr;
      $36 = $pos;
      $arrayidx22 = (($35) + (($36*28)|0)|0);
      $taken23 = ((($arrayidx22)) + 8|0);
      HEAP32[$taken23>>2] = 1;
      break;
     } else {
      $37 = HEAP32[7856]|0;
      (_fprintf($37,45811,$vararg_buffer1)|0);
      break;
     }
    }
   }
  } while(0);
  $38 = $i;
  $inc29 = (($38) + 1)|0;
  $i = $inc29;
 }
 $i = 0;
 while(1) {
  $39 = $i;
  $40 = $n;
  $cmp31 = ($39|0)<($40|0);
  if (!($cmp31)) {
   break;
  }
  $41 = $t$addr;
  $nodes33 = ((($41)) + 4|0);
  $42 = $i;
  $arrayidx34 = (($nodes33) + (($42*12)|0)|0);
  $43 = HEAP32[$arrayidx34>>2]|0;
  L20: do {
   switch ($43|0) {
   case 0:  {
    while(1) {
     $44 = $place$addr;
     $45 = $base;
     $arrayidx36 = (($44) + (($45*28)|0)|0);
     $taken37 = ((($arrayidx36)) + 8|0);
     $46 = HEAP32[$taken37>>2]|0;
     $tobool38 = ($46|0)!=(0);
     $47 = $base;
     if (!($tobool38)) {
      break;
     }
     $inc39 = (($47) + 1)|0;
     $base = $inc39;
    }
    $cmp40 = ($47|0)>(20);
    if ($cmp40) {
     $48 = HEAP32[7856]|0;
     (_fprintf($48,45826,$vararg_buffer3)|0);
     break L20;
    } else {
     $49 = $t$addr;
     $nodes44 = ((($49)) + 4|0);
     $50 = $i;
     $arrayidx45 = (($nodes44) + (($50*12)|0)|0);
     $node46 = ((($arrayidx45)) + 8|0);
     $51 = HEAP32[$node46>>2]|0;
     $52 = $place$addr;
     $53 = $base;
     $arrayidx47 = (($52) + (($53*28)|0)|0);
     $54 = $tt$addr;
     _fixup_term_place($51,$arrayidx47,$54);
     $55 = $place$addr;
     $56 = $base;
     $arrayidx48 = (($55) + (($56*28)|0)|0);
     $taken49 = ((($arrayidx48)) + 8|0);
     HEAP32[$taken49>>2] = 1;
     $57 = $base;
     $inc50 = (($57) + 1)|0;
     $base = $inc50;
     break L20;
    }
    break;
   }
   case 1:  {
    $58 = $t$addr;
    $nodes53 = ((($58)) + 4|0);
    $59 = $i;
    $arrayidx54 = (($nodes53) + (($59*12)|0)|0);
    $pos55 = ((($arrayidx54)) + 4|0);
    $60 = HEAP32[$pos55>>2]|0;
    $pos = $60;
    $61 = $pos;
    $cmp56 = ($61|0)<(101);
    if ($cmp56) {
     $62 = $pos;
     $add = (($62) + 1)|0;
     $base = $add;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $63 = $i;
  $inc60 = (($63) + 1)|0;
  $i = $inc60;
 }
 STACKTOP = sp;return;
}
function _fixup_term_place($x,$pl,$tt) {
 $x = $x|0;
 $pl = $pl|0;
 $tt = $tt|0;
 var $$sink = 0, $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call3 = 0, $call6 = 0, $inner_tu2 = 0, $inner_tu218 = 0, $jaitag = 0, $jaitag17 = 0, $nts = 0, $pl$addr = 0, $pos = 0;
 var $pos9 = 0, $tag = 0, $tag11 = 0, $tag13 = 0, $tag15 = 0, $tag16 = 0, $tag22 = 0, $tag8 = 0, $tobool = 0, $tobool1 = 0, $ts = 0, $tt$addr = 0, $x$addr = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $pl$addr = $pl;
 $tt$addr = $tt;
 $0 = $x$addr;
 _type_check($0,137);
 $1 = $x$addr;
 $call = (_prop_term_tags($1,0)|0);
 $ts = $call;
 $2 = $ts;
 $tobool = ($2|0)!=(0|0);
 if ($tobool) {
  while(1) {
   $3 = $ts;
   $4 = HEAP32[$3>>2]|0;
   $tobool1 = ($4|0)!=(0|0);
   if (!($tobool1)) {
    break;
   }
   $5 = $ts;
   $6 = HEAP32[$5>>2]|0;
   $ts = $6;
  }
  $call3 = (_Malloc(56)|0);
  $nts = $call3;
  $7 = $nts;
  $8 = $ts;
  HEAP32[$8>>2] = $7;
  $9 = $nts;
  HEAP32[$9>>2] = 0;
  $10 = $nts;
  $ts = $10;
 } else {
  $11 = $x$addr;
  $call6 = (_prop_term_tags($11,1)|0);
  $ts = $call6;
  $12 = $ts;
  HEAP32[$12>>2] = 0;
 }
 $13 = $ts;
 $tag = ((($13)) + 4|0);
 $14 = $tt$addr;
 dest=$tag; src=$14; stop=dest+52|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $15 = $pl$addr;
 $pos = ((($15)) + 12|0);
 $16 = HEAP32[$pos>>2]|0;
 $17 = $ts;
 $tag8 = ((($17)) + 4|0);
 $pos9 = ((($tag8)) + 4|0);
 HEAP32[$pos9>>2] = $16;
 $18 = $pl$addr;
 $19 = HEAP32[$18>>2]|0;
 switch ($19|0) {
 case 2:  {
  $27 = $ts;
  $$sink = 2;$$sink1 = $27;
  break;
 }
 case 1:  {
  $20 = $pl$addr;
  $tag11 = ((($20)) + 16|0);
  $21 = HEAP32[$tag11>>2]|0;
  $22 = $ts;
  $tag13 = ((($22)) + 4|0);
  $jaitag = ((($tag13)) + 12|0);
  HEAP32[$jaitag>>2] = $21;
  $23 = $pl$addr;
  $tag15 = ((($23)) + 16|0);
  $inner_tu2 = ((($tag15)) + 4|0);
  $24 = HEAP32[$inner_tu2>>2]|0;
  $25 = $ts;
  $tag16 = ((($25)) + 4|0);
  $jaitag17 = ((($tag16)) + 12|0);
  $inner_tu218 = ((($jaitag17)) + 4|0);
  HEAP32[$inner_tu218>>2] = $24;
  $26 = $ts;
  $$sink = 1;$$sink1 = $26;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $tag22 = ((($$sink1)) + 4|0);
 HEAP32[$tag22>>2] = $$sink;
 STACKTOP = sp;return;
}
function _process_sumti_5b($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $c = 0, $call = 0, $empty_tv = 0, $lc = 0, $tobool = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(496|0);
 $lc = sp + 244|0;
 $empty_tv = sp;
 $x$addr = $x;
 _tv_init($empty_tv);
 $0 = $x$addr;
 $call = (_find_nth_child($0,1,95)|0);
 $c = $call;
 $1 = $c;
 $tobool = ($1|0)!=(0|0);
 if ($tobool) {
  _lc_init($lc);
  $2 = $c;
  _process_selbri_args($2,$empty_tv,$empty_tv,$lc);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((72354|0),(45306|0),1530,(45890|0));
  // unreachable;
 }
}
function _process_sumti_tail_1a($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $c = 0, $call = 0, $empty_tv = 0, $lc = 0, $tobool = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(496|0);
 $lc = sp + 244|0;
 $empty_tv = sp;
 $x$addr = $x;
 _tv_init($empty_tv);
 $0 = $x$addr;
 $call = (_find_nth_child($0,1,95)|0);
 $c = $call;
 $1 = $c;
 $tobool = ($1|0)!=(0|0);
 if ($tobool) {
  _lc_init($lc);
  $2 = $c;
  _process_selbri_args($2,$empty_tv,$empty_tv,$lc);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((72354|0),(45306|0),1545,(45868|0));
  // unreachable;
 }
}
function _process_statement_3($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $btail = 0, $c = 0, $call = 0, $call30 = 0, $children = 0, $children16 = 0, $cmp = 0;
 var $cmp14 = 0, $cmp19 = 0, $cmp2 = 0, $cmp24 = 0, $cmp26 = 0, $cmp5 = 0, $cmp7 = 0, $data = 0, $data11 = 0, $data21 = 0, $data3 = 0, $nt = 0, $ntc = 0, $nts = 0, $pre_terms = 0, $sent = 0, $tail_terms = 0, $terms = 0, $tobool = 0, $tobool34 = 0;
 var $type = 0, $type1 = 0, $type18 = 0, $type23 = 0, $type25 = 0, $type6 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $pre_terms = sp + 244|0;
 $tail_terms = sp;
 $x$addr = $x;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 if (!($cmp)) {
  ___assert_fail((46265|0),(45306|0),1361,(46325|0));
  // unreachable;
 }
 $2 = $x$addr;
 $data = ((($2)) + 44|0);
 $type1 = ((($data)) + 12|0);
 $3 = HEAP32[$type1>>2]|0;
 $cmp2 = ($3|0)==(116);
 if (!($cmp2)) {
  ___assert_fail((46265|0),(45306|0),1361,(46325|0));
  // unreachable;
 }
 $4 = $x$addr;
 $data3 = ((($4)) + 44|0);
 $nt = $data3;
 $5 = $nt;
 $6 = HEAP32[$5>>2]|0;
 $cmp5 = ($6|0)==(1);
 if (!($cmp5)) {
  STACKTOP = sp;return;
 }
 $7 = $nt;
 $children = ((($7)) + 16|0);
 $8 = HEAP32[$children>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $sent = $9;
 $10 = $sent;
 $type6 = ((($10)) + 40|0);
 $11 = HEAP32[$type6>>2]|0;
 $cmp7 = ($11|0)==(10);
 if (!($cmp7)) {
  ___assert_fail((46345|0),(45306|0),1373,(46325|0));
  // unreachable;
 }
 $12 = $sent;
 $data11 = ((($12)) + 44|0);
 $nts = $data11;
 $13 = $nts;
 $14 = HEAP32[$13>>2]|0;
 $cmp14 = ($14|0)==(1);
 do {
  if ($cmp14) {
   $15 = $nts;
   $children16 = ((($15)) + 16|0);
   $16 = HEAP32[$children16>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $c = $17;
   $18 = $c;
   $type18 = ((($18)) + 40|0);
   $19 = HEAP32[$type18>>2]|0;
   $cmp19 = ($19|0)==(10);
   if ($cmp19) {
    $20 = $c;
    $data21 = ((($20)) + 44|0);
    $ntc = $data21;
    $21 = $ntc;
    $type23 = ((($21)) + 12|0);
    $22 = HEAP32[$type23>>2]|0;
    $cmp24 = ($22|0)==(73);
    if (!($cmp24)) {
     $23 = $ntc;
     $type25 = ((($23)) + 12|0);
     $24 = HEAP32[$type25>>2]|0;
     $cmp26 = ($24|0)==(77);
     if (!($cmp26)) {
      break;
     }
    }
    $25 = $c;
    $sent = $25;
    $26 = $ntc;
    $nts = $26;
   }
  }
 } while(0);
 $27 = $sent;
 $call = (_find_nth_child($27,1,138)|0);
 $terms = $call;
 $28 = $sent;
 $call30 = (_find_nth_child($28,1,3)|0);
 $btail = $call30;
 $29 = $btail;
 $tobool = ($29|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((46084|0),(45306|0),1390,(46325|0));
  // unreachable;
 }
 _tv_init($tail_terms);
 $30 = $terms;
 $tobool34 = ($30|0)!=(0|0);
 if ($tobool34) {
  $31 = $terms;
  _tv_build($pre_terms,$31);
 } else {
  _tv_init($pre_terms);
 }
 $32 = $btail;
 _process_bridi_tail($32,$pre_terms,$tail_terms);
 STACKTOP = sp;return;
}
function _process_abstraction($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $post = 0, $pre = 0, $ss = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(496|0);
 $pre = sp + 244|0;
 $post = sp;
 $x$addr = $x;
 _tv_init($pre);
 _tv_init($post);
 $0 = $x$addr;
 $call = (_child_ref($0,1)|0);
 $ss = $call;
 $1 = $ss;
 _type_check($1,118);
 $2 = $ss;
 _process_subsentence($2,$pre,$post);
 STACKTOP = sp;return;
}
function _process_relative_clause($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $cmp = 0, $data = 0, $fc = 0, $post = 0, $pre = 0, $ss = 0, $tobool = 0, $type = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $pre = sp + 244|0;
 $post = sp;
 $x$addr = $x;
 _tv_init($pre);
 _tv_init($post);
 $0 = $x$addr;
 $call = (_child_ref($0,0)|0);
 $fc = $call;
 $1 = $fc;
 $data = ((($1)) + 44|0);
 $type = ((($data)) + 12|0);
 $2 = HEAP32[$type>>2]|0;
 $cmp = ($2|0)==(17);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $3 = $fc;
 $call1 = (_find_nth_child($3,1,118)|0);
 $ss = $call1;
 $4 = $ss;
 $tobool = ($4|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $5 = $ss;
 _process_subsentence($5,$pre,$post);
 STACKTOP = sp;return;
}
function _process_metalinguistic($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call1 = 0, $call2 = 0, $lc = 0, $mmselbri = 0, $post = 0, $pre = 0, $selbri = 0, $terms = 0, $tobool = 0, $tobool3 = 0, $x$addr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 752|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(752|0);
 $pre = sp + 500|0;
 $post = sp + 256|0;
 $lc = sp;
 $x$addr = $x;
 $0 = $x$addr;
 $call = (_find_nth_child($0,1,138)|0);
 $terms = $call;
 $1 = $x$addr;
 $call1 = (_find_nth_child($1,1,59)|0);
 $mmselbri = $call1;
 $2 = $mmselbri;
 $tobool = ($2|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((45907|0),(45306|0),1467,(45916|0));
  // unreachable;
 }
 $3 = $mmselbri;
 $call2 = (_child_ref($3,0)|0);
 $selbri = $call2;
 _tv_init($pre);
 _tv_init($post);
 $4 = $terms;
 $tobool3 = ($4|0)!=(0|0);
 if (!($tobool3)) {
  _lc_init($lc);
  $6 = $selbri;
  _process_selbri_args($6,$pre,$post,$lc);
  STACKTOP = sp;return;
 }
 $5 = $terms;
 _tv_build($pre,$5);
 _lc_init($lc);
 $6 = $selbri;
 _process_selbri_args($6,$pre,$post,$lc);
 STACKTOP = sp;return;
}
function _tv_build($r,$x) {
 $r = $r|0;
 $x = $x|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx37 = 0, $arrayidx4 = 0, $arrayidx41 = 0, $arrayidx50 = 0, $arrayidx54 = 0, $arrayidx67 = 0, $arrayidx71 = 0, $arrayidx79 = 0, $arrayidx83 = 0, $call44 = 0;
 var $call45 = 0, $children = 0, $children15 = 0, $children25 = 0, $children3 = 0, $children32 = 0, $children5 = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp20 = 0, $cmp29 = 0, $cmp46 = 0, $cmp91 = 0, $data = 0, $data17 = 0, $data27 = 0, $data30 = 0, $data34 = 0, $data9 = 0;
 var $inc = 0, $inc75 = 0, $inc86 = 0, $nc = 0, $node = 0, $node55 = 0, $node68 = 0, $node84 = 0, $nodes = 0, $nodes39 = 0, $nodes48 = 0, $nodes52 = 0, $nodes65 = 0, $nodes69 = 0, $nodes77 = 0, $nodes81 = 0, $ntc = 0, $ntt = 0, $ntx = 0, $pos = 0;
 var $pos72 = 0, $r$addr = 0, $start_line = 0, $start_line22 = 0, $start_line88 = 0, $t = 0, $t1 = 0, $t2 = 0, $tc = 0, $tcc = 0, $type = 0, $type36 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vv = 0, $x$addr = 0, $xx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $vv = sp + 64|0;
 $r$addr = $r;
 $x$addr = $x;
 $0 = $x$addr;
 _type_check($0,138);
 _tv_init($vv);
 $1 = $x$addr;
 $xx = $1;
 L1: while(1) {
  $2 = $xx;
  $data = ((($2)) + 44|0);
  $ntx = $data;
  $3 = $ntx;
  $4 = HEAP32[$3>>2]|0;
  $nc = $4;
  $5 = $nc;
  $cmp = ($5|0)==(1);
  if ($cmp) {
   $6 = $ntx;
   $children = ((($6)) + 16|0);
   $7 = HEAP32[$children>>2]|0;
   $8 = HEAP32[$7>>2]|0;
   $t1 = $8;
  } else {
   $9 = $nc;
   $cmp1 = ($9|0)==(2);
   if (!($cmp1)) {
    label = 6;
    break;
   }
   $10 = $ntx;
   $children3 = ((($10)) + 16|0);
   $11 = HEAP32[$children3>>2]|0;
   $arrayidx4 = ((($11)) + 4|0);
   $12 = HEAP32[$arrayidx4>>2]|0;
   $t1 = $12;
   $13 = $ntx;
   $children5 = ((($13)) + 16|0);
   $14 = HEAP32[$children5>>2]|0;
   $15 = HEAP32[$14>>2]|0;
   $xx = $15;
  }
  $16 = $t1;
  _type_check($16,142);
  $17 = $t1;
  $data9 = ((($17)) + 44|0);
  $ntt = $data9;
  $18 = $ntt;
  $19 = HEAP32[$18>>2]|0;
  $ntc = $19;
  $20 = $ntc;
  $cmp12 = ($20|0)>(1);
  L8: do {
   if ($cmp12) {
    $21 = HEAP32[7856]|0;
    $22 = $t1;
    $start_line = ((($22)) + 32|0);
    $23 = HEAP32[$start_line>>2]|0;
    HEAP32[$vararg_buffer>>2] = $23;
    (_fprintf($21,45939,$vararg_buffer)|0);
   } else {
    $24 = $ntt;
    $children15 = ((($24)) + 16|0);
    $25 = HEAP32[$children15>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $t2 = $26;
    $27 = $t2;
    _type_check($27,143);
    $28 = $t2;
    $data17 = ((($28)) + 44|0);
    $ntt = $data17;
    $29 = $ntt;
    $30 = HEAP32[$29>>2]|0;
    $ntc = $30;
    $31 = $ntc;
    $cmp20 = ($31|0)>(1);
    if ($cmp20) {
     $32 = HEAP32[7856]|0;
     $33 = $t2;
     $start_line22 = ((($33)) + 32|0);
     $34 = HEAP32[$start_line22>>2]|0;
     HEAP32[$vararg_buffer2>>2] = $34;
     (_fprintf($32,45939,$vararg_buffer2)|0);
     break;
    }
    $35 = $ntt;
    $children25 = ((($35)) + 16|0);
    $36 = HEAP32[$children25>>2]|0;
    $37 = HEAP32[$36>>2]|0;
    $t = $37;
    $38 = $t;
    $data27 = ((($38)) + 44|0);
    $type = ((($data27)) + 12|0);
    $39 = HEAP32[$type>>2]|0;
    $cmp29 = ($39|0)==(137);
    if (!($cmp29)) {
     label = 12;
     break L1;
    }
    $40 = $t;
    $data30 = ((($40)) + 44|0);
    $children32 = ((($data30)) + 16|0);
    $41 = HEAP32[$children32>>2]|0;
    $42 = HEAP32[$41>>2]|0;
    $tc = $42;
    $43 = $tc;
    $data34 = ((($43)) + 44|0);
    $type36 = ((($data34)) + 12|0);
    $44 = HEAP32[$type36>>2]|0;
    switch ($44|0) {
    case 148:  {
     $nodes = ((($vv)) + 4|0);
     $45 = HEAP32[$vv>>2]|0;
     $arrayidx37 = (($nodes) + (($45*12)|0)|0);
     HEAP32[$arrayidx37>>2] = 0;
     $46 = $t;
     $nodes39 = ((($vv)) + 4|0);
     $47 = HEAP32[$vv>>2]|0;
     $arrayidx41 = (($nodes39) + (($47*12)|0)|0);
     $node = ((($arrayidx41)) + 8|0);
     HEAP32[$node>>2] = $46;
     $48 = HEAP32[$vv>>2]|0;
     $inc = (($48) + 1)|0;
     HEAP32[$vv>>2] = $inc;
     break L8;
     break;
    }
    case 147:  {
     $49 = $tc;
     $call44 = (_child_ref($49,0)|0);
     $tcc = $call44;
     $50 = $tcc;
     $call45 = (_recover_fa_conv($50)|0);
     $pos = $call45;
     $51 = $pos;
     $cmp46 = ($51|0)==(0);
     $nodes48 = ((($vv)) + 4|0);
     $52 = HEAP32[$vv>>2]|0;
     $arrayidx50 = (($nodes48) + (($52*12)|0)|0);
     if ($cmp46) {
      HEAP32[$arrayidx50>>2] = 2;
      $53 = $t;
      $nodes52 = ((($vv)) + 4|0);
      $54 = HEAP32[$vv>>2]|0;
      $arrayidx54 = (($nodes52) + (($54*12)|0)|0);
      $node55 = ((($arrayidx54)) + 8|0);
      HEAP32[$node55>>2] = $53;
      $$sink = 0;
     } else {
      HEAP32[$arrayidx50>>2] = 1;
      $55 = $t;
      $nodes65 = ((($vv)) + 4|0);
      $56 = HEAP32[$vv>>2]|0;
      $arrayidx67 = (($nodes65) + (($56*12)|0)|0);
      $node68 = ((($arrayidx67)) + 8|0);
      HEAP32[$node68>>2] = $55;
      $57 = $pos;
      $$sink = $57;
     }
     $nodes69 = ((($vv)) + 4|0);
     $58 = HEAP32[$vv>>2]|0;
     $arrayidx71 = (($nodes69) + (($58*12)|0)|0);
     $pos72 = ((($arrayidx71)) + 4|0);
     HEAP32[$pos72>>2] = $$sink;
     $59 = HEAP32[$vv>>2]|0;
     $inc75 = (($59) + 1)|0;
     HEAP32[$vv>>2] = $inc75;
     break L8;
     break;
    }
    case 132: case 150:  {
     $nodes77 = ((($vv)) + 4|0);
     $60 = HEAP32[$vv>>2]|0;
     $arrayidx79 = (($nodes77) + (($60*12)|0)|0);
     HEAP32[$arrayidx79>>2] = 3;
     $61 = $t;
     $nodes81 = ((($vv)) + 4|0);
     $62 = HEAP32[$vv>>2]|0;
     $arrayidx83 = (($nodes81) + (($62*12)|0)|0);
     $node84 = ((($arrayidx83)) + 8|0);
     HEAP32[$node84>>2] = $61;
     $63 = HEAP32[$vv>>2]|0;
     $inc86 = (($63) + 1)|0;
     HEAP32[$vv>>2] = $inc86;
     break L8;
     break;
    }
    case 139:  {
     $64 = HEAP32[7856]|0;
     $65 = $t;
     $start_line88 = ((($65)) + 32|0);
     $66 = HEAP32[$start_line88>>2]|0;
     HEAP32[$vararg_buffer5>>2] = $66;
     (_fprintf($64,45939,$vararg_buffer5)|0);
     break L8;
     break;
    }
    default: {
     break L8;
    }
    }
   }
  } while(0);
  $67 = $nc;
  $cmp91 = ($67|0)==(2);
  if (!($cmp91)) {
   label = 22;
   break;
  }
 }
 if ((label|0) == 6) {
  _abort();
  // unreachable;
 }
 else if ((label|0) == 12) {
  ___assert_fail((45980|0),(45306|0),323,(46009|0));
  // unreachable;
 }
 else if ((label|0) == 22) {
  $68 = $r$addr;
  _tv_reverse($68,$vv);
  STACKTOP = sp;return;
 }
}
function _recover_fa_conv($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call13 = 0, $call17 = 0, $call21 = 0;
 var $call25 = 0, $call4 = 0, $call5 = 0, $call9 = 0, $cmp = 0, $code = 0, $data = 0, $data1 = 0, $fa_code = 0, $fa_str = 0, $retval = 0, $tobool = 0, $tobool10 = 0, $tobool14 = 0, $tobool18 = 0, $tobool22 = 0, $tobool26 = 0, $tobool6 = 0, $x$addr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $call = (_strip_attitudinal($0)|0);
 $x$addr = $call;
 $1 = $x$addr;
 $data = ((($1)) + 44|0);
 $2 = HEAP32[$data>>2]|0;
 $cmp = ($2|0)==(284);
 if (!($cmp)) {
  ___assert_fail((46041|0),(45306|0),240,(46068|0));
  // unreachable;
 }
 $3 = $x$addr;
 $data1 = ((($3)) + 44|0);
 $code = ((($data1)) + 4|0);
 $4 = HEAP32[$code>>2]|0;
 $fa_code = $4;
 $5 = $fa_code;
 $arrayidx = (46450 + (($5*14)|0)|0);
 $6 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
 $fa_str = $6;
 $7 = $fa_str;
 $call4 = (_strcmp($7,97700)|0);
 $tobool = ($call4|0)!=(0);
 do {
  if ($tobool) {
   $8 = $fa_str;
   $call5 = (_strcmp($8,72828)|0);
   $tobool6 = ($call5|0)!=(0);
   if (!($tobool6)) {
    $retval = 1;
    break;
   }
   $9 = $fa_str;
   $call9 = (_strcmp($9,72949)|0);
   $tobool10 = ($call9|0)!=(0);
   if (!($tobool10)) {
    $retval = 2;
    break;
   }
   $10 = $fa_str;
   $call13 = (_strcmp($10,73052)|0);
   $tobool14 = ($call13|0)!=(0);
   if (!($tobool14)) {
    $retval = 3;
    break;
   }
   $11 = $fa_str;
   $call17 = (_strcmp($11,73139)|0);
   $tobool18 = ($call17|0)!=(0);
   if (!($tobool18)) {
    $retval = 4;
    break;
   }
   $12 = $fa_str;
   $call21 = (_strcmp($12,73209)|0);
   $tobool22 = ($call21|0)!=(0);
   if (!($tobool22)) {
    $retval = 5;
    break;
   }
   $13 = $fa_str;
   $call25 = (_strcmp($13,97283)|0);
   $tobool26 = ($call25|0)!=(0);
   if ($tobool26) {
    _abort();
    // unreachable;
   } else {
    $retval = 101;
    break;
   }
  } else {
   $retval = 0;
  }
 } while(0);
 $14 = $retval;
 STACKTOP = sp;return ($14|0);
}
function _tv_reverse($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx5 = 0, $cmp = 0, $cmp2 = 0, $dest$addr = 0, $i = 0, $inc = 0;
 var $n = 0, $nodes = 0, $nodes3 = 0, $src$addr = 0, $sub = 0, $sub4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $dest$addr = $dest;
 $src$addr = $src;
 $0 = $dest$addr;
 $1 = $src$addr;
 $cmp = ($0|0)!=($1|0);
 if (!($cmp)) {
  ___assert_fail((46018|0),(45306|0),128,(46030|0));
  // unreachable;
 }
 $2 = $src$addr;
 $3 = HEAP32[$2>>2]|0;
 $4 = $dest$addr;
 HEAP32[$4>>2] = $3;
 $n = $3;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $n;
  $cmp2 = ($5|0)<($6|0);
  if (!($cmp2)) {
   break;
  }
  $7 = $dest$addr;
  $nodes = ((($7)) + 4|0);
  $8 = $i;
  $arrayidx = (($nodes) + (($8*12)|0)|0);
  $9 = $src$addr;
  $nodes3 = ((($9)) + 4|0);
  $10 = $n;
  $sub = (($10) - 1)|0;
  $11 = $i;
  $sub4 = (($sub) - ($11))|0;
  $arrayidx5 = (($nodes3) + (($sub4*12)|0)|0);
  ;HEAP32[$arrayidx>>2]=HEAP32[$arrayidx5>>2]|0;HEAP32[$arrayidx+4>>2]=HEAP32[$arrayidx5+4>>2]|0;HEAP32[$arrayidx+8>>2]=HEAP32[$arrayidx5+8>>2]|0;
  $12 = $i;
  $inc = (($12) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _process_subsentence($ss,$pre,$post) {
 $ss = $ss|0;
 $pre = $pre|0;
 $post = $post|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $btail = 0, $c = 0, $call = 0, $call1 = 0, $call20 = 0;
 var $call21 = 0, $children = 0, $cmp = 0, $cmp13 = 0, $cmp15 = 0, $cmp2 = 0, $cmp6 = 0, $cmp8 = 0, $data = 0, $data10 = 0, $data3 = 0, $head_terms = 0, $nc = 0, $new_pre = 0, $nt = 0, $ntc = 0, $post$addr = 0, $pre$addr = 0, $ss$addr = 0, $sss = 0;
 var $terms = 0, $tobool = 0, $tobool22 = 0, $type = 0, $type12 = 0, $type14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $head_terms = sp + 252|0;
 $new_pre = sp + 8|0;
 $ss$addr = $ss;
 $pre$addr = $pre;
 $post$addr = $post;
 $0 = $ss$addr;
 $sss = $0;
 while(1) {
  $1 = $ss$addr;
  _type_check($1,118);
  $2 = $sss;
  $data = ((($2)) + 44|0);
  $nt = $data;
  $3 = $nt;
  $4 = HEAP32[$3>>2]|0;
  $nc = $4;
  $5 = $nc;
  $cmp = ($5|0)==(2);
  $6 = $sss;
  if ($cmp) {
   $call = (_child_ref($6,1)|0);
   $sss = $call;
  } else {
   $call1 = (_child_ref($6,0)|0);
   $sss = $call1;
  }
  $7 = $nc;
  $cmp2 = ($7|0)==(2);
  if (!($cmp2)) {
   break;
  }
 }
 $8 = $sss;
 _type_check($8,102);
 $9 = $sss;
 $data3 = ((($9)) + 44|0);
 $nt = $data3;
 $10 = $nt;
 $11 = HEAP32[$10>>2]|0;
 $cmp6 = ($11|0)==(1);
 do {
  if ($cmp6) {
   $12 = $nt;
   $children = ((($12)) + 16|0);
   $13 = HEAP32[$children>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $c = $14;
   $15 = $c;
   $type = ((($15)) + 40|0);
   $16 = HEAP32[$type>>2]|0;
   $cmp8 = ($16|0)==(10);
   if ($cmp8) {
    $17 = $c;
    $data10 = ((($17)) + 44|0);
    $ntc = $data10;
    $18 = $ntc;
    $type12 = ((($18)) + 12|0);
    $19 = HEAP32[$type12>>2]|0;
    $cmp13 = ($19|0)==(73);
    if (!($cmp13)) {
     $20 = $ntc;
     $type14 = ((($20)) + 12|0);
     $21 = HEAP32[$type14>>2]|0;
     $cmp15 = ($21|0)==(77);
     if (!($cmp15)) {
      break;
     }
    }
    $22 = $c;
    $sss = $22;
    $23 = $ntc;
    $nt = $23;
   }
  }
 } while(0);
 $24 = $sss;
 $call20 = (_find_nth_child($24,1,138)|0);
 $terms = $call20;
 $25 = $sss;
 $call21 = (_find_nth_child($25,1,3)|0);
 $btail = $call21;
 $26 = $btail;
 $tobool = ($26|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((46084|0),(45306|0),417,(46090|0));
  // unreachable;
 }
 $27 = $terms;
 $tobool22 = ($27|0)!=(0|0);
 if ($tobool22) {
  $28 = $terms;
  _tv_build($head_terms,$28);
  $29 = $pre$addr;
  _tv_catenate($29,$head_terms,$new_pre);
  $30 = $btail;
  $31 = $post$addr;
  _process_bridi_tail($30,$new_pre,$31);
  STACKTOP = sp;return;
 } else {
  $32 = $btail;
  $33 = $pre$addr;
  $34 = $post$addr;
  _process_bridi_tail($32,$33,$34);
  STACKTOP = sp;return;
 }
}
function _tv_catenate($s1,$s2,$r) {
 $s1 = $s1|0;
 $s2 = $s2|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add12 = 0, $arrayidx = 0, $arrayidx13 = 0, $arrayidx15 = 0, $arrayidx7 = 0, $cmp = 0, $cmp5 = 0, $cmp9 = 0, $i = 0, $inc = 0, $inc17 = 0, $n1 = 0, $n2 = 0;
 var $nodes = 0, $nodes11 = 0, $nodes14 = 0, $nodes6 = 0, $r$addr = 0, $s1$addr = 0, $s2$addr = 0, $tn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $s1$addr = $s1;
 $s2$addr = $s2;
 $r$addr = $r;
 $0 = $s1$addr;
 $1 = HEAP32[$0>>2]|0;
 $2 = $s2$addr;
 $3 = HEAP32[$2>>2]|0;
 $add = (($1) + ($3))|0;
 $tn = $add;
 $4 = $tn;
 $cmp = ($4|0)<=(20);
 if (!($cmp)) {
  ___assert_fail((46227|0),(45306|0),107,(46253|0));
  // unreachable;
 }
 $5 = $s1$addr;
 $6 = HEAP32[$5>>2]|0;
 $n1 = $6;
 $7 = $s2$addr;
 $8 = HEAP32[$7>>2]|0;
 $n2 = $8;
 $9 = $tn;
 $10 = $r$addr;
 HEAP32[$10>>2] = $9;
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $n1;
  $cmp5 = ($11|0)<($12|0);
  if (!($cmp5)) {
   break;
  }
  $13 = $r$addr;
  $nodes = ((($13)) + 4|0);
  $14 = $i;
  $arrayidx = (($nodes) + (($14*12)|0)|0);
  $15 = $s1$addr;
  $nodes6 = ((($15)) + 4|0);
  $16 = $i;
  $arrayidx7 = (($nodes6) + (($16*12)|0)|0);
  ;HEAP32[$arrayidx>>2]=HEAP32[$arrayidx7>>2]|0;HEAP32[$arrayidx+4>>2]=HEAP32[$arrayidx7+4>>2]|0;HEAP32[$arrayidx+8>>2]=HEAP32[$arrayidx7+8>>2]|0;
  $17 = $i;
  $inc = (($17) + 1)|0;
  $i = $inc;
 }
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = $n2;
  $cmp9 = ($18|0)<($19|0);
  if (!($cmp9)) {
   break;
  }
  $20 = $r$addr;
  $nodes11 = ((($20)) + 4|0);
  $21 = $n1;
  $22 = $i;
  $add12 = (($21) + ($22))|0;
  $arrayidx13 = (($nodes11) + (($add12*12)|0)|0);
  $23 = $s2$addr;
  $nodes14 = ((($23)) + 4|0);
  $24 = $i;
  $arrayidx15 = (($nodes14) + (($24*12)|0)|0);
  ;HEAP32[$arrayidx13>>2]=HEAP32[$arrayidx15>>2]|0;HEAP32[$arrayidx13+4>>2]=HEAP32[$arrayidx15+4>>2]|0;HEAP32[$arrayidx13+8>>2]=HEAP32[$arrayidx15+8>>2]|0;
  $25 = $i;
  $inc17 = (($25) + 1)|0;
  $i = $inc17;
 }
 STACKTOP = sp;return;
}
function _process_bridi_tail($bt,$pre,$post) {
 $bt = $bt|0;
 $pre = $pre|0;
 $post = $post|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bt$addr = 0, $bt1 = 0, $btc = 0, $call = 0, $call1 = 0, $call6 = 0;
 var $call9 = 0, $children = 0, $cmp = 0, $data = 0, $nc = 0, $new_post = 0, $nt = 0, $post$addr = 0, $pre$addr = 0, $tail_terms = 0, $tobool = 0, $tobool10 = 0, $tobool2 = 0, $tobool7 = 0, $tt = 0, $ttt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $new_post = sp + 244|0;
 $tail_terms = sp;
 $bt$addr = $bt;
 $pre$addr = $pre;
 $post$addr = $post;
 $0 = $bt$addr;
 $data = ((($0)) + 44|0);
 $nt = $data;
 $1 = $nt;
 $2 = HEAP32[$1>>2]|0;
 $nc = $2;
 $3 = $nc;
 $cmp = ($3|0)==(1);
 if ($cmp) {
  $4 = $nt;
  $children = ((($4)) + 16|0);
  $5 = HEAP32[$children>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $bt1 = $6;
  $7 = $bt1;
  $8 = $pre$addr;
  $9 = $post$addr;
  _process_bridi_tail_1($7,$8,$9);
  STACKTOP = sp;return;
 }
 $10 = $bt$addr;
 $call = (_find_nth_child($10,1,3)|0);
 $btc = $call;
 $11 = $btc;
 $tobool = ($11|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((46110|0),(45306|0),1332,(46114|0));
  // unreachable;
 }
 $12 = $bt$addr;
 $call1 = (_find_nth_child($12,1,4)|0);
 $bt1 = $call1;
 $13 = $bt1;
 $tobool2 = ($13|0)!=(0|0);
 if (!($tobool2)) {
  ___assert_fail((46133|0),(45306|0),1335,(46114|0));
  // unreachable;
 }
 $14 = $bt$addr;
 $call6 = (_find_nth_child($14,1,133)|0);
 $tt = $call6;
 $15 = $tt;
 $tobool7 = ($15|0)!=(0|0);
 if (!($tobool7)) {
  $29 = $bt1;
  $30 = $pre$addr;
  _process_bridi_tail_1($29,$30,$new_post);
  $31 = $btc;
  $32 = $pre$addr;
  $33 = $post$addr;
  _process_bridi_tail($31,$32,$33);
  STACKTOP = sp;return;
 }
 $16 = $tt;
 $call9 = (_find_nth_child($16,1,138)|0);
 $ttt = $call9;
 $17 = $ttt;
 $tobool10 = ($17|0)!=(0|0);
 if ($tobool10) {
  $18 = $ttt;
  _tv_build($tail_terms,$18);
  $19 = $post$addr;
  _tv_catenate($tail_terms,$19,$new_post);
  $20 = $bt1;
  $21 = $pre$addr;
  _process_bridi_tail_1($20,$21,$new_post);
  $22 = $btc;
  $23 = $pre$addr;
  _process_bridi_tail($22,$23,$new_post);
  STACKTOP = sp;return;
 } else {
  $24 = $bt1;
  $25 = $pre$addr;
  _process_bridi_tail_1($24,$25,$new_post);
  $26 = $btc;
  $27 = $pre$addr;
  $28 = $post$addr;
  _process_bridi_tail($26,$27,$28);
  STACKTOP = sp;return;
 }
}
function _process_bridi_tail_1($bt1,$pre,$post) {
 $bt1 = $bt1|0;
 $pre = $pre|0;
 $post = $post|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bt1$addr = 0, $bt1c = 0, $bt2 = 0, $call = 0;
 var $call1 = 0, $call6 = 0, $call9 = 0, $children = 0, $cmp = 0, $data = 0, $nc = 0, $new_post = 0, $nt = 0, $post$addr = 0, $pre$addr = 0, $tail_terms = 0, $tobool = 0, $tobool10 = 0, $tobool2 = 0, $tobool7 = 0, $tt = 0, $ttt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $new_post = sp + 244|0;
 $tail_terms = sp;
 $bt1$addr = $bt1;
 $pre$addr = $pre;
 $post$addr = $post;
 $0 = $bt1$addr;
 $data = ((($0)) + 44|0);
 $nt = $data;
 $1 = $nt;
 $2 = HEAP32[$1>>2]|0;
 $nc = $2;
 $3 = $nc;
 $cmp = ($3|0)==(1);
 if ($cmp) {
  $4 = $nt;
  $children = ((($4)) + 16|0);
  $5 = HEAP32[$children>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $bt2 = $6;
  $7 = $bt2;
  $8 = $pre$addr;
  $9 = $post$addr;
  _process_bridi_tail_2($7,$8,$9);
  STACKTOP = sp;return;
 }
 $10 = $bt1$addr;
 $call = (_find_nth_child($10,1,4)|0);
 $bt1c = $call;
 $11 = $bt1c;
 $tobool = ($11|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((46137|0),(45306|0),1267,(46142|0));
  // unreachable;
 }
 $12 = $bt1$addr;
 $call1 = (_find_nth_child($12,1,5)|0);
 $bt2 = $call1;
 $13 = $bt2;
 $tobool2 = ($13|0)!=(0|0);
 if (!($tobool2)) {
  ___assert_fail((46163|0),(45306|0),1269,(46142|0));
  // unreachable;
 }
 $14 = $bt1$addr;
 $call6 = (_find_nth_child($14,1,133)|0);
 $tt = $call6;
 $15 = $tt;
 $tobool7 = ($15|0)!=(0|0);
 if (!($tobool7)) {
  $30 = $bt1c;
  $31 = $pre$addr;
  $32 = $post$addr;
  _process_bridi_tail_1($30,$31,$32);
  $33 = $bt2;
  $34 = $pre$addr;
  $35 = $post$addr;
  _process_bridi_tail_2($33,$34,$35);
  STACKTOP = sp;return;
 }
 $16 = $tt;
 $call9 = (_find_nth_child($16,1,138)|0);
 $ttt = $call9;
 $17 = $ttt;
 $tobool10 = ($17|0)!=(0|0);
 if ($tobool10) {
  $18 = $ttt;
  _tv_build($tail_terms,$18);
  $19 = $post$addr;
  _tv_catenate($tail_terms,$19,$new_post);
  $20 = $bt1c;
  $21 = $pre$addr;
  _process_bridi_tail_1($20,$21,$new_post);
  $22 = $bt2;
  $23 = $pre$addr;
  _process_bridi_tail_2($22,$23,$new_post);
  STACKTOP = sp;return;
 } else {
  $24 = $bt1c;
  $25 = $pre$addr;
  $26 = $post$addr;
  _process_bridi_tail_1($24,$25,$26);
  $27 = $bt2;
  $28 = $pre$addr;
  $29 = $post$addr;
  _process_bridi_tail_2($27,$28,$29);
  STACKTOP = sp;return;
 }
}
function _process_bridi_tail_2($bt2,$pre,$post) {
 $bt2 = $bt2|0;
 $pre = $pre|0;
 $post = $post|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bt2$addr = 0, $bt2a = 0, $bt2b = 0, $bt3 = 0;
 var $call = 0, $call1 = 0, $call6 = 0, $call9 = 0, $children = 0, $cmp = 0, $data = 0, $nc = 0, $new_post = 0, $nt = 0, $post$addr = 0, $pre$addr = 0, $tail_terms = 0, $tobool = 0, $tobool10 = 0, $tobool2 = 0, $tobool7 = 0, $tt = 0, $ttt = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $new_post = sp + 244|0;
 $tail_terms = sp;
 $bt2$addr = $bt2;
 $pre$addr = $pre;
 $post$addr = $post;
 $0 = $bt2$addr;
 $data = ((($0)) + 44|0);
 $nt = $data;
 $1 = $nt;
 $2 = HEAP32[$1>>2]|0;
 $nc = $2;
 $3 = $nc;
 $cmp = ($3|0)==(1);
 if ($cmp) {
  $4 = $nt;
  $children = ((($4)) + 16|0);
  $5 = HEAP32[$children>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $bt3 = $6;
  $7 = $bt3;
  $8 = $pre$addr;
  $9 = $post$addr;
  _process_bridi_tail_3($7,$8,$9);
  STACKTOP = sp;return;
 }
 $10 = $bt2$addr;
 $call = (_find_nth_child($10,1,5)|0);
 $bt2a = $call;
 $11 = $bt2a;
 $tobool = ($11|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((46167|0),(45306|0),1217,(46172|0));
  // unreachable;
 }
 $12 = $bt2$addr;
 $call1 = (_find_nth_child($12,2,5)|0);
 $bt2b = $call1;
 $13 = $bt2b;
 $tobool2 = ($13|0)!=(0|0);
 if (!($tobool2)) {
  ___assert_fail((46193|0),(45306|0),1219,(46172|0));
  // unreachable;
 }
 $14 = $bt2$addr;
 $call6 = (_find_nth_child($14,1,133)|0);
 $tt = $call6;
 $15 = $tt;
 $tobool7 = ($15|0)!=(0|0);
 if (!($tobool7)) {
  $30 = $bt2a;
  $31 = $pre$addr;
  $32 = $post$addr;
  _process_bridi_tail_2($30,$31,$32);
  $33 = $bt2b;
  $34 = $pre$addr;
  $35 = $post$addr;
  _process_bridi_tail_2($33,$34,$35);
  STACKTOP = sp;return;
 }
 $16 = $tt;
 $call9 = (_find_nth_child($16,1,138)|0);
 $ttt = $call9;
 $17 = $ttt;
 $tobool10 = ($17|0)!=(0|0);
 if ($tobool10) {
  $18 = $ttt;
  _tv_build($tail_terms,$18);
  $19 = $post$addr;
  _tv_catenate($tail_terms,$19,$new_post);
  $20 = $bt2a;
  $21 = $pre$addr;
  _process_bridi_tail_2($20,$21,$new_post);
  $22 = $bt2b;
  $23 = $pre$addr;
  _process_bridi_tail_2($22,$23,$new_post);
  STACKTOP = sp;return;
 } else {
  $24 = $bt2a;
  $25 = $pre$addr;
  $26 = $post$addr;
  _process_bridi_tail_2($24,$25,$26);
  $27 = $bt2b;
  $28 = $pre$addr;
  $29 = $post$addr;
  _process_bridi_tail_2($27,$28,$29);
  STACKTOP = sp;return;
 }
}
function _process_bridi_tail_3($bt3,$pre,$post) {
 $bt3 = $bt3|0;
 $pre = $pre|0;
 $post = $post|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bt3$addr = 0, $c1 = 0, $call = 0, $call1 = 0, $call10 = 0, $call17 = 0, $call18 = 0, $call19 = 0;
 var $call27 = 0, $call3 = 0, $call30 = 0, $cmp = 0, $cmp12 = 0, $cmp16 = 0, $data = 0, $data13 = 0, $gs = 0, $gsc = 0, $ms = 0, $new_post = 0, $new_post33 = 0, $post$addr = 0, $pre$addr = 0, $ss1 = 0, $ss2 = 0, $tail_terms = 0, $tail_terms34 = 0, $tobool = 0;
 var $tobool20 = 0, $tobool23 = 0, $tobool28 = 0, $tobool31 = 0, $tobool4 = 0, $tt = 0, $tt9 = 0, $ttc = 0, $ttt = 0, $type = 0, $type11 = 0, $type15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $tail_terms = sp + 756|0;
 $new_post = sp + 512|0;
 $new_post33 = sp + 244|0;
 $tail_terms34 = sp;
 $bt3$addr = $bt3;
 $pre$addr = $pre;
 $post$addr = $post;
 $0 = $bt3$addr;
 _type_check($0,6);
 $1 = $bt3$addr;
 $call = (_child_ref($1,0)|0);
 $c1 = $call;
 $2 = $c1;
 $data = ((($2)) + 44|0);
 $type = ((($data)) + 12|0);
 $3 = HEAP32[$type>>2]|0;
 $cmp = ($3|0)==(57);
 $4 = $c1;
 if ($cmp) {
  $ms = $4;
  $5 = $bt3$addr;
  $call1 = (_find_nth_child($5,1,133)|0);
  $tt = $call1;
  $6 = $tt;
  $tobool = ($6|0)!=(0|0);
  if (!($tobool)) {
   $16 = $ms;
   $17 = $pre$addr;
   $18 = $post$addr;
   _process_main_selbri($16,$17,$18);
   STACKTOP = sp;return;
  }
  $7 = $tt;
  $call3 = (_find_nth_child($7,1,138)|0);
  $ttc = $call3;
  $8 = $ttc;
  $tobool4 = ($8|0)!=(0|0);
  if ($tobool4) {
   $9 = $ttc;
   _tv_build($tail_terms,$9);
   $10 = $post$addr;
   _tv_catenate($tail_terms,$10,$new_post);
   $11 = $ms;
   $12 = $pre$addr;
   _process_main_selbri($11,$12,$new_post);
   STACKTOP = sp;return;
  } else {
   $13 = $ms;
   $14 = $pre$addr;
   $15 = $post$addr;
   _process_main_selbri($13,$14,$15);
   STACKTOP = sp;return;
  }
 }
 $gs = $4;
 $19 = $gs;
 _type_check($19,19);
 while(1) {
  $20 = $gs;
  $call10 = (_child_ref($20,0)|0);
  $gsc = $call10;
  $21 = $gsc;
  $type11 = ((($21)) + 40|0);
  $22 = HEAP32[$type11>>2]|0;
  $cmp12 = ($22|0)!=(10);
  if ($cmp12) {
   $51 = 1;
  } else {
   $23 = $gsc;
   $data13 = ((($23)) + 44|0);
   $type15 = ((($data13)) + 12|0);
   $24 = HEAP32[$type15>>2]|0;
   $cmp16 = ($24|0)!=(18);
   $51 = $cmp16;
  }
  $25 = $gs;
  if (!($51)) {
   break;
  }
  $call17 = (_find_nth_child($25,1,19)|0);
  $gs = $call17;
 }
 $call18 = (_find_nth_child($25,1,118)|0);
 $ss1 = $call18;
 $26 = $gs;
 $call19 = (_find_nth_child($26,2,118)|0);
 $ss2 = $call19;
 $27 = $ss1;
 $tobool20 = ($27|0)!=(0|0);
 if (!($tobool20)) {
  ___assert_fail((46198|0),(45306|0),1167,(46202|0));
  // unreachable;
 }
 $28 = $ss2;
 $tobool23 = ($28|0)!=(0|0);
 if (!($tobool23)) {
  ___assert_fail((46223|0),(45306|0),1168,(46202|0));
  // unreachable;
 }
 $29 = $gs;
 $call27 = (_find_nth_child($29,1,133)|0);
 $tt9 = $call27;
 $30 = $tt9;
 $tobool28 = ($30|0)!=(0|0);
 if (!($tobool28)) {
  $45 = $ss1;
  $46 = $pre$addr;
  $47 = $post$addr;
  _process_subsentence($45,$46,$47);
  $48 = $ss2;
  $49 = $pre$addr;
  $50 = $post$addr;
  _process_subsentence($48,$49,$50);
  STACKTOP = sp;return;
 }
 $31 = $tt9;
 $call30 = (_find_nth_child($31,1,138)|0);
 $ttt = $call30;
 $32 = $ttt;
 $tobool31 = ($32|0)!=(0|0);
 if ($tobool31) {
  $33 = $ttt;
  _tv_build($tail_terms34,$33);
  $34 = $post$addr;
  _tv_catenate($tail_terms34,$34,$new_post33);
  $35 = $ss1;
  $36 = $pre$addr;
  _process_subsentence($35,$36,$new_post33);
  $37 = $ss2;
  $38 = $pre$addr;
  _process_subsentence($37,$38,$new_post33);
  STACKTOP = sp;return;
 } else {
  $39 = $ss1;
  $40 = $pre$addr;
  $41 = $post$addr;
  _process_subsentence($39,$40,$41);
  $42 = $ss2;
  $43 = $pre$addr;
  $44 = $post$addr;
  _process_subsentence($42,$43,$44);
  STACKTOP = sp;return;
 }
}
function _process_main_selbri($ms,$pre,$post) {
 $ms = $ms|0;
 $pre = $pre|0;
 $post = $post|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call2 = 0, $call5 = 0, $cpost = 0, $cpre = 0;
 var $lc = 0, $ms$addr = 0, $post$addr = 0, $post4 = 0, $pre$addr = 0, $s = 0, $xtv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $lc = sp;
 $ms$addr = $ms;
 $pre$addr = $pre;
 $post$addr = $post;
 $0 = $ms$addr;
 _type_check($0,57);
 $call = (_Malloc(244)|0);
 $cpre = $call;
 $call1 = (_Malloc(244)|0);
 $cpost = $call1;
 $1 = $cpre;
 $2 = $pre$addr;
 _memcpy(($1|0),($2|0),244)|0;
 $3 = $cpost;
 $4 = $post$addr;
 _memcpy(($3|0),($4|0),244)|0;
 $5 = $ms$addr;
 $call2 = (_prop_term_vectors($5,1)|0);
 $xtv = $call2;
 $6 = $cpre;
 $7 = $xtv;
 HEAP32[$7>>2] = $6;
 $8 = $cpost;
 $9 = $xtv;
 $post4 = ((($9)) + 4|0);
 HEAP32[$post4>>2] = $8;
 _lc_init($lc);
 $10 = $ms$addr;
 $call5 = (_child_ref($10,0)|0);
 $s = $call5;
 $11 = $s;
 $12 = $pre$addr;
 $13 = $post$addr;
 _process_selbri_args($11,$12,$13,$lc);
 STACKTOP = sp;return;
}
function _check_tu1_for_links($tu1) {
 $tu1 = $tu1|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx20 = 0, $arrayidx24 = 0, $arrayidx36 = 0, $arrayidx40 = 0, $arrayidx47 = 0, $arrayidx51 = 0, $arrayidx7 = 0, $call = 0, $call14 = 0, $call15 = 0, $call3 = 0, $call4 = 0, $call59 = 0, $call60 = 0, $children = 0, $cmp = 0;
 var $cmp16 = 0, $data = 0, $data1 = 0, $data5 = 0, $inc = 0, $inc43 = 0, $inc54 = 0, $la = 0, $lk = 0, $node = 0, $node25 = 0, $node37 = 0, $node52 = 0, $nodes = 0, $nodes18 = 0, $nodes22 = 0, $nodes34 = 0, $nodes38 = 0, $nodes45 = 0, $nodes49 = 0;
 var $nodes9 = 0, $pos = 0, $pos41 = 0, $start_line = 0, $tc = 0, $tcc = 0, $tm = 0, $tobool = 0, $tobool58 = 0, $tu1$addr = 0, $tv = 0, $type = 0, $vararg_buffer = 0, $xtv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $vararg_buffer = sp;
 $tv = sp + 12|0;
 $tu1$addr = $tu1;
 $0 = $tu1$addr;
 _type_check($0,135);
 $1 = $tu1$addr;
 $data = ((($1)) + 44|0);
 $2 = HEAP32[$data>>2]|0;
 $cmp = ($2|0)>(1);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 _tv_init($tv);
 $3 = $tu1$addr;
 $data1 = ((($3)) + 44|0);
 $children = ((($data1)) + 16|0);
 $4 = HEAP32[$children>>2]|0;
 $arrayidx = ((($4)) + 4|0);
 $5 = HEAP32[$arrayidx>>2]|0;
 $la = $5;
 $6 = $la;
 _type_check($6,55);
 while(1) {
  $7 = $la;
  $call = (_find_nth_child($7,1,137)|0);
  $tm = $call;
  $8 = $la;
  $call3 = (_find_nth_child($8,1,56)|0);
  $lk = $call3;
  $9 = $tm;
  $tobool = ($9|0)!=(0|0);
  if (!($tobool)) {
   label = 4;
   break;
  }
  $10 = $tm;
  $call4 = (_child_ref($10,0)|0);
  $tc = $call4;
  $11 = $tc;
  $data5 = ((($11)) + 44|0);
  $type = ((($data5)) + 12|0);
  $12 = HEAP32[$type>>2]|0;
  switch ($12|0) {
  case 148:  {
   $nodes = ((($tv)) + 4|0);
   $13 = HEAP32[$tv>>2]|0;
   $arrayidx7 = (($nodes) + (($13*12)|0)|0);
   HEAP32[$arrayidx7>>2] = 0;
   $14 = $tm;
   $nodes9 = ((($tv)) + 4|0);
   $15 = HEAP32[$tv>>2]|0;
   $arrayidx11 = (($nodes9) + (($15*12)|0)|0);
   $node = ((($arrayidx11)) + 8|0);
   HEAP32[$node>>2] = $14;
   $16 = HEAP32[$tv>>2]|0;
   $inc = (($16) + 1)|0;
   HEAP32[$tv>>2] = $inc;
   break;
  }
  case 147:  {
   $17 = $tc;
   $call14 = (_child_ref($17,0)|0);
   $tcc = $call14;
   $18 = $tcc;
   $call15 = (_recover_fa_conv($18)|0);
   $pos = $call15;
   $19 = $pos;
   $cmp16 = ($19|0)==(0);
   $nodes18 = ((($tv)) + 4|0);
   $20 = HEAP32[$tv>>2]|0;
   $arrayidx20 = (($nodes18) + (($20*12)|0)|0);
   if ($cmp16) {
    HEAP32[$arrayidx20>>2] = 2;
    $21 = $tm;
    $nodes22 = ((($tv)) + 4|0);
    $22 = HEAP32[$tv>>2]|0;
    $arrayidx24 = (($nodes22) + (($22*12)|0)|0);
    $node25 = ((($arrayidx24)) + 8|0);
    HEAP32[$node25>>2] = $21;
    $$sink = 0;
   } else {
    HEAP32[$arrayidx20>>2] = 1;
    $23 = $tm;
    $nodes34 = ((($tv)) + 4|0);
    $24 = HEAP32[$tv>>2]|0;
    $arrayidx36 = (($nodes34) + (($24*12)|0)|0);
    $node37 = ((($arrayidx36)) + 8|0);
    HEAP32[$node37>>2] = $23;
    $25 = $pos;
    $$sink = $25;
   }
   $nodes38 = ((($tv)) + 4|0);
   $26 = HEAP32[$tv>>2]|0;
   $arrayidx40 = (($nodes38) + (($26*12)|0)|0);
   $pos41 = ((($arrayidx40)) + 4|0);
   HEAP32[$pos41>>2] = $$sink;
   $27 = HEAP32[$tv>>2]|0;
   $inc43 = (($27) + 1)|0;
   HEAP32[$tv>>2] = $inc43;
   break;
  }
  case 132: case 150:  {
   $nodes45 = ((($tv)) + 4|0);
   $28 = HEAP32[$tv>>2]|0;
   $arrayidx47 = (($nodes45) + (($28*12)|0)|0);
   HEAP32[$arrayidx47>>2] = 3;
   $29 = $tm;
   $nodes49 = ((($tv)) + 4|0);
   $30 = HEAP32[$tv>>2]|0;
   $arrayidx51 = (($nodes49) + (($30*12)|0)|0);
   $node52 = ((($arrayidx51)) + 8|0);
   HEAP32[$node52>>2] = $29;
   $31 = HEAP32[$tv>>2]|0;
   $inc54 = (($31) + 1)|0;
   HEAP32[$tv>>2] = $inc54;
   break;
  }
  case 139:  {
   $32 = HEAP32[7856]|0;
   $33 = $tm;
   $start_line = ((($33)) + 32|0);
   $34 = HEAP32[$start_line>>2]|0;
   HEAP32[$vararg_buffer>>2] = $34;
   (_fprintf($32,46392,$vararg_buffer)|0);
   break;
  }
  default: {
  }
  }
  $35 = $lk;
  $la = $35;
  $36 = $la;
  $tobool58 = ($36|0)!=(0|0);
  if (!($tobool58)) {
   break;
  }
 }
 if ((label|0) == 4) {
  ___assert_fail((46369|0),(45306|0),1592,(46372|0));
  // unreachable;
 }
 $37 = $tu1$addr;
 $call59 = (_prop_term_vector($37,1)|0);
 $xtv = $call59;
 $call60 = (_Malloc(244)|0);
 $38 = $xtv;
 HEAP32[$38>>2] = $call60;
 $39 = $xtv;
 $40 = HEAP32[$39>>2]|0;
 _memcpy(($40|0),($tv|0),244)|0;
 STACKTOP = sp;return;
}
function _categorize_number_mai($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp20 = 0, $cmp3 = 0, $cmp7 = 0, $count = 0, $data = 0, $head$addr = 0, $inc = 0, $inc14 = 0, $prev = 0, $prev15 = 0;
 var $prev9 = 0, $tobool = 0, $type = 0, $type11 = 0, $type6 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $head$addr = $head;
 $0 = $head$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $head$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $x;
  $call = (_cmtest($4,327)|0);
  $tobool = ($call|0)!=(0);
  if ($tobool) {
   $5 = $x;
   $prev = ((($5)) + 4|0);
   $6 = HEAP32[$prev>>2]|0;
   $y = $6;
   $count = 0;
   L6: while(1) {
    $7 = $y;
    $8 = $head$addr;
    $cmp1 = ($7|0)==($8|0);
    if ($cmp1) {
     break;
    }
    $9 = $y;
    $type = ((($9)) + 40|0);
    $10 = HEAP32[$type>>2]|0;
    $cmp3 = ($10|0)==(0);
    if ($cmp3) {
     break;
    }
    $11 = $y;
    $type6 = ((($11)) + 40|0);
    $12 = HEAP32[$type6>>2]|0;
    $cmp7 = ($12|0)==(2);
    $13 = $y;
    if ($cmp7) {
     $data = ((($13)) + 44|0);
     $14 = HEAP32[$data>>2]|0;
     switch ($14|0) {
     case 290: case 361: case 317: case 271: case 270: case 344:  {
      break;
     }
     default: {
      break L6;
     }
     }
     $15 = $count;
     $inc = (($15) + 1)|0;
     $count = $inc;
     $16 = $y;
     $prev9 = ((($16)) + 4|0);
     $17 = HEAP32[$prev9>>2]|0;
     $y = $17;
     continue;
    } else {
     $type11 = ((($13)) + 40|0);
     $18 = HEAP32[$type11>>2]|0;
     $cmp12 = ($18|0)==(7);
     if (!($cmp12)) {
      break;
     }
     $19 = $count;
     $inc14 = (($19) + 1)|0;
     $count = $inc14;
     $20 = $y;
     $prev15 = ((($20)) + 4|0);
     $21 = HEAP32[$prev15>>2]|0;
     $y = $21;
     continue;
    }
   }
   $22 = $count;
   $cmp20 = ($22|0)>(0);
   if ($cmp20) {
    $23 = $y;
    _insert_marker_after($23,409,79720);
   }
  }
  $24 = $x;
  $25 = HEAP32[$24>>2]|0;
  $x = $25;
 }
 STACKTOP = sp;return;
}
function _cmtest($x,$type) {
 $x = $x|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cmp = 0, $cmp2 = 0, $data = 0, $retval = 0, $type$addr = 0, $type1 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $type$addr = $type;
 $0 = $x$addr;
 $type1 = ((($0)) + 40|0);
 $1 = HEAP32[$type1>>2]|0;
 $cmp = ($1|0)==(2);
 if ($cmp) {
  $2 = $x$addr;
  $data = ((($2)) + 44|0);
  $3 = HEAP32[$data>>2]|0;
  $4 = $type$addr;
  $cmp2 = ($3|0)==($4|0);
  if ($cmp2) {
   $retval = 1;
   $5 = $retval;
   STACKTOP = sp;return ($5|0);
  }
 }
 $retval = 0;
 $5 = $retval;
 STACKTOP = sp;return ($5|0);
}
function _insert_marker_after($where,$toktype,$tokname) {
 $where = $where|0;
 $toktype = $toktype|0;
 $tokname = $tokname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add = 0, $call = 0, $call4 = 0, $call5 = 0, $call6 = 0, $data = 0, $data7 = 0, $marker = 0, $prev = 0, $prev11 = 0, $start_column = 0, $start_column2 = 0, $start_line = 0, $start_line1 = 0, $text = 0, $tokname$addr = 0, $toktype$addr = 0, $type = 0;
 var $where$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $where$addr = $where;
 $toktype$addr = $toktype;
 $tokname$addr = $tokname;
 $call = (_new_node()|0);
 $marker = $call;
 $0 = $marker;
 $type = ((($0)) + 40|0);
 HEAP32[$type>>2] = 0;
 $1 = $where$addr;
 $start_line = ((($1)) + 32|0);
 $2 = HEAP32[$start_line>>2]|0;
 $3 = $marker;
 $start_line1 = ((($3)) + 32|0);
 HEAP32[$start_line1>>2] = $2;
 $4 = $where$addr;
 $start_column = ((($4)) + 36|0);
 $5 = HEAP32[$start_column>>2]|0;
 $6 = $marker;
 $start_column2 = ((($6)) + 36|0);
 HEAP32[$start_column2>>2] = $5;
 $7 = $toktype$addr;
 $8 = $marker;
 $data = ((($8)) + 44|0);
 HEAP32[$data>>2] = $7;
 $9 = $tokname$addr;
 $call4 = (_strlen($9)|0);
 $add = (1 + ($call4))|0;
 $call5 = (_Malloc($add)|0);
 $10 = $tokname$addr;
 $call6 = (_strcpy($call5,$10)|0);
 $11 = $marker;
 $data7 = ((($11)) + 44|0);
 $text = ((($data7)) + 4|0);
 HEAP32[$text>>2] = $call6;
 $12 = $where$addr;
 $13 = $marker;
 $prev = ((($13)) + 4|0);
 HEAP32[$prev>>2] = $12;
 $14 = $where$addr;
 $15 = HEAP32[$14>>2]|0;
 $16 = $marker;
 HEAP32[$16>>2] = $15;
 $17 = $marker;
 $18 = $where$addr;
 $19 = HEAP32[$18>>2]|0;
 $prev11 = ((($19)) + 4|0);
 HEAP32[$prev11>>2] = $17;
 $20 = $marker;
 $21 = $where$addr;
 HEAP32[$21>>2] = $20;
 STACKTOP = sp;return;
}
function _categorize_number_roi($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp19 = 0, $cmp3 = 0, $cmp6 = 0, $count = 0, $data = 0, $head$addr = 0, $inc = 0, $inc13 = 0, $prev = 0, $prev14 = 0;
 var $prev8 = 0, $tobool = 0, $type = 0, $type10 = 0, $type5 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $head$addr = $head;
 $0 = $head$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $head$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $x;
  $call = (_cmtest($4,351)|0);
  $tobool = ($call|0)!=(0);
  if ($tobool) {
   $5 = $x;
   $prev = ((($5)) + 4|0);
   $6 = HEAP32[$prev>>2]|0;
   $y = $6;
   $count = 0;
   L6: while(1) {
    $7 = $y;
    $8 = $head$addr;
    $cmp1 = ($7|0)==($8|0);
    if ($cmp1) {
     break;
    }
    $9 = $y;
    $type = ((($9)) + 40|0);
    $10 = HEAP32[$type>>2]|0;
    $cmp3 = ($10|0)==(0);
    if ($cmp3) {
     break;
    }
    $11 = $y;
    $type5 = ((($11)) + 40|0);
    $12 = HEAP32[$type5>>2]|0;
    $cmp6 = ($12|0)==(2);
    $13 = $y;
    if ($cmp6) {
     $data = ((($13)) + 44|0);
     $14 = HEAP32[$data>>2]|0;
     switch ($14|0) {
     case 290: case 361: case 317: case 271: case 270: case 344:  {
      break;
     }
     default: {
      break L6;
     }
     }
     $15 = $count;
     $inc = (($15) + 1)|0;
     $count = $inc;
     $16 = $y;
     $prev8 = ((($16)) + 4|0);
     $17 = HEAP32[$prev8>>2]|0;
     $y = $17;
     continue;
    } else {
     $type10 = ((($13)) + 40|0);
     $18 = HEAP32[$type10>>2]|0;
     $cmp11 = ($18|0)==(7);
     if (!($cmp11)) {
      break;
     }
     $19 = $count;
     $inc13 = (($19) + 1)|0;
     $count = $inc13;
     $20 = $y;
     $prev14 = ((($20)) + 4|0);
     $21 = HEAP32[$prev14>>2]|0;
     $y = $21;
     continue;
    }
   }
   $22 = $count;
   $cmp19 = ($22|0)>(0);
   if ($cmp19) {
    $23 = $y;
    _insert_marker_after($23,411,79739);
   }
  }
  $24 = $x;
  $25 = HEAP32[$24>>2]|0;
  $x = $25;
 }
 STACKTOP = sp;return;
}
function _categorize_number_moi($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp19 = 0, $cmp3 = 0, $cmp6 = 0, $count = 0, $data = 0, $head$addr = 0, $inc = 0, $inc13 = 0, $prev = 0, $prev14 = 0;
 var $prev8 = 0, $tobool = 0, $type = 0, $type10 = 0, $type5 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $head$addr = $head;
 $0 = $head$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $head$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $x;
  $call = (_cmtest($4,332)|0);
  $tobool = ($call|0)!=(0);
  if ($tobool) {
   $5 = $x;
   $prev = ((($5)) + 4|0);
   $6 = HEAP32[$prev>>2]|0;
   $y = $6;
   $count = 0;
   L6: while(1) {
    $7 = $y;
    $8 = $head$addr;
    $cmp1 = ($7|0)==($8|0);
    if ($cmp1) {
     break;
    }
    $9 = $y;
    $type = ((($9)) + 40|0);
    $10 = HEAP32[$type>>2]|0;
    $cmp3 = ($10|0)==(0);
    if ($cmp3) {
     break;
    }
    $11 = $y;
    $type5 = ((($11)) + 40|0);
    $12 = HEAP32[$type5>>2]|0;
    $cmp6 = ($12|0)==(2);
    $13 = $y;
    if ($cmp6) {
     $data = ((($13)) + 44|0);
     $14 = HEAP32[$data>>2]|0;
     switch ($14|0) {
     case 290: case 361: case 317: case 271: case 270: case 344:  {
      break;
     }
     default: {
      break L6;
     }
     }
     $15 = $count;
     $inc = (($15) + 1)|0;
     $count = $inc;
     $16 = $y;
     $prev8 = ((($16)) + 4|0);
     $17 = HEAP32[$prev8>>2]|0;
     $y = $17;
     continue;
    } else {
     $type10 = ((($13)) + 40|0);
     $18 = HEAP32[$type10>>2]|0;
     $cmp11 = ($18|0)==(7);
     if (!($cmp11)) {
      break;
     }
     $19 = $count;
     $inc13 = (($19) + 1)|0;
     $count = $inc13;
     $20 = $y;
     $prev14 = ((($20)) + 4|0);
     $21 = HEAP32[$prev14>>2]|0;
     $y = $21;
     continue;
    }
   }
   $22 = $count;
   $cmp19 = ($22|0)>(0);
   if ($cmp19) {
    $23 = $y;
    _insert_marker_after($23,410,79758);
   }
  }
  $24 = $x;
  $25 = HEAP32[$24>>2]|0;
  $x = $25;
 }
 STACKTOP = sp;return;
}
function _categorize_tokens($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $head$addr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $head$addr = $head;
 $0 = $head$addr;
 _categorize_tenses($0);
 $1 = $head$addr;
 _categorize_jek($1);
 $2 = $head$addr;
 _categorize_gihek($2);
 $3 = $head$addr;
 _categorize_ek($3);
 $4 = $head$addr;
 _categorize_guhek($4);
 $5 = $head$addr;
 _categorize_joik($5);
 $6 = $head$addr;
 _categorize_gek($6);
 $7 = $head$addr;
 _categorize_ibo($7);
 $8 = $head$addr;
 _categorize_ijekjoik($8);
 $9 = $head$addr;
 _categorize_jek_kebo($9);
 $10 = $head$addr;
 _categorize_ek_kebo($10);
 $11 = $head$addr;
 _categorize_joik_kebo($11);
 $12 = $head$addr;
 _categorize_gihek_kebo($12);
 $13 = $head$addr;
 _categorize_number_mai($13);
 $14 = $head$addr;
 _categorize_number_roi($14);
 $15 = $head$addr;
 _categorize_number_moi($15);
 $16 = $head$addr;
 _categorize_nahe($16);
 $17 = $head$addr;
 _categorize_naku($17);
 $18 = $head$addr;
 _mark_cmavo_before_free($18);
 STACKTOP = sp;return;
}
function _categorize_tenses($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call8 = 0, $cmp = 0, $cmp2 = 0;
 var $cmp20 = 0, $cmp4 = 0, $cmp6 = 0, $cmp9 = 0, $cond = 0, $cond7 = 0, $curstate = 0, $data = 0, $head$addr = 0, $last_ok_token = 0, $next_tok = 0, $nextstate = 0, $tobool = 0, $tobool11 = 0, $token = 0, $type = 0, $type5 = 0, $x = 0, $y = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $head$addr = $head;
 $0 = $head$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $head$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $curstate = 0;
  $last_ok_token = 0;
  $4 = $x;
  $y = $4;
  while(1) {
   $5 = $y;
   $6 = $head$addr;
   $cmp2 = ($5|0)!=($6|0);
   $7 = $y;
   if (!($cmp2)) {
    label = 15;
    break;
   }
   $type = ((($7)) + 40|0);
   $8 = HEAP32[$type>>2]|0;
   $cmp4 = ($8|0)==(2);
   $9 = $y;
   if ($cmp4) {
    $data = ((($9)) + 44|0);
    $10 = HEAP32[$data>>2]|0;
    $call = (_map_stag_token($10)|0);
    $cond7 = $call;
   } else {
    $type5 = ((($9)) + 40|0);
    $11 = HEAP32[$type5>>2]|0;
    $cmp6 = ($11|0)==(7);
    $cond = $cmp6 ? 1 : -1;
    $cond7 = $cond;
   }
   $token = $cond7;
   $12 = $curstate;
   $13 = $token;
   $call8 = (_stag_next_state($12,$13)|0);
   $nextstate = $call8;
   $14 = $nextstate;
   $cmp9 = ($14|0)>=(0);
   if (!($cmp9)) {
    label = 12;
    break;
   }
   $15 = $nextstate;
   $arrayidx = (7744 + ($15<<2)|0);
   $16 = HEAP32[$arrayidx>>2]|0;
   $tobool = ($16|0)!=(0);
   if ($tobool) {
    $17 = $y;
    $last_ok_token = $17;
   }
   $18 = $nextstate;
   $curstate = $18;
   $19 = $y;
   $20 = HEAP32[$19>>2]|0;
   $y = $20;
  }
  do {
   if ((label|0) == 12) {
    label = 0;
    $21 = $last_ok_token;
    $tobool11 = ($21|0)!=(0|0);
    $22 = $x;
    if ($tobool11) {
     _insert_marker_before($22,412,80239);
     $23 = $last_ok_token;
     _insert_marker_after($23,413,80259);
     $24 = $last_ok_token;
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[$25>>2]|0;
     $next_tok = $26;
     break;
    } else {
     $27 = HEAP32[$22>>2]|0;
     $next_tok = $27;
     break;
    }
   }
   else if ((label|0) == 15) {
    label = 0;
    $28 = $head$addr;
    $cmp20 = ($7|0)==($28|0);
    if ($cmp20) {
     $29 = $x;
     _insert_marker_before($29,412,80239);
     $30 = $last_ok_token;
     _insert_marker_after($30,413,80259);
     $31 = $last_ok_token;
     $32 = HEAP32[$31>>2]|0;
     $33 = HEAP32[$32>>2]|0;
     $next_tok = $33;
    }
   }
  } while(0);
  $34 = $next_tok;
  $x = $34;
 }
 STACKTOP = sp;return;
}
function _categorize_jek($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call11 = 0, $call5 = 0, $cmp = 0, $head$addr = 0, $prev = 0, $prev4 = 0, $prev8 = 0, $tobool = 0, $tobool12 = 0, $tobool2 = 0, $tobool6 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $head$addr = $head;
 $0 = $head$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $head$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $x;
  $call = (_cmtest($4,303)|0);
  $tobool = ($call|0)!=(0);
  if ($tobool) {
   $5 = $x;
   $prev = ((($5)) + 4|0);
   $6 = HEAP32[$prev>>2]|0;
   $y = $6;
   $7 = $y;
   $call1 = (_cmtest($7,353)|0);
   $tobool2 = ($call1|0)!=(0);
   if ($tobool2) {
    $8 = $y;
    $prev4 = ((($8)) + 4|0);
    $9 = HEAP32[$prev4>>2]|0;
    $y = $9;
   }
   $10 = $y;
   $call5 = (_cmtest($10,333)|0);
   $tobool6 = ($call5|0)!=(0);
   if ($tobool6) {
    $11 = $y;
    $prev8 = ((($11)) + 4|0);
    $12 = HEAP32[$prev8>>2]|0;
    $y = $12;
   }
   $13 = $y;
   _insert_marker_after($13,388,80205);
   $14 = $x;
   $15 = HEAP32[$14>>2]|0;
   $y = $15;
   $16 = $y;
   $call11 = (_cmtest($16,336)|0);
   $tobool12 = ($call11|0)!=(0);
   if ($tobool12) {
    $17 = $y;
    $18 = HEAP32[$17>>2]|0;
    $y = $18;
   }
   $19 = $y;
   _insert_marker_before($19,389,80223);
  }
  $20 = $x;
  $21 = HEAP32[$20>>2]|0;
  $x = $21;
 }
 STACKTOP = sp;return;
}
function _categorize_gihek($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call5 = 0, $cmp = 0;
 var $head$addr = 0, $prev = 0, $prev4 = 0, $prev8 = 0, $tobool = 0, $tobool2 = 0, $tobool6 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $head$addr = $head;
 $0 = $head$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $head$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $x;
  $call = (_cmtest($4,298)|0);
  $tobool = ($call|0)!=(0);
  if ($tobool) {
   $5 = $x;
   $prev = ((($5)) + 4|0);
   $6 = HEAP32[$prev>>2]|0;
   $y = $6;
   $7 = $y;
   $call1 = (_cmtest($7,353)|0);
   $tobool2 = ($call1|0)!=(0);
   if ($tobool2) {
    $8 = $y;
    $prev4 = ((($8)) + 4|0);
    $9 = HEAP32[$prev4>>2]|0;
    $y = $9;
   }
   $10 = $y;
   $call5 = (_cmtest($10,333)|0);
   $tobool6 = ($call5|0)!=(0);
   if ($tobool6) {
    $11 = $y;
    $prev8 = ((($11)) + 4|0);
    $12 = HEAP32[$prev8>>2]|0;
    $y = $12;
   }
   $13 = $y;
   _insert_marker_after($13,386,80185);
  }
  $14 = $x;
  $15 = HEAP32[$14>>2]|0;
  $x = $15;
 }
 STACKTOP = sp;return;
}
function _categorize_ek($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call5 = 0, $cmp = 0;
 var $head$addr = 0, $prev = 0, $prev4 = 0, $prev8 = 0, $tobool = 0, $tobool2 = 0, $tobool6 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $head$addr = $head;
 $0 = $head$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $head$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $x;
  $call = (_cmtest($4,259)|0);
  $tobool = ($call|0)!=(0);
  if ($tobool) {
   $5 = $x;
   $prev = ((($5)) + 4|0);
   $6 = HEAP32[$prev>>2]|0;
   $y = $6;
   $7 = $y;
   $call1 = (_cmtest($7,353)|0);
   $tobool2 = ($call1|0)!=(0);
   if ($tobool2) {
    $8 = $y;
    $prev4 = ((($8)) + 4|0);
    $9 = HEAP32[$prev4>>2]|0;
    $y = $9;
   }
   $10 = $y;
   $call5 = (_cmtest($10,333)|0);
   $tobool6 = ($call5|0)!=(0);
   if ($tobool6) {
    $11 = $y;
    $prev8 = ((($11)) + 4|0);
    $12 = HEAP32[$prev8>>2]|0;
    $y = $12;
   }
   $13 = $y;
   _insert_marker_after($13,385,80168);
  }
  $14 = $x;
  $15 = HEAP32[$14>>2]|0;
  $x = $15;
 }
 STACKTOP = sp;return;
}
function _categorize_guhek($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $cmp = 0, $head$addr = 0, $prev = 0, $prev4 = 0, $tobool = 0;
 var $tobool2 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $head$addr = $head;
 $0 = $head$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $head$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $x;
  $call = (_cmtest($4,301)|0);
  $tobool = ($call|0)!=(0);
  if ($tobool) {
   $5 = $x;
   $prev = ((($5)) + 4|0);
   $6 = HEAP32[$prev>>2]|0;
   $y = $6;
   $7 = $y;
   $call1 = (_cmtest($7,353)|0);
   $tobool2 = ($call1|0)!=(0);
   if ($tobool2) {
    $8 = $y;
    $prev4 = ((($8)) + 4|0);
    $9 = HEAP32[$prev4>>2]|0;
    $y = $9;
   }
   $10 = $y;
   _insert_marker_after($10,387,80148);
  }
  $11 = $x;
  $12 = HEAP32[$11>>2]|0;
  $x = $12;
 }
 STACKTOP = sp;return;
}
function _categorize_joik($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call11 = 0;
 var $call15 = 0, $call20 = 0, $call26 = 0, $call31 = 0, $call6 = 0, $cmp = 0, $head$addr = 0, $prev = 0, $prev14 = 0, $prev18 = 0, $prev23 = 0, $prev4 = 0, $tobool = 0, $tobool12 = 0, $tobool16 = 0, $tobool2 = 0, $tobool21 = 0, $tobool27 = 0, $tobool32 = 0, $tobool7 = 0;
 var $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $head$addr = $head;
 $0 = $head$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $head$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $x;
  $call = (_cmtest($4,306)|0);
  $tobool = ($call|0)!=(0);
  $5 = $x;
  if ($tobool) {
   $prev = ((($5)) + 4|0);
   $6 = HEAP32[$prev>>2]|0;
   $y = $6;
   $7 = $y;
   $call1 = (_cmtest($7,353)|0);
   $tobool2 = ($call1|0)!=(0);
   if ($tobool2) {
    $8 = $y;
    $prev4 = ((($8)) + 4|0);
    $9 = HEAP32[$prev4>>2]|0;
    $y = $9;
   }
   $10 = $y;
   _insert_marker_after($10,390,80112);
   $11 = $x;
   $12 = HEAP32[$11>>2]|0;
   $y = $12;
   $13 = $y;
   $call6 = (_cmtest($13,336)|0);
   $tobool7 = ($call6|0)!=(0);
   if ($tobool7) {
    $14 = $y;
    $15 = HEAP32[$14>>2]|0;
    $y = $15;
   }
   $16 = $y;
   _insert_marker_before($16,391,80131);
  } else {
   $call11 = (_cmtest($5,266)|0);
   $tobool12 = ($call11|0)!=(0);
   if ($tobool12) {
    $17 = $x;
    $prev14 = ((($17)) + 4|0);
    $18 = HEAP32[$prev14>>2]|0;
    $y = $18;
    $19 = $y;
    $call15 = (_cmtest($19,353)|0);
    $tobool16 = ($call15|0)!=(0);
    if ($tobool16) {
     $20 = $y;
     $prev18 = ((($20)) + 4|0);
     $21 = HEAP32[$prev18>>2]|0;
     $y = $21;
    }
    $22 = $y;
    $call20 = (_cmtest($22,295)|0);
    $tobool21 = ($call20|0)!=(0);
    if ($tobool21) {
     $23 = $y;
     $prev23 = ((($23)) + 4|0);
     $24 = HEAP32[$prev23>>2]|0;
     $y = $24;
    }
    $25 = $y;
    _insert_marker_after($25,390,80112);
    $26 = $x;
    $27 = HEAP32[$26>>2]|0;
    $y = $27;
    $28 = $y;
    $call26 = (_cmtest($28,336)|0);
    $tobool27 = ($call26|0)!=(0);
    if ($tobool27) {
     $29 = $y;
     $30 = HEAP32[$29>>2]|0;
     $y = $30;
    }
    $31 = $y;
    $call31 = (_cmtest($31,295)|0);
    $tobool32 = ($call31|0)!=(0);
    if ($tobool32) {
     $32 = $y;
     $33 = HEAP32[$32>>2]|0;
     $y = $33;
    }
    $34 = $y;
    _insert_marker_before($34,391,80131);
   }
  }
  $35 = $x;
  $36 = HEAP32[$35>>2]|0;
  $x = $36;
 }
 STACKTOP = sp;return;
}
function _categorize_gek($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call15 = 0, $call20 = 0;
 var $call23 = 0, $call34 = 0, $call41 = 0, $call5 = 0, $call9 = 0, $cmp = 0, $cmp14 = 0, $cmp39 = 0, $head$addr = 0, $prev = 0, $prev12 = 0, $prev19 = 0, $prev26 = 0, $prev37 = 0, $prev4 = 0, $prev46 = 0, $prev8 = 0, $tobool = 0, $tobool10 = 0, $tobool16 = 0;
 var $tobool2 = 0, $tobool21 = 0, $tobool24 = 0, $tobool35 = 0, $tobool42 = 0, $tobool6 = 0, $x = 0, $y = 0, $y18 = 0, $z = 0, $z32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $y18 = sp + 4|0;
 $head$addr = $head;
 $0 = $head$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 L1: while(1) {
  $2 = $x;
  $3 = $head$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   label = 27;
   break;
  }
  $4 = $x;
  $call = (_cmtest($4,294)|0);
  $tobool = ($call|0)!=(0);
  $5 = $x;
  L4: do {
   if ($tobool) {
    $prev = ((($5)) + 4|0);
    $6 = HEAP32[$prev>>2]|0;
    $y = $6;
    $7 = $y;
    $call1 = (_cmtest($7,353)|0);
    $tobool2 = ($call1|0)!=(0);
    if ($tobool2) {
     $8 = $y;
     $prev4 = ((($8)) + 4|0);
     $9 = HEAP32[$prev4>>2]|0;
     $y = $9;
    }
    $10 = $y;
    _insert_marker_after($10,392,80038);
   } else {
    $call5 = (_cmtest($5,297)|0);
    $tobool6 = ($call5|0)!=(0);
    if ($tobool6) {
     $11 = $x;
     $prev8 = ((($11)) + 4|0);
     $12 = HEAP32[$prev8>>2]|0;
     $call9 = (_mkrtest($12,413)|0);
     $tobool10 = ($call9|0)!=(0);
     $13 = $x;
     $prev12 = ((($13)) + 4|0);
     $14 = HEAP32[$prev12>>2]|0;
     if (!($tobool10)) {
      $z32 = $14;
      $26 = $z32;
      $call34 = (_mkrtest($26,391)|0);
      $tobool35 = ($call34|0)!=(0);
      if (!($tobool35)) {
       break;
      }
      $27 = $z32;
      $prev37 = ((($27)) + 4|0);
      $28 = HEAP32[$prev37>>2]|0;
      $z32 = $28;
      while(1) {
       $29 = $z32;
       $30 = $head$addr;
       $cmp39 = ($29|0)!=($30|0);
       if (!($cmp39)) {
        break L4;
       }
       $31 = $z32;
       $call41 = (_mkrtest($31,390)|0);
       $tobool42 = ($call41|0)!=(0);
       $32 = $z32;
       if ($tobool42) {
        break;
       }
       $prev46 = ((($32)) + 4|0);
       $33 = HEAP32[$prev46>>2]|0;
       $z32 = $33;
      }
      _insert_marker_before($32,392,80038);
      break;
     }
     $z = $14;
     while(1) {
      while(1) {
       $15 = $z;
       $16 = $head$addr;
       $cmp14 = ($15|0)!=($16|0);
       if (!($cmp14)) {
        label = 12;
        break L1;
       }
       $17 = $z;
       $call15 = (_mkrtest($17,412)|0);
       $tobool16 = ($call15|0)!=(0);
       $18 = $z;
       $prev19 = ((($18)) + 4|0);
       $19 = HEAP32[$prev19>>2]|0;
       if ($tobool16) {
        break;
       }
       $z = $19;
      }
      HEAP32[$y18>>2] = $19;
      $20 = $head$addr;
      $call20 = (_backup_over_jek_joik($y18,$20)|0);
      $tobool21 = ($call20|0)!=(0);
      if (!($tobool21)) {
       label = 18;
       break;
      }
      $21 = HEAP32[$y18>>2]|0;
      $call23 = (_mkrtest($21,413)|0);
      $tobool24 = ($call23|0)!=(0);
      if (!($tobool24)) {
       label = 17;
       break;
      }
      $22 = HEAP32[$y18>>2]|0;
      $prev26 = ((($22)) + 4|0);
      $23 = HEAP32[$prev26>>2]|0;
      $z = $23;
     }
     if ((label|0) == 17) {
      label = 0;
      $24 = $z;
      _insert_marker_before($24,392,80038);
      break;
     }
     else if ((label|0) == 18) {
      label = 0;
      $25 = $z;
      _insert_marker_before($25,392,80038);
      break;
     }
    }
   }
  } while(0);
  $34 = $x;
  $35 = HEAP32[$34>>2]|0;
  $x = $35;
 }
 if ((label|0) == 12) {
  ___assert_fail((80056|0),(79843|0),234,(80066|0));
  // unreachable;
 }
 else if ((label|0) == 27) {
  STACKTOP = sp;return;
 }
}
function _categorize_ibo($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $call5 = 0, $call7 = 0, $cmp = 0;
 var $cond = 0, $cond1 = 0, $head$addr = 0, $nx = 0, $tobool = 0, $tobool3 = 0, $tobool6 = 0, $x = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $nx = sp;
 $head$addr = $head;
 $0 = $head$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $head$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $x;
  $call = (_cmtest($4,302)|0);
  $tobool = ($call|0)!=(0);
  $5 = $x;
  $6 = HEAP32[$5>>2]|0;
  if (!($tobool)) {
   $x = $6;
   continue;
  }
  $y = $6;
  $7 = $y;
  $call2 = (_straddle_jek($7)|0);
  $z = $call2;
  $8 = $z;
  $tobool3 = ($8|0)!=(0|0);
  if (!($tobool3)) {
   $9 = $y;
   $call5 = (_straddle_joik($9)|0);
   $z = $call5;
  }
  $10 = $z;
  $tobool6 = ($10|0)!=(0|0);
  $11 = $z;
  $12 = $y;
  $cond = $tobool6 ? $11 : $12;
  $call7 = (_lookahead($cond,$nx)|0);
  $cond1 = ($call7|0)==(0);
  if ($cond1) {
   $13 = $x;
   _insert_marker_before($13,401,80025);
  }
  $14 = HEAP32[$nx>>2]|0;
  $x = $14;
 }
 STACKTOP = sp;return;
}
function _categorize_ijekjoik($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call5 = 0, $call8 = 0, $cmp = 0, $head$addr = 0;
 var $prev = 0, $tobool = 0, $tobool2 = 0, $tobool6 = 0, $tobool9 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $head$addr = $head;
 $0 = $head$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $head$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $x;
  $call = (_cmtest($4,302)|0);
  $tobool = ($call|0)!=(0);
  do {
   if ($tobool) {
    $5 = $x;
    $prev = ((($5)) + 4|0);
    $6 = HEAP32[$prev>>2]|0;
    $call1 = (_mkrtest($6,401)|0);
    $tobool2 = ($call1|0)!=(0);
    if (!($tobool2)) {
     $7 = $x;
     $8 = HEAP32[$7>>2]|0;
     $call5 = (_mkrtest($8,388)|0);
     $tobool6 = ($call5|0)!=(0);
     if (!($tobool6)) {
      $9 = $x;
      $10 = HEAP32[$9>>2]|0;
      $call8 = (_mkrtest($10,390)|0);
      $tobool9 = ($call8|0)!=(0);
      if (!($tobool9)) {
       break;
      }
     }
     $11 = $x;
     _insert_marker_before($11,400,80007);
    }
   }
  } while(0);
  $12 = $x;
  $13 = HEAP32[$12>>2]|0;
  $x = $13;
 }
 STACKTOP = sp;return;
}
function _categorize_jek_kebo($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call4 = 0;
 var $call8 = 0, $call9 = 0, $cmp = 0, $head$addr = 0, $nx = 0, $prev = 0, $prev3 = 0, $tobool = 0, $tobool2 = 0, $tobool5 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $nx = sp;
 $head$addr = $head;
 $0 = $head$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $head$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $x;
  $call = (_mkrtest($4,388)|0);
  $tobool = ($call|0)!=(0);
  $5 = $x;
  if (!($tobool)) {
   $16 = HEAP32[$5>>2]|0;
   $x = $16;
   continue;
  }
  $prev = ((($5)) + 4|0);
  $6 = HEAP32[$prev>>2]|0;
  $call1 = (_cmtest($6,302)|0);
  $tobool2 = ($call1|0)!=(0);
  if (!($tobool2)) {
   $7 = $x;
   $prev3 = ((($7)) + 4|0);
   $8 = HEAP32[$prev3>>2]|0;
   $call4 = (_mkrtest($8,413)|0);
   $tobool5 = ($call4|0)!=(0);
   if (!($tobool5)) {
    $11 = $x;
    $call8 = (_straddle_jek($11)|0);
    $y = $call8;
    $12 = $y;
    $call9 = (_lookahead($12,$nx)|0);
    switch ($call9|0) {
    case 0:  {
     $13 = $x;
     _insert_marker_before($13,397,79977);
     break;
    }
    case 1:  {
     $14 = $x;
     _insert_marker_before($14,396,79992);
     break;
    }
    default: {
    }
    }
    $15 = HEAP32[$nx>>2]|0;
    $x = $15;
    continue;
   }
  }
  $9 = $x;
  $10 = HEAP32[$9>>2]|0;
  $x = $10;
 }
 STACKTOP = sp;return;
}
function _categorize_ek_kebo($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call2 = 0, $cmp = 0, $head$addr = 0, $nx = 0, $tobool = 0, $x = 0, $y = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $nx = sp;
 $head$addr = $head;
 $0 = $head$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $head$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $x;
  $call = (_mkrtest($4,385)|0);
  $tobool = ($call|0)!=(0);
  $5 = $x;
  if (!($tobool)) {
   $10 = HEAP32[$5>>2]|0;
   $x = $10;
   continue;
  }
  $call1 = (_straddle_ek($5)|0);
  $y = $call1;
  $6 = $y;
  $call2 = (_lookahead($6,$nx)|0);
  switch ($call2|0) {
  case 0:  {
   $7 = $x;
   _insert_marker_before($7,395,79924);
   break;
  }
  case 1:  {
   $8 = $x;
   _insert_marker_before($8,394,79938);
   break;
  }
  default: {
  }
  }
  $9 = HEAP32[$nx>>2]|0;
  $x = $9;
 }
 STACKTOP = sp;return;
}
function _categorize_joik_kebo($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call4 = 0;
 var $call8 = 0, $call9 = 0, $cmp = 0, $head$addr = 0, $nx = 0, $prev = 0, $prev3 = 0, $tobool = 0, $tobool2 = 0, $tobool5 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $nx = sp;
 $head$addr = $head;
 $0 = $head$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $head$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $x;
  $call = (_mkrtest($4,390)|0);
  $tobool = ($call|0)!=(0);
  $5 = $x;
  if (!($tobool)) {
   $16 = HEAP32[$5>>2]|0;
   $x = $16;
   continue;
  }
  $prev = ((($5)) + 4|0);
  $6 = HEAP32[$prev>>2]|0;
  $call1 = (_cmtest($6,302)|0);
  $tobool2 = ($call1|0)!=(0);
  if (!($tobool2)) {
   $7 = $x;
   $prev3 = ((($7)) + 4|0);
   $8 = HEAP32[$prev3>>2]|0;
   $call4 = (_mkrtest($8,413)|0);
   $tobool5 = ($call4|0)!=(0);
   if (!($tobool5)) {
    $11 = $x;
    $call8 = (_straddle_joik($11)|0);
    $y = $call8;
    $12 = $y;
    $call9 = (_lookahead($12,$nx)|0);
    switch ($call9|0) {
    case 0:  {
     $13 = $x;
     _insert_marker_before($13,399,79892);
     break;
    }
    case 1:  {
     $14 = $x;
     _insert_marker_before($14,398,79908);
     break;
    }
    default: {
    }
    }
    $15 = HEAP32[$nx>>2]|0;
    $x = $15;
    continue;
   }
  }
  $9 = $x;
  $10 = HEAP32[$9>>2]|0;
  $x = $10;
 }
 STACKTOP = sp;return;
}
function _categorize_gihek_kebo($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call2 = 0, $cmp = 0, $head$addr = 0, $nx = 0, $tobool = 0, $x = 0, $y = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $nx = sp;
 $head$addr = $head;
 $0 = $head$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $head$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $x;
  $call = (_mkrtest($4,386)|0);
  $tobool = ($call|0)!=(0);
  $5 = $x;
  if (!($tobool)) {
   $10 = HEAP32[$5>>2]|0;
   $x = $10;
   continue;
  }
  $call1 = (_straddle_gihek($5)|0);
  $y = $call1;
  $6 = $y;
  $call2 = (_lookahead($6,$nx)|0);
  switch ($call2|0) {
  case 0:  {
   $7 = $x;
   _insert_marker_before($7,403,79807);
   break;
  }
  case 1:  {
   $8 = $x;
   _insert_marker_before($8,402,79824);
   break;
  }
  default: {
  }
  }
  $9 = HEAP32[$nx>>2]|0;
  $x = $9;
 }
 STACKTOP = sp;return;
}
function _categorize_nahe($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $cmp = 0, $head$addr = 0, $tobool = 0, $tobool3 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $head$addr = $head;
 $0 = $head$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $head$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $x;
  $call = (_cmtest($4,334)|0);
  $tobool = ($call|0)!=(0);
  if ($tobool) {
   $5 = $x;
   $6 = HEAP32[$5>>2]|0;
   $call2 = (_cmtest($6,267)|0);
   $tobool3 = ($call2|0)!=(0);
   if ($tobool3) {
    $7 = $x;
    _insert_marker_before($7,404,79791);
   }
  }
  $8 = $x;
  $9 = HEAP32[$8>>2]|0;
  $x = $9;
 }
 STACKTOP = sp;return;
}
function _categorize_naku($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0;
 var $cmp2 = 0, $cmp5 = 0, $data = 0, $data7 = 0, $head$addr = 0, $type = 0, $type4 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $head$addr = $head;
 $0 = $head$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $head$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $x;
  $type = ((($4)) + 40|0);
  $5 = HEAP32[$type>>2]|0;
  $cmp1 = ($5|0)==(2);
  if ($cmp1) {
   $6 = $x;
   $data = ((($6)) + 44|0);
   $7 = HEAP32[$data>>2]|0;
   $cmp2 = ($7|0)==(333);
   if ($cmp2) {
    $8 = $x;
    $9 = HEAP32[$8>>2]|0;
    $y = $9;
    $10 = $y;
    $type4 = ((($10)) + 40|0);
    $11 = HEAP32[$type4>>2]|0;
    $cmp5 = ($11|0)==(2);
    if ($cmp5) {
     $12 = $y;
     $data7 = ((($12)) + 44|0);
     $13 = HEAP32[$data7>>2]|0;
     $cmp10 = ($13|0)==(314);
     if ($cmp10) {
      $14 = $x;
      _insert_marker_before($14,408,79777);
     }
    }
   }
  }
  $15 = $x;
  $16 = HEAP32[$15>>2]|0;
  $x = $16;
 }
 STACKTOP = sp;return;
}
function _mark_cmavo_before_free($head) {
 $head = $head|0;
 var $$sink2 = 0, $$sink3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0;
 var $cmp1 = 0, $cmp4 = 0, $data = 0, $data11 = 0, $followed_by_free13 = 0, $head$addr = 0, $type = 0, $type3 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $head$addr = $head;
 $0 = $head$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $head$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $x;
  $type = ((($4)) + 40|0);
  $5 = HEAP32[$type>>2]|0;
  $cmp1 = ($5|0)==(2);
  if ($cmp1) {
   $6 = $x;
   $7 = HEAP32[$6>>2]|0;
   $y = $7;
   $8 = $y;
   $type3 = ((($8)) + 40|0);
   $9 = HEAP32[$type3>>2]|0;
   $cmp4 = ($9|0)==(2);
   L6: do {
    if ($cmp4) {
     $10 = $y;
     $data = ((($10)) + 44|0);
     $11 = HEAP32[$data>>2]|0;
     switch ($11|0) {
     case 375: case 362: case 409: case 283: case 278: case 357: case 355:  {
      $12 = $x;
      $$sink2 = 1;$$sink3 = $12;
      break L6;
      break;
     }
     default: {
      $13 = $x;
      $$sink2 = 0;$$sink3 = $13;
      break L6;
     }
     }
    } else {
     $14 = $x;
     $$sink2 = 0;$$sink3 = $14;
    }
   } while(0);
   $data11 = ((($$sink3)) + 44|0);
   $followed_by_free13 = ((($data11)) + 8|0);
   HEAP8[$followed_by_free13>>0] = $$sink2;
  }
  $15 = $x;
  $16 = HEAP32[$15>>2]|0;
  $x = $16;
 }
 STACKTOP = sp;return;
}
function _insert_marker_before($where,$toktype,$tokname) {
 $where = $where|0;
 $toktype = $toktype|0;
 $tokname = $tokname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add = 0, $call = 0, $call4 = 0, $call5 = 0, $call6 = 0, $data = 0, $data7 = 0, $marker = 0, $prev = 0, $prev10 = 0, $prev12 = 0, $prev9 = 0, $start_column = 0, $start_column2 = 0, $start_line = 0, $start_line1 = 0, $text = 0, $tokname$addr = 0;
 var $toktype$addr = 0, $type = 0, $where$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $where$addr = $where;
 $toktype$addr = $toktype;
 $tokname$addr = $tokname;
 $call = (_new_node()|0);
 $marker = $call;
 $0 = $marker;
 $type = ((($0)) + 40|0);
 HEAP32[$type>>2] = 0;
 $1 = $where$addr;
 $start_line = ((($1)) + 32|0);
 $2 = HEAP32[$start_line>>2]|0;
 $3 = $marker;
 $start_line1 = ((($3)) + 32|0);
 HEAP32[$start_line1>>2] = $2;
 $4 = $where$addr;
 $start_column = ((($4)) + 36|0);
 $5 = HEAP32[$start_column>>2]|0;
 $6 = $marker;
 $start_column2 = ((($6)) + 36|0);
 HEAP32[$start_column2>>2] = $5;
 $7 = $toktype$addr;
 $8 = $marker;
 $data = ((($8)) + 44|0);
 HEAP32[$data>>2] = $7;
 $9 = $tokname$addr;
 $call4 = (_strlen($9)|0);
 $add = (1 + ($call4))|0;
 $call5 = (_Malloc($add)|0);
 $10 = $tokname$addr;
 $call6 = (_strcpy($call5,$10)|0);
 $11 = $marker;
 $data7 = ((($11)) + 44|0);
 $text = ((($data7)) + 4|0);
 HEAP32[$text>>2] = $call6;
 $12 = $where$addr;
 $13 = $marker;
 HEAP32[$13>>2] = $12;
 $14 = $where$addr;
 $prev = ((($14)) + 4|0);
 $15 = HEAP32[$prev>>2]|0;
 $16 = $marker;
 $prev9 = ((($16)) + 4|0);
 HEAP32[$prev9>>2] = $15;
 $17 = $marker;
 $18 = $where$addr;
 $prev10 = ((($18)) + 4|0);
 $19 = HEAP32[$prev10>>2]|0;
 HEAP32[$19>>2] = $17;
 $20 = $marker;
 $21 = $where$addr;
 $prev12 = ((($21)) + 4|0);
 HEAP32[$prev12>>2] = $20;
 STACKTOP = sp;return;
}
function _mkrtest($x,$type) {
 $x = $x|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cmp = 0, $cmp2 = 0, $data = 0, $retval = 0, $type$addr = 0, $type1 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $type$addr = $type;
 $0 = $x$addr;
 $type1 = ((($0)) + 40|0);
 $1 = HEAP32[$type1>>2]|0;
 $cmp = ($1|0)==(0);
 if ($cmp) {
  $2 = $x$addr;
  $data = ((($2)) + 44|0);
  $3 = HEAP32[$data>>2]|0;
  $4 = $type$addr;
  $cmp2 = ($3|0)==($4|0);
  if ($cmp2) {
   $retval = 1;
   $5 = $retval;
   STACKTOP = sp;return ($5|0);
  }
 }
 $retval = 0;
 $5 = $retval;
 STACKTOP = sp;return ($5|0);
}
function _straddle_gihek($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call10 = 0, $call13 = 0;
 var $call5 = 0, $retval = 0, $tobool = 0, $tobool11 = 0, $tobool14 = 0, $tobool2 = 0, $tobool6 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $call = (_mkrtest($0,386)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  $retval = 0;
  $15 = $retval;
  STACKTOP = sp;return ($15|0);
 }
 $1 = $x$addr;
 $2 = HEAP32[$1>>2]|0;
 $x$addr = $2;
 $3 = $x$addr;
 $call1 = (_cmtest($3,333)|0);
 $tobool2 = ($call1|0)!=(0);
 if ($tobool2) {
  $4 = $x$addr;
  $5 = HEAP32[$4>>2]|0;
  $x$addr = $5;
 }
 $6 = $x$addr;
 $call5 = (_cmtest($6,353)|0);
 $tobool6 = ($call5|0)!=(0);
 if ($tobool6) {
  $7 = $x$addr;
  $8 = HEAP32[$7>>2]|0;
  $x$addr = $8;
 }
 $9 = $x$addr;
 $call10 = (_cmtest($9,298)|0);
 $tobool11 = ($call10|0)!=(0);
 if (!($tobool11)) {
  ___assert_fail((79861|0),(79843|0),430,(79877|0));
  // unreachable;
 }
 $10 = $x$addr;
 $11 = HEAP32[$10>>2]|0;
 $x$addr = $11;
 $12 = $x$addr;
 $call13 = (_cmtest($12,336)|0);
 $tobool14 = ($call13|0)!=(0);
 $13 = $x$addr;
 if ($tobool14) {
  $14 = HEAP32[$13>>2]|0;
  $retval = $14;
  $15 = $retval;
  STACKTOP = sp;return ($15|0);
 } else {
  $retval = $13;
  $15 = $retval;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _lookahead($start,$end) {
 $start = $start|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0;
 var $call1 = 0, $call10 = 0, $call12 = 0, $call15 = 0, $call20 = 0, $call4 = 0, $call6 = 0, $call7 = 0, $end$addr = 0, $lnot = 0, $retval = 0, $start$addr = 0, $tobool = 0, $tobool14 = 0, $tobool16 = 0, $tobool2 = 0, $tobool5 = 0, $tobool8 = 0, $x = 0, $y = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $start$addr = $start;
 $end$addr = $end;
 $0 = $start$addr;
 $x = $0;
 while(1) {
  $1 = $x;
  $call = (_mkrtest($1,412)|0);
  $tobool = ($call|0)!=(0);
  if (!($tobool)) {
   label = 14;
   break;
  }
  while(1) {
   $2 = $x;
   $3 = HEAP32[$2>>2]|0;
   $x = $3;
   $4 = $x;
   $call1 = (_mkrtest($4,413)|0);
   $tobool2 = ($call1|0)!=(0);
   $lnot = $tobool2 ^ 1;
   if (!($lnot)) {
    break;
   }
  }
  $5 = $x;
  $6 = HEAP32[$5>>2]|0;
  $x = $6;
  $7 = $x;
  $call4 = (_mkrtest($7,388)|0);
  $tobool5 = ($call4|0)!=(0);
  $8 = $x;
  if ($tobool5) {
   $call6 = (_straddle_jek($8)|0);
   $y = $call6;
  } else {
   $call7 = (_mkrtest($8,390)|0);
   $tobool8 = ($call7|0)!=(0);
   $9 = $x;
   if (!($tobool8)) {
    label = 8;
    break;
   }
   $call10 = (_straddle_joik($9)|0);
   $y = $call10;
  }
  $11 = $y;
  $tobool14 = ($11|0)!=(0|0);
  if (!($tobool14)) {
   label = 10;
   break;
  }
  $12 = $y;
  $call15 = (_mkrtest($12,412)|0);
  $tobool16 = ($call15|0)!=(0);
  if (!($tobool16)) {
   label = 12;
   break;
  }
  $15 = $y;
  $x = $15;
 }
 if ((label|0) == 8) {
  $10 = $end$addr;
  $call12 = (_get_lookahead_result($9,$10)|0);
  $retval = $call12;
  $18 = $retval;
  STACKTOP = sp;return ($18|0);
 }
 else if ((label|0) == 10) {
  ___assert_fail((79841|0),(79843|0),483,(79851|0));
  // unreachable;
 }
 else if ((label|0) == 12) {
  $13 = $x;
  $14 = $end$addr;
  HEAP32[$14>>2] = $13;
  $retval = 2;
  $18 = $retval;
  STACKTOP = sp;return ($18|0);
 }
 else if ((label|0) == 14) {
  $16 = $x;
  $17 = $end$addr;
  $call20 = (_get_lookahead_result($16,$17)|0);
  $retval = $call20;
  $18 = $retval;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _straddle_jek($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call1 = 0, $retval = 0, $tobool = 0, $tobool2 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $call = (_mkrtest($0,388)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  $retval = 0;
  $6 = $retval;
  STACKTOP = sp;return ($6|0);
 }
 while(1) {
  $1 = $x$addr;
  $2 = HEAP32[$1>>2]|0;
  $x$addr = $2;
  $3 = $x$addr;
  $call1 = (_mkrtest($3,389)|0);
  $tobool2 = ($call1|0)!=(0);
  if ($tobool2) {
   break;
  }
 }
 $4 = $x$addr;
 $5 = HEAP32[$4>>2]|0;
 $retval = $5;
 $6 = $retval;
 STACKTOP = sp;return ($6|0);
}
function _straddle_joik($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call1 = 0, $retval = 0, $tobool = 0, $tobool2 = 0, $x$addr = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $call = (_mkrtest($0,390)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  $retval = 0;
  $6 = $retval;
  STACKTOP = sp;return ($6|0);
 }
 $1 = $x$addr;
 $2 = HEAP32[$1>>2]|0;
 $z = $2;
 while(1) {
  $3 = $z;
  $call1 = (_mkrtest($3,391)|0);
  $tobool2 = ($call1|0)!=(0);
  $4 = $z;
  $5 = HEAP32[$4>>2]|0;
  if ($tobool2) {
   break;
  }
  $z = $5;
 }
 $retval = $5;
 $6 = $retval;
 STACKTOP = sp;return ($6|0);
}
function _get_lookahead_result($x,$end) {
 $x = $x|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $end$addr = 0, $retval = 0, $tobool = 0, $tobool2 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $end$addr = $end;
 $0 = $x$addr;
 $call = (_cmtest($0,267)|0);
 $tobool = ($call|0)!=(0);
 $1 = $x$addr;
 do {
  if ($tobool) {
   $2 = $end$addr;
   HEAP32[$2>>2] = $1;
   $retval = 0;
  } else {
   $call1 = (_cmtest($1,307)|0);
   $tobool2 = ($call1|0)!=(0);
   $3 = $x$addr;
   $4 = $end$addr;
   HEAP32[$4>>2] = $3;
   if ($tobool2) {
    $retval = 1;
    break;
   } else {
    $retval = 2;
    break;
   }
  }
 } while(0);
 $5 = $retval;
 STACKTOP = sp;return ($5|0);
}
function _straddle_ek($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call10 = 0, $call13 = 0;
 var $call5 = 0, $retval = 0, $tobool = 0, $tobool11 = 0, $tobool14 = 0, $tobool2 = 0, $tobool6 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $call = (_mkrtest($0,385)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  $retval = 0;
  $15 = $retval;
  STACKTOP = sp;return ($15|0);
 }
 $1 = $x$addr;
 $2 = HEAP32[$1>>2]|0;
 $x$addr = $2;
 $3 = $x$addr;
 $call1 = (_cmtest($3,333)|0);
 $tobool2 = ($call1|0)!=(0);
 if ($tobool2) {
  $4 = $x$addr;
  $5 = HEAP32[$4>>2]|0;
  $x$addr = $5;
 }
 $6 = $x$addr;
 $call5 = (_cmtest($6,353)|0);
 $tobool6 = ($call5|0)!=(0);
 if ($tobool6) {
  $7 = $x$addr;
  $8 = HEAP32[$7>>2]|0;
  $x$addr = $8;
 }
 $9 = $x$addr;
 $call10 = (_cmtest($9,259)|0);
 $tobool11 = ($call10|0)!=(0);
 if (!($tobool11)) {
  ___assert_fail((79952|0),(79843|0),399,(79965|0));
  // unreachable;
 }
 $10 = $x$addr;
 $11 = HEAP32[$10>>2]|0;
 $x$addr = $11;
 $12 = $x$addr;
 $call13 = (_cmtest($12,336)|0);
 $tobool14 = ($call13|0)!=(0);
 $13 = $x$addr;
 if ($tobool14) {
  $14 = HEAP32[$13>>2]|0;
  $retval = $14;
  $15 = $retval;
  STACKTOP = sp;return ($15|0);
 } else {
  $retval = $13;
  $15 = $retval;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _backup_over_jek_joik($xx,$head) {
 $xx = $xx|0;
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call10 = 0, $call19 = 0, $call3 = 0, $cmp = 0, $cmp15 = 0, $cmp2 = 0, $cmp23 = 0, $cmp7 = 0, $head$addr = 0, $prev = 0;
 var $prev14 = 0, $prev22 = 0, $prev6 = 0, $retval = 0, $tobool = 0, $tobool11 = 0, $tobool20 = 0, $tobool4 = 0, $x = 0, $xx$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $xx$addr = $xx;
 $head$addr = $head;
 $0 = $xx$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 $2 = $x;
 $3 = $head$addr;
 $cmp = ($2|0)!=($3|0);
 if (!($cmp)) {
  $retval = 0;
  $28 = $retval;
  STACKTOP = sp;return ($28|0);
 }
 $4 = $x;
 $call = (_mkrtest($4,391)|0);
 $tobool = ($call|0)!=(0);
 if ($tobool) {
  while(1) {
   $5 = $x;
   $prev = ((($5)) + 4|0);
   $6 = HEAP32[$prev>>2]|0;
   $x = $6;
   $7 = $x;
   $8 = $head$addr;
   $cmp2 = ($7|0)!=($8|0);
   if (!($cmp2)) {
    label = 4;
    break;
   }
   $9 = $x;
   $call3 = (_mkrtest($9,390)|0);
   $tobool4 = ($call3|0)!=(0);
   if ($tobool4) {
    break;
   }
  }
  if ((label|0) == 4) {
   ___assert_fail((80081|0),(79843|0),185,(80091|0));
   // unreachable;
  }
  $10 = $x;
  $prev6 = ((($10)) + 4|0);
  $11 = HEAP32[$prev6>>2]|0;
  $12 = $xx$addr;
  HEAP32[$12>>2] = $11;
  $13 = $xx$addr;
  $14 = HEAP32[$13>>2]|0;
  $15 = $head$addr;
  $cmp7 = ($14|0)==($15|0);
  if ($cmp7) {
   $retval = 0;
   $28 = $retval;
   STACKTOP = sp;return ($28|0);
  } else {
   $retval = 1;
   $28 = $retval;
   STACKTOP = sp;return ($28|0);
  }
 }
 $16 = $x;
 $call10 = (_mkrtest($16,389)|0);
 $tobool11 = ($call10|0)!=(0);
 if (!($tobool11)) {
  $retval = 0;
  $28 = $retval;
  STACKTOP = sp;return ($28|0);
 }
 while(1) {
  $17 = $x;
  $prev14 = ((($17)) + 4|0);
  $18 = HEAP32[$prev14>>2]|0;
  $x = $18;
  $19 = $x;
  $20 = $head$addr;
  $cmp15 = ($19|0)!=($20|0);
  if (!($cmp15)) {
   label = 11;
   break;
  }
  $21 = $x;
  $call19 = (_mkrtest($21,388)|0);
  $tobool20 = ($call19|0)!=(0);
  if ($tobool20) {
   break;
  }
 }
 if ((label|0) == 11) {
  ___assert_fail((80081|0),(79843|0),198,(80091|0));
  // unreachable;
 }
 $22 = $x;
 $prev22 = ((($22)) + 4|0);
 $23 = HEAP32[$prev22>>2]|0;
 $24 = $xx$addr;
 HEAP32[$24>>2] = $23;
 $25 = $xx$addr;
 $26 = HEAP32[$25>>2]|0;
 $27 = $head$addr;
 $cmp23 = ($26|0)==($27|0);
 if ($cmp23) {
  $retval = 0;
  $28 = $retval;
  STACKTOP = sp;return ($28|0);
 } else {
  $retval = 1;
  $28 = $retval;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _map_stag_token($tok_in) {
 $tok_in = $tok_in|0;
 var $0 = 0, $1 = 0, $retval = 0, $tok_in$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tok_in$addr = $tok_in;
 $0 = $tok_in$addr;
 do {
  switch ($0|0) {
  case 261:  {
   $retval = 0;
   break;
  }
  case 271:  {
   $retval = 2;
   break;
  }
  case 272:  {
   $retval = 3;
   break;
  }
  case 280:  {
   $retval = 4;
   break;
  }
  case 285:  {
   $retval = 5;
   break;
  }
  case 287:  {
   $retval = 6;
   break;
  }
  case 290:  {
   $retval = 7;
   break;
  }
  case 310:  {
   $retval = 8;
   break;
  }
  case 317:  {
   $retval = 9;
   break;
  }
  case 331:  {
   $retval = 10;
   break;
  }
  case 334:  {
   $retval = 11;
   break;
  }
  case 336:  {
   $retval = 12;
   break;
  }
  case 344:  {
   $retval = 13;
   break;
  }
  case 349:  {
   $retval = 14;
   break;
  }
  case 351:  {
   $retval = 15;
   break;
  }
  case 353:  {
   $retval = 16;
   break;
  }
  case 359:  {
   $retval = 17;
   break;
  }
  case 361:  {
   $retval = 18;
   break;
  }
  case 367:  {
   $retval = 19;
   break;
  }
  case 369:  {
   $retval = 20;
   break;
  }
  case 372:  {
   $retval = 21;
   break;
  }
  case 377:  {
   $retval = 22;
   break;
  }
  case 378:  {
   $retval = 23;
   break;
  }
  case 380:  {
   $retval = 24;
   break;
  }
  default: {
   $retval = -1;
  }
  }
 } while(0);
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function _connectives_processing($top) {
 $top = $top|0;
 var $0 = 0, $top$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $top$addr = $top;
 $0 = $top$addr;
 _traverse_tree($0);
 STACKTOP = sp;return;
}
function _traverse_tree($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $arrayidx = 0, $c = 0, $children = 0, $cmp = 0, $cmp6 = 0, $data = 0, $i = 0, $inc = 0, $nc = 0, $nt = 0, $type = 0, $type1 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $2 = $x$addr;
 $data = ((($2)) + 44|0);
 $nt = $data;
 $3 = $nt;
 $type1 = ((($3)) + 12|0);
 $4 = HEAP32[$type1>>2]|0;
 switch ($4|0) {
 case 20:  {
  $5 = $x$addr;
  _process_gihek($5);
  break;
 }
 case 12:  {
  $6 = $x$addr;
  _process_ek($6);
  break;
 }
 case 39: case 38: case 37:  {
  $7 = $x$addr;
  _process_jek($7);
  break;
 }
 case 24:  {
  $8 = $x$addr;
  _process_guhek($8);
  break;
 }
 case 18:  {
  $9 = $x$addr;
  _process_gek($9);
  break;
 }
 default: {
 }
 }
 $10 = $nt;
 $11 = HEAP32[$10>>2]|0;
 $nc = $11;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $nc;
  $cmp6 = ($12|0)<($13|0);
  if (!($cmp6)) {
   break;
  }
  $14 = $nt;
  $children = ((($14)) + 16|0);
  $15 = HEAP32[$children>>2]|0;
  $16 = $i;
  $arrayidx = (($15) + ($16<<2)|0);
  $17 = HEAP32[$arrayidx>>2]|0;
  $c = $17;
  $18 = $c;
  _traverse_tree($18);
  $19 = $i;
  $inc = (($19) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _process_gihek($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call12 = 0, $call16 = 0, $call2 = 0, $call4 = 0, $call8 = 0;
 var $cmp = 0, $code = 0, $data = 0, $func = 0, $key = 0, $text = 0, $tobool = 0, $tobool13 = 0, $tobool17 = 0, $tobool3 = 0, $tobool5 = 0, $tobool9 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $call = (_find_nth_cmavo_child($0,1,298)|0);
 $key = $call;
 $1 = $key;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((80515|0),(80287|0),214,(80572|0));
  // unreachable;
 }
 $2 = $key;
 $data = ((($2)) + 44|0);
 $code = ((($data)) + 4|0);
 $3 = HEAP32[$code>>2]|0;
 $arrayidx = (46450 + (($3*14)|0)|0);
 $4 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
 $text = $4;
 $5 = $text;
 $call2 = (_strcmp($5,98522)|0);
 $tobool3 = ($call2|0)!=(0);
 do {
  if ($tobool3) {
   $6 = $text;
   $call4 = (_strcmp($6,98533)|0);
   $tobool5 = ($call4|0)!=(0);
   if (!($tobool5)) {
    $func = 1;
    break;
   }
   $7 = $text;
   $call8 = (_strcmp($7,98544)|0);
   $tobool9 = ($call8|0)!=(0);
   if (!($tobool9)) {
    $func = 2;
    break;
   }
   $8 = $text;
   $call12 = (_strcmp($8,98555)|0);
   $tobool13 = ($call12|0)!=(0);
   if (!($tobool13)) {
    $func = 3;
    break;
   }
   $9 = $text;
   $call16 = (_strcmp($9,80586)|0);
   $tobool17 = ($call16|0)!=(0);
   if ($tobool17) {
    $func = -1;
    break;
   } else {
    $func = 4;
    break;
   }
  } else {
   $func = 0;
  }
 } while(0);
 $10 = $func;
 $cmp = ($10|0)!=(-1);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $11 = $x$addr;
 $12 = $func;
 _process_afterthought($11,$12);
 STACKTOP = sp;return;
}
function _process_ek($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call12 = 0, $call16 = 0, $call2 = 0, $call4 = 0, $call8 = 0;
 var $cmp = 0, $code = 0, $data = 0, $func = 0, $key = 0, $text = 0, $tobool = 0, $tobool13 = 0, $tobool17 = 0, $tobool3 = 0, $tobool5 = 0, $tobool9 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $call = (_find_nth_cmavo_child($0,1,259)|0);
 $key = $call;
 $1 = $key;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((80515|0),(80287|0),176,(80550|0));
  // unreachable;
 }
 $2 = $key;
 $data = ((($2)) + 44|0);
 $code = ((($data)) + 4|0);
 $3 = HEAP32[$code>>2]|0;
 $arrayidx = (46450 + (($3*14)|0)|0);
 $4 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
 $text = $4;
 $5 = $text;
 $call2 = (_strcmp($5,80561)|0);
 $tobool3 = ($call2|0)!=(0);
 do {
  if ($tobool3) {
   $6 = $text;
   $call4 = (_strcmp($6,80563)|0);
   $tobool5 = ($call4|0)!=(0);
   if (!($tobool5)) {
    $func = 1;
    break;
   }
   $7 = $text;
   $call8 = (_strcmp($7,80565)|0);
   $tobool9 = ($call8|0)!=(0);
   if (!($tobool9)) {
    $func = 2;
    break;
   }
   $8 = $text;
   $call12 = (_strcmp($8,80567)|0);
   $tobool13 = ($call12|0)!=(0);
   if (!($tobool13)) {
    $func = 3;
    break;
   }
   $9 = $text;
   $call16 = (_strcmp($9,80569)|0);
   $tobool17 = ($call16|0)!=(0);
   if ($tobool17) {
    $func = -1;
    break;
   } else {
    $func = 4;
    break;
   }
  } else {
   $func = 0;
  }
 } while(0);
 $10 = $func;
 $cmp = ($10|0)!=(-1);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $11 = $x$addr;
 $12 = $func;
 _process_afterthought($11,$12);
 STACKTOP = sp;return;
}
function _process_jek($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call12 = 0, $call16 = 0, $call2 = 0, $call4 = 0, $call8 = 0;
 var $cmp = 0, $code = 0, $data = 0, $func = 0, $key = 0, $text = 0, $tobool = 0, $tobool13 = 0, $tobool17 = 0, $tobool3 = 0, $tobool5 = 0, $tobool9 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $call = (_find_nth_cmavo_child($0,1,303)|0);
 $key = $call;
 $1 = $key;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((80515|0),(80287|0),138,(80538|0));
  // unreachable;
 }
 $2 = $key;
 $data = ((($2)) + 44|0);
 $code = ((($data)) + 4|0);
 $3 = HEAP32[$code>>2]|0;
 $arrayidx = (46450 + (($3*14)|0)|0);
 $4 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
 $text = $4;
 $5 = $text;
 $call2 = (_strcmp($5,99379)|0);
 $tobool3 = ($call2|0)!=(0);
 do {
  if ($tobool3) {
   $6 = $text;
   $call4 = (_strcmp($6,99771)|0);
   $tobool5 = ($call4|0)!=(0);
   if (!($tobool5)) {
    $func = 1;
    break;
   }
   $7 = $text;
   $call8 = (_strcmp($7,100356)|0);
   $tobool9 = ($call8|0)!=(0);
   if (!($tobool9)) {
    $func = 2;
    break;
   }
   $8 = $text;
   $call12 = (_strcmp($8,100579)|0);
   $tobool13 = ($call12|0)!=(0);
   if (!($tobool13)) {
    $func = 3;
    break;
   }
   $9 = $text;
   $call16 = (_strcmp($9,99566)|0);
   $tobool17 = ($call16|0)!=(0);
   if ($tobool17) {
    $func = -1;
    break;
   } else {
    $func = 4;
    break;
   }
  } else {
   $func = 0;
  }
 } while(0);
 $10 = $func;
 $cmp = ($10|0)!=(-1);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $11 = $x$addr;
 $12 = $func;
 _process_afterthought($11,$12);
 STACKTOP = sp;return;
}
function _process_guhek($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call12 = 0, $call16 = 0, $call2 = 0, $call4 = 0, $call8 = 0;
 var $cmp = 0, $code = 0, $data = 0, $func = 0, $key = 0, $text = 0, $tobool = 0, $tobool13 = 0, $tobool17 = 0, $tobool3 = 0, $tobool5 = 0, $tobool9 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $call = (_find_nth_cmavo_child($0,1,301)|0);
 $key = $call;
 $1 = $key;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((80515|0),(80287|0),299,(80519|0));
  // unreachable;
 }
 $2 = $key;
 $data = ((($2)) + 44|0);
 $code = ((($data)) + 4|0);
 $3 = HEAP32[$code>>2]|0;
 $arrayidx = (46450 + (($3*14)|0)|0);
 $4 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
 $text = $4;
 $5 = $text;
 $call2 = (_strcmp($5,98841)|0);
 $tobool3 = ($call2|0)!=(0);
 do {
  if ($tobool3) {
   $6 = $text;
   $call4 = (_strcmp($6,98852)|0);
   $tobool5 = ($call4|0)!=(0);
   if (!($tobool5)) {
    $func = 1;
    break;
   }
   $7 = $text;
   $call8 = (_strcmp($7,98874)|0);
   $tobool9 = ($call8|0)!=(0);
   if (!($tobool9)) {
    $func = 2;
    break;
   }
   $8 = $text;
   $call12 = (_strcmp($8,80533)|0);
   $tobool13 = ($call12|0)!=(0);
   if (!($tobool13)) {
    $func = 3;
    break;
   }
   $9 = $text;
   $call16 = (_strcmp($9,98863)|0);
   $tobool17 = ($call16|0)!=(0);
   if ($tobool17) {
    $func = -1;
    break;
   } else {
    $func = 4;
    break;
   }
  } else {
   $func = 0;
  }
 } while(0);
 $10 = $func;
 $cmp = ($10|0)!=(-1);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $11 = $x$addr;
 $12 = $func;
 _process_forethought($11,$12);
 STACKTOP = sp;return;
}
function _process_gek($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call13 = 0, $call17 = 0, $call2 = 0, $call21 = 0, $call25 = 0, $call9 = 0, $cmp = 0, $code = 0, $data = 0, $func = 0, $gi = 0, $gik = 0, $key = 0, $or$cond = 0, $text = 0, $tobool = 0;
 var $tobool10 = 0, $tobool14 = 0, $tobool18 = 0, $tobool22 = 0, $tobool26 = 0, $tobool3 = 0, $tobool4 = 0, $tobool5 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $0 = $x$addr;
 $call = (_find_nth_cmavo_child($0,1,294)|0);
 $key = $call;
 $1 = $key;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  $2 = $x$addr;
  $call1 = (_find_nth_child($2,1,23)|0);
  $gik = $call1;
  $3 = $x$addr;
  $call2 = (_find_nth_cmavo_child($3,1,297)|0);
  $gi = $call2;
  $4 = $gik;
  $tobool3 = ($4|0)!=(0|0);
  $5 = $gi;
  $tobool4 = ($5|0)!=(0|0);
  $or$cond = $tobool3 | $tobool4;
  if (!($or$cond)) {
   ___assert_fail((80277|0),(80287|0),428,(80297|0));
   // unreachable;
  }
  $6 = $gi;
  $tobool5 = ($6|0)!=(0|0);
  $7 = $x$addr;
  if ($tobool5) {
   $8 = $gi;
   _process_joik_gi($7,$8);
   STACKTOP = sp;return;
  } else {
   $9 = $gik;
   _process_stag_gik($7,$9);
   STACKTOP = sp;return;
  }
 }
 $10 = $key;
 $data = ((($10)) + 44|0);
 $code = ((($data)) + 4|0);
 $11 = HEAP32[$code>>2]|0;
 $arrayidx = (46450 + (($11*14)|0)|0);
 $12 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
 $text = $12;
 $13 = $text;
 $call9 = (_strcmp($13,80309)|0);
 $tobool10 = ($call9|0)!=(0);
 do {
  if ($tobool10) {
   $14 = $text;
   $call13 = (_strcmp($14,80312)|0);
   $tobool14 = ($call13|0)!=(0);
   if (!($tobool14)) {
    $func = 1;
    break;
   }
   $15 = $text;
   $call17 = (_strcmp($15,80315)|0);
   $tobool18 = ($call17|0)!=(0);
   if (!($tobool18)) {
    $func = 2;
    break;
   }
   $16 = $text;
   $call21 = (_strcmp($16,80318)|0);
   $tobool22 = ($call21|0)!=(0);
   if (!($tobool22)) {
    $func = 3;
    break;
   }
   $17 = $text;
   $call25 = (_strcmp($17,80321)|0);
   $tobool26 = ($call25|0)!=(0);
   if ($tobool26) {
    $func = -1;
    break;
   } else {
    $func = 4;
    break;
   }
  } else {
   $func = 0;
  }
 } while(0);
 $18 = $func;
 $cmp = ($18|0)!=(-1);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $19 = $x$addr;
 $20 = $func;
 _process_forethought($19,$20);
 STACKTOP = sp;return;
}
function _process_joik_gi($gek,$gi) {
 $gek = $gek|0;
 $gi = $gi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call11 = 0, $call6 = 0, $call8 = 0, $cond = 0, $gek$addr = 0, $gi$addr = 0, $joik = 0, $js = 0, $js13 = 0, $mid_gik = 0, $nai2 = 0, $neg1 = 0, $neg114 = 0, $neg19 = 0, $neg2 = 0;
 var $neg210 = 0, $neg215 = 0, $parent = 0, $tobool = 0, $tobool2 = 0, $tobool7 = 0, $xcon = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $gek$addr = $gek;
 $gi$addr = $gi;
 $0 = $gek$addr;
 $parent = ((($0)) + 8|0);
 $1 = HEAP32[$parent>>2]|0;
 $call = (_find_nth_child($1,1,23)|0);
 $mid_gik = $call;
 $2 = $mid_gik;
 $tobool = ($2|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((80469|0),(80287|0),339,(80494|0));
  // unreachable;
 }
 $3 = $gek$addr;
 $call1 = (_find_nth_child($3,1,40)|0);
 $joik = $call1;
 $4 = $joik;
 $tobool2 = ($4|0)!=(0|0);
 if ($tobool2) {
  $5 = $mid_gik;
  $call6 = (_find_nth_cmavo_child($5,1,336)|0);
  $nai2 = $call6;
  $neg1 = 0;
  $6 = $nai2;
  $tobool7 = ($6|0)!=(0|0);
  $cond = $tobool7 ? 1 : 0;
  $neg2 = $cond;
  $7 = $gek$addr;
  $call8 = (_prop_connective($7,1)|0);
  $xcon = $call8;
  $8 = $xcon;
  HEAP32[$8>>2] = 2;
  $9 = $joik;
  $10 = $xcon;
  $js = ((($10)) + 8|0);
  HEAP32[$js>>2] = $9;
  $11 = $neg1;
  $12 = $xcon;
  $neg19 = ((($12)) + 12|0);
  HEAP32[$neg19>>2] = $11;
  $13 = $neg2;
  $14 = $xcon;
  $neg210 = ((($14)) + 16|0);
  HEAP32[$neg210>>2] = $13;
  $15 = $mid_gik;
  $call11 = (_prop_connective($15,1)|0);
  $xcon = $call11;
  $16 = $xcon;
  HEAP32[$16>>2] = 3;
  $17 = $joik;
  $18 = $xcon;
  $js13 = ((($18)) + 8|0);
  HEAP32[$js13>>2] = $17;
  $19 = $neg1;
  $20 = $xcon;
  $neg114 = ((($20)) + 12|0);
  HEAP32[$neg114>>2] = $19;
  $21 = $neg2;
  $22 = $xcon;
  $neg215 = ((($22)) + 16|0);
  HEAP32[$neg215>>2] = $21;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((80510|0),(80287|0),341,(80494|0));
  // unreachable;
 }
}
function _process_stag_gik($gek,$gik) {
 $gek = $gek|0;
 $gik = $gik|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call11 = 0, $call14 = 0, $call6 = 0, $call7 = 0, $cond = 0, $cond10 = 0, $gek$addr = 0, $gik$addr = 0, $js = 0, $js16 = 0, $mid_gik = 0, $nai1 = 0, $nai2 = 0;
 var $neg1 = 0, $neg112 = 0, $neg117 = 0, $neg2 = 0, $neg213 = 0, $neg218 = 0, $parent = 0, $stag = 0, $tobool = 0, $tobool2 = 0, $tobool8 = 0, $tobool9 = 0, $xcon = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $gek$addr = $gek;
 $gik$addr = $gik;
 $0 = $gek$addr;
 $parent = ((($0)) + 8|0);
 $1 = HEAP32[$parent>>2]|0;
 $call = (_find_nth_child($1,1,23)|0);
 $mid_gik = $call;
 $2 = $mid_gik;
 $tobool = ($2|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((80469|0),(80287|0),382,(80477|0));
  // unreachable;
 }
 $3 = $gek$addr;
 $call1 = (_find_nth_child($3,1,112)|0);
 $stag = $call1;
 $4 = $stag;
 $tobool2 = ($4|0)!=(0|0);
 if ($tobool2) {
  $5 = $gik$addr;
  $call6 = (_find_nth_cmavo_child($5,1,336)|0);
  $nai1 = $call6;
  $6 = $mid_gik;
  $call7 = (_find_nth_cmavo_child($6,1,336)|0);
  $nai2 = $call7;
  $7 = $nai1;
  $tobool8 = ($7|0)!=(0|0);
  $cond = $tobool8 ? 1 : 0;
  $neg1 = $cond;
  $8 = $nai2;
  $tobool9 = ($8|0)!=(0|0);
  $cond10 = $tobool9 ? 1 : 0;
  $neg2 = $cond10;
  $9 = $gek$addr;
  $call11 = (_prop_connective($9,1)|0);
  $xcon = $call11;
  $10 = $xcon;
  HEAP32[$10>>2] = 4;
  $11 = $stag;
  $12 = $xcon;
  $js = ((($12)) + 8|0);
  HEAP32[$js>>2] = $11;
  $13 = $neg1;
  $14 = $xcon;
  $neg112 = ((($14)) + 12|0);
  HEAP32[$neg112>>2] = $13;
  $15 = $neg2;
  $16 = $xcon;
  $neg213 = ((($16)) + 16|0);
  HEAP32[$neg213>>2] = $15;
  $17 = $mid_gik;
  $call14 = (_prop_connective($17,1)|0);
  $xcon = $call14;
  $18 = $xcon;
  HEAP32[$18>>2] = 5;
  $19 = $stag;
  $20 = $xcon;
  $js16 = ((($20)) + 8|0);
  HEAP32[$js16>>2] = $19;
  $21 = $neg1;
  $22 = $xcon;
  $neg117 = ((($22)) + 12|0);
  HEAP32[$neg117>>2] = $21;
  $23 = $neg2;
  $24 = $xcon;
  $neg218 = ((($24)) + 16|0);
  HEAP32[$neg218>>2] = $23;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((109651|0),(80287|0),384,(80477|0));
  // unreachable;
 }
}
function _process_forethought($x,$func) {
 $x = $x|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx13 = 0, $call = 0, $call1 = 0, $call10 = 0, $call11 = 0, $call2 = 0, $call3 = 0, $call9 = 0, $cond = 0, $cond6 = 0, $cond8 = 0, $conv = 0, $func$addr = 0, $gik = 0, $index = 0, $nai1 = 0;
 var $nai2 = 0, $neg1 = 0, $neg2 = 0, $parent = 0, $pattern = 0, $pattern14 = 0, $se = 0, $tobool = 0, $tobool4 = 0, $tobool5 = 0, $tobool7 = 0, $x$addr = 0, $xcon = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $x$addr = $x;
 $func$addr = $func;
 $0 = $x$addr;
 $parent = ((($0)) + 8|0);
 $1 = HEAP32[$parent>>2]|0;
 $call = (_find_nth_child($1,1,23)|0);
 $gik = $call;
 $2 = $gik;
 $tobool = ($2|0)!=(0|0);
 if ($tobool) {
  $3 = $x$addr;
  $call1 = (_find_nth_cmavo_child($3,1,353)|0);
  $se = $call1;
  $4 = $x$addr;
  $call2 = (_find_nth_cmavo_child($4,1,336)|0);
  $nai1 = $call2;
  $5 = $gik;
  $call3 = (_find_nth_cmavo_child($5,1,336)|0);
  $nai2 = $call3;
  $6 = $nai1;
  $tobool4 = ($6|0)!=(0|0);
  $cond = $tobool4 ? 1 : 0;
  $neg1 = $cond;
  $7 = $se;
  $tobool5 = ($7|0)!=(0|0);
  $cond6 = $tobool5 ? 1 : 0;
  $conv = $cond6;
  $8 = $nai2;
  $tobool7 = ($8|0)!=(0|0);
  $cond8 = $tobool7 ? 1 : 0;
  $neg2 = $cond8;
  $9 = $neg1;
  $10 = $conv;
  $11 = $neg2;
  $12 = $func$addr;
  $call9 = (_generate_truth_index($9,$10,$11,$12)|0);
  $index = $call9;
  $13 = $x$addr;
  $call10 = (_prop_connective($13,1)|0);
  $xcon = $call10;
  $14 = $xcon;
  HEAP32[$14>>2] = 0;
  $15 = $index;
  $arrayidx = (932 + ($15<<2)|0);
  $16 = HEAP32[$arrayidx>>2]|0;
  $17 = $xcon;
  $pattern = ((($17)) + 4|0);
  HEAP32[$pattern>>2] = $16;
  $18 = $gik;
  $call11 = (_prop_connective($18,1)|0);
  $xcon = $call11;
  $19 = $xcon;
  HEAP32[$19>>2] = 1;
  $20 = $index;
  $arrayidx13 = (932 + ($20<<2)|0);
  $21 = HEAP32[$arrayidx13>>2]|0;
  $22 = $xcon;
  $pattern14 = ((($22)) + 4|0);
  HEAP32[$pattern14>>2] = $21;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((98594|0),(80287|0),255,(80326|0));
  // unreachable;
 }
}
function _generate_truth_index($neg1,$conv,$neg2,$func) {
 $neg1 = $neg1|0;
 $conv = $conv|0;
 $neg2 = $neg2|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add = 0, $add6 = 0, $add9 = 0, $arrayidx = 0, $cmp = 0, $cond = 0, $cond4 = 0, $cond8 = 0, $conv$addr = 0, $func$addr = 0, $index = 0, $mul = 0;
 var $mul2 = 0, $mul5 = 0, $neg1$addr = 0, $neg2$addr = 0, $result = 0, $tobool = 0, $tobool3 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $neg1$addr = $neg1;
 $conv$addr = $conv;
 $neg2$addr = $neg2;
 $func$addr = $func;
 $0 = $func$addr;
 $cmp = ($0|0)!=(-1);
 if ($cmp) {
  $1 = $func$addr;
  $mul = $1<<3;
  $2 = $conv$addr;
  $tobool = ($2|0)!=(0);
  $cond = $tobool ? 1 : 0;
  $mul2 = $cond<<2;
  $add = (($mul) + ($mul2))|0;
  $3 = $neg1$addr;
  $tobool3 = ($3|0)!=(0);
  $cond4 = $tobool3 ? 1 : 0;
  $mul5 = $cond4<<1;
  $add6 = (($add) + ($mul5))|0;
  $4 = $neg2$addr;
  $tobool7 = ($4|0)!=(0);
  $cond8 = $tobool7 ? 1 : 0;
  $add9 = (($add6) + ($cond8))|0;
  $index = $add9;
  $5 = $index;
  $arrayidx = (1000 + ($5<<2)|0);
  $6 = HEAP32[$arrayidx>>2]|0;
  $result = $6;
  $7 = $result;
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((80431|0),(80287|0),71,(80448|0));
  // unreachable;
 }
 return (0)|0;
}
function _process_afterthought($x,$func) {
 $x = $x|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call2 = 0, $call7 = 0;
 var $call8 = 0, $cond = 0, $cond4 = 0, $cond6 = 0, $conv = 0, $func$addr = 0, $index = 0, $na = 0, $nai = 0, $neg1 = 0, $neg2 = 0, $pattern = 0, $se = 0, $tobool = 0, $tobool3 = 0, $tobool5 = 0, $x$addr = 0, $xcon = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $x$addr = $x;
 $func$addr = $func;
 $0 = $x$addr;
 $call = (_find_nth_cmavo_child($0,1,333)|0);
 $na = $call;
 $1 = $x$addr;
 $call1 = (_find_nth_cmavo_child($1,1,353)|0);
 $se = $call1;
 $2 = $x$addr;
 $call2 = (_find_nth_cmavo_child($2,1,336)|0);
 $nai = $call2;
 $3 = $na;
 $tobool = ($3|0)!=(0|0);
 $cond = $tobool ? 1 : 0;
 $neg1 = $cond;
 $4 = $se;
 $tobool3 = ($4|0)!=(0|0);
 $cond4 = $tobool3 ? 1 : 0;
 $conv = $cond4;
 $5 = $nai;
 $tobool5 = ($5|0)!=(0|0);
 $cond6 = $tobool5 ? 1 : 0;
 $neg2 = $cond6;
 $6 = $neg1;
 $7 = $conv;
 $8 = $neg2;
 $9 = $func$addr;
 $call7 = (_generate_truth_index($6,$7,$8,$9)|0);
 $index = $call7;
 $10 = $x$addr;
 $call8 = (_prop_connective($10,1)|0);
 $xcon = $call8;
 $11 = $xcon;
 HEAP32[$11>>2] = 6;
 $12 = $index;
 $arrayidx = (932 + ($12<<2)|0);
 $13 = HEAP32[$arrayidx>>2]|0;
 $14 = $xcon;
 $pattern = ((($14)) + 4|0);
 HEAP32[$pattern>>2] = $13;
 STACKTOP = sp;return;
}
function _do_erasures($toks) {
 $toks = $toks|0;
 var $0 = 0, $1 = 0, $2 = 0, $toks$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $toks$addr = $toks;
 $0 = $toks$addr;
 _handle_si($0);
 $1 = $toks$addr;
 _handle_sa($1);
 $2 = $toks$addr;
 _handle_su($2);
 STACKTOP = sp;return;
}
function _handle_si($toks) {
 $toks = $toks|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp16 = 0, $cmp17 = 0, $cmp19 = 0, $cmp2 = 0;
 var $cmp24 = 0, $cmp28 = 0, $cmp3 = 0, $cmp37 = 0, $cmp4 = 0, $data = 0, $data11 = 0, $data21 = 0, $data31 = 0, $inc = 0, $nt = 0, $ntt = 0, $prev = 0, $require = 0, $si_got = 0, $start_column = 0, $start_line = 0, $sub = 0, $t = 0, $toks$addr = 0;
 var $type = 0, $type12 = 0, $type18 = 0, $type30 = 0, $type6 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $x = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $toks$addr = $toks;
 $0 = $toks$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 L1: while(1) {
  $2 = $x;
  $3 = $toks$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   label = 28;
   break;
  }
  $4 = $x;
  $5 = HEAP32[$4>>2]|0;
  $nt = $5;
  $6 = $x;
  $type = ((($6)) + 40|0);
  $7 = HEAP32[$type>>2]|0;
  $cmp2 = ($7|0)==(2);
  do {
   if ($cmp2) {
    $8 = $x;
    $data = ((($8)) + 44|0);
    $9 = HEAP32[$data>>2]|0;
    $cmp3 = ($9|0)==(356);
    if ($cmp3) {
     $10 = $x;
     $prev = ((($10)) + 4|0);
     $11 = HEAP32[$prev>>2]|0;
     $y = $11;
     $12 = $y;
     $13 = $toks$addr;
     $cmp4 = ($12|0)==($13|0);
     if ($cmp4) {
      $14 = HEAP32[7856]|0;
      $15 = $x;
      $start_line = ((($15)) + 32|0);
      $16 = HEAP32[$start_line>>2]|0;
      $17 = $x;
      $start_column = ((($17)) + 36|0);
      $18 = HEAP32[$start_column>>2]|0;
      HEAP32[$vararg_buffer>>2] = $16;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $18;
      (_fprintf($14,80591,$vararg_buffer)|0);
      break;
     }
     $require = 1;
     $19 = $y;
     $type6 = ((($19)) + 40|0);
     $20 = HEAP32[$type6>>2]|0;
     switch ($20|0) {
     case 3:  {
      $require = 4;
      break;
     }
     case 4:  {
      $require = 2;
      break;
     }
     case 5:  {
      $require = 3;
      break;
     }
     case 9: case 2: case 8:  {
      $require = 1;
      break;
     }
     case 11:  {
      $21 = $y;
      $data11 = ((($21)) + 44|0);
      $22 = HEAP32[$data11>>2]|0;
      $require = $22;
      break;
     }
     default: {
      label = 13;
      break L1;
     }
     }
     $27 = $x;
     $28 = HEAP32[$27>>2]|0;
     $z = $28;
     $si_got = 1;
     while(1) {
      $29 = $si_got;
      $30 = $require;
      $cmp16 = ($29|0)<($30|0);
      if (!($cmp16)) {
       break;
      }
      $31 = $z;
      $32 = $toks$addr;
      $cmp17 = ($31|0)!=($32|0);
      if (!($cmp17)) {
       break;
      }
      $33 = $z;
      $type18 = ((($33)) + 40|0);
      $34 = HEAP32[$type18>>2]|0;
      $cmp19 = ($34|0)==(2);
      if (!($cmp19)) {
       break;
      }
      $35 = $z;
      $data21 = ((($35)) + 44|0);
      $36 = HEAP32[$data21>>2]|0;
      $cmp24 = ($36|0)==(356);
      if (!($cmp24)) {
       break;
      }
      $37 = $si_got;
      $inc = (($37) + 1)|0;
      $si_got = $inc;
      $38 = $z;
      $39 = HEAP32[$38>>2]|0;
      $z = $39;
     }
     $40 = $si_got;
     $41 = $require;
     $cmp28 = ($40|0)<($41|0);
     $42 = $y;
     if ($cmp28) {
      $type30 = ((($42)) + 40|0);
      HEAP32[$type30>>2] = 11;
      $43 = $require;
      $44 = $si_got;
      $sub = (($43) - ($44))|0;
      $45 = $y;
      $data31 = ((($45)) + 44|0);
      HEAP32[$data31>>2] = $sub;
     } else {
      _delete_node($42);
     }
     $46 = $x;
     $t = $46;
     while(1) {
      $47 = $t;
      $48 = $z;
      $cmp37 = ($47|0)!=($48|0);
      if (!($cmp37)) {
       break;
      }
      $49 = $t;
      $50 = HEAP32[$49>>2]|0;
      $ntt = $50;
      $51 = $t;
      _delete_node($51);
      $52 = $ntt;
      $t = $52;
     }
     $53 = $z;
     $nt = $53;
    }
   }
  } while(0);
  $54 = $nt;
  $x = $54;
 }
 if ((label|0) == 13) {
  $23 = HEAP32[7856]|0;
  $24 = $y;
  $type12 = ((($24)) + 40|0);
  $25 = HEAP32[$type12>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $25;
  (_fprintf($23,80642,$vararg_buffer2)|0);
  $26 = HEAP32[7856]|0;
  (_fflush($26)|0);
  ___assert_fail((80680|0),(80682|0),67,(80692|0));
  // unreachable;
 }
 else if ((label|0) == 28) {
  STACKTOP = sp;return;
 }
}
function _handle_sa($toks) {
 $toks = $toks|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $cmp = 0, $cmp12 = 0, $cmp14 = 0, $cmp2 = 0, $cmp22 = 0, $cmp25 = 0, $cmp29 = 0, $cmp3 = 0, $cmp33 = 0, $cmp4 = 0, $cmp8 = 0, $data = 0, $data16 = 0, $data19 = 0, $nt = 0, $ntt = 0, $prev = 0, $prev28 = 0, $toks$addr = 0;
 var $type = 0, $type10 = 0, $type11 = 0, $type13 = 0, $type24 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $toks$addr = $toks;
 $0 = $toks$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $toks$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   label = 18;
   break;
  }
  $4 = $x;
  $5 = HEAP32[$4>>2]|0;
  $nt = $5;
  $6 = $nt;
  $7 = $toks$addr;
  $cmp2 = ($6|0)==($7|0);
  if ($cmp2) {
   label = 18;
   break;
  }
  $8 = $x;
  $type = ((($8)) + 40|0);
  $9 = HEAP32[$type>>2]|0;
  $cmp3 = ($9|0)!=(2);
  L5: do {
   if (!($cmp3)) {
    $10 = $x;
    $data = ((($10)) + 44|0);
    $11 = HEAP32[$data>>2]|0;
    $cmp4 = ($11|0)!=(352);
    if (!($cmp4)) {
     $12 = $x;
     $prev = ((($12)) + 4|0);
     $13 = HEAP32[$prev>>2]|0;
     $y = $13;
     while(1) {
      $14 = $y;
      $15 = $toks$addr;
      $cmp8 = ($14|0)!=($15|0);
      if (!($cmp8)) {
       break;
      }
      $16 = $y;
      $type10 = ((($16)) + 40|0);
      $17 = HEAP32[$type10>>2]|0;
      $18 = $nt;
      $type11 = ((($18)) + 40|0);
      $19 = HEAP32[$type11>>2]|0;
      $cmp12 = ($17|0)==($19|0);
      if ($cmp12) {
       $20 = $y;
       $type13 = ((($20)) + 40|0);
       $21 = HEAP32[$type13>>2]|0;
       $cmp14 = ($21|0)==(2);
       if ($cmp14) {
        $22 = $y;
        $data16 = ((($22)) + 44|0);
        $23 = HEAP32[$data16>>2]|0;
        $24 = $nt;
        $data19 = ((($24)) + 44|0);
        $25 = HEAP32[$data19>>2]|0;
        $cmp22 = ($23|0)==($25|0);
        if ($cmp22) {
         break;
        }
       }
       $26 = $y;
       $type24 = ((($26)) + 40|0);
       $27 = HEAP32[$type24>>2]|0;
       $cmp25 = ($27|0)!=(2);
       if ($cmp25) {
        break;
       }
      }
      $28 = $y;
      $prev28 = ((($28)) + 4|0);
      $29 = HEAP32[$prev28>>2]|0;
      $y = $29;
     }
     $30 = $y;
     $31 = $toks$addr;
     $cmp29 = ($30|0)==($31|0);
     if ($cmp29) {
      $32 = $toks$addr;
      $33 = HEAP32[$32>>2]|0;
      $y = $33;
     }
     while(1) {
      $34 = $y;
      $35 = $nt;
      $cmp33 = ($34|0)!=($35|0);
      if (!($cmp33)) {
       break L5;
      }
      $36 = $y;
      $37 = HEAP32[$36>>2]|0;
      $ntt = $37;
      $38 = $y;
      _delete_node($38);
      $39 = $ntt;
      $y = $39;
     }
    }
   }
  } while(0);
  $40 = $nt;
  $x = $40;
 }
 if ((label|0) == 18) {
  STACKTOP = sp;return;
 }
}
function _handle_su($toks) {
 $toks = $toks|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp12 = 0, $cmp17 = 0, $cmp2 = 0, $cmp21 = 0, $cmp24 = 0;
 var $cmp29 = 0, $cmp3 = 0, $cmp33 = 0, $cmp38 = 0, $cmp4 = 0, $cmp43 = 0, $cmp48 = 0, $cmp52 = 0, $cmp7 = 0, $data = 0, $data26 = 0, $data30 = 0, $data35 = 0, $data40 = 0, $data9 = 0, $nt = 0, $ntt = 0, $ntt53 = 0, $nu = 0, $prev = 0;
 var $prev46 = 0, $toks$addr = 0, $type = 0, $type23 = 0, $type6 = 0, $u = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $toks$addr = $toks;
 $0 = $toks$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $toks$addr;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $x;
  $5 = HEAP32[$4>>2]|0;
  $nt = $5;
  $6 = $x;
  $type = ((($6)) + 40|0);
  $7 = HEAP32[$type>>2]|0;
  $cmp2 = ($7|0)==(2);
  L4: do {
   if ($cmp2) {
    $8 = $x;
    $data = ((($8)) + 44|0);
    $9 = HEAP32[$data>>2]|0;
    $cmp3 = ($9|0)==(358);
    if ($cmp3) {
     $10 = $nt;
     $11 = $toks$addr;
     $cmp4 = ($10|0)!=($11|0);
     if ($cmp4) {
      $12 = $nt;
      $type6 = ((($12)) + 40|0);
      $13 = HEAP32[$type6>>2]|0;
      $cmp7 = ($13|0)==(2);
      if ($cmp7) {
       $14 = $nt;
       $data9 = ((($14)) + 44|0);
       $15 = HEAP32[$data9>>2]|0;
       $cmp12 = ($15|0)==(358);
       if ($cmp12) {
        $16 = $nt;
        $17 = HEAP32[$16>>2]|0;
        $ntt = $17;
        $18 = $toks$addr;
        $19 = HEAP32[$18>>2]|0;
        $u = $19;
        while(1) {
         $20 = $u;
         $21 = $ntt;
         $cmp17 = ($20|0)!=($21|0);
         if (!($cmp17)) {
          break;
         }
         $22 = $u;
         $23 = HEAP32[$22>>2]|0;
         $nu = $23;
         $24 = $u;
         _delete_node($24);
         $25 = $nu;
         $u = $25;
        }
        $26 = $ntt;
        $nt = $26;
        break;
       }
      }
     }
     $27 = $x;
     $prev = ((($27)) + 4|0);
     $28 = HEAP32[$prev>>2]|0;
     $y = $28;
     while(1) {
      $29 = $y;
      $30 = $toks$addr;
      $cmp21 = ($29|0)!=($30|0);
      if (!($cmp21)) {
       break;
      }
      $31 = $y;
      $type23 = ((($31)) + 40|0);
      $32 = HEAP32[$type23>>2]|0;
      $cmp24 = ($32|0)==(2);
      if ($cmp24) {
       $33 = $y;
       $data26 = ((($33)) + 44|0);
       $34 = HEAP32[$data26>>2]|0;
       $cmp29 = ($34|0)==(338);
       if ($cmp29) {
        break;
       }
       $35 = $y;
       $data30 = ((($35)) + 44|0);
       $36 = HEAP32[$data30>>2]|0;
       $cmp33 = ($36|0)==(324);
       if ($cmp33) {
        break;
       }
       $37 = $y;
       $data35 = ((($37)) + 44|0);
       $38 = HEAP32[$data35>>2]|0;
       $cmp38 = ($38|0)==(364);
       if ($cmp38) {
        break;
       }
       $39 = $y;
       $data40 = ((($39)) + 44|0);
       $40 = HEAP32[$data40>>2]|0;
       $cmp43 = ($40|0)==(362);
       if ($cmp43) {
        break;
       }
      }
      $41 = $y;
      $prev46 = ((($41)) + 4|0);
      $42 = HEAP32[$prev46>>2]|0;
      $y = $42;
     }
     $43 = $y;
     $44 = $toks$addr;
     $cmp48 = ($43|0)==($44|0);
     if ($cmp48) {
      $45 = $toks$addr;
      $46 = HEAP32[$45>>2]|0;
      $y = $46;
     }
     while(1) {
      $47 = $y;
      $48 = $nt;
      $cmp52 = ($47|0)!=($48|0);
      if (!($cmp52)) {
       break L4;
      }
      $49 = $y;
      $50 = HEAP32[$49>>2]|0;
      $ntt53 = $50;
      $51 = $y;
      _delete_node($51);
      $52 = $ntt53;
      $y = $52;
     }
    }
   }
  } while(0);
  $53 = $nt;
  $x = $53;
 }
 STACKTOP = sp;return;
}
function _Malloc($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add1 = 0, $call = 0, $cmp = 0, $n$addr = 0, $nn = 0, $r = 0;
 var $s = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $n$addr = $n;
 $0 = $n$addr;
 $1 = HEAP32[29736]|0;
 $add = (($1) + ($0))|0;
 HEAP32[29736] = $add;
 $2 = HEAP32[29736]|0;
 $3 = HEAP32[29737]|0;
 $cmp = ($2>>>0)>($3>>>0);
 if ($cmp) {
  $4 = HEAP32[29736]|0;
  HEAP32[29737] = $4;
 }
 $5 = $n$addr;
 $add1 = (($5) + 8)|0;
 $nn = $add1;
 $6 = $nn;
 $call = (_malloc($6)|0);
 $s = $call;
 $7 = $s;
 $x = $7;
 $8 = $n$addr;
 $9 = $x;
 HEAP32[$9>>2] = $8;
 $10 = $s;
 $add$ptr = ((($10)) + 8|0);
 $r = $add$ptr;
 $11 = $r;
 STACKTOP = sp;return ($11|0);
}
function _Realloc($old,$n) {
 $old = $old|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0;
 var $add$ptr2 = 0, $add1 = 0, $call = 0, $cmp = 0, $n$addr = 0, $nn = 0, $old$addr = 0, $r = 0, $s = 0, $sub = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $old$addr = $old;
 $n$addr = $n;
 $0 = $old$addr;
 $add$ptr = ((($0)) + -8|0);
 $s = $add$ptr;
 $1 = $s;
 $x = $1;
 $2 = $x;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[29736]|0;
 $sub = (($4) - ($3))|0;
 HEAP32[29736] = $sub;
 $5 = $n$addr;
 $6 = HEAP32[29736]|0;
 $add = (($6) + ($5))|0;
 HEAP32[29736] = $add;
 $7 = HEAP32[29736]|0;
 $8 = HEAP32[29737]|0;
 $cmp = ($7>>>0)>($8>>>0);
 if ($cmp) {
  $9 = HEAP32[29736]|0;
  HEAP32[29737] = $9;
 }
 $10 = $n$addr;
 $add1 = (($10) + 8)|0;
 $nn = $add1;
 $11 = $s;
 $12 = $nn;
 $call = (_realloc($11,$12)|0);
 $s = $call;
 $13 = $s;
 $x = $13;
 $14 = $n$addr;
 $15 = $x;
 HEAP32[$15>>2] = $14;
 $16 = $s;
 $add$ptr2 = ((($16)) + 8|0);
 $r = $add$ptr2;
 $17 = $r;
 STACKTOP = sp;return ($17|0);
}
function _Free($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $nn = 0, $r = 0, $s = 0, $sub = 0, $v = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $0 = $x$addr;
 $r = $0;
 $1 = $r;
 $add$ptr = ((($1)) + -8|0);
 $s = $add$ptr;
 $2 = $s;
 $v = $2;
 $3 = $v;
 $4 = HEAP32[$3>>2]|0;
 $nn = $4;
 $5 = $nn;
 $6 = HEAP32[29736]|0;
 $sub = (($6) - ($5))|0;
 HEAP32[29736] = $sub;
 $7 = $s;
 _free($7);
 STACKTOP = sp;return;
}
function _print_memory_statistics() {
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[7856]|0;
 $1 = HEAP32[29736]|0;
 $2 = HEAP32[29737]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 (_fprintf($0,80702,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _morf_scan($s,$buf_end,$arg_xtra) {
 $s = $s|0;
 $buf_end = $buf_end|0;
 $arg_xtra = $arg_xtra|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $G = 0, $L = 0, $S = 0, $act = 0, $add = 0, $add$ptr = 0, $add$ptr206 = 0;
 var $add14 = 0, $and = 0, $and11 = 0, $and17 = 0, $and19 = 0, $and20 = 0, $and23 = 0, $and3 = 0, $and47 = 0, $and6 = 0, $and9 = 0, $arg_xtra$addr = 0, $arrayidx = 0, $arrayidx15 = 0, $arrayidx39 = 0, $arrayidx44 = 0, $arrayidx62 = 0, $arrayidx68 = 0, $arrayidx7 = 0, $arrayidx79 = 0;
 var $arrayidx84 = 0, $buf_end$addr = 0, $c = 0, $call = 0, $call200 = 0, $can_split = 0, $cmp = 0, $cmp112 = 0, $cmp36 = 0, $cmp41 = 0, $cmp54 = 0, $cmp57 = 0, $cmp72 = 0, $cmp76 = 0, $cmp80 = 0, $cond = 0, $cond121 = 0, $cond124 = 0, $cond131 = 0, $cond139 = 0;
 var $cond140 = 0, $cond147 = 0, $cond154 = 0, $cond164 = 0, $cond174 = 0, $cond184 = 0, $conv = 0, $conv16 = 0, $conv2 = 0, $conv4 = 0, $conv40 = 0, $conv45 = 0, $conv5 = 0, $conv69 = 0, $conv8 = 0, $cstart = 0, $decrement = 0, $ent = 0, $exival = 0, $ext_result = 0;
 var $had_uppercase = 0, $hyph3 = 0, $hyph4 = 0, $incdec$ptr = 0, $incdec$ptr115 = 0, $incdec$ptr116 = 0, $incdec$ptr127 = 0, $incdec$ptr134 = 0, $incdec$ptr143 = 0, $incdec$ptr150 = 0, $incdec$ptr157 = 0, $incdec$ptr167 = 0, $incdec$ptr177 = 0, $incdec$ptr187 = 0, $incdec$ptr192 = 0, $incdec$ptr34 = 0, $incdec$ptr60 = 0, $incdec$ptr65 = 0, $inhibit = 0, $inhibited = 0;
 var $initial = 0, $ladoi = 0, $last_act = 0, $letter_uppercase = 0, $lnot = 0, $lnot$ext = 0, $lnot$ext28 = 0, $lnot22 = 0, $lnot25 = 0, $lnot27 = 0, $next_state = 0, $or = 0, $or$cond = 0, $or$cond$not = 0, $or$cond1 = 0, $or$cond2 = 0, $or10 = 0, $or29 = 0, $p = 0, $p_1 = 0;
 var $p_2 = 0, $pcstart = 0, $pstart = 0, $result = 0, $s$addr = 0, $set = 0, $shl = 0, $shl12 = 0, $shl13 = 0, $shr = 0, $shr18 = 0, $start = 0, $state = 0, $tail = 0, $tent = 0, $tobool = 0, $tobool118 = 0, $tobool120 = 0, $tobool123 = 0, $tobool125 = 0;
 var $tobool130 = 0, $tobool132 = 0, $tobool137 = 0, $tobool138 = 0, $tobool141 = 0, $tobool146 = 0, $tobool148 = 0, $tobool153 = 0, $tobool155 = 0, $tobool163 = 0, $tobool165 = 0, $tobool173 = 0, $tobool175 = 0, $tobool183 = 0, $tobool185 = 0, $tobool190 = 0, $tobool207 = 0, $tobool21 = 0, $tobool24 = 0, $tobool30 = 0;
 var $tobool31 = 0, $tobool32 = 0, $tobool48 = 0, $tok = 0, $vsm = 0, $x = 0, $xtra = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1184|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1184|0);
 $cstart = sp + 112|0;
 $xtra = sp + 16|0;
 $s$addr = $s;
 $buf_end$addr = $buf_end;
 $arg_xtra$addr = $arg_xtra;
 $vsm = 73;
 $inhibited = 0;
 $initial = 1;
 $decrement = 0;
 $p_1 = 0;
 $p_2 = 0;
 $hyph3 = 0;
 $hyph4 = 0;
 $had_uppercase = 0;
 $0 = $buf_end$addr;
 $1 = HEAP32[$0>>2]|0;
 $start = $1;
 $2 = $start;
 $pstart = $2;
 $pcstart = $cstart;
 $S = 0;
 $L = 0;
 $state = 0;
 $last_act = 0;
 $3 = $s$addr;
 $p = $3;
 L1: while(1) {
  $4 = $p;
  $5 = HEAP8[$4>>0]|0;
  $tobool = ($5<<24>>24)!=(0);
  if (!($tobool)) {
   break;
  }
  $6 = $p;
  $7 = HEAP8[$6>>0]|0;
  $c = $7;
  $8 = $c;
  $conv = $8 << 24 >> 24;
  $cmp = ($conv|0)==(44);
  if ($cmp) {
   $9 = $p;
   $incdec$ptr = ((($9)) + 1|0);
   $p = $incdec$ptr;
   continue;
  }
  $10 = $vsm;
  $and = $10 & 63;
  $shl = $and << 3;
  $11 = $c;
  $conv2 = $11&255;
  $and3 = $conv2 & 255;
  $arrayidx = (80759 + ($and3)|0);
  $12 = HEAP8[$arrayidx>>0]|0;
  $conv4 = $12&255;
  $or = $shl | $conv4;
  $vsm = $or;
  $13 = $c;
  $conv5 = $13&255;
  $and6 = $conv5 & 255;
  $arrayidx7 = (81015 + ($and6)|0);
  $14 = HEAP8[$arrayidx7>>0]|0;
  $conv8 = $14&255;
  $G = $conv8;
  $15 = $G;
  $shr = $15 >>> 7;
  $and9 = $shr & 1;
  $letter_uppercase = $and9;
  $16 = $letter_uppercase;
  $17 = $had_uppercase;
  $or10 = $17 | $16;
  $had_uppercase = $or10;
  $18 = $G;
  $and11 = $18 & 31;
  $G = $and11;
  $19 = $L;
  $shl12 = $19 << 10;
  $20 = $S;
  $shl13 = $20 << 5;
  $add = (($shl12) + ($shl13))|0;
  $21 = $G;
  $add14 = (($add) + ($21))|0;
  $ent = $add14;
  $22 = $ent;
  $arrayidx15 = (81271 + ($22)|0);
  $23 = HEAP8[$arrayidx15>>0]|0;
  $conv16 = $23&255;
  $tent = $conv16;
  $24 = $tent;
  $and17 = $24 & 15;
  $tok = $and17;
  $25 = $tent;
  $shr18 = $25 >> 4;
  $and19 = $shr18 & 3;
  $act = $and19;
  $26 = $tent;
  $and20 = $26 & 64;
  $tobool21 = ($and20|0)!=(0);
  $lnot = $tobool21 ^ 1;
  $lnot22 = $lnot ^ 1;
  $lnot$ext = $lnot22&1;
  $set = $lnot$ext;
  $27 = $tent;
  $and23 = $27 & 128;
  $tobool24 = ($and23|0)!=(0);
  $lnot25 = $tobool24 ^ 1;
  $lnot27 = $lnot25 ^ 1;
  $lnot$ext28 = $lnot27&1;
  $inhibit = $lnot$ext28;
  $28 = $inhibit;
  $29 = $inhibited;
  $or29 = $29 | $28;
  $inhibited = $or29;
  $30 = $set;
  $tobool30 = ($30|0)==(0);
  $31 = $inhibited;
  $tobool31 = ($31|0)!=(0);
  $or$cond = $tobool30 | $tobool31;
  $or$cond$not = $or$cond ^ 1;
  $32 = $initial;
  $tobool32 = ($32|0)!=(0);
  $or$cond1 = $or$cond$not | $tobool32;
  if ($or$cond1) {
   $33 = $p;
   $34 = $pstart;
   $incdec$ptr34 = ((($34)) + 4|0);
   $pstart = $incdec$ptr34;
   HEAP32[$34>>2] = $33;
  }
  $35 = $tok;
  $cmp36 = ($35|0)==(1);
  do {
   if ($cmp36) {
    $36 = $vsm;
    $arrayidx39 = (85367 + ($36)|0);
    $37 = HEAP8[$arrayidx39>>0]|0;
    $conv40 = $37&255;
    $tok = $conv40;
   } else {
    $38 = $tok;
    $cmp41 = ($38|0)==(3);
    $39 = $vsm;
    if ($cmp41) {
     $arrayidx44 = (85367 + ($39)|0);
     $40 = HEAP8[$arrayidx44>>0]|0;
     $conv45 = $40&255;
     $tok = $conv45;
     break;
    }
    $and47 = $39 & 504;
    $tobool48 = ($and47|0)!=(0);
    if (!($tobool48)) {
     $tok = 0;
    }
   }
  } while(0);
  $41 = $last_act;
  $cmp54 = ($41|0)==(2);
  $42 = $act;
  $cmp57 = ($42|0)==(1);
  $or$cond2 = $cmp54 & $cmp57;
  if ($or$cond2) {
   $43 = $p;
   $44 = $pcstart;
   $incdec$ptr60 = ((($44)) + 4|0);
   $pcstart = $incdec$ptr60;
   HEAP32[$44>>2] = $43;
  }
  $45 = $state;
  $arrayidx62 = (4108 + ($45<<2)|0);
  $46 = HEAP32[$arrayidx62>>2]|0;
  switch ($46|0) {
  case 2: case 4:  {
   $48 = $p_2;
   $hyph4 = $48;
   break;
  }
  case 3: case 1:  {
   $47 = $p_2;
   $hyph3 = $47;
   break;
  }
  default: {
  }
  }
  $49 = $p_1;
  $p_2 = $49;
  $50 = $p;
  $p_1 = $50;
  $51 = $p;
  $incdec$ptr65 = ((($51)) + 1|0);
  $p = $incdec$ptr65;
  $initial = 0;
  $52 = $state;
  $53 = $tok;
  $call = (_morf_next_state($52,$53)|0);
  $next_state = $call;
  $54 = $act;
  switch ($54|0) {
  case 0:  {
   $S = 0;
   $L = 0;
   break;
  }
  case 1:  {
   $55 = $S;
   $arrayidx68 = (85879 + ($55)|0);
   $56 = HEAP8[$arrayidx68>>0]|0;
   $conv69 = $56&255;
   $L = $conv69;
   $57 = $G;
   $S = $57;
   break;
  }
  case 2:  {
   break;
  }
  default: {
   label = 21;
   break L1;
  }
  }
  $58 = $act;
  $last_act = $58;
  $59 = $next_state;
  $state = $59;
  $60 = $state;
  $cmp72 = ($60|0)<(0);
  if ($cmp72) {
   break;
  }
 }
 if ((label|0) == 21) {
  _abort();
  // unreachable;
 }
 $61 = $state;
 $cmp76 = ($61|0)<(0);
 L32: do {
  if ($cmp76) {
   label = 25;
  } else {
   $62 = $state;
   $arrayidx79 = (1160 + ($62<<2)|0);
   $63 = HEAP32[$arrayidx79>>2]|0;
   $cmp80 = ($63|0)==(0);
   if ($cmp80) {
    label = 25;
   } else {
    $64 = $state;
    $arrayidx84 = (1160 + ($64<<2)|0);
    $65 = HEAP32[$arrayidx84>>2]|0;
    $exival = $65;
    $66 = $exival;
    do {
     switch ($66|0) {
     case 1:  {
      $result = 1;
      $decrement = 0;
      break;
     }
     case 2:  {
      $result = 2;
      $decrement = 0;
      break;
     }
     case 3:  {
      $result = 3;
      $decrement = 0;
      break;
     }
     case 4:  {
      $result = 3;
      $decrement = 1;
      break;
     }
     case 5:  {
      $result = 4;
      $decrement = 0;
      break;
     }
     case 6:  {
      $result = 4;
      $decrement = 1;
      break;
     }
     case 7:  {
      $result = 5;
      $decrement = 0;
      break;
     }
     case 8:  {
      $result = 5;
      $decrement = 1;
      break;
     }
     case 9:  {
      $result = 6;
      $decrement = 0;
      break;
     }
     case 10:  {
      $result = 6;
      $decrement = 1;
      break;
     }
     case 11:  {
      $result = 7;
      $decrement = 1;
      break;
     }
     case 12:  {
      $result = 8;
      $decrement = 0;
      break;
     }
     case 13:  {
      $result = 9;
      $decrement = 0;
      break;
     }
     case 14:  {
      $result = 8;
      $decrement = 1;
      break;
     }
     case 15:  {
      $result = 9;
      $decrement = 1;
      break;
     }
     case 16:  {
      $result = 10;
      $decrement = 0;
      break;
     }
     case 17:  {
      $result = 10;
      $decrement = 1;
      break;
     }
     case 18:  {
      $result = 11;
      $decrement = 0;
      break;
     }
     case 19:  {
      $result = 12;
      $decrement = 1;
      break;
     }
     case 20:  {
      $result = 13;
      $decrement = 1;
      break;
     }
     case 21:  {
      $result = 14;
      $decrement = 0;
      break;
     }
     default: {
      $result = 0;
      $decrement = 0;
     }
     }
    } while(0);
    $67 = $result;
    do {
     switch ($67|0) {
     case 2:  {
      $x = $cstart;
      while(1) {
       $68 = $x;
       $69 = $pcstart;
       $cmp112 = ($68>>>0)<($69>>>0);
       if (!($cmp112)) {
        break;
       }
       $70 = $x;
       $incdec$ptr115 = ((($70)) + 4|0);
       $x = $incdec$ptr115;
       $71 = HEAP32[$70>>2]|0;
       $72 = $pstart;
       $incdec$ptr116 = ((($72)) + 4|0);
       $pstart = $incdec$ptr116;
       HEAP32[$72>>2] = $71;
      }
      $73 = $had_uppercase;
      $tobool118 = ($73|0)!=(0);
      $cond = $tobool118 ? 10 : 8;
      $ext_result = $cond;
      break L32;
      break;
     }
     case 1:  {
      $74 = $had_uppercase;
      $tobool120 = ($74|0)!=(0);
      $cond121 = $tobool120 ? 10 : 8;
      $ext_result = $cond121;
      break L32;
      break;
     }
     case 3:  {
      $75 = $had_uppercase;
      $tobool123 = ($75|0)!=(0);
      $cond124 = $tobool123 ? 10 : 1;
      $ext_result = $cond124;
      $76 = $decrement;
      $tobool125 = ($76|0)!=(0);
      if (!($tobool125)) {
       break L32;
      }
      $77 = $pstart;
      $incdec$ptr127 = ((($77)) + -4|0);
      $pstart = $incdec$ptr127;
      break L32;
      break;
     }
     case 4:  {
      $78 = $had_uppercase;
      $tobool130 = ($78|0)!=(0);
      $cond131 = $tobool130 ? 10 : 2;
      $ext_result = $cond131;
      $79 = $decrement;
      $tobool132 = ($79|0)!=(0);
      if (!($tobool132)) {
       break L32;
      }
      $80 = $pstart;
      $incdec$ptr134 = ((($80)) + -4|0);
      $pstart = $incdec$ptr134;
      break L32;
      break;
     }
     case 5:  {
      $81 = $had_uppercase;
      $tobool137 = ($81|0)!=(0);
      if ($tobool137) {
       $cond140 = 10;
      } else {
       $82 = HEAP32[29724]|0;
       $tobool138 = ($82|0)!=(0);
       $cond139 = $tobool138 ? 2 : 0;
       $cond140 = $cond139;
      }
      $ext_result = $cond140;
      $83 = $decrement;
      $tobool141 = ($83|0)!=(0);
      if (!($tobool141)) {
       break L32;
      }
      $84 = $pstart;
      $incdec$ptr143 = ((($84)) + -4|0);
      $pstart = $incdec$ptr143;
      break L32;
      break;
     }
     case 6:  {
      $85 = $had_uppercase;
      $tobool146 = ($85|0)!=(0);
      $cond147 = $tobool146 ? 10 : 3;
      $ext_result = $cond147;
      $86 = $decrement;
      $tobool148 = ($86|0)!=(0);
      if ($tobool148) {
       $87 = $pstart;
       $incdec$ptr150 = ((($87)) + -4|0);
       $pstart = $incdec$ptr150;
      }
      $88 = $hyph4;
      HEAP32[$xtra>>2] = $88;
      break L32;
      break;
     }
     case 7:  {
      $89 = $had_uppercase;
      $tobool153 = ($89|0)!=(0);
      $cond154 = $tobool153 ? 10 : 4;
      $ext_result = $cond154;
      $90 = $decrement;
      $tobool155 = ($90|0)!=(0);
      if ($tobool155) {
       $91 = $pstart;
       $incdec$ptr157 = ((($91)) + -4|0);
       $pstart = $incdec$ptr157;
      }
      $92 = $hyph3;
      HEAP32[$xtra>>2] = $92;
      break L32;
      break;
     }
     case 8:  {
      $93 = $had_uppercase;
      $tobool163 = ($93|0)!=(0);
      $cond164 = $tobool163 ? 10 : 5;
      $ext_result = $cond164;
      $94 = $decrement;
      $tobool165 = ($94|0)!=(0);
      if ($tobool165) {
       $95 = $pstart;
       $incdec$ptr167 = ((($95)) + -4|0);
       $pstart = $incdec$ptr167;
      }
      $96 = $hyph4;
      HEAP32[$xtra>>2] = $96;
      break L32;
      break;
     }
     case 9:  {
      $97 = $had_uppercase;
      $tobool173 = ($97|0)!=(0);
      $cond174 = $tobool173 ? 10 : 6;
      $ext_result = $cond174;
      $98 = $decrement;
      $tobool175 = ($98|0)!=(0);
      if ($tobool175) {
       $99 = $pstart;
       $incdec$ptr177 = ((($99)) + -4|0);
       $pstart = $incdec$ptr177;
      }
      $100 = $hyph3;
      HEAP32[$xtra>>2] = $100;
      break L32;
      break;
     }
     case 10:  {
      $101 = $had_uppercase;
      $tobool183 = ($101|0)!=(0);
      $cond184 = $tobool183 ? 10 : 7;
      $ext_result = $cond184;
      $102 = $decrement;
      $tobool185 = ($102|0)!=(0);
      if (!($tobool185)) {
       break L32;
      }
      $103 = $pstart;
      $incdec$ptr187 = ((($103)) + -4|0);
      $pstart = $incdec$ptr187;
      break L32;
      break;
     }
     case 14: case 13: case 12:  {
      $ext_result = 0;
      $104 = $decrement;
      $tobool190 = ($104|0)!=(0);
      if (!($tobool190)) {
       break L32;
      }
      $105 = $pstart;
      $incdec$ptr192 = ((($105)) + -4|0);
      $pstart = $incdec$ptr192;
      break L32;
      break;
     }
     case 11:  {
      $ext_result = 9;
      $106 = $start;
      $add$ptr = ((($106)) + 4|0);
      $pstart = $add$ptr;
      $107 = $s$addr;
      $can_split = ((($xtra)) + 4|0);
      $ladoi = ((($xtra)) + 8|0);
      $tail = ((($xtra)) + 12|0);
      $call200 = (_is_bad_cmene($107,$can_split,$ladoi,$tail)|0);
      HEAP32[$xtra>>2] = $call200;
      break L32;
      break;
     }
     default: {
      $ext_result = 0;
      break L32;
     }
     }
    } while(0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $result = 0;
  $ext_result = 0;
  $decrement = 0;
 }
 $108 = $pstart;
 $add$ptr206 = ((($108)) + -4|0);
 $109 = $buf_end$addr;
 HEAP32[$109>>2] = $add$ptr206;
 $110 = $arg_xtra$addr;
 $tobool207 = ($110|0)!=(0|0);
 if (!($tobool207)) {
  $112 = $ext_result;
  STACKTOP = sp;return ($112|0);
 }
 $111 = $arg_xtra$addr;
 ;HEAP32[$111>>2]=HEAP32[$xtra>>2]|0;HEAP32[$111+4>>2]=HEAP32[$xtra+4>>2]|0;HEAP32[$111+8>>2]=HEAP32[$xtra+8>>2]|0;HEAP32[$111+12>>2]=HEAP32[$xtra+12>>2]|0;
 $112 = $ext_result;
 STACKTOP = sp;return ($112|0);
}
function _morf_next_state($current_state,$next_token) {
 $current_state = $current_state|0;
 $next_token = $next_token|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add = 0, $add7 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx20 = 0, $arrayidx23 = 0, $arrayidx8 = 0, $cmp = 0, $cmp10 = 0, $cmp12 = 0, $cmp16 = 0, $cmp4 = 0, $conv = 0, $conv2 = 0, $conv21 = 0, $conv24 = 0, $conv9 = 0, $current_state$addr = 0;
 var $h = 0, $l = 0, $m = 0, $next_token$addr = 0, $retval = 0, $shr = 0, $xm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $current_state$addr = $current_state;
 $next_token$addr = $next_token;
 L1: while(1) {
  $0 = $current_state$addr;
  $cmp = ($0|0)>=(0);
  if (!($cmp)) {
   label = 11;
   break;
  }
  $1 = $current_state$addr;
  $arrayidx = (32180 + ($1<<1)|0);
  $2 = HEAP16[$arrayidx>>1]|0;
  $conv = $2&65535;
  $l = $conv;
  $3 = $current_state$addr;
  $add = (($3) + 1)|0;
  $arrayidx1 = (32180 + ($add<<1)|0);
  $4 = HEAP16[$arrayidx1>>1]|0;
  $conv2 = $4&65535;
  $h = $conv2;
  while(1) {
   $5 = $h;
   $6 = $l;
   $cmp4 = ($5|0)>($6|0);
   if (!($cmp4)) {
    break;
   }
   $7 = $h;
   $8 = $l;
   $add7 = (($7) + ($8))|0;
   $shr = $add7 >> 1;
   $m = $shr;
   $9 = $m;
   $arrayidx8 = (85911 + ($9)|0);
   $10 = HEAP8[$arrayidx8>>0]|0;
   $conv9 = $10&255;
   $xm = $conv9;
   $11 = $xm;
   $12 = $next_token$addr;
   $cmp10 = ($11|0)==($12|0);
   $13 = $m;
   if ($cmp10) {
    label = 12;
    break L1;
   }
   $14 = $l;
   $cmp12 = ($13|0)==($14|0);
   if ($cmp12) {
    break;
   }
   $15 = $xm;
   $16 = $next_token$addr;
   $cmp16 = ($15|0)>($16|0);
   $17 = $m;
   if ($cmp16) {
    $h = $17;
    continue;
   } else {
    $l = $17;
    continue;
   }
  }
  $18 = $current_state$addr;
  $arrayidx20 = (33656 + ($18<<1)|0);
  $19 = HEAP16[$arrayidx20>>1]|0;
  $conv21 = $19 << 16 >> 16;
  $current_state$addr = $conv21;
 }
 if ((label|0) == 11) {
  $retval = -1;
  $21 = $retval;
  STACKTOP = sp;return ($21|0);
 }
 else if ((label|0) == 12) {
  $arrayidx23 = (35130 + ($13<<1)|0);
  $20 = HEAP16[$arrayidx23>>1]|0;
  $conv24 = $20 << 16 >> 16;
  $retval = $conv24;
  $21 = $retval;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _add_bracketing_tags($top) {
 $top = $top|0;
 var $0 = 0, $seq = 0, $top$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $seq = sp;
 $top$addr = $top;
 HEAP32[$seq>>2] = 0;
 $0 = $top$addr;
 _add_bracketing_internal($0,$seq);
 STACKTOP = sp;return;
}
function _add_bracketing_internal($x,$seq) {
 $x = $x|0;
 $seq = $seq|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $arrayidx101 = 0, $brackets = 0, $brackets111 = 0, $brackets14 = 0, $brackets24 = 0, $brackets3 = 0, $brackets32 = 0, $brackets40 = 0, $brackets45 = 0, $brackets49 = 0, $brackets58 = 0, $brackets63 = 0, $brackets67 = 0, $brackets74 = 0, $brackets82 = 0, $brackets87 = 0, $brackets9 = 0, $brackets94 = 0, $brackets97 = 0;
 var $call = 0, $call19 = 0, $call27 = 0, $call77 = 0, $call89 = 0, $children = 0, $children100 = 0, $cmp = 0, $cmp104 = 0, $cmp18 = 0, $cmp36 = 0, $cmp5 = 0, $cmp54 = 0, $cmp70 = 0, $cmp99 = 0, $data = 0, $data107 = 0, $data109 = 0, $data51 = 0, $i = 0;
 var $inc = 0, $inc102 = 0, $inc106 = 0, $inc12 = 0, $inc22 = 0, $inc30 = 0, $inc38 = 0, $inc43 = 0, $inc47 = 0, $inc56 = 0, $inc61 = 0, $inc65 = 0, $inc7 = 0, $inc72 = 0, $inc80 = 0, $inc85 = 0, $inc92 = 0, $n = 0, $number = 0, $number108 = 0;
 var $number13 = 0, $number2 = 0, $number23 = 0, $number31 = 0, $number39 = 0, $number44 = 0, $number48 = 0, $number57 = 0, $number62 = 0, $number66 = 0, $number73 = 0, $number8 = 0, $number81 = 0, $number86 = 0, $number93 = 0, $number96 = 0, $seq$addr = 0, $tobool = 0, $tobool20 = 0, $tobool28 = 0;
 var $tobool78 = 0, $tobool90 = 0, $type = 0, $type1 = 0, $type103 = 0, $x$addr = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $seq$addr = $seq;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 $2 = $x$addr;
 if (!($cmp)) {
  $type103 = ((($2)) + 40|0);
  $96 = HEAP32[$type103>>2]|0;
  $cmp104 = ($96|0)==(6);
  if (!($cmp104)) {
   STACKTOP = sp;return;
  }
  $97 = $seq$addr;
  $98 = HEAP32[$97>>2]|0;
  $inc106 = (($98) + 1)|0;
  HEAP32[$97>>2] = $inc106;
  $99 = $x$addr;
  $data107 = ((($99)) + 44|0);
  $number108 = ((($data107)) + 16|0);
  HEAP32[$number108>>2] = $inc106;
  $100 = $x$addr;
  $data109 = ((($100)) + 44|0);
  $brackets111 = ((($data109)) + 20|0);
  HEAP32[$brackets111>>2] = 6;
  STACKTOP = sp;return;
 }
 $data = ((($2)) + 44|0);
 $y = $data;
 $3 = $y;
 $number = ((($3)) + 4|0);
 HEAP32[$number>>2] = 0;
 $4 = $y;
 $brackets = ((($4)) + 8|0);
 HEAP32[$brackets>>2] = 0;
 $5 = $y;
 $type1 = ((($5)) + 12|0);
 $6 = HEAP32[$type1>>2]|0;
 L8: do {
  switch ($6|0) {
  case 137:  {
   $7 = $seq$addr;
   $8 = HEAP32[$7>>2]|0;
   $inc = (($8) + 1)|0;
   HEAP32[$7>>2] = $inc;
   $9 = $y;
   $number2 = ((($9)) + 4|0);
   HEAP32[$number2>>2] = $inc;
   $10 = $y;
   $brackets3 = ((($10)) + 8|0);
   HEAP32[$brackets3>>2] = 1;
   break;
  }
  case 124: case 123: case 122: case 121:  {
   $11 = $y;
   $12 = HEAP32[$11>>2]|0;
   $cmp5 = ($12|0)>(1);
   if ($cmp5) {
    $13 = $seq$addr;
    $14 = HEAP32[$13>>2]|0;
    $inc7 = (($14) + 1)|0;
    HEAP32[$13>>2] = $inc7;
    $15 = $y;
    $number8 = ((($15)) + 4|0);
    HEAP32[$number8>>2] = $inc7;
    $16 = $y;
    $brackets9 = ((($16)) + 8|0);
    HEAP32[$brackets9>>2] = 5;
   }
   break;
  }
  case 70: case 126: case 125:  {
   $17 = $x$addr;
   $call = (_prop_require_brac($17,0)|0);
   $tobool = ($call|0)!=(0|0);
   if ($tobool) {
    $18 = $seq$addr;
    $19 = HEAP32[$18>>2]|0;
    $inc12 = (($19) + 1)|0;
    HEAP32[$18>>2] = $inc12;
    $20 = $y;
    $number13 = ((($20)) + 4|0);
    HEAP32[$number13>>2] = $inc12;
    $21 = $y;
    $brackets14 = ((($21)) + 8|0);
    HEAP32[$brackets14>>2] = 5;
   }
   break;
  }
  case 16: case 67: case 52: case 120: case 119:  {
   $22 = $y;
   $23 = HEAP32[$22>>2]|0;
   $cmp18 = ($23|0)>(1);
   if (!($cmp18)) {
    $24 = $x$addr;
    $call19 = (_prop_require_brac($24,0)|0);
    $tobool20 = ($call19|0)!=(0|0);
    if (!($tobool20)) {
     break L8;
    }
   }
   $25 = $seq$addr;
   $26 = HEAP32[$25>>2]|0;
   $inc22 = (($26) + 1)|0;
   HEAP32[$25>>2] = $inc22;
   $27 = $y;
   $number23 = ((($27)) + 4|0);
   HEAP32[$number23>>2] = $inc22;
   $28 = $y;
   $brackets24 = ((($28)) + 8|0);
   HEAP32[$brackets24>>2] = 5;
   break;
  }
  case 130:  {
   $29 = $x$addr;
   $call27 = (_prop_require_brac($29,0)|0);
   $tobool28 = ($call27|0)!=(0|0);
   if ($tobool28) {
    $30 = $seq$addr;
    $31 = HEAP32[$30>>2]|0;
    $inc30 = (($31) + 1)|0;
    HEAP32[$30>>2] = $inc30;
    $32 = $y;
    $number31 = ((($32)) + 4|0);
    HEAP32[$number31>>2] = $inc30;
    $33 = $y;
    $brackets32 = ((($33)) + 8|0);
    HEAP32[$brackets32>>2] = 5;
   }
   break;
  }
  case 101: case 100: case 99: case 98: case 97: case 96:  {
   $34 = $y;
   $35 = HEAP32[$34>>2]|0;
   $cmp36 = ($35|0)>(1);
   if ($cmp36) {
    $36 = $seq$addr;
    $37 = HEAP32[$36>>2]|0;
    $inc38 = (($37) + 1)|0;
    HEAP32[$36>>2] = $inc38;
    $38 = $y;
    $number39 = ((($38)) + 4|0);
    HEAP32[$number39>>2] = $inc38;
    $39 = $y;
    $brackets40 = ((($39)) + 8|0);
    HEAP32[$brackets40>>2] = 6;
   }
   break;
  }
  case 59: case 57:  {
   $40 = $seq$addr;
   $41 = HEAP32[$40>>2]|0;
   $inc43 = (($41) + 1)|0;
   HEAP32[$40>>2] = $inc43;
   $42 = $y;
   $number44 = ((($42)) + 4|0);
   HEAP32[$number44>>2] = $inc43;
   $43 = $y;
   $brackets45 = ((($43)) + 8|0);
   HEAP32[$brackets45>>2] = 7;
   break;
  }
  case 13: case 102:  {
   $44 = $seq$addr;
   $45 = HEAP32[$44>>2]|0;
   $inc47 = (($45) + 1)|0;
   HEAP32[$44>>2] = $inc47;
   $46 = $y;
   $number48 = ((($46)) + 4|0);
   HEAP32[$number48>>2] = $inc47;
   $47 = $y;
   $brackets49 = ((($47)) + 8|0);
   HEAP32[$brackets49>>2] = 2;
   break;
  }
  case 92:  {
   $48 = $y;
   $children = ((($48)) + 16|0);
   $49 = HEAP32[$children>>2]|0;
   $50 = HEAP32[$49>>2]|0;
   $data51 = ((($50)) + 44|0);
   $51 = HEAP32[$data51>>2]|0;
   $cmp54 = ($51|0)>(1);
   if ($cmp54) {
    $52 = $seq$addr;
    $53 = HEAP32[$52>>2]|0;
    $inc56 = (($53) + 1)|0;
    HEAP32[$52>>2] = $inc56;
    $54 = $y;
    $number57 = ((($54)) + 4|0);
    HEAP32[$number57>>2] = $inc56;
    $55 = $y;
    $brackets58 = ((($55)) + 8|0);
    HEAP32[$brackets58>>2] = 1;
   }
   break;
  }
  case 91:  {
   $56 = $seq$addr;
   $57 = HEAP32[$56>>2]|0;
   $inc61 = (($57) + 1)|0;
   HEAP32[$56>>2] = $inc61;
   $58 = $y;
   $number62 = ((($58)) + 4|0);
   HEAP32[$number62>>2] = $inc61;
   $59 = $y;
   $brackets63 = ((($59)) + 8|0);
   HEAP32[$brackets63>>2] = 4;
   break;
  }
  case 0:  {
   $60 = $seq$addr;
   $61 = HEAP32[$60>>2]|0;
   $inc65 = (($61) + 1)|0;
   HEAP32[$60>>2] = $inc65;
   $62 = $y;
   $number66 = ((($62)) + 4|0);
   HEAP32[$number66>>2] = $inc65;
   $63 = $y;
   $brackets67 = ((($63)) + 8|0);
   HEAP32[$brackets67>>2] = 4;
   break;
  }
  case 135:  {
   $64 = $y;
   $65 = HEAP32[$64>>2]|0;
   $cmp70 = ($65|0)>(1);
   if ($cmp70) {
    $66 = $seq$addr;
    $67 = HEAP32[$66>>2]|0;
    $inc72 = (($67) + 1)|0;
    HEAP32[$66>>2] = $inc72;
    $68 = $y;
    $number73 = ((($68)) + 4|0);
    HEAP32[$number73>>2] = $inc72;
    $69 = $y;
    $brackets74 = ((($69)) + 8|0);
    HEAP32[$brackets74>>2] = 3;
   }
   break;
  }
  case 136:  {
   $70 = $x$addr;
   $call77 = (_prop_require_brac($70,0)|0);
   $tobool78 = ($call77|0)!=(0|0);
   if ($tobool78) {
    $71 = $seq$addr;
    $72 = HEAP32[$71>>2]|0;
    $inc80 = (($72) + 1)|0;
    HEAP32[$71>>2] = $inc80;
    $73 = $y;
    $number81 = ((($73)) + 4|0);
    HEAP32[$number81>>2] = $inc80;
    $74 = $y;
    $brackets82 = ((($74)) + 8|0);
    HEAP32[$brackets82>>2] = 3;
   }
   break;
  }
  case 14:  {
   $75 = $seq$addr;
   $76 = HEAP32[$75>>2]|0;
   $inc85 = (($76) + 1)|0;
   HEAP32[$75>>2] = $inc85;
   $77 = $y;
   $number86 = ((($77)) + 4|0);
   HEAP32[$number86>>2] = $inc85;
   $78 = $y;
   $brackets87 = ((($78)) + 8|0);
   HEAP32[$brackets87>>2] = 1;
   break;
  }
  case 65: case 53: case 74:  {
   $79 = $x$addr;
   $call89 = (_prop_require_brac($79,0)|0);
   $tobool90 = ($call89|0)!=(0|0);
   if ($tobool90) {
    $80 = $seq$addr;
    $81 = HEAP32[$80>>2]|0;
    $inc92 = (($81) + 1)|0;
    HEAP32[$80>>2] = $inc92;
    $82 = $y;
    $number93 = ((($82)) + 4|0);
    HEAP32[$number93>>2] = $inc92;
    $83 = $y;
    $brackets94 = ((($83)) + 8|0);
    HEAP32[$brackets94>>2] = 1;
   }
   break;
  }
  default: {
   $84 = $y;
   $number96 = ((($84)) + 4|0);
   HEAP32[$number96>>2] = 0;
   $85 = $y;
   $brackets97 = ((($85)) + 8|0);
   HEAP32[$brackets97>>2] = 0;
  }
  }
 } while(0);
 $86 = $y;
 $87 = HEAP32[$86>>2]|0;
 $n = $87;
 $i = 0;
 while(1) {
  $88 = $i;
  $89 = $n;
  $cmp99 = ($88|0)<($89|0);
  if (!($cmp99)) {
   break;
  }
  $90 = $y;
  $children100 = ((($90)) + 16|0);
  $91 = HEAP32[$children100>>2]|0;
  $92 = $i;
  $arrayidx101 = (($91) + ($92<<2)|0);
  $93 = HEAP32[$arrayidx101>>2]|0;
  $94 = $seq$addr;
  _add_bracketing_internal($93,$94);
  $95 = $i;
  $inc102 = (($95) + 1)|0;
  $i = $inc102;
 }
 STACKTOP = sp;return;
}
function _do_output($top,$driver) {
 $top = $top|0;
 $driver = $driver|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $driver$addr = 0, $epilogue = 0, $prologue = 0, $top$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $top$addr = $top;
 $driver$addr = $driver;
 $0 = $driver$addr;
 HEAP32[29738] = $0;
 $1 = HEAP32[29738]|0;
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_v[$2 & 63]();
 $3 = HEAP32[29738]|0;
 $prologue = ((($3)) + 4|0);
 $4 = HEAP32[$prologue>>2]|0;
 FUNCTION_TABLE_v[$4 & 63]();
 $5 = $top$addr;
 _output_internal($5,5);
 $6 = HEAP32[29738]|0;
 $epilogue = ((($6)) + 8|0);
 $7 = HEAP32[$epilogue>>2]|0;
 FUNCTION_TABLE_v[$7 & 63]();
 STACKTOP = sp;return;
}
function _output_internal($x,$what) {
 $x = $x|0;
 $what = $what|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $arrayidx101 = 0, $arrayidx11 = 0, $arrayidx136 = 0, $arrayidx29 = 0, $arrayidx36 = 0, $arrayidx80 = 0, $brackets = 0, $brackets155 = 0, $brackets170 = 0, $brackets205 = 0, $call = 0, $children = 0, $children10 = 0, $children100 = 0, $children135 = 0, $children22 = 0, $children28 = 0;
 var $children35 = 0, $children42 = 0, $children72 = 0, $children79 = 0, $children88 = 0, $close_bracket = 0, $close_bracket202 = 0, $cmp = 0, $cmp1 = 0, $cmp107 = 0, $cmp110 = 0, $cmp113 = 0, $cmp116 = 0, $cmp119 = 0, $cmp122 = 0, $cmp125 = 0, $cmp128 = 0, $cmp13 = 0, $cmp133 = 0, $cmp149 = 0;
 var $cmp151 = 0, $cmp153 = 0, $cmp160 = 0, $cmp162 = 0, $cmp164 = 0, $cmp166 = 0, $cmp17 = 0, $cmp196 = 0, $cmp198 = 0, $cmp2 = 0, $cmp20 = 0, $cmp200 = 0, $cmp224 = 0, $cmp246 = 0, $cmp250 = 0, $cmp256 = 0, $cmp262 = 0, $cmp268 = 0, $cmp274 = 0, $cmp34 = 0;
 var $cmp4 = 0, $cmp40 = 0, $cmp46 = 0, $cmp50 = 0, $cmp53 = 0, $cmp56 = 0, $cmp60 = 0, $cmp64 = 0, $cmp67 = 0, $cmp7 = 0, $cmp70 = 0, $cmp77 = 0, $cmp8 = 0, $cmp84 = 0, $cmp90 = 0, $cmp92 = 0, $cmp98 = 0, $conv = 0, $data = 0, $data169 = 0;
 var $data171 = 0, $data203 = 0, $data206 = 0, $data249 = 0, $data253 = 0, $data259 = 0, $data265 = 0, $data271 = 0, $data74 = 0, $data81 = 0, $eng = 0, $eols = 0, $eols193 = 0, $eols243 = 0, $eols284 = 0, $eols294 = 0, $i = 0, $i33 = 0, $i86 = 0, $inc = 0;
 var $inc103 = 0, $inc138 = 0, $loj = 0, $lojban_text = 0, $lojban_text231 = 0, $lojbuf = 0, $n = 0, $n31 = 0, $n87 = 0, $number = 0, $number156 = 0, $number173 = 0, $number208 = 0, $open_bracket = 0, $open_bracket168 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0;
 var $or$cond5 = 0, $or$cond6 = 0, $or$cond7 = 0, $or$cond8 = 0, $set_eols = 0, $set_eols192 = 0, $set_eols242 = 0, $set_eols283 = 0, $set_eols293 = 0, $tobool = 0, $tobool188 = 0, $tobool215 = 0, $tobool237 = 0, $tobool278 = 0, $tobool288 = 0, $translation = 0, $translation183 = 0, $translation239 = 0, $translation25 = 0, $translation280 = 0;
 var $translation94 = 0, $type = 0, $type106 = 0, $type109 = 0, $type112 = 0, $type115 = 0, $type118 = 0, $type12 = 0, $type121 = 0, $type124 = 0, $type127 = 0, $type159 = 0, $type16 = 0, $type223 = 0, $type245 = 0, $type39 = 0, $type45 = 0, $type49 = 0, $type52 = 0, $type55 = 0;
 var $type59 = 0, $type6 = 0, $type63 = 0, $type69 = 0, $type76 = 0, $type83 = 0, $what$addr = 0, $write_tag_text = 0, $write_tag_text290 = 0, $x$addr = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(3120|0);
 $loj = sp + 2088|0;
 $eng = sp + 1064|0;
 $lojbuf = sp + 40|0;
 $x$addr = $x;
 $what$addr = $what;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 $2 = $x$addr;
 if (!($cmp)) {
  $type159 = ((($2)) + 40|0);
  $144 = HEAP32[$type159>>2]|0;
  $cmp160 = ($144|0)==(6);
  if ($cmp160) {
   $145 = $what$addr;
   $cmp162 = ($145|0)==(5);
   $146 = $what$addr;
   $cmp164 = ($146|0)==(1);
   $or$cond5 = $cmp162 | $cmp164;
   $147 = $what$addr;
   $cmp166 = ($147|0)==(4);
   $or$cond6 = $or$cond5 | $cmp166;
   if ($or$cond6) {
    $148 = HEAP32[29738]|0;
    $open_bracket168 = ((($148)) + 12|0);
    $149 = HEAP32[$open_bracket168>>2]|0;
    $150 = $x$addr;
    $data169 = ((($150)) + 44|0);
    $brackets170 = ((($data169)) + 20|0);
    $151 = HEAP32[$brackets170>>2]|0;
    $152 = $x$addr;
    $data171 = ((($152)) + 44|0);
    $number173 = ((($data171)) + 16|0);
    $153 = HEAP32[$number173>>2]|0;
    FUNCTION_TABLE_vii[$149 & 63]($151,$153);
   }
   $154 = $x$addr;
   _get_lojban_word_and_translation($154,$loj,$eng);
   $155 = $what$addr;
   switch ($155|0) {
   case 5: case 4: case 1:  {
    $156 = HEAP32[29738]|0;
    $lojban_text = ((($156)) + 24|0);
    $157 = HEAP32[$lojban_text>>2]|0;
    FUNCTION_TABLE_vi[$157 & 127]($loj);
    break;
   }
   default: {
   }
   }
   $158 = $what$addr;
   switch ($158|0) {
   case 5: case 2:  {
    $159 = HEAP8[$eng>>0]|0;
    $tobool = ($159<<24>>24)!=(0);
    if ($tobool) {
     $160 = HEAP32[29738]|0;
     $translation183 = ((($160)) + 28|0);
     $161 = HEAP32[$translation183>>2]|0;
     FUNCTION_TABLE_vi[$161 & 127]($eng);
    }
    $162 = HEAP32[29738]|0;
    $set_eols = ((($162)) + 20|0);
    $163 = HEAP32[$set_eols>>2]|0;
    $164 = $x$addr;
    $eols = ((($164)) + 28|0);
    $165 = HEAP32[$eols>>2]|0;
    FUNCTION_TABLE_vi[$163 & 127]($165);
    break;
   }
   case 3:  {
    $166 = HEAP8[$eng>>0]|0;
    $tobool188 = ($166<<24>>24)!=(0);
    if ($tobool188) {
     $167 = HEAP32[29738]|0;
     $write_tag_text = ((($167)) + 44|0);
     $168 = HEAP32[$write_tag_text>>2]|0;
     FUNCTION_TABLE_viiii[$168 & 63](215176,215176,$eng,0);
    }
    $169 = HEAP32[29738]|0;
    $set_eols192 = ((($169)) + 20|0);
    $170 = HEAP32[$set_eols192>>2]|0;
    $171 = $x$addr;
    $eols193 = ((($171)) + 28|0);
    $172 = HEAP32[$eols193>>2]|0;
    FUNCTION_TABLE_vi[$170 & 127]($172);
    break;
   }
   default: {
   }
   }
   $173 = $what$addr;
   $cmp196 = ($173|0)==(5);
   $174 = $what$addr;
   $cmp198 = ($174|0)==(1);
   $or$cond7 = $cmp196 | $cmp198;
   $175 = $what$addr;
   $cmp200 = ($175|0)==(4);
   $or$cond8 = $or$cond7 | $cmp200;
   if (!($or$cond8)) {
    STACKTOP = sp;return;
   }
   $176 = HEAP32[29738]|0;
   $close_bracket202 = ((($176)) + 16|0);
   $177 = HEAP32[$close_bracket202>>2]|0;
   $178 = $x$addr;
   $data203 = ((($178)) + 44|0);
   $brackets205 = ((($data203)) + 20|0);
   $179 = HEAP32[$brackets205>>2]|0;
   $180 = $x$addr;
   $data206 = ((($180)) + 44|0);
   $number208 = ((($data206)) + 16|0);
   $181 = HEAP32[$number208>>2]|0;
   FUNCTION_TABLE_vii[$177 & 63]($179,$181);
   STACKTOP = sp;return;
  }
  HEAP8[$lojbuf>>0] = 0;
  $182 = $x$addr;
  _get_lojban_word_and_translation($182,$loj,$eng);
  $183 = HEAP8[$loj>>0]|0;
  $conv = $183 << 24 >> 24;
  $call = (_strchr(92234,$conv)|0);
  $tobool215 = ($call|0)!=(0|0);
  if ($tobool215) {
   (_strcat($lojbuf,116957)|0);
  }
  (_strcat($lojbuf,$loj)|0);
  $184 = $x$addr;
  $type223 = ((($184)) + 40|0);
  $185 = HEAP32[$type223>>2]|0;
  $cmp224 = ($185|0)==(9);
  if ($cmp224) {
   (_strcat($lojbuf,116957)|0);
  }
  $186 = $what$addr;
  switch ($186|0) {
  case 5: case 4: case 1:  {
   $187 = HEAP32[29738]|0;
   $lojban_text231 = ((($187)) + 24|0);
   $188 = HEAP32[$lojban_text231>>2]|0;
   FUNCTION_TABLE_vi[$188 & 127]($lojbuf);
   break;
  }
  default: {
  }
  }
  $189 = $what$addr;
  switch ($189|0) {
  case 5: case 2:  {
   $190 = HEAP8[$eng>>0]|0;
   $tobool237 = ($190<<24>>24)!=(0);
   if ($tobool237) {
    $191 = HEAP32[29738]|0;
    $translation239 = ((($191)) + 28|0);
    $192 = HEAP32[$translation239>>2]|0;
    FUNCTION_TABLE_vi[$192 & 127]($eng);
   }
   $193 = HEAP32[29738]|0;
   $set_eols242 = ((($193)) + 20|0);
   $194 = HEAP32[$set_eols242>>2]|0;
   $195 = $x$addr;
   $eols243 = ((($195)) + 28|0);
   $196 = HEAP32[$eols243>>2]|0;
   FUNCTION_TABLE_vi[$194 & 127]($196);
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $197 = $x$addr;
   $type245 = ((($197)) + 40|0);
   $198 = HEAP32[$type245>>2]|0;
   $cmp246 = ($198|0)==(2);
   if (!($cmp246)) {
    STACKTOP = sp;return;
   }
   $199 = $x$addr;
   $data249 = ((($199)) + 44|0);
   $200 = HEAP32[$data249>>2]|0;
   $cmp250 = ($200|0)==(366);
   if (!($cmp250)) {
    $201 = $x$addr;
    $data253 = ((($201)) + 44|0);
    $202 = HEAP32[$data253>>2]|0;
    $cmp256 = ($202|0)==(260);
    if (!($cmp256)) {
     $203 = $x$addr;
     $data259 = ((($203)) + 44|0);
     $204 = HEAP32[$data259>>2]|0;
     $cmp262 = ($204|0)==(376);
     if (!($cmp262)) {
      $205 = $x$addr;
      $data265 = ((($205)) + 44|0);
      $206 = HEAP32[$data265>>2]|0;
      $cmp268 = ($206|0)==(281);
      if (!($cmp268)) {
       $207 = $x$addr;
       $data271 = ((($207)) + 44|0);
       $208 = HEAP32[$data271>>2]|0;
       $cmp274 = ($208|0)==(293);
       if (!($cmp274)) {
        STACKTOP = sp;return;
       }
      }
     }
    }
   }
   $209 = HEAP8[$eng>>0]|0;
   $tobool278 = ($209<<24>>24)!=(0);
   if ($tobool278) {
    $210 = HEAP32[29738]|0;
    $translation280 = ((($210)) + 28|0);
    $211 = HEAP32[$translation280>>2]|0;
    FUNCTION_TABLE_vi[$211 & 127]($eng);
   }
   $212 = HEAP32[29738]|0;
   $set_eols283 = ((($212)) + 20|0);
   $213 = HEAP32[$set_eols283>>2]|0;
   $214 = $x$addr;
   $eols284 = ((($214)) + 28|0);
   $215 = HEAP32[$eols284>>2]|0;
   FUNCTION_TABLE_vi[$213 & 127]($215);
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $216 = HEAP8[$eng>>0]|0;
   $tobool288 = ($216<<24>>24)!=(0);
   if ($tobool288) {
    $217 = HEAP32[29738]|0;
    $write_tag_text290 = ((($217)) + 44|0);
    $218 = HEAP32[$write_tag_text290>>2]|0;
    FUNCTION_TABLE_viiii[$218 & 63](215176,215176,$eng,0);
   }
   $219 = HEAP32[29738]|0;
   $set_eols293 = ((($219)) + 20|0);
   $220 = HEAP32[$set_eols293>>2]|0;
   $221 = $x$addr;
   $eols294 = ((($221)) + 28|0);
   $222 = HEAP32[$eols294>>2]|0;
   FUNCTION_TABLE_vi[$220 & 127]($222);
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 }
 $data = ((($2)) + 44|0);
 $y = $data;
 $3 = $what$addr;
 $cmp1 = ($3|0)==(5);
 $4 = $what$addr;
 $cmp2 = ($4|0)==(1);
 $or$cond = $cmp1 | $cmp2;
 $5 = $what$addr;
 $cmp4 = ($5|0)==(4);
 $or$cond1 = $or$cond | $cmp4;
 if ($or$cond1) {
  $6 = HEAP32[29738]|0;
  $open_bracket = ((($6)) + 12|0);
  $7 = HEAP32[$open_bracket>>2]|0;
  $8 = $y;
  $brackets = ((($8)) + 8|0);
  $9 = HEAP32[$brackets>>2]|0;
  $10 = $y;
  $number = ((($10)) + 4|0);
  $11 = HEAP32[$number>>2]|0;
  FUNCTION_TABLE_vii[$7 & 63]($9,$11);
 }
 $12 = $y;
 $type6 = ((($12)) + 12|0);
 $13 = HEAP32[$type6>>2]|0;
 $cmp7 = ($13|0)==(98);
 if ($cmp7) {
  $14 = $y;
  $15 = HEAP32[$14>>2]|0;
  $cmp8 = ($15|0)==(2);
  if ($cmp8) {
   $16 = $y;
   $children = ((($16)) + 16|0);
   $17 = HEAP32[$children>>2]|0;
   $18 = HEAP32[$17>>2]|0;
   $19 = $what$addr;
   _output_internal($18,$19);
   $20 = $what$addr;
   switch ($20|0) {
   case 5: case 2:  {
    $21 = HEAP32[29738]|0;
    $translation = ((($21)) + 28|0);
    $22 = HEAP32[$translation>>2]|0;
    FUNCTION_TABLE_vi[$22 & 127](90785);
    break;
   }
   default: {
   }
   }
   $23 = $y;
   $children10 = ((($23)) + 16|0);
   $24 = HEAP32[$children10>>2]|0;
   $arrayidx11 = ((($24)) + 4|0);
   $25 = HEAP32[$arrayidx11>>2]|0;
   $26 = $what$addr;
   _output_internal($25,$26);
  } else {
   label = 9;
  }
 } else {
  label = 9;
 }
 L72: do {
  if ((label|0) == 9) {
   $27 = $y;
   $type12 = ((($27)) + 12|0);
   $28 = HEAP32[$type12>>2]|0;
   $cmp13 = ($28|0)==(137);
   if ($cmp13) {
    $29 = $x$addr;
    $30 = $what$addr;
    _output_term($29,$30);
    break;
   }
   $31 = $y;
   $type16 = ((($31)) + 12|0);
   $32 = HEAP32[$type16>>2]|0;
   $cmp17 = ($32|0)==(73);
   $33 = $y;
   if ($cmp17) {
    $34 = HEAP32[$33>>2]|0;
    $cmp20 = ($34|0)==(2);
    $35 = $y;
    if ($cmp20) {
     $children22 = ((($35)) + 16|0);
     $36 = HEAP32[$children22>>2]|0;
     $37 = HEAP32[$36>>2]|0;
     $38 = $what$addr;
     _output_internal($37,$38);
     $39 = $what$addr;
     switch ($39|0) {
     case 5: case 2:  {
      $40 = HEAP32[29738]|0;
      $translation25 = ((($40)) + 28|0);
      $41 = HEAP32[$translation25>>2]|0;
      FUNCTION_TABLE_vi[$41 & 127](90795);
      break;
     }
     default: {
     }
     }
     $42 = $y;
     $children28 = ((($42)) + 16|0);
     $43 = HEAP32[$children28>>2]|0;
     $arrayidx29 = ((($43)) + 4|0);
     $44 = HEAP32[$arrayidx29>>2]|0;
     $45 = $what$addr;
     _output_internal($44,$45);
     break;
    } else {
     $46 = HEAP32[$35>>2]|0;
     $n31 = $46;
     $i33 = 0;
     while(1) {
      $47 = $i33;
      $48 = $n31;
      $cmp34 = ($47|0)<($48|0);
      if (!($cmp34)) {
       break L72;
      }
      $49 = $y;
      $children35 = ((($49)) + 16|0);
      $50 = HEAP32[$children35>>2]|0;
      $51 = $i33;
      $arrayidx36 = (($50) + ($51<<2)|0);
      $52 = HEAP32[$arrayidx36>>2]|0;
      $53 = $what$addr;
      _output_internal($52,$53);
      $54 = $i33;
      $inc = (($54) + 1)|0;
      $i33 = $inc;
     }
    }
   }
   $type39 = ((($33)) + 12|0);
   $55 = HEAP32[$type39>>2]|0;
   $cmp40 = ($55|0)==(77);
   $56 = $y;
   if ($cmp40) {
    $children42 = ((($56)) + 16|0);
    $57 = HEAP32[$children42>>2]|0;
    $58 = HEAP32[$57>>2]|0;
    $59 = $what$addr;
    _output_internal($58,$59);
    break;
   }
   $type45 = ((($56)) + 12|0);
   $60 = HEAP32[$type45>>2]|0;
   $cmp46 = ($60|0)==(158);
   if ($cmp46) {
    $61 = $x$addr;
    $62 = $what$addr;
    _output_simple_time_offset($61,$62);
    break;
   }
   $63 = $y;
   $type49 = ((($63)) + 12|0);
   $64 = HEAP32[$type49>>2]|0;
   $cmp50 = ($64|0)==(108);
   if (!($cmp50)) {
    $65 = $y;
    $type52 = ((($65)) + 12|0);
    $66 = HEAP32[$type52>>2]|0;
    $cmp53 = ($66|0)==(30);
    if (!($cmp53)) {
     $67 = $y;
     $type55 = ((($67)) + 12|0);
     $68 = HEAP32[$type55>>2]|0;
     $cmp56 = ($68|0)==(75);
     if (!($cmp56)) {
      $71 = $y;
      $type59 = ((($71)) + 12|0);
      $72 = HEAP32[$type59>>2]|0;
      $cmp60 = ($72|0)==(128);
      if ($cmp60) {
       $73 = $x$addr;
       $74 = $what$addr;
       _output_sumti_tail($73,$74);
       break;
      }
      $75 = $y;
      $type63 = ((($75)) + 12|0);
      $76 = HEAP32[$type63>>2]|0;
      $cmp64 = ($76|0)==(125);
      if ($cmp64) {
       $77 = $y;
       $78 = HEAP32[$77>>2]|0;
       $cmp67 = ($78|0)==(2);
       if (!($cmp67)) {
        label = 31;
       }
      } else {
       label = 31;
      }
      do {
       if ((label|0) == 31) {
        $79 = $y;
        $type69 = ((($79)) + 12|0);
        $80 = HEAP32[$type69>>2]|0;
        $cmp70 = ($80|0)==(129);
        if ($cmp70) {
         $81 = $y;
         $children72 = ((($81)) + 16|0);
         $82 = HEAP32[$children72>>2]|0;
         $83 = HEAP32[$82>>2]|0;
         $data74 = ((($83)) + 44|0);
         $type76 = ((($data74)) + 12|0);
         $84 = HEAP32[$type76>>2]|0;
         $cmp77 = ($84|0)==(89);
         if ($cmp77) {
          $85 = $y;
          $children79 = ((($85)) + 16|0);
          $86 = HEAP32[$children79>>2]|0;
          $arrayidx80 = ((($86)) + 4|0);
          $87 = HEAP32[$arrayidx80>>2]|0;
          $data81 = ((($87)) + 44|0);
          $type83 = ((($data81)) + 12|0);
          $88 = HEAP32[$type83>>2]|0;
          $cmp84 = ($88|0)==(119);
          if ($cmp84) {
           break;
          }
         }
        }
        $107 = $y;
        $type106 = ((($107)) + 12|0);
        $108 = HEAP32[$type106>>2]|0;
        $cmp107 = ($108|0)==(37);
        do {
         if (!($cmp107)) {
          $109 = $y;
          $type109 = ((($109)) + 12|0);
          $110 = HEAP32[$type109>>2]|0;
          $cmp110 = ($110|0)==(38);
          if (!($cmp110)) {
           $111 = $y;
           $type112 = ((($111)) + 12|0);
           $112 = HEAP32[$type112>>2]|0;
           $cmp113 = ($112|0)==(39);
           if (!($cmp113)) {
            $113 = $y;
            $type115 = ((($113)) + 12|0);
            $114 = HEAP32[$type115>>2]|0;
            $cmp116 = ($114|0)==(12);
            if ($cmp116) {
             break;
            }
            $115 = $y;
            $type118 = ((($115)) + 12|0);
            $116 = HEAP32[$type118>>2]|0;
            $cmp119 = ($116|0)==(20);
            if ($cmp119) {
             break;
            }
            $117 = $y;
            $type121 = ((($117)) + 12|0);
            $118 = HEAP32[$type121>>2]|0;
            $cmp122 = ($118|0)==(18);
            if ($cmp122) {
             break;
            }
            $119 = $y;
            $type124 = ((($119)) + 12|0);
            $120 = HEAP32[$type124>>2]|0;
            $cmp125 = ($120|0)==(23);
            if ($cmp125) {
             break;
            }
            $121 = $y;
            $type127 = ((($121)) + 12|0);
            $122 = HEAP32[$type127>>2]|0;
            $cmp128 = ($122|0)==(24);
            if ($cmp128) {
             break;
            }
            $125 = $y;
            $126 = HEAP32[$125>>2]|0;
            $n = $126;
            $i = 0;
            while(1) {
             $127 = $i;
             $128 = $n;
             $cmp133 = ($127|0)<($128|0);
             if (!($cmp133)) {
              break L72;
             }
             $129 = $y;
             $children135 = ((($129)) + 16|0);
             $130 = HEAP32[$children135>>2]|0;
             $131 = $i;
             $arrayidx136 = (($130) + ($131<<2)|0);
             $132 = HEAP32[$arrayidx136>>2]|0;
             $133 = $what$addr;
             _output_internal($132,$133);
             $134 = $i;
             $inc138 = (($134) + 1)|0;
             $i = $inc138;
            }
           }
          }
         }
        } while(0);
        $123 = $x$addr;
        $124 = $what$addr;
        _output_fore_or_afterthought($123,$124);
        break L72;
       }
      } while(0);
      $89 = $y;
      $children88 = ((($89)) + 16|0);
      $90 = HEAP32[$children88>>2]|0;
      $91 = HEAP32[$90>>2]|0;
      $92 = $what$addr;
      _output_internal($91,$92);
      $93 = $what$addr;
      $cmp90 = ($93|0)==(2);
      $94 = $what$addr;
      $cmp92 = ($94|0)==(5);
      $or$cond2 = $cmp90 | $cmp92;
      if ($or$cond2) {
       $95 = HEAP32[29738]|0;
       $translation94 = ((($95)) + 28|0);
       $96 = HEAP32[$translation94>>2]|0;
       FUNCTION_TABLE_vi[$96 & 127](90806);
      }
      $97 = $y;
      $98 = HEAP32[$97>>2]|0;
      $n87 = $98;
      $i86 = 1;
      while(1) {
       $99 = $i86;
       $100 = $n87;
       $cmp98 = ($99|0)<($100|0);
       if (!($cmp98)) {
        break L72;
       }
       $101 = $y;
       $children100 = ((($101)) + 16|0);
       $102 = HEAP32[$children100>>2]|0;
       $103 = $i86;
       $arrayidx101 = (($102) + ($103<<2)|0);
       $104 = HEAP32[$arrayidx101>>2]|0;
       $105 = $what$addr;
       _output_internal($104,$105);
       $106 = $i86;
       $inc103 = (($106) + 1)|0;
       $i86 = $inc103;
      }
     }
    }
   }
   $69 = $x$addr;
   $70 = $what$addr;
   _output_clustered($69,$70);
  }
 } while(0);
 $135 = $what$addr;
 $cmp149 = ($135|0)==(5);
 $136 = $what$addr;
 $cmp151 = ($136|0)==(1);
 $or$cond3 = $cmp149 | $cmp151;
 $137 = $what$addr;
 $cmp153 = ($137|0)==(4);
 $or$cond4 = $or$cond3 | $cmp153;
 if (!($or$cond4)) {
  STACKTOP = sp;return;
 }
 $138 = HEAP32[29738]|0;
 $close_bracket = ((($138)) + 16|0);
 $139 = HEAP32[$close_bracket>>2]|0;
 $140 = $y;
 $brackets155 = ((($140)) + 8|0);
 $141 = HEAP32[$brackets155>>2]|0;
 $142 = $y;
 $number156 = ((($142)) + 4|0);
 $143 = HEAP32[$number156>>2]|0;
 FUNCTION_TABLE_vii[$139 & 63]($141,$143);
 STACKTOP = sp;return;
}
function _output_term($x,$what) {
 $x = $x|0;
 $what = $what|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $abstraction = 0, $arrayidx = 0, $arrayidx122 = 0, $arrayidx169 = 0, $arrayidx93 = 0, $brivla = 0, $brivla14 = 0, $brivla31 = 0, $brivla46 = 0, $call = 0, $call101 = 0, $call158 = 0, $call158$ = 0, $call37 = 0, $call37$ = 0, $call58 = 0, $call58$ = 0, $call73 = 0, $call9 = 0, $call9$ = 0;
 var $children = 0, $cmavo = 0, $cmavo116 = 0, $cmavo89 = 0, $cmp = 0, $cmp1 = 0, $cmp168 = 0, $cmp3 = 0, $code = 0, $code115 = 0, $code121 = 0, $code55 = 0, $code88 = 0, $code92 = 0, $data = 0, $data119 = 0, $data133 = 0, $data147 = 0, $data155 = 0, $data16 = 0;
 var $data25 = 0, $data33 = 0, $data48 = 0, $data53 = 0, $data7 = 0, $data75 = 0, $data90 = 0, $data96 = 0, $end_tags = 0, $goha = 0, $i = 0, $inc = 0, $inner_tu2 = 0, $jaitag = 0, $jaitag24 = 0, $lojbuf = 0, $lojbuf117 = 0, $lojbuf136 = 0, $lojbuf145 = 0, $me = 0;
 var $mex_operator = 0, $moi = 0, $n = 0, $norl_code = 0, $nuha = 0, $number = 0, $number132 = 0, $number135 = 0, $number144 = 0, $number149 = 0, $number77 = 0, $number98 = 0, $numbermoi = 0, $numbermoi95 = 0, $or$cond = 0, $or$cond1 = 0, $pos = 0, $pos100 = 0, $pos109 = 0, $pos12 = 0;
 var $pos126 = 0, $pos138 = 0, $pos151 = 0, $pos157 = 0, $pos36 = 0, $pos42 = 0, $pos57 = 0, $pos63 = 0, $pos72 = 0, $pos80 = 0, $sep_with_plus = 0, $start_tag = 0, $start_tag124 = 0, $start_tag140 = 0, $start_tag162 = 0, $start_tag21 = 0, $start_tag44 = 0, $start_tag65 = 0, $start_tag71 = 0, $start_tag99 = 0;
 var $start_tags = 0, $tag = 0, $tag5 = 0, $tobool = 0, $tobool10 = 0, $tobool102 = 0, $tobool159 = 0, $tobool165 = 0, $tobool38 = 0, $tobool59 = 0, $tp = 0, $trans = 0, $trans69 = 0, $trans86 = 0, $transbuf = 0, $transbuf70 = 0, $transbuf87 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0;
 var $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer33 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $what$addr = 0, $write_partial_tag_text = 0, $write_partial_tag_text28 = 0, $write_tag_text = 0, $write_tag_text111 = 0, $write_tag_text128 = 0, $write_tag_text141 = 0;
 var $write_tag_text163 = 0, $write_tag_text45 = 0, $write_tag_text66 = 0, $write_tag_text82 = 0, $x$addr = 0, $xtt = 0, $y = 0, $zei = 0, $zei153 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3520|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(3520|0);
 $vararg_buffer33 = sp + 88|0;
 $vararg_buffer29 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer20 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $tp = sp + 3504|0;
 $transbuf = sp + 2480|0;
 $transbuf70 = sp + 1456|0;
 $lojbuf = sp + 1328|0;
 $transbuf87 = sp + 304|0;
 $lojbuf117 = sp + 272|0;
 $lojbuf136 = sp + 208|0;
 $lojbuf145 = sp + 176|0;
 $x$addr = $x;
 $what$addr = $what;
 $0 = $x$addr;
 $data = ((($0)) + 44|0);
 $y = $data;
 $1 = $what$addr;
 $cmp = ($1|0)==(1);
 $2 = $what$addr;
 $cmp1 = ($2|0)==(4);
 $or$cond = $cmp | $cmp1;
 $3 = $what$addr;
 $cmp3 = ($3|0)==(5);
 $or$cond1 = $or$cond | $cmp3;
 if ($or$cond1) {
  $4 = $x$addr;
  $call = (_prop_term_tags($4,0)|0);
  $xtt = $call;
  $5 = $xtt;
  $tobool = ($5|0)!=(0|0);
  if ($tobool) {
   $6 = HEAP32[29738]|0;
   $start_tags = ((($6)) + 32|0);
   $7 = HEAP32[$start_tags>>2]|0;
   FUNCTION_TABLE_v[$7 & 63]();
   while(1) {
    $8 = $xtt;
    $tag5 = ((($8)) + 4|0);
    $tag = $tag5;
    $9 = $tag;
    $10 = HEAP32[$9>>2]|0;
    switch ($10|0) {
    case 0:  {
     $11 = $tag;
     $brivla = ((($11)) + 8|0);
     $12 = HEAP32[$brivla>>2]|0;
     $data7 = ((($12)) + 44|0);
     $13 = HEAP32[$data7>>2]|0;
     $14 = $tag;
     $pos = ((($14)) + 4|0);
     $15 = HEAP32[$pos>>2]|0;
     $call9 = (_adv_translate($13,$15,3)|0);
     $trans = $call9;
     $16 = $trans;
     $tobool10 = ($16|0)!=(0|0);
     $call9$ = $tobool10 ? $call9 : 92258;
     $trans = $call9$;
     $17 = $tag;
     $pos12 = ((($17)) + 4|0);
     $18 = HEAP32[$pos12>>2]|0;
     HEAP32[$vararg_buffer>>2] = $18;
     (_sprintf($tp,91110,$vararg_buffer)|0);
     $19 = HEAP32[29738]|0;
     $start_tag = ((($19)) + 40|0);
     $20 = HEAP32[$start_tag>>2]|0;
     FUNCTION_TABLE_v[$20 & 63]();
     $21 = HEAP32[29738]|0;
     $write_tag_text = ((($21)) + 44|0);
     $22 = HEAP32[$write_tag_text>>2]|0;
     $23 = $tag;
     $brivla14 = ((($23)) + 8|0);
     $24 = HEAP32[$brivla14>>2]|0;
     $data16 = ((($24)) + 44|0);
     $25 = HEAP32[$data16>>2]|0;
     $26 = $trans;
     FUNCTION_TABLE_viiii[$22 & 63]($25,$tp,$26,1);
     break;
    }
    case 1:  {
     $27 = HEAP32[29738]|0;
     $start_tag21 = ((($27)) + 40|0);
     $28 = HEAP32[$start_tag21>>2]|0;
     FUNCTION_TABLE_v[$28 & 63]();
     $29 = HEAP32[29738]|0;
     $write_partial_tag_text = ((($29)) + 48|0);
     $30 = HEAP32[$write_partial_tag_text>>2]|0;
     FUNCTION_TABLE_vi[$30 & 127](91232);
     $31 = $tag;
     $jaitag = ((($31)) + 12|0);
     $32 = HEAP32[$jaitag>>2]|0;
     _output_internal($32,3);
     $33 = $tag;
     $jaitag24 = ((($33)) + 12|0);
     $inner_tu2 = ((($jaitag24)) + 4|0);
     $34 = HEAP32[$inner_tu2>>2]|0;
     $data25 = ((($34)) + 44|0);
     $number = ((($data25)) + 4|0);
     $35 = HEAP32[$number>>2]|0;
     HEAP32[$vararg_buffer2>>2] = $35;
     (_sprintf($transbuf,91246,$vararg_buffer2)|0);
     $36 = HEAP32[29738]|0;
     $write_partial_tag_text28 = ((($36)) + 48|0);
     $37 = HEAP32[$write_partial_tag_text28>>2]|0;
     FUNCTION_TABLE_vi[$37 & 127]($transbuf);
     break;
    }
    case 2:  {
     $38 = $tag;
     $brivla31 = ((($38)) + 8|0);
     $39 = HEAP32[$brivla31>>2]|0;
     $data33 = ((($39)) + 44|0);
     $40 = HEAP32[$data33>>2]|0;
     $41 = $tag;
     $pos36 = ((($41)) + 4|0);
     $42 = HEAP32[$pos36>>2]|0;
     $call37 = (_adv_translate($40,$42,3)|0);
     $trans = $call37;
     $43 = $trans;
     $tobool38 = ($43|0)!=(0|0);
     $call37$ = $tobool38 ? $call37 : 92258;
     $trans = $call37$;
     $44 = $tag;
     $pos42 = ((($44)) + 4|0);
     $45 = HEAP32[$pos42>>2]|0;
     HEAP32[$vararg_buffer5>>2] = $45;
     (_sprintf($tp,91110,$vararg_buffer5)|0);
     $46 = HEAP32[29738]|0;
     $start_tag44 = ((($46)) + 40|0);
     $47 = HEAP32[$start_tag44>>2]|0;
     FUNCTION_TABLE_v[$47 & 63]();
     $48 = HEAP32[29738]|0;
     $write_tag_text45 = ((($48)) + 44|0);
     $49 = HEAP32[$write_tag_text45>>2]|0;
     $50 = $tag;
     $brivla46 = ((($50)) + 8|0);
     $51 = HEAP32[$brivla46>>2]|0;
     $data48 = ((($51)) + 44|0);
     $52 = HEAP32[$data48>>2]|0;
     $53 = $trans;
     FUNCTION_TABLE_viiii[$49 & 63]($52,$tp,$53,1);
     break;
    }
    case 3:  {
     $54 = $tag;
     $abstraction = ((($54)) + 24|0);
     $55 = HEAP32[$abstraction>>2]|0;
     $data53 = ((($55)) + 44|0);
     $code55 = ((($data53)) + 4|0);
     $56 = HEAP32[$code55>>2]|0;
     $code = $56;
     $57 = $code;
     $arrayidx = (46450 + (($57*14)|0)|0);
     $58 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
     $cmavo = $58;
     $59 = $cmavo;
     $60 = $tag;
     $pos57 = ((($60)) + 4|0);
     $61 = HEAP32[$pos57>>2]|0;
     $call58 = (_adv_translate($59,$61,3)|0);
     $trans = $call58;
     $62 = $trans;
     $tobool59 = ($62|0)!=(0|0);
     $call58$ = $tobool59 ? $call58 : 92258;
     $trans = $call58$;
     $63 = $tag;
     $pos63 = ((($63)) + 4|0);
     $64 = HEAP32[$pos63>>2]|0;
     HEAP32[$vararg_buffer8>>2] = $64;
     (_sprintf($tp,91110,$vararg_buffer8)|0);
     $65 = HEAP32[29738]|0;
     $start_tag65 = ((($65)) + 40|0);
     $66 = HEAP32[$start_tag65>>2]|0;
     FUNCTION_TABLE_v[$66 & 63]();
     $67 = HEAP32[29738]|0;
     $write_tag_text66 = ((($67)) + 44|0);
     $68 = HEAP32[$write_tag_text66>>2]|0;
     $69 = $cmavo;
     $70 = $trans;
     FUNCTION_TABLE_viiii[$68 & 63]($69,$tp,$70,1);
     break;
    }
    case 4:  {
     $71 = HEAP32[29738]|0;
     $start_tag71 = ((($71)) + 40|0);
     $72 = HEAP32[$start_tag71>>2]|0;
     FUNCTION_TABLE_v[$72 & 63]();
     $73 = $tag;
     $pos72 = ((($73)) + 4|0);
     $74 = HEAP32[$pos72>>2]|0;
     $call73 = (_adv_translate(91251,$74,3)|0);
     $trans69 = $call73;
     $75 = $trans69;
     $76 = $tag;
     $me = ((($76)) + 28|0);
     $77 = HEAP32[$me>>2]|0;
     $data75 = ((($77)) + 44|0);
     $number77 = ((($data75)) + 4|0);
     $78 = HEAP32[$number77>>2]|0;
     HEAP32[$vararg_buffer11>>2] = $78;
     (_sprintf($transbuf70,$75,$vararg_buffer11)|0);
     $79 = $tag;
     $pos80 = ((($79)) + 4|0);
     $80 = HEAP32[$pos80>>2]|0;
     HEAP32[$vararg_buffer14>>2] = $80;
     (_sprintf($tp,91254,$vararg_buffer14)|0);
     $81 = HEAP32[29738]|0;
     $write_tag_text82 = ((($81)) + 44|0);
     $82 = HEAP32[$write_tag_text82>>2]|0;
     FUNCTION_TABLE_viiii[$82 & 63](91251,$tp,$transbuf70,1);
     break;
    }
    case 7:  {
     $83 = $tag;
     $numbermoi = ((($83)) + 40|0);
     $moi = ((($numbermoi)) + 4|0);
     $84 = HEAP32[$moi>>2]|0;
     $data90 = ((($84)) + 44|0);
     $code92 = ((($data90)) + 4|0);
     $85 = HEAP32[$code92>>2]|0;
     $code88 = $85;
     $86 = $code88;
     $arrayidx93 = (46450 + (($86*14)|0)|0);
     $87 = HEAPU8[$arrayidx93>>0]|(HEAPU8[$arrayidx93+1>>0]<<8)|(HEAPU8[$arrayidx93+2>>0]<<16)|(HEAPU8[$arrayidx93+3>>0]<<24);
     $cmavo89 = $87;
     $88 = $tag;
     $numbermoi95 = ((($88)) + 40|0);
     $89 = HEAP32[$numbermoi95>>2]|0;
     $data96 = ((($89)) + 44|0);
     $number98 = ((($data96)) + 4|0);
     $90 = HEAP32[$number98>>2]|0;
     $norl_code = $90;
     $91 = HEAP32[29738]|0;
     $start_tag99 = ((($91)) + 40|0);
     $92 = HEAP32[$start_tag99>>2]|0;
     FUNCTION_TABLE_v[$92 & 63]();
     $93 = $cmavo89;
     $94 = $tag;
     $pos100 = ((($94)) + 4|0);
     $95 = HEAP32[$pos100>>2]|0;
     $call101 = (_adv_translate($93,$95,3)|0);
     $trans86 = $call101;
     $96 = $trans86;
     $tobool102 = ($96|0)!=(0|0);
     if ($tobool102) {
      $97 = $trans86;
      $98 = $norl_code;
      HEAP32[$vararg_buffer17>>2] = $98;
      (_sprintf($transbuf87,$97,$vararg_buffer17)|0);
     } else {
      HEAP8[$transbuf87>>0] = 0;
     }
     $99 = $norl_code;
     $100 = $cmavo89;
     $101 = $tag;
     $pos109 = ((($101)) + 4|0);
     $102 = HEAP32[$pos109>>2]|0;
     HEAP32[$vararg_buffer20>>2] = $99;
     $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
     HEAP32[$vararg_ptr23>>2] = $100;
     $vararg_ptr24 = ((($vararg_buffer20)) + 8|0);
     HEAP32[$vararg_ptr24>>2] = $102;
     (_sprintf($lojbuf,91259,$vararg_buffer20)|0);
     $103 = HEAP32[29738]|0;
     $write_tag_text111 = ((($103)) + 44|0);
     $104 = HEAP32[$write_tag_text111>>2]|0;
     FUNCTION_TABLE_viiii[$104 & 63]($lojbuf,215176,$transbuf87,1);
     break;
    }
    case 5:  {
     $105 = $tag;
     $goha = ((($105)) + 32|0);
     $106 = HEAP32[$goha>>2]|0;
     $data119 = ((($106)) + 44|0);
     $code121 = ((($data119)) + 4|0);
     $107 = HEAP32[$code121>>2]|0;
     $code115 = $107;
     $108 = $code115;
     $arrayidx122 = (46450 + (($108*14)|0)|0);
     $109 = HEAPU8[$arrayidx122>>0]|(HEAPU8[$arrayidx122+1>>0]<<8)|(HEAPU8[$arrayidx122+2>>0]<<16)|(HEAPU8[$arrayidx122+3>>0]<<24);
     $cmavo116 = $109;
     $110 = HEAP32[29738]|0;
     $start_tag124 = ((($110)) + 40|0);
     $111 = HEAP32[$start_tag124>>2]|0;
     FUNCTION_TABLE_v[$111 & 63]();
     $112 = $cmavo116;
     $113 = $tag;
     $pos126 = ((($113)) + 4|0);
     $114 = HEAP32[$pos126>>2]|0;
     HEAP32[$vararg_buffer25>>2] = $112;
     $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
     HEAP32[$vararg_ptr28>>2] = $114;
     (_sprintf($lojbuf117,91268,$vararg_buffer25)|0);
     $115 = HEAP32[29738]|0;
     $write_tag_text128 = ((($115)) + 44|0);
     $116 = HEAP32[$write_tag_text128>>2]|0;
     FUNCTION_TABLE_viiii[$116 & 63]($lojbuf117,215176,215176,1);
     break;
    }
    case 6:  {
     $117 = $tag;
     $nuha = ((($117)) + 36|0);
     $118 = HEAP32[$nuha>>2]|0;
     $mex_operator = $118;
     $119 = $mex_operator;
     $data133 = ((($119)) + 44|0);
     $number135 = ((($data133)) + 4|0);
     $120 = HEAP32[$number135>>2]|0;
     $number132 = $120;
     $121 = $number132;
     $122 = $tag;
     $pos138 = ((($122)) + 4|0);
     $123 = HEAP32[$pos138>>2]|0;
     HEAP32[$vararg_buffer29>>2] = $121;
     $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
     HEAP32[$vararg_ptr32>>2] = $123;
     (_sprintf($lojbuf136,91273,$vararg_buffer29)|0);
     $124 = HEAP32[29738]|0;
     $start_tag140 = ((($124)) + 40|0);
     $125 = HEAP32[$start_tag140>>2]|0;
     FUNCTION_TABLE_v[$125 & 63]();
     $126 = HEAP32[29738]|0;
     $write_tag_text141 = ((($126)) + 44|0);
     $127 = HEAP32[$write_tag_text141>>2]|0;
     FUNCTION_TABLE_viiii[$127 & 63]($lojbuf136,215176,215176,1);
     break;
    }
    case 8:  {
     $128 = $tag;
     $zei = ((($128)) + 48|0);
     $129 = HEAP32[$zei>>2]|0;
     $data147 = ((($129)) + 44|0);
     $number149 = ((($data147)) + 16|0);
     $130 = HEAP32[$number149>>2]|0;
     $number144 = $130;
     $131 = $number144;
     $132 = $tag;
     $pos151 = ((($132)) + 4|0);
     $133 = HEAP32[$pos151>>2]|0;
     HEAP32[$vararg_buffer33>>2] = $131;
     $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
     HEAP32[$vararg_ptr36>>2] = $133;
     (_sprintf($lojbuf145,91273,$vararg_buffer33)|0);
     $134 = $tag;
     $zei153 = ((($134)) + 48|0);
     $135 = HEAP32[$zei153>>2]|0;
     $data155 = ((($135)) + 44|0);
     $sep_with_plus = ((($data155)) + 8|0);
     $136 = HEAP32[$sep_with_plus>>2]|0;
     $137 = $tag;
     $pos157 = ((($137)) + 4|0);
     $138 = HEAP32[$pos157>>2]|0;
     $call158 = (_adv_translate($136,$138,3)|0);
     $trans = $call158;
     $139 = $trans;
     $tobool159 = ($139|0)!=(0|0);
     $call158$ = $tobool159 ? $call158 : 92258;
     $trans = $call158$;
     $140 = HEAP32[29738]|0;
     $start_tag162 = ((($140)) + 40|0);
     $141 = HEAP32[$start_tag162>>2]|0;
     FUNCTION_TABLE_v[$141 & 63]();
     $142 = HEAP32[29738]|0;
     $write_tag_text163 = ((($142)) + 44|0);
     $143 = HEAP32[$write_tag_text163>>2]|0;
     $144 = $trans;
     FUNCTION_TABLE_viiii[$143 & 63]($lojbuf145,215176,$144,1);
     break;
    }
    default: {
    }
    }
    $145 = $xtt;
    $146 = HEAP32[$145>>2]|0;
    $xtt = $146;
    $147 = $xtt;
    $tobool165 = ($147|0)!=(0|0);
    if (!($tobool165)) {
     break;
    }
   }
   $148 = HEAP32[29738]|0;
   $end_tags = ((($148)) + 36|0);
   $149 = HEAP32[$end_tags>>2]|0;
   FUNCTION_TABLE_v[$149 & 63]();
  }
 }
 $150 = $y;
 $151 = HEAP32[$150>>2]|0;
 $n = $151;
 $i = 0;
 while(1) {
  $152 = $i;
  $153 = $n;
  $cmp168 = ($152|0)<($153|0);
  if (!($cmp168)) {
   break;
  }
  $154 = $y;
  $children = ((($154)) + 16|0);
  $155 = HEAP32[$children>>2]|0;
  $156 = $i;
  $arrayidx169 = (($155) + ($156<<2)|0);
  $157 = HEAP32[$arrayidx169>>2]|0;
  $158 = $what$addr;
  _output_internal($157,$158);
  $159 = $i;
  $inc = (($159) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _output_simple_time_offset($x,$what) {
 $x = $x|0;
 $what = $what|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $arrayidx4 = 0, $children = 0, $cmp = 0, $data = 0, $data2 = 0, $eng = 0, $eols = 0, $i = 0, $inc = 0, $loj = 0, $n = 0, $set_eols = 0, $tobool = 0, $tobool10 = 0, $translation = 0, $what$addr = 0, $write_tag_text = 0, $x$addr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2064|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2064|0);
 $loj = sp + 1040|0;
 $eng = sp + 16|0;
 $x$addr = $x;
 $what$addr = $what;
 HEAP8[$loj>>0] = 0;
 $0 = $x$addr;
 _translate_time_offset($0,$loj,$eng);
 $1 = $what$addr;
 L1: do {
  switch ($1|0) {
  case 5: case 4: case 1:  {
   $2 = $x$addr;
   $data = ((($2)) + 44|0);
   $3 = HEAP32[$data>>2]|0;
   $n = $3;
   $i = 0;
   while(1) {
    $4 = $i;
    $5 = $n;
    $cmp = ($4|0)<($5|0);
    if (!($cmp)) {
     break L1;
    }
    $6 = $x$addr;
    $data2 = ((($6)) + 44|0);
    $children = ((($data2)) + 16|0);
    $7 = HEAP32[$children>>2]|0;
    $8 = $i;
    $arrayidx4 = (($7) + ($8<<2)|0);
    $9 = HEAP32[$arrayidx4>>2]|0;
    _output_internal($9,4);
    $10 = $i;
    $inc = (($10) + 1)|0;
    $i = $inc;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $11 = $what$addr;
 switch ($11|0) {
 case 5: case 2:  {
  $12 = HEAP8[$eng>>0]|0;
  $tobool = ($12<<24>>24)!=(0);
  if ($tobool) {
   $13 = HEAP32[29738]|0;
   $translation = ((($13)) + 28|0);
   $14 = HEAP32[$translation>>2]|0;
   FUNCTION_TABLE_vi[$14 & 127]($eng);
  }
  $15 = HEAP32[29738]|0;
  $set_eols = ((($15)) + 20|0);
  $16 = HEAP32[$set_eols>>2]|0;
  $17 = $x$addr;
  $eols = ((($17)) + 28|0);
  $18 = HEAP32[$eols>>2]|0;
  FUNCTION_TABLE_vi[$16 & 127]($18);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $19 = HEAP8[$eng>>0]|0;
  $tobool10 = ($19<<24>>24)!=(0);
  if (!($tobool10)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[29738]|0;
  $write_tag_text = ((($20)) + 44|0);
  $21 = HEAP32[$write_tag_text>>2]|0;
  FUNCTION_TABLE_viiii[$21 & 63](215176,215176,$eng,0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _output_clustered($x,$what) {
 $x = $x|0;
 $what = $what|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $arrayidx = 0, $arrayidx54 = 0, $c = 0, $call = 0, $call1 = 0, $call25 = 0, $call29 = 0, $children = 0, $children53 = 0, $cluster = 0, $cmp = 0, $cmp35 = 0, $cmp37 = 0, $cmp39 = 0, $cmp41 = 0, $cmp43 = 0, $cmp51 = 0, $ctx = 0, $data = 0, $data47 = 0;
 var $i = 0, $inc = 0, $inc56 = 0, $localtrans = 0, $lojbuf = 0, $lojbuf2 = 0, $n = 0, $nt = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $tobool = 0, $tobool26 = 0, $tobool31 = 0, $trans = 0, $translation = 0, $what$addr = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2352|0);
 $localtrans = sp + 2088|0;
 $lojbuf = sp + 1064|0;
 $lojbuf2 = sp + 40|0;
 $x$addr = $x;
 $what$addr = $what;
 $0 = $x$addr;
 $call = (_prop_tense_ctx($0,0)|0);
 $ctx = $call;
 $1 = $x$addr;
 $call1 = (_get_cmavo_text_inside_node($1)|0);
 $cluster = $call1;
 $2 = $cluster;
 (_strcpy($lojbuf,$2)|0);
 $3 = $cluster;
 (_strcpy($lojbuf2,$3)|0);
 $4 = $ctx;
 $tobool = ($4|0)!=(0|0);
 L1: do {
  if ($tobool) {
   $5 = $ctx;
   $6 = HEAP32[$5>>2]|0;
   switch ($6|0) {
   case 6:  {
    (_strcat($lojbuf,91102)|0);
    break L1;
    break;
   }
   case 2:  {
    (_strcat($lojbuf,91067)|0);
    break L1;
    break;
   }
   case 3:  {
    (_strcat($lojbuf,91073)|0);
    break L1;
    break;
   }
   case 1:  {
    (_strcat($lojbuf,91079)|0);
    break L1;
    break;
   }
   case 4:  {
    (_strcat($lojbuf,91087)|0);
    break L1;
    break;
   }
   case 5:  {
    (_strcat($lojbuf,91093)|0);
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 $call25 = (_translate($lojbuf)|0);
 $trans = $call25;
 $7 = $trans;
 $tobool26 = ($7|0)!=(0|0);
 if (!($tobool26)) {
  $call29 = (_translate($lojbuf2)|0);
  $trans = $call29;
 }
 $8 = $trans;
 $tobool31 = ($8|0)!=(0|0);
 if (!($tobool31)) {
  $28 = $x$addr;
  $data47 = ((($28)) + 44|0);
  $nt = $data47;
  $29 = $nt;
  $30 = HEAP32[$29>>2]|0;
  $n = $30;
  $i = 0;
  while(1) {
   $31 = $i;
   $32 = $n;
   $cmp51 = ($31|0)<($32|0);
   if (!($cmp51)) {
    break;
   }
   $33 = $nt;
   $children53 = ((($33)) + 16|0);
   $34 = HEAP32[$children53>>2]|0;
   $35 = $i;
   $arrayidx54 = (($34) + ($35<<2)|0);
   $36 = HEAP32[$arrayidx54>>2]|0;
   $c = $36;
   $37 = $c;
   $38 = $what$addr;
   _output_internal($37,$38);
   $39 = $i;
   $inc56 = (($39) + 1)|0;
   $i = $inc56;
  }
  STACKTOP = sp;return;
 }
 $9 = $trans;
 (_strcpy($localtrans,$9)|0);
 $10 = $what$addr;
 $cmp = ($10|0)==(1);
 $11 = $what$addr;
 $cmp35 = ($11|0)==(4);
 $or$cond = $cmp | $cmp35;
 $12 = $what$addr;
 $cmp37 = ($12|0)==(5);
 $or$cond1 = $or$cond | $cmp37;
 L21: do {
  if ($or$cond1) {
   $13 = $x$addr;
   $data = ((($13)) + 44|0);
   $nt = $data;
   $14 = $nt;
   $15 = HEAP32[$14>>2]|0;
   $n = $15;
   $i = 0;
   while(1) {
    $16 = $i;
    $17 = $n;
    $cmp39 = ($16|0)<($17|0);
    if (!($cmp39)) {
     break L21;
    }
    $18 = $nt;
    $children = ((($18)) + 16|0);
    $19 = HEAP32[$children>>2]|0;
    $20 = $i;
    $arrayidx = (($19) + ($20<<2)|0);
    $21 = HEAP32[$arrayidx>>2]|0;
    $c = $21;
    $22 = $c;
    _output_internal($22,4);
    $23 = $i;
    $inc = (($23) + 1)|0;
    $i = $inc;
   }
  }
 } while(0);
 $24 = $what$addr;
 $cmp41 = ($24|0)==(2);
 $25 = $what$addr;
 $cmp43 = ($25|0)==(5);
 $or$cond2 = $cmp41 | $cmp43;
 if (!($or$cond2)) {
  STACKTOP = sp;return;
 }
 $26 = HEAP32[29738]|0;
 $translation = ((($26)) + 28|0);
 $27 = HEAP32[$translation>>2]|0;
 FUNCTION_TABLE_vi[$27 & 127]($localtrans);
 STACKTOP = sp;return;
}
function _output_sumti_tail($x,$what) {
 $x = $x|0;
 $what = $what|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx14 = 0, $arrayidx5 = 0, $c1 = 0, $children = 0, $children13 = 0, $children4 = 0, $cmp = 0, $cmp11 = 0;
 var $cmp3 = 0, $data = 0, $data1 = 0, $i = 0, $inc = 0, $inc16 = 0, $n = 0, $translation = 0, $translation7 = 0, $type = 0, $what$addr = 0, $x$addr = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $what$addr = $what;
 $0 = $x$addr;
 $data = ((($0)) + 44|0);
 $y = $data;
 $1 = $y;
 $children = ((($1)) + 16|0);
 $2 = HEAP32[$children>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $c1 = $3;
 $4 = $y;
 $5 = HEAP32[$4>>2]|0;
 $n = $5;
 $6 = $c1;
 $data1 = ((($6)) + 44|0);
 $type = ((($data1)) + 12|0);
 $7 = HEAP32[$type>>2]|0;
 $cmp = ($7|0)==(127);
 if (!($cmp)) {
  $i = 0;
  while(1) {
   $24 = $i;
   $25 = $n;
   $cmp11 = ($24|0)<($25|0);
   if (!($cmp11)) {
    break;
   }
   $26 = $y;
   $children13 = ((($26)) + 16|0);
   $27 = HEAP32[$children13>>2]|0;
   $28 = $i;
   $arrayidx14 = (($27) + ($28<<2)|0);
   $29 = HEAP32[$arrayidx14>>2]|0;
   $30 = $what$addr;
   _output_internal($29,$30);
   $31 = $i;
   $inc16 = (($31) + 1)|0;
   $i = $inc16;
  }
  STACKTOP = sp;return;
 }
 $8 = $what$addr;
 switch ($8|0) {
 case 5: case 4: case 1:  {
  $9 = $c1;
  _output_internal($9,1);
  $10 = HEAP32[29738]|0;
  $translation = ((($10)) + 28|0);
  $11 = HEAP32[$translation>>2]|0;
  FUNCTION_TABLE_vi[$11 & 127](116343);
  break;
 }
 default: {
 }
 }
 $i = 1;
 while(1) {
  $12 = $i;
  $13 = $n;
  $cmp3 = ($12|0)<($13|0);
  if (!($cmp3)) {
   break;
  }
  $14 = $y;
  $children4 = ((($14)) + 16|0);
  $15 = HEAP32[$children4>>2]|0;
  $16 = $i;
  $arrayidx5 = (($15) + ($16<<2)|0);
  $17 = HEAP32[$arrayidx5>>2]|0;
  $18 = $what$addr;
  _output_internal($17,$18);
  $19 = $i;
  $inc = (($19) + 1)|0;
  $i = $inc;
 }
 $20 = $what$addr;
 switch ($20|0) {
 case 5: case 2:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $21 = HEAP32[29738]|0;
 $translation7 = ((($21)) + 28|0);
 $22 = HEAP32[$translation7>>2]|0;
 FUNCTION_TABLE_vi[$22 & 127](91202);
 $23 = $c1;
 _output_internal($23,2);
 STACKTOP = sp;return;
}
function _output_fore_or_afterthought($x,$what) {
 $x = $x|0;
 $what = $what|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $buffer = 0, $c = 0, $call = 0;
 var $call23 = 0, $children = 0, $cmp = 0, $cmp1 = 0, $cmp26 = 0, $cmp3 = 0, $cmp33 = 0, $cmp4 = 0, $cmp42 = 0, $cmp49 = 0, $cmp5 = 0, $cmp60 = 0, $cmp67 = 0, $cmp7 = 0, $cmp9 = 0, $data = 0, $i = 0, $inc = 0, $js = 0, $js69 = 0;
 var $n = 0, $neg1 = 0, $neg2 = 0, $neg257 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0, $pattern = 0, $tobool = 0, $tobool24 = 0, $tobool31 = 0, $tobool47 = 0, $tobool58 = 0, $trans = 0, $translation = 0, $translation37 = 0, $translation53 = 0, $translation64 = 0, $what$addr = 0;
 var $write_tag_text = 0, $write_tag_text35 = 0, $write_tag_text51 = 0, $write_tag_text62 = 0, $x$addr = 0, $xcon = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $buffer = sp + 32|0;
 $x$addr = $x;
 $what$addr = $what;
 $0 = $x$addr;
 $call = (_prop_connective($0,0)|0);
 $xcon = $call;
 $1 = $x$addr;
 $data = ((($1)) + 44|0);
 $y = $data;
 $2 = $y;
 $3 = HEAP32[$2>>2]|0;
 $n = $3;
 $4 = $what$addr;
 $cmp = ($4|0)==(1);
 $5 = $what$addr;
 $cmp1 = ($5|0)==(4);
 $or$cond = $cmp | $cmp1;
 $6 = $what$addr;
 $cmp3 = ($6|0)==(5);
 $or$cond1 = $or$cond | $cmp3;
 L1: do {
  if ($or$cond1) {
   $i = 0;
   while(1) {
    $7 = $i;
    $8 = $n;
    $cmp4 = ($7|0)<($8|0);
    if (!($cmp4)) {
     break L1;
    }
    $9 = $y;
    $children = ((($9)) + 16|0);
    $10 = HEAP32[$children>>2]|0;
    $11 = $i;
    $arrayidx = (($10) + ($11<<2)|0);
    $12 = HEAP32[$arrayidx>>2]|0;
    $c = $12;
    $13 = $c;
    _output_internal($13,4);
    $14 = $i;
    $inc = (($14) + 1)|0;
    $i = $inc;
   }
  }
 } while(0);
 $15 = $what$addr;
 $cmp5 = ($15|0)==(2);
 $16 = $what$addr;
 $cmp7 = ($16|0)==(3);
 $or$cond2 = $cmp5 | $cmp7;
 $17 = $what$addr;
 $cmp9 = ($17|0)==(5);
 $or$cond3 = $or$cond2 | $cmp9;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 $18 = $xcon;
 $tobool = ($18|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((91113|0),(91118|0),1095,(91127|0));
  // unreachable;
 }
 $19 = $xcon;
 $20 = HEAP32[$19>>2]|0;
 switch ($20|0) {
 case 1: case 0: case 6:  {
  $21 = $xcon;
  $pattern = ((($21)) + 4|0);
  $22 = HEAP32[$pattern>>2]|0;
  (_strcpy($buffer,$22)|0);
  $23 = $xcon;
  $24 = HEAP32[$23>>2]|0;
  switch ($24|0) {
  case 6:  {
   (_strcat($buffer,91155)|0);
   break;
  }
  case 0:  {
   (_strcat($buffer,91162)|0);
   break;
  }
  case 1:  {
   (_strcat($buffer,91166)|0);
   break;
  }
  default: {
   _abort();
   // unreachable;
  }
  }
  $call23 = (_translate($buffer)|0);
  $trans = $call23;
  $25 = $trans;
  $tobool24 = ($25|0)!=(0|0);
  if (!($tobool24)) {
   STACKTOP = sp;return;
  }
  $26 = $what$addr;
  $cmp26 = ($26|0)==(3);
  $27 = HEAP32[29738]|0;
  if ($cmp26) {
   $write_tag_text = ((($27)) + 44|0);
   $28 = HEAP32[$write_tag_text>>2]|0;
   $29 = $trans;
   FUNCTION_TABLE_viiii[$28 & 63](215176,215176,$29,0);
   STACKTOP = sp;return;
  } else {
   $translation = ((($27)) + 28|0);
   $30 = HEAP32[$translation>>2]|0;
   $31 = $trans;
   FUNCTION_TABLE_vi[$30 & 127]($31);
   STACKTOP = sp;return;
  }
  break;
 }
 case 4:  {
  $32 = $xcon;
  $neg1 = ((($32)) + 12|0);
  $33 = HEAP32[$neg1>>2]|0;
  $tobool31 = ($33|0)!=(0);
  if (!($tobool31)) {
   STACKTOP = sp;return;
  }
  $34 = $what$addr;
  $cmp33 = ($34|0)==(3);
  $35 = HEAP32[29738]|0;
  if ($cmp33) {
   $write_tag_text35 = ((($35)) + 44|0);
   $36 = HEAP32[$write_tag_text35>>2]|0;
   FUNCTION_TABLE_viiii[$36 & 63](215176,215176,91170,0);
   STACKTOP = sp;return;
  } else {
   $translation37 = ((($35)) + 28|0);
   $37 = HEAP32[$translation37>>2]|0;
   FUNCTION_TABLE_vi[$37 & 127](91170);
   STACKTOP = sp;return;
  }
  break;
 }
 case 3:  {
  $47 = $xcon;
  $neg257 = ((($47)) + 16|0);
  $48 = HEAP32[$neg257>>2]|0;
  $tobool58 = ($48|0)!=(0);
  do {
   if ($tobool58) {
    $49 = $what$addr;
    $cmp60 = ($49|0)==(3);
    $50 = HEAP32[29738]|0;
    if ($cmp60) {
     $write_tag_text62 = ((($50)) + 44|0);
     $51 = HEAP32[$write_tag_text62>>2]|0;
     FUNCTION_TABLE_viiii[$51 & 63](215176,215176,91191,0);
     break;
    } else {
     $translation64 = ((($50)) + 28|0);
     $52 = HEAP32[$translation64>>2]|0;
     FUNCTION_TABLE_vi[$52 & 127](91191);
     break;
    }
   }
  } while(0);
  $53 = $what$addr;
  $cmp67 = ($53|0)==(3);
  $54 = $xcon;
  $js69 = ((($54)) + 8|0);
  $55 = HEAP32[$js69>>2]|0;
  if ($cmp67) {
   _output_internal($55,3);
   STACKTOP = sp;return;
  } else {
   _output_internal($55,2);
   STACKTOP = sp;return;
  }
  break;
 }
 case 5:  {
  $38 = $what$addr;
  $cmp42 = ($38|0)==(3);
  $39 = $xcon;
  $js = ((($39)) + 8|0);
  $40 = HEAP32[$js>>2]|0;
  if ($cmp42) {
   _output_internal($40,3);
  } else {
   _output_internal($40,2);
  }
  $41 = $xcon;
  $neg2 = ((($41)) + 16|0);
  $42 = HEAP32[$neg2>>2]|0;
  $tobool47 = ($42|0)!=(0);
  if (!($tobool47)) {
   STACKTOP = sp;return;
  }
  $43 = $what$addr;
  $cmp49 = ($43|0)==(3);
  $44 = HEAP32[29738]|0;
  if ($cmp49) {
   $write_tag_text51 = ((($44)) + 44|0);
   $45 = HEAP32[$write_tag_text51>>2]|0;
   FUNCTION_TABLE_viiii[$45 & 63](215176,215176,91191,0);
   STACKTOP = sp;return;
  } else {
   $translation53 = ((($44)) + 28|0);
   $46 = HEAP32[$translation53>>2]|0;
   FUNCTION_TABLE_vi[$46 & 127](91191);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _get_lojban_word_and_translation($x,$loj,$eng) {
 $x = $x|0;
 $loj = $loj|0;
 $eng = $eng|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $N = 0, $arrayidx = 0, $arrayidx67 = 0, $buffer = 0, $call = 0;
 var $call2 = 0, $call50 = 0, $call68 = 0, $call69 = 0, $children = 0, $cmp = 0, $cmp58 = 0, $cmp60 = 0, $code = 0, $conv = 0, $data = 0, $data11 = 0, $data22 = 0, $data23 = 0, $data25 = 0, $data27 = 0, $data31 = 0, $data35 = 0, $data38 = 0, $data44 = 0;
 var $data45 = 0, $data48 = 0, $data65 = 0, $data78 = 0, $data81 = 0, $data85 = 0, $data88 = 0, $data92 = 0, $eng$addr = 0, $i = 0, $inc = 0, $loj$addr = 0, $sep_with_plus = 0, $sep_with_zei = 0, $temp = 0, $term = 0, $term29 = 0, $text = 0, $text33 = 0, $tobool = 0;
 var $tobool51 = 0, $tobool70 = 0, $trans = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1104|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1104|0);
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $buffer = sp + 72|0;
 $x$addr = $x;
 $loj$addr = $loj;
 $eng$addr = $eng;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 switch ($1|0) {
 case 2:  {
  $2 = $x$addr;
  $call = (_prop_elidable($2,0)|0);
  $tobool = ($call|0)!=(0|0);
  $3 = $loj$addr;
  $4 = $x$addr;
  $data = ((($4)) + 44|0);
  $code = ((($data)) + 4|0);
  $5 = HEAP32[$code>>2]|0;
  $arrayidx = (46450 + (($5*14)|0)|0);
  $6 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
  if ($tobool) {
   $call2 = (_make_uppercase($6)|0);
   (_strcpy($3,$call2)|0);
  } else {
   (_strcpy($3,$6)|0);
  }
  $7 = $eng$addr;
  HEAP8[$7>>0] = 0;
  $8 = $x$addr;
  $data11 = ((($8)) + 44|0);
  $9 = HEAP32[$data11>>2]|0;
  switch ($9|0) {
  case 261:  {
   $10 = $x$addr;
   $11 = $eng$addr;
   _translate_bai($10,$11);
   STACKTOP = sp;return;
   break;
  }
  case 353:  {
   $12 = $x$addr;
   $13 = $eng$addr;
   _translate_se($12,$13);
   STACKTOP = sp;return;
   break;
  }
  case 300:  {
   $14 = $x$addr;
   $15 = $eng$addr;
   _translate_goi($14,$15);
   STACKTOP = sp;return;
   break;
  }
  case 311:  {
   $16 = $x$addr;
   $17 = $eng$addr;
   _translate_koha($16,$17);
   STACKTOP = sp;return;
   break;
  }
  case 340:  {
   $18 = $x$addr;
   $19 = $eng$addr;
   _translate_abstraction($18,$19);
   STACKTOP = sp;return;
   break;
  }
  case 285: case 367: case 377: case 349:  {
   $20 = $x$addr;
   $21 = $eng$addr;
   _translate_tense($20,$21);
   STACKTOP = sp;return;
   break;
  }
  case 273: case 366:  {
   $22 = $x$addr;
   $23 = $loj$addr;
   $24 = $eng$addr;
   _translate_indicator($22,$23,$24);
   STACKTOP = sp;return;
   break;
  }
  case 304:  {
   $25 = $x$addr;
   $26 = $eng$addr;
   _translate_jai($25,$26);
   STACKTOP = sp;return;
   break;
  }
  default: {
   $27 = $x$addr;
   $28 = $eng$addr;
   _translate_other_cmavo($27,$28);
   STACKTOP = sp;return;
  }
  }
  break;
 }
 case 3:  {
  $29 = $loj$addr;
  $30 = $x$addr;
  $data22 = ((($30)) + 44|0);
  $31 = HEAP32[$data22>>2]|0;
  $32 = $x$addr;
  $data23 = ((($32)) + 44|0);
  $term = ((($data23)) + 4|0);
  $33 = HEAP32[$term>>2]|0;
  $34 = $x$addr;
  $data25 = ((($34)) + 44|0);
  $text = ((($data25)) + 8|0);
  $35 = HEAP32[$text>>2]|0;
  $36 = $x$addr;
  $data27 = ((($36)) + 44|0);
  $term29 = ((($data27)) + 4|0);
  $37 = HEAP32[$term29>>2]|0;
  HEAP32[$vararg_buffer>>2] = $31;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $33;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $35;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $37;
  (_sprintf($29,90811,$vararg_buffer)|0);
  $38 = $x$addr;
  $data31 = ((($38)) + 44|0);
  $text33 = ((($data31)) + 8|0);
  $39 = HEAP32[$text33>>2]|0;
  $40 = $eng$addr;
  _attempt_translation($39,$40);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $41 = $loj$addr;
  $42 = $x$addr;
  $data35 = ((($42)) + 44|0);
  $43 = HEAP32[$data35>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $43;
  (_sprintf($41,90823,$vararg_buffer4)|0);
  $44 = $x$addr;
  $data38 = ((($44)) + 44|0);
  $45 = HEAP32[$data38>>2]|0;
  _attempt_translation($45,$buffer);
  $46 = $eng$addr;
  HEAP32[$vararg_buffer7>>2] = $buffer;
  (_sprintf($46,90829,$vararg_buffer7)|0);
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $47 = $x$addr;
  $data44 = ((($47)) + 44|0);
  $48 = HEAP32[$data44>>2]|0;
  $N = $48;
  $49 = $loj$addr;
  $50 = $x$addr;
  $data45 = ((($50)) + 44|0);
  $sep_with_zei = ((($data45)) + 12|0);
  $51 = HEAP32[$sep_with_zei>>2]|0;
  (_strcpy($49,$51)|0);
  $52 = $x$addr;
  $data48 = ((($52)) + 44|0);
  $sep_with_plus = ((($data48)) + 8|0);
  $53 = HEAP32[$sep_with_plus>>2]|0;
  $54 = $x$addr;
  $call50 = (_translate_convertible($53,$54)|0);
  $trans = $call50;
  $55 = $trans;
  $tobool51 = ($55|0)!=(0|0);
  if ($tobool51) {
   $56 = $trans;
   $57 = HEAP8[$56>>0]|0;
   $conv = $57 << 24 >> 24;
   $cmp = ($conv|0)!=(63);
   if ($cmp) {
    $58 = $eng$addr;
    $59 = $trans;
    (_strcpy($58,$59)|0);
    STACKTOP = sp;return;
   }
  }
  $60 = $eng$addr;
  HEAP8[$60>>0] = 0;
  $i = 0;
  while(1) {
   $61 = $i;
   $62 = $N;
   $cmp58 = ($61|0)<($62|0);
   if (!($cmp58)) {
    break;
   }
   $63 = $i;
   $cmp60 = ($63|0)>(0);
   if ($cmp60) {
    $64 = $eng$addr;
    (_strcat($64,90834)|0);
   }
   $65 = $x$addr;
   $data65 = ((($65)) + 44|0);
   $children = ((($data65)) + 4|0);
   $66 = HEAP32[$children>>2]|0;
   $67 = $i;
   $arrayidx67 = (($66) + ($67<<2)|0);
   $68 = HEAP32[$arrayidx67>>2]|0;
   $call68 = (_build_string_from_node($68)|0);
   $temp = $call68;
   $69 = $temp;
   $call69 = (_translate($69)|0);
   $trans = $call69;
   $70 = $temp;
   _Free($70);
   $71 = $trans;
   $tobool70 = ($71|0)!=(0|0);
   $72 = $eng$addr;
   if ($tobool70) {
    $73 = $trans;
    (_strcat($72,$73)|0);
   } else {
    (_strcat($72,92258)|0);
   }
   $74 = $i;
   $inc = (($74) + 1)|0;
   $i = $inc;
  }
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $75 = $loj$addr;
  $76 = $x$addr;
  $data78 = ((($76)) + 44|0);
  $77 = HEAP32[$data78>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $77;
  (_sprintf($75,90844,$vararg_buffer10)|0);
  $78 = $x$addr;
  $data81 = ((($78)) + 44|0);
  $79 = HEAP32[$data81>>2]|0;
  $80 = $eng$addr;
  _attempt_translation($79,$80);
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $81 = $loj$addr;
  $82 = $x$addr;
  $data85 = ((($82)) + 44|0);
  $83 = HEAP32[$data85>>2]|0;
  HEAP32[$vararg_buffer13>>2] = $83;
  (_sprintf($81,90857,$vararg_buffer13)|0);
  $84 = $loj$addr;
  $85 = $eng$addr;
  _attempt_translation($84,$85);
  STACKTOP = sp;return;
  break;
 }
 case 8:  {
  $86 = $loj$addr;
  $87 = $x$addr;
  $data88 = ((($87)) + 44|0);
  $88 = HEAP32[$data88>>2]|0;
  (_strcpy($86,$88)|0);
  $89 = $x$addr;
  $90 = $eng$addr;
  _translate_brivla($89,$90);
  STACKTOP = sp;return;
  break;
 }
 case 9:  {
  $91 = $loj$addr;
  $92 = $x$addr;
  $data92 = ((($92)) + 44|0);
  $93 = HEAP32[$data92>>2]|0;
  (_strcpy($91,$93)|0);
  $94 = $eng$addr;
  (_strcpy($94,91658)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _translate_bai($x,$eng) {
 $x = $x|0;
 $eng = $eng|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $arrayidx28 = 0, $arrayidx3 = 0, $arrayidx6 = 0, $baiconv = 0, $buffer = 0, $call = 0, $call2 = 0, $call21 = 0, $call30 = 0, $code = 0, $code27 = 0, $cond = 0, $data = 0, $data25 = 0, $eng$addr = 0, $sub = 0, $tobool = 0;
 var $tobool22 = 0, $tobool31 = 0, $tobool9 = 0, $trans = 0, $x$addr = 0, $xtc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $buffer = sp + 24|0;
 $x$addr = $x;
 $eng$addr = $eng;
 $0 = $eng$addr;
 HEAP8[$0>>0] = 0;
 HEAP8[$buffer>>0] = 0;
 $1 = $x$addr;
 $call = (_prop_bai_conversion($1,0)|0);
 $baiconv = $call;
 $2 = $x$addr;
 $call2 = (_prop_tense_ctx($2,0)|0);
 $xtc = $call2;
 $3 = $baiconv;
 $tobool = ($3|0)!=(0|0);
 if ($tobool) {
  $4 = $baiconv;
  $5 = HEAP32[$4>>2]|0;
  $sub = (($5) - 1)|0;
  $arrayidx3 = (7708 + ($sub<<2)|0);
  $6 = HEAP32[$arrayidx3>>2]|0;
  (_strcat($buffer,$6)|0);
 }
 $7 = $x$addr;
 $data = ((($7)) + 44|0);
 $code = ((($data)) + 4|0);
 $8 = HEAP32[$code>>2]|0;
 $arrayidx6 = (46450 + (($8*14)|0)|0);
 $9 = HEAPU8[$arrayidx6>>0]|(HEAPU8[$arrayidx6+1>>0]<<8)|(HEAPU8[$arrayidx6+2>>0]<<16)|(HEAPU8[$arrayidx6+3>>0]<<24);
 (_strcat($buffer,$9)|0);
 $10 = $xtc;
 $tobool9 = ($10|0)!=(0|0);
 if ($tobool9) {
  $11 = $xtc;
  $12 = HEAP32[$11>>2]|0;
  $cond = ($12|0)==(6);
  if ($cond) {
   (_strcat($buffer,91102)|0);
  }
 }
 $call21 = (_translate($buffer)|0);
 $trans = $call21;
 $13 = $trans;
 $tobool22 = ($13|0)!=(0|0);
 if ($tobool22) {
  $14 = $eng$addr;
  $15 = $trans;
  (_strcpy($14,$15)|0);
  STACKTOP = sp;return;
 }
 $16 = $x$addr;
 $data25 = ((($16)) + 44|0);
 $code27 = ((($data25)) + 4|0);
 $17 = HEAP32[$code27>>2]|0;
 $arrayidx28 = (46450 + (($17*14)|0)|0);
 $18 = HEAPU8[$arrayidx28>>0]|(HEAPU8[$arrayidx28+1>>0]<<8)|(HEAPU8[$arrayidx28+2>>0]<<16)|(HEAPU8[$arrayidx28+3>>0]<<24);
 $call30 = (_translate($18)|0);
 $trans = $call30;
 $19 = $trans;
 $tobool31 = ($19|0)!=(0|0);
 $20 = $eng$addr;
 if ($tobool31) {
  $21 = $trans;
  (_strcpy($20,$21)|0);
  $22 = $eng$addr;
  (_strcat($22,90863)|0);
  STACKTOP = sp;return;
 } else {
  (_strcpy($20,92258)|0);
  STACKTOP = sp;return;
 }
}
function _translate_se($x,$eng) {
 $x = $x|0;
 $eng = $eng|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx1 = 0, $call = 0, $call3 = 0, $code = 0, $data = 0, $eng$addr = 0, $tobool = 0, $tobool4 = 0, $trans = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $eng$addr = $eng;
 $0 = $x$addr;
 $call = (_prop_dont_gloss($0,0)|0);
 $tobool = ($call|0)!=(0|0);
 if ($tobool) {
  $1 = $eng$addr;
  HEAP8[$1>>0] = 0;
  STACKTOP = sp;return;
 }
 $2 = $x$addr;
 $data = ((($2)) + 44|0);
 $code = ((($data)) + 4|0);
 $3 = HEAP32[$code>>2]|0;
 $arrayidx1 = (46450 + (($3*14)|0)|0);
 $4 = HEAPU8[$arrayidx1>>0]|(HEAPU8[$arrayidx1+1>>0]<<8)|(HEAPU8[$arrayidx1+2>>0]<<16)|(HEAPU8[$arrayidx1+3>>0]<<24);
 $call3 = (_translate($4)|0);
 $trans = $call3;
 $5 = $trans;
 $tobool4 = ($5|0)!=(0|0);
 $6 = $eng$addr;
 if ($tobool4) {
  $7 = $trans;
  (_strcpy($6,$7)|0);
  STACKTOP = sp;return;
 } else {
  HEAP8[$6>>0] = 0;
  STACKTOP = sp;return;
 }
}
function _translate_goi($x,$eng) {
 $x = $x|0;
 $eng = $eng|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx1 = 0, $call = 0, $call3 = 0, $code = 0, $data = 0, $eng$addr = 0, $tobool = 0, $tobool4 = 0, $trans = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $eng$addr = $eng;
 $0 = $x$addr;
 $call = (_prop_dont_gloss($0,0)|0);
 $tobool = ($call|0)!=(0|0);
 if ($tobool) {
  $1 = $eng$addr;
  HEAP8[$1>>0] = 0;
  STACKTOP = sp;return;
 }
 $2 = $x$addr;
 $data = ((($2)) + 44|0);
 $code = ((($data)) + 4|0);
 $3 = HEAP32[$code>>2]|0;
 $arrayidx1 = (46450 + (($3*14)|0)|0);
 $4 = HEAPU8[$arrayidx1>>0]|(HEAPU8[$arrayidx1+1>>0]<<8)|(HEAPU8[$arrayidx1+2>>0]<<16)|(HEAPU8[$arrayidx1+3>>0]<<24);
 $call3 = (_translate($4)|0);
 $trans = $call3;
 $5 = $trans;
 $tobool4 = ($5|0)!=(0|0);
 $6 = $eng$addr;
 if ($tobool4) {
  $7 = $trans;
  (_strcpy($6,$7)|0);
  STACKTOP = sp;return;
 } else {
  HEAP8[$6>>0] = 0;
  STACKTOP = sp;return;
 }
}
function _translate_koha($x,$eng) {
 $x = $x|0;
 $eng = $eng|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0;
 var $bl = 0, $call = 0, $call11 = 0, $call5 = 0, $call8 = 0, $cmavo = 0, $code = 0, $data = 0, $data14 = 0, $eng$addr = 0, $number = 0, $tbuf = 0, $tobool = 0, $tobool12 = 0, $tobool6 = 0, $tobool9 = 0, $trans = 0, $vararg_buffer = 0, $x$addr = 0, $xan = 0;
 var $xrcl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $tbuf = sp + 32|0;
 $x$addr = $x;
 $eng$addr = $eng;
 $0 = $x$addr;
 $data = ((($0)) + 44|0);
 $code = ((($data)) + 4|0);
 $1 = HEAP32[$code>>2]|0;
 $arrayidx = (46450 + (($1*14)|0)|0);
 $2 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
 $cmavo = $2;
 $3 = $cmavo;
 $call = (_translate($3)|0);
 $trans = $call;
 $4 = $trans;
 $tobool = ($4|0)!=(0|0);
 $5 = $eng$addr;
 if ($tobool) {
  $6 = $trans;
  (_strcpy($5,$6)|0);
 } else {
  HEAP8[$5>>0] = 0;
 }
 $7 = $cmavo;
 $call5 = (_strcmp($7,101099)|0);
 $tobool6 = ($call5|0)!=(0);
 if ($tobool6) {
  STACKTOP = sp;return;
 }
 $8 = $x$addr;
 $call8 = (_prop_rel_clause_link($8,0)|0);
 $xrcl = $call8;
 $9 = $xrcl;
 $tobool9 = ($9|0)!=(0|0);
 if (!($tobool9)) {
  STACKTOP = sp;return;
 }
 $10 = $xrcl;
 $11 = HEAP32[$10>>2]|0;
 $call11 = (_prop_antecedent($11,0)|0);
 $xan = $call11;
 $12 = $xan;
 $tobool12 = ($12|0)!=(0|0);
 if (!($tobool12)) {
  STACKTOP = sp;return;
 }
 $13 = $xan;
 $14 = HEAP32[$13>>2]|0;
 $data14 = ((($14)) + 44|0);
 $number = ((($data14)) + 4|0);
 $15 = HEAP32[$number>>2]|0;
 $bl = $15;
 $16 = $eng$addr;
 (_strcat($16,91107)|0);
 $17 = $bl;
 HEAP32[$vararg_buffer>>2] = $17;
 (_sprintf($tbuf,91110,$vararg_buffer)|0);
 $18 = $eng$addr;
 (_strcat($18,$tbuf)|0);
 STACKTOP = sp;return;
}
function _translate_abstraction($x,$eng) {
 $x = $x|0;
 $eng = $eng|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arrayidx = 0, $call = 0, $cmavo = 0, $code = 0, $code2 = 0, $data = 0, $eng$addr = 0, $tobool = 0, $trans = 0, $x$addr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $eng$addr = $eng;
 $0 = $x$addr;
 $data = ((($0)) + 44|0);
 $code2 = ((($data)) + 4|0);
 $1 = HEAP32[$code2>>2]|0;
 $code = $1;
 $2 = $code;
 $arrayidx = (46450 + (($2*14)|0)|0);
 $3 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
 $cmavo = $3;
 $4 = $cmavo;
 $5 = $x$addr;
 $call = (_translate_convertible($4,$5)|0);
 $trans = $call;
 $6 = $trans;
 $tobool = ($6|0)!=(0|0);
 $7 = $eng$addr;
 if ($tobool) {
  $8 = $trans;
  (_strcpy($7,$8)|0);
  STACKTOP = sp;return;
 } else {
  HEAP8[$7>>0] = 0;
  STACKTOP = sp;return;
 }
}
function _translate_tense($x,$eng) {
 $x = $x|0;
 $eng = $eng|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $arrayidx1 = 0, $buffer = 0, $call = 0, $call6 = 0, $code = 0, $ctx = 0, $data = 0, $eng$addr = 0, $start_column = 0, $start_line = 0, $tobool = 0, $tobool7 = 0, $trans = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $buffer = sp + 32|0;
 $x$addr = $x;
 $eng$addr = $eng;
 $0 = $eng$addr;
 HEAP8[$0>>0] = 0;
 $1 = $x$addr;
 $call = (_prop_tense_ctx($1,0)|0);
 $ctx = $call;
 $2 = $ctx;
 $tobool = ($2|0)!=(0|0);
 if (!($tobool)) {
  $14 = HEAP32[7856]|0;
  $15 = $x$addr;
  $start_line = ((($15)) + 32|0);
  $16 = HEAP32[$start_line>>2]|0;
  $17 = $x$addr;
  $start_column = ((($17)) + 36|0);
  $18 = HEAP32[$start_column>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $16;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $18;
  (_fprintf($14,91012,$vararg_buffer1)|0);
  $19 = $x$addr;
  $20 = $eng$addr;
  _translate_other_cmavo($19,$20);
  STACKTOP = sp;return;
 }
 $3 = $x$addr;
 $data = ((($3)) + 44|0);
 $code = ((($data)) + 4|0);
 $4 = HEAP32[$code>>2]|0;
 $arrayidx1 = (46450 + (($4*14)|0)|0);
 $5 = HEAPU8[$arrayidx1>>0]|(HEAPU8[$arrayidx1+1>>0]<<8)|(HEAPU8[$arrayidx1+2>>0]<<16)|(HEAPU8[$arrayidx1+3>>0]<<24);
 (_strcpy($buffer,$5)|0);
 $6 = $ctx;
 $7 = HEAP32[$6>>2]|0;
 $call6 = (_translate_tense_in_context($buffer,$7)|0);
 $trans = $call6;
 $8 = $trans;
 $tobool7 = ($8|0)!=(0|0);
 if ($tobool7) {
  $9 = $eng$addr;
  $10 = $trans;
  (_strcpy($9,$10)|0);
  STACKTOP = sp;return;
 } else {
  $11 = HEAP32[7856]|0;
  HEAP32[$vararg_buffer>>2] = $buffer;
  (_fprintf($11,90881,$vararg_buffer)|0);
  $12 = $x$addr;
  $13 = $eng$addr;
  _translate_other_cmavo($12,$13);
  STACKTOP = sp;return;
 }
}
function _translate_indicator($x,$loj,$eng) {
 $x = $x|0;
 $loj = $loj|0;
 $eng = $eng|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx43 = 0, $buffer = 0, $call = 0, $call1 = 0, $call12 = 0, $call16 = 0, $call20 = 0, $call24 = 0, $call28 = 0, $call32 = 0;
 var $call36 = 0, $call4 = 0, $call50 = 0, $call8 = 0, $code42 = 0, $data = 0, $eng$addr = 0, $loj$addr = 0, $negated = 0, $tobool = 0, $tobool2 = 0, $tobool46 = 0, $tobool51 = 0, $tobool62 = 0, $trans = 0, $x$addr = 0, $xci = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $buffer = sp + 24|0;
 $x$addr = $x;
 $loj$addr = $loj;
 $eng$addr = $eng;
 $0 = $x$addr;
 $call = (_prop_neg_indicator($0,0)|0);
 $tobool = ($call|0)!=(0|0);
 if ($tobool) {
  $negated = 1;
 } else {
  $negated = 0;
 }
 $1 = $x$addr;
 $call1 = (_prop_cai_indicator($1,0)|0);
 $xci = $call1;
 $2 = $xci;
 $tobool2 = ($2|0)!=(0|0);
 if ($tobool2) {
  $3 = $xci;
  $4 = HEAP32[$3>>2]|0;
  switch ($4|0) {
  case 0:  {
   $call4 = (_translate(93786)|0);
   (_strcpy($buffer,$call4)|0);
   break;
  }
  case 1:  {
   $call8 = (_translate(107934)|0);
   (_strcpy($buffer,$call8)|0);
   break;
  }
  case 2:  {
   $call12 = (_translate(107639)|0);
   (_strcpy($buffer,$call12)|0);
   break;
  }
  case 3:  {
   $call16 = (_translate(95719)|0);
   (_strcpy($buffer,$call16)|0);
   break;
  }
  case 4:  {
   $call20 = (_translate(90919)|0);
   (_strcpy($buffer,$call20)|0);
   break;
  }
  case 5:  {
   $call24 = (_translate(90927)|0);
   (_strcpy($buffer,$call24)|0);
   break;
  }
  case 6:  {
   $call28 = (_translate(90934)|0);
   (_strcpy($buffer,$call28)|0);
   break;
  }
  case 7:  {
   $call32 = (_translate(105668)|0);
   (_strcpy($buffer,$call32)|0);
   break;
  }
  case 8:  {
   $call36 = (_translate(90941)|0);
   (_strcpy($buffer,$call36)|0);
   break;
  }
  default: {
  }
  }
  (_strcat($buffer,116343)|0);
 } else {
  HEAP8[$buffer>>0] = 0;
 }
 $5 = $loj$addr;
 $6 = $x$addr;
 $data = ((($6)) + 44|0);
 $code42 = ((($data)) + 4|0);
 $7 = HEAP32[$code42>>2]|0;
 $arrayidx43 = (46450 + (($7*14)|0)|0);
 $8 = HEAPU8[$arrayidx43>>0]|(HEAPU8[$arrayidx43+1>>0]<<8)|(HEAPU8[$arrayidx43+2>>0]<<16)|(HEAPU8[$arrayidx43+3>>0]<<24);
 (_strcpy($5,$8)|0);
 $9 = $negated;
 $tobool46 = ($9|0)!=(0);
 if ($tobool46) {
  $10 = $loj$addr;
  (_strcat($10,104578)|0);
 }
 $11 = $loj$addr;
 $call50 = (_translate($11)|0);
 $trans = $call50;
 $12 = $trans;
 $tobool51 = ($12|0)!=(0|0);
 if ($tobool51) {
  $13 = $trans;
  (_strcat($buffer,$13)|0);
  $14 = $eng$addr;
  (_strcpy($14,116410)|0);
  $15 = $eng$addr;
  (_strcat($15,$buffer)|0);
  $16 = $eng$addr;
  (_strcat($16,90948)|0);
 } else {
  $17 = $eng$addr;
  HEAP8[$17>>0] = 0;
 }
 $18 = $xci;
 $tobool62 = ($18|0)!=(0|0);
 if (!($tobool62)) {
  STACKTOP = sp;return;
 }
 $19 = $xci;
 $20 = HEAP32[$19>>2]|0;
 do {
  switch ($20|0) {
  case 0:  {
   $21 = $loj$addr;
   (_strcat($21,90952)|0);
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $22 = $loj$addr;
   (_strcat($22,90957)|0);
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $23 = $loj$addr;
   (_strcat($23,90962)|0);
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $24 = $loj$addr;
   (_strcat($24,90968)|0);
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $25 = $loj$addr;
   (_strcat($25,90974)|0);
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $26 = $loj$addr;
   (_strcat($26,90983)|0);
   STACKTOP = sp;return;
   break;
  }
  case 6:  {
   $27 = $loj$addr;
   (_strcat($27,90991)|0);
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $28 = $loj$addr;
   (_strcat($28,90999)|0);
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $29 = $loj$addr;
   (_strcat($29,91004)|0);
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _translate_jai($x,$eng) {
 $x = $x|0;
 $eng = $eng|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $buffer = 0, $call28 = 0, $call3 = 0;
 var $code = 0, $data = 0, $eng$addr = 0, $is_tertau = 0, $tobool = 0, $tobool29 = 0, $tobool4 = 0, $tobool6 = 0, $trans = 0, $vararg_buffer = 0, $x$addr = 0, $xgt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer = sp;
 $buffer = sp + 24|0;
 $x$addr = $x;
 $eng$addr = $eng;
 $0 = $x$addr;
 $data = ((($0)) + 44|0);
 $code = ((($data)) + 4|0);
 $1 = HEAP32[$code>>2]|0;
 $arrayidx = (46450 + (($1*14)|0)|0);
 $2 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
 (_strcpy($buffer,$2)|0);
 $3 = $eng$addr;
 HEAP8[$3>>0] = 0;
 $4 = $x$addr;
 $call3 = (_prop_glosstype($4,0)|0);
 $xgt = $call3;
 $5 = $xgt;
 $tobool = ($5|0)!=(0|0);
 do {
  if ($tobool) {
   $6 = $xgt;
   $7 = HEAP32[$6>>2]|0;
   $tobool4 = ($7|0)!=(0);
   $8 = $xgt;
   $is_tertau = ((($8)) + 4|0);
   $9 = HEAP32[$is_tertau>>2]|0;
   $tobool6 = ($9|0)!=(0);
   if ($tobool4) {
    if ($tobool6) {
     (_strcat($buffer,90872)|0);
     break;
    } else {
     (_strcat($buffer,90875)|0);
     break;
    }
   } else {
    if ($tobool6) {
     (_strcat($buffer,90878)|0);
     break;
    } else {
     (_strcat($buffer,90875)|0);
     break;
    }
   }
  } else {
   (_strcat($buffer,90875)|0);
  }
 } while(0);
 $call28 = (_translate($buffer)|0);
 $trans = $call28;
 $10 = $trans;
 $tobool29 = ($10|0)!=(0|0);
 if ($tobool29) {
  $11 = $eng$addr;
  $12 = $trans;
  (_strcpy($11,$12)|0);
  STACKTOP = sp;return;
 } else {
  $13 = HEAP32[7856]|0;
  HEAP32[$vararg_buffer>>2] = $buffer;
  (_fprintf($13,90881,$vararg_buffer)|0);
  $14 = $x$addr;
  $15 = $eng$addr;
  _translate_other_cmavo($14,$15);
  STACKTOP = sp;return;
 }
}
function _translate_other_cmavo($x,$eng) {
 $x = $x|0;
 $eng = $eng|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx = 0, $call = 0, $code = 0, $data = 0, $eng$addr = 0, $tobool = 0, $trans = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $eng$addr = $eng;
 $0 = $x$addr;
 $data = ((($0)) + 44|0);
 $code = ((($data)) + 4|0);
 $1 = HEAP32[$code>>2]|0;
 $arrayidx = (46450 + (($1*14)|0)|0);
 $2 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
 $call = (_translate($2)|0);
 $trans = $call;
 $3 = $trans;
 $tobool = ($3|0)!=(0|0);
 $4 = $eng$addr;
 if ($tobool) {
  $5 = $trans;
  (_strcpy($4,$5)|0);
  STACKTOP = sp;return;
 } else {
  HEAP8[$4>>0] = 0;
  STACKTOP = sp;return;
 }
}
function _attempt_translation($loj,$eng) {
 $loj = $loj|0;
 $eng = $eng|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $eng$addr = 0, $loj$addr = 0, $tobool = 0, $trans = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $loj$addr = $loj;
 $eng$addr = $eng;
 $0 = $loj$addr;
 $call = (_translate($0)|0);
 $trans = $call;
 $1 = $trans;
 $tobool = ($1|0)!=(0|0);
 $2 = $eng$addr;
 if ($tobool) {
  $3 = $trans;
  (_strcpy($2,$3)|0);
  STACKTOP = sp;return;
 } else {
  (_strcpy($2,92258)|0);
  STACKTOP = sp;return;
 }
}
function _translate_convertible($loj,$basis) {
 $loj = $loj|0;
 $basis = $basis|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $basis$addr = 0, $buffer = 0, $call = 0, $call11 = 0, $call17 = 0, $call19 = 0, $call2 = 0, $call28 = 0, $call32 = 0, $call40 = 0, $call9 = 0, $conv = 0;
 var $conversion = 0, $gt = 0, $is_tertau = 0, $loj$addr = 0, $retval = 0, $tobool = 0, $tobool22 = 0, $tobool29 = 0, $tobool3 = 0, $tobool33 = 0, $tobool35 = 0, $tobool41 = 0, $tobool5 = 0, $tobool7 = 0, $trans = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1072|0);
 $vararg_buffer = sp;
 $buffer = sp + 40|0;
 $loj$addr = $loj;
 $basis$addr = $basis;
 $0 = $basis$addr;
 $call = (_prop_conversion($0,0)|0);
 $conversion = $call;
 $1 = $conversion;
 $tobool = ($1|0)!=(0|0);
 if ($tobool) {
  $2 = $conversion;
  $3 = HEAP32[$2>>2]|0;
  $conv = $3;
 } else {
  $conv = 1;
 }
 $4 = $basis$addr;
 $call2 = (_prop_glosstype($4,0)|0);
 $gt = $call2;
 $5 = $gt;
 $tobool3 = ($5|0)!=(0|0);
 if ($tobool3) {
  $6 = $gt;
  $7 = HEAP32[$6>>2]|0;
  $tobool5 = ($7|0)!=(0);
  $8 = $gt;
  $is_tertau = ((($8)) + 4|0);
  $9 = HEAP32[$is_tertau>>2]|0;
  $tobool7 = ($9|0)!=(0);
  $10 = $loj$addr;
  $11 = $conv;
  do {
   if ($tobool5) {
    if ($tobool7) {
     $call9 = (_adv_translate($10,$11,1)|0);
     $trans = $call9;
     break;
    } else {
     $call11 = (_adv_translate($10,$11,2)|0);
     $trans = $call11;
     break;
    }
   } else {
    if ($tobool7) {
     $call17 = (_adv_translate($10,$11,0)|0);
     $trans = $call17;
     break;
    } else {
     $call19 = (_adv_translate($10,$11,2)|0);
     $trans = $call19;
     break;
    }
   }
  } while(0);
  $12 = $trans;
  $tobool22 = ($12|0)!=(0|0);
  if ($tobool22) {
   $13 = $trans;
   $retval = $13;
   $27 = $retval;
   STACKTOP = sp;return ($27|0);
  } else {
   $retval = 0;
   $27 = $retval;
   STACKTOP = sp;return ($27|0);
  }
 }
 $14 = $loj$addr;
 $15 = $conv;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 (_sprintf($buffer,91446,$vararg_buffer)|0);
 $call28 = (_translate($buffer)|0);
 $trans = $call28;
 $16 = $trans;
 $tobool29 = ($16|0)!=(0|0);
 if ($tobool29) {
  $17 = $trans;
  $retval = $17;
  $27 = $retval;
  STACKTOP = sp;return ($27|0);
 }
 $18 = $loj$addr;
 $call32 = (_translate($18)|0);
 $trans = $call32;
 $19 = $trans;
 $tobool33 = ($19|0)!=(0|0);
 if ($tobool33) {
  $20 = $conversion;
  $tobool35 = ($20|0)!=(0|0);
  if ($tobool35) {
   $21 = $trans;
   (_strcat($21,90863)|0);
  }
  $22 = $trans;
  $retval = $22;
  $27 = $retval;
  STACKTOP = sp;return ($27|0);
 }
 $23 = $loj$addr;
 $24 = $conv;
 $call40 = (_translate_unknown($23,$24,0)|0);
 $trans = $call40;
 $25 = $trans;
 $tobool41 = ($25|0)!=(0|0);
 if ($tobool41) {
  $26 = $trans;
  $retval = $26;
  $27 = $retval;
  STACKTOP = sp;return ($27|0);
 } else {
  $retval = 0;
  $27 = $retval;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _translate_brivla($x,$eng) {
 $x = $x|0;
 $eng = $eng|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $data = 0, $eng$addr = 0, $tobool = 0, $trans = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $eng$addr = $eng;
 $0 = $x$addr;
 $data = ((($0)) + 44|0);
 $1 = HEAP32[$data>>2]|0;
 $2 = $x$addr;
 $call = (_translate_convertible($1,$2)|0);
 $trans = $call;
 $3 = $trans;
 $tobool = ($3|0)!=(0|0);
 $4 = $eng$addr;
 if ($tobool) {
  $5 = $trans;
  (_strcpy($4,$5)|0);
  STACKTOP = sp;return;
 } else {
  HEAP8[$4>>0] = 0;
  STACKTOP = sp;return;
 }
}
function _translate_tense_in_context($text,$ctx) {
 $text = $text|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $buffer = 0, $call20 = 0, $call21 = 0, $ctx$addr = 0, $retval = 0, $text$addr = 0, $tobool = 0, $trans = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $buffer = sp + 16|0;
 $text$addr = $text;
 $ctx$addr = $ctx;
 $0 = $text$addr;
 (_strcpy($buffer,$0)|0);
 $1 = $ctx$addr;
 switch ($1|0) {
 case 6:  {
  (_strcat($buffer,91102)|0);
  break;
 }
 case 2:  {
  (_strcat($buffer,91067)|0);
  break;
 }
 case 3:  {
  (_strcat($buffer,91073)|0);
  break;
 }
 case 1:  {
  (_strcat($buffer,91079)|0);
  break;
 }
 case 4:  {
  (_strcat($buffer,91087)|0);
  break;
 }
 case 5:  {
  (_strcat($buffer,91093)|0);
  break;
 }
 default: {
 }
 }
 $call20 = (_translate($buffer)|0);
 $trans = $call20;
 $2 = $trans;
 $tobool = ($2|0)!=(0|0);
 if ($tobool) {
  $3 = $trans;
  $retval = $3;
  $6 = $retval;
  STACKTOP = sp;return ($6|0);
 } else {
  $4 = $text$addr;
  $call21 = (_translate($4)|0);
  $trans = $call21;
  $5 = $trans;
  $retval = $5;
  $6 = $retval;
  STACKTOP = sp;return ($6|0);
 }
 return (0)|0;
}
function _get_cmavo_text_inside_node($x) {
 $x = $x|0;
 var $0 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 HEAP8[120712] = 0;
 $0 = $x$addr;
 _get_cmavo_text_inside_node_internal($0,120712);
 STACKTOP = sp;return (120712|0);
}
function _get_cmavo_text_inside_node_internal($x,$sofar) {
 $x = $x|0;
 $sofar = $sofar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx9 = 0, $c = 0, $children = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp3 = 0, $code = 0, $data = 0, $data15 = 0, $data5 = 0, $data7 = 0;
 var $i = 0, $inc = 0, $n = 0, $nt = 0, $selmao = 0, $sofar$addr = 0, $t = 0, $type = 0, $type12 = 0, $type2 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $sofar$addr = $sofar;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 $2 = $x$addr;
 if ($cmp) {
  $data = ((($2)) + 44|0);
  $nt = $data;
  $3 = $nt;
  $4 = HEAP32[$3>>2]|0;
  $n = $4;
  $i = 0;
  while(1) {
   $5 = $i;
   $6 = $n;
   $cmp1 = ($5|0)<($6|0);
   if (!($cmp1)) {
    break;
   }
   $7 = $nt;
   $children = ((($7)) + 16|0);
   $8 = HEAP32[$children>>2]|0;
   $9 = $i;
   $arrayidx = (($8) + ($9<<2)|0);
   $10 = HEAP32[$arrayidx>>2]|0;
   $c = $10;
   $11 = $c;
   $12 = $sofar$addr;
   _get_cmavo_text_inside_node_internal($11,$12);
   $13 = $i;
   $inc = (($13) + 1)|0;
   $i = $inc;
  }
  STACKTOP = sp;return;
 }
 $type2 = ((($2)) + 40|0);
 $14 = HEAP32[$type2>>2]|0;
 $cmp3 = ($14|0)==(2);
 $15 = $x$addr;
 if ($cmp3) {
  $data5 = ((($15)) + 44|0);
  $16 = HEAP32[$data5>>2]|0;
  $selmao = $16;
  $17 = $selmao;
  switch ($17|0) {
  case 293: case 376: case 281: case 260: case 366:  {
   STACKTOP = sp;return;
   break;
  }
  default: {
  }
  }
  $18 = $x$addr;
  $data7 = ((($18)) + 44|0);
  $code = ((($data7)) + 4|0);
  $19 = HEAP32[$code>>2]|0;
  $arrayidx9 = (46450 + (($19*14)|0)|0);
  $20 = HEAPU8[$arrayidx9>>0]|(HEAPU8[$arrayidx9+1>>0]<<8)|(HEAPU8[$arrayidx9+2>>0]<<16)|(HEAPU8[$arrayidx9+3>>0]<<24);
  $t = $20;
  $21 = $sofar$addr;
  $22 = $t;
  (_strcat($21,$22)|0);
  STACKTOP = sp;return;
 } else {
  $type12 = ((($15)) + 40|0);
  $23 = HEAP32[$type12>>2]|0;
  $cmp13 = ($23|0)==(7);
  if (!($cmp13)) {
   STACKTOP = sp;return;
  }
  $24 = $sofar$addr;
  $25 = $x$addr;
  $data15 = ((($25)) + 44|0);
  $26 = HEAP32[$data15>>2]|0;
  (_strcat($24,$26)|0);
  STACKTOP = sp;return;
 }
}
function _translate_time_offset($x,$loj,$eng) {
 $x = $x|0;
 $loj = $loj|0;
 $eng = $eng|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx11 = 0, $arrayidx19 = 0, $arrayidx34 = 0, $arrayidx4 = 0, $arrayidx44 = 0, $arrayidx62 = 0, $call = 0, $call1 = 0, $call2 = 0;
 var $call26 = 0, $call3 = 0, $call36 = 0, $call46 = 0, $call64 = 0, $call80 = 0, $code = 0, $code10 = 0, $code18 = 0, $code33 = 0, $code43 = 0, $code61 = 0, $cond = 0, $cond54 = 0, $cond72 = 0, $ctx = 0, $data = 0, $data16 = 0, $data31 = 0, $data41 = 0;
 var $data59 = 0, $data8 = 0, $eng$addr = 0, $engbuf = 0, $loj$addr = 0, $nai = 0, $pu = 0, $start_column = 0, $start_line = 0, $tobool = 0, $tobool14 = 0, $tobool23 = 0, $tobool27 = 0, $tobool37 = 0, $tobool39 = 0, $tobool50 = 0, $tobool57 = 0, $tobool68 = 0, $tobool7 = 0, $trans = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $x$addr = 0, $zi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $vararg_buffer = sp;
 $engbuf = sp + 40|0;
 $x$addr = $x;
 $loj$addr = $loj;
 $eng$addr = $eng;
 $0 = $x$addr;
 $call = (_find_nth_cmavo_child($0,1,349)|0);
 $pu = $call;
 $1 = $x$addr;
 $call1 = (_find_nth_cmavo_child($1,1,336)|0);
 $nai = $call1;
 $2 = $x$addr;
 $call2 = (_find_nth_cmavo_child($2,1,380)|0);
 $zi = $call2;
 $3 = $pu;
 $tobool = ($3|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((91207|0),(91118|0),537,(91210|0));
  // unreachable;
 }
 $4 = $eng$addr;
 HEAP8[$4>>0] = 0;
 $5 = $x$addr;
 $call3 = (_prop_tense_ctx($5,0)|0);
 $ctx = $call3;
 $6 = $loj$addr;
 $7 = $pu;
 $data = ((($7)) + 44|0);
 $code = ((($data)) + 4|0);
 $8 = HEAP32[$code>>2]|0;
 $arrayidx4 = (46450 + (($8*14)|0)|0);
 $9 = HEAPU8[$arrayidx4>>0]|(HEAPU8[$arrayidx4+1>>0]<<8)|(HEAPU8[$arrayidx4+2>>0]<<16)|(HEAPU8[$arrayidx4+3>>0]<<24);
 (_strcpy($6,$9)|0);
 $10 = $nai;
 $tobool7 = ($10|0)!=(0|0);
 if ($tobool7) {
  $11 = $loj$addr;
  $12 = $nai;
  $data8 = ((($12)) + 44|0);
  $code10 = ((($data8)) + 4|0);
  $13 = HEAP32[$code10>>2]|0;
  $arrayidx11 = (46450 + (($13*14)|0)|0);
  $14 = HEAPU8[$arrayidx11>>0]|(HEAPU8[$arrayidx11+1>>0]<<8)|(HEAPU8[$arrayidx11+2>>0]<<16)|(HEAPU8[$arrayidx11+3>>0]<<24);
  (_strcat($11,$14)|0);
 }
 $15 = $zi;
 $tobool14 = ($15|0)!=(0|0);
 if ($tobool14) {
  $16 = $loj$addr;
  $17 = $zi;
  $data16 = ((($17)) + 44|0);
  $code18 = ((($data16)) + 4|0);
  $18 = HEAP32[$code18>>2]|0;
  $arrayidx19 = (46450 + (($18*14)|0)|0);
  $19 = HEAPU8[$arrayidx19>>0]|(HEAPU8[$arrayidx19+1>>0]<<8)|(HEAPU8[$arrayidx19+2>>0]<<16)|(HEAPU8[$arrayidx19+3>>0]<<24);
  (_strcat($16,$19)|0);
 }
 $20 = $ctx;
 $tobool23 = ($20|0)!=(0|0);
 if (!($tobool23)) {
  $45 = HEAP32[7856]|0;
  $46 = $x$addr;
  $start_line = ((($46)) + 32|0);
  $47 = HEAP32[$start_line>>2]|0;
  $48 = $x$addr;
  $start_column = ((($48)) + 36|0);
  $49 = HEAP32[$start_column>>2]|0;
  HEAP32[$vararg_buffer>>2] = $47;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $49;
  (_fprintf($45,91012,$vararg_buffer)|0);
  $50 = $loj$addr;
  $call80 = (_translate($50)|0);
  $trans = $call80;
  STACKTOP = sp;return;
 }
 $21 = $loj$addr;
 $22 = $ctx;
 $23 = HEAP32[$22>>2]|0;
 $call26 = (_translate_tense_in_context($21,$23)|0);
 $trans = $call26;
 $24 = $trans;
 $tobool27 = ($24|0)!=(0|0);
 if ($tobool27) {
  $25 = $eng$addr;
  $26 = $trans;
  (_strcpy($25,$26)|0);
  STACKTOP = sp;return;
 }
 HEAP8[$engbuf>>0] = 0;
 $27 = $pu;
 $data31 = ((($27)) + 44|0);
 $code33 = ((($data31)) + 4|0);
 $28 = HEAP32[$code33>>2]|0;
 $arrayidx34 = (46450 + (($28*14)|0)|0);
 $29 = HEAPU8[$arrayidx34>>0]|(HEAPU8[$arrayidx34+1>>0]<<8)|(HEAPU8[$arrayidx34+2>>0]<<16)|(HEAPU8[$arrayidx34+3>>0]<<24);
 $call36 = (_translate($29)|0);
 $trans = $call36;
 $30 = $trans;
 $tobool37 = ($30|0)!=(0|0);
 $31 = $trans;
 $cond = $tobool37 ? $31 : 92258;
 (_strcat($engbuf,$cond)|0);
 $32 = $nai;
 $tobool39 = ($32|0)!=(0|0);
 if ($tobool39) {
  $33 = $nai;
  $data41 = ((($33)) + 44|0);
  $code43 = ((($data41)) + 4|0);
  $34 = HEAP32[$code43>>2]|0;
  $arrayidx44 = (46450 + (($34*14)|0)|0);
  $35 = HEAPU8[$arrayidx44>>0]|(HEAPU8[$arrayidx44+1>>0]<<8)|(HEAPU8[$arrayidx44+2>>0]<<16)|(HEAPU8[$arrayidx44+3>>0]<<24);
  $call46 = (_translate($35)|0);
  $trans = $call46;
  (_strcat($engbuf,116343)|0);
  $36 = $trans;
  $tobool50 = ($36|0)!=(0|0);
  $37 = $trans;
  $cond54 = $tobool50 ? $37 : 92258;
  (_strcat($engbuf,$cond54)|0);
 }
 $38 = $zi;
 $tobool57 = ($38|0)!=(0|0);
 if ($tobool57) {
  $39 = $zi;
  $data59 = ((($39)) + 44|0);
  $code61 = ((($data59)) + 4|0);
  $40 = HEAP32[$code61>>2]|0;
  $arrayidx62 = (46450 + (($40*14)|0)|0);
  $41 = HEAPU8[$arrayidx62>>0]|(HEAPU8[$arrayidx62+1>>0]<<8)|(HEAPU8[$arrayidx62+2>>0]<<16)|(HEAPU8[$arrayidx62+3>>0]<<24);
  $call64 = (_translate($41)|0);
  $trans = $call64;
  (_strcat($engbuf,116343)|0);
  $42 = $trans;
  $tobool68 = ($42|0)!=(0|0);
  $43 = $trans;
  $cond72 = $tobool68 ? $43 : 92258;
  (_strcat($engbuf,$cond72)|0);
 }
 $44 = $eng$addr;
 (_strcpy($44,$engbuf)|0);
 STACKTOP = sp;return;
}
function _relative_clause_processing($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx17 = 0, $c = 0, $call = 0, $children = 0, $cmp = 0, $cmp1 = 0, $cmp15 = 0, $cmp3 = 0, $cmp6 = 0, $cmp9 = 0, $code = 0, $data = 0, $data16 = 0;
 var $i = 0, $inc = 0, $nc = 0, $nt = 0, $tobool = 0, $type = 0, $type14 = 0, $type2 = 0, $type5 = 0, $type8 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 $2 = $x$addr;
 if (!($cmp)) {
  $type14 = ((($2)) + 40|0);
  $21 = HEAP32[$type14>>2]|0;
  $cmp15 = ($21|0)==(2);
  if (!($cmp15)) {
   STACKTOP = sp;return;
  }
  $22 = $x$addr;
  $data16 = ((($22)) + 44|0);
  $code = ((($data16)) + 4|0);
  $23 = HEAP32[$code>>2]|0;
  $arrayidx17 = (46450 + (($23*14)|0)|0);
  $24 = HEAPU8[$arrayidx17>>0]|(HEAPU8[$arrayidx17+1>>0]<<8)|(HEAPU8[$arrayidx17+2>>0]<<16)|(HEAPU8[$arrayidx17+3>>0]<<24);
  $call = (_strcmp($24,101099)|0);
  $tobool = ($call|0)!=(0);
  if ($tobool) {
   STACKTOP = sp;return;
  }
  $25 = $x$addr;
  _process_keha($25);
  STACKTOP = sp;return;
 }
 $data = ((($2)) + 44|0);
 $nt = $data;
 $3 = $nt;
 $4 = HEAP32[$3>>2]|0;
 $nc = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $nc;
  $cmp1 = ($5|0)<($6|0);
  $7 = $nt;
  if (!($cmp1)) {
   break;
  }
  $children = ((($7)) + 16|0);
  $8 = HEAP32[$children>>2]|0;
  $9 = $i;
  $arrayidx = (($8) + ($9<<2)|0);
  $10 = HEAP32[$arrayidx>>2]|0;
  $c = $10;
  $11 = $c;
  _relative_clause_processing($11);
  $12 = $i;
  $inc = (($12) + 1)|0;
  $i = $inc;
 }
 $type2 = ((($7)) + 12|0);
 $13 = HEAP32[$type2>>2]|0;
 $cmp3 = ($13|0)==(91);
 if ($cmp3) {
  $14 = $x$addr;
  _process_any_rel_clause($14);
 }
 $15 = $nt;
 $type5 = ((($15)) + 12|0);
 $16 = HEAP32[$type5>>2]|0;
 $cmp6 = ($16|0)==(149);
 if ($cmp6) {
  $17 = $x$addr;
  _process_goi_clause($17);
  STACKTOP = sp;return;
 }
 $18 = $nt;
 $type8 = ((($18)) + 12|0);
 $19 = HEAP32[$type8>>2]|0;
 $cmp9 = ($19|0)==(17);
 if (!($cmp9)) {
  STACKTOP = sp;return;
 }
 $20 = $x$addr;
 _process_noi_clause($20);
 STACKTOP = sp;return;
}
function _process_any_rel_clause($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $antecedent = 0, $call = 0, $call10 = 0, $call12 = 0, $call15 = 0, $call17 = 0, $call20 = 0, $call21 = 0, $call8 = 0, $cmp = 0, $data = 0, $data3 = 0, $encl = 0, $parent = 0, $parent1 = 0, $rcs = 0, $tobool = 0, $type = 0;
 var $type5 = 0, $vararg_buffer = 0, $x$addr = 0, $xan = 0, $xrb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $x$addr = $x;
 $0 = $x$addr;
 $parent = ((($0)) + 8|0);
 $1 = HEAP32[$parent>>2]|0;
 $rcs = $1;
 while(1) {
  $2 = $rcs;
  $data = ((($2)) + 44|0);
  $type = ((($data)) + 12|0);
  $3 = HEAP32[$type>>2]|0;
  $cmp = ($3|0)!=(92);
  $4 = $rcs;
  $parent1 = ((($4)) + 8|0);
  $5 = HEAP32[$parent1>>2]|0;
  if (!($cmp)) {
   break;
  }
  $rcs = $5;
 }
 $encl = $5;
 $6 = $encl;
 $data3 = ((($6)) + 44|0);
 $type5 = ((($data3)) + 12|0);
 $7 = HEAP32[$type5>>2]|0;
 do {
  switch ($7|0) {
  case 13:  {
   $antecedent = 0;
   break;
  }
  case 119:  {
   $8 = $encl;
   $call = (_child_ref($8,0)|0);
   $antecedent = $call;
   break;
  }
  case 124:  {
   $9 = $encl;
   $call8 = (_child_ref($9,0)|0);
   $antecedent = $call8;
   break;
  }
  case 52:  {
   $10 = $encl;
   $call10 = (_find_nth_child($10,1,119)|0);
   $antecedent = $call10;
   break;
  }
  case 67:  {
   $11 = $encl;
   $call12 = (_find_nth_child($11,1,119)|0);
   $antecedent = $call12;
   break;
  }
  case 70:  {
   $12 = $encl;
   $antecedent = $12;
   break;
  }
  case 128:  {
   $13 = $encl;
   $call15 = (_find_nth_child($13,1,127)|0);
   $antecedent = $call15;
   break;
  }
  case 129:  {
   $14 = $encl;
   $call17 = (_child_ref($14,0)|0);
   $antecedent = $call17;
   break;
  }
  case 16:  {
   $15 = $encl;
   $antecedent = $15;
   break;
  }
  default: {
   $16 = HEAP32[7856]|0;
   (_fprintf($16,91319,$vararg_buffer)|0);
   $antecedent = 0;
  }
  }
 } while(0);
 $17 = $antecedent;
 $tobool = ($17|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $18 = $x$addr;
 $call20 = (_prop_antecedent($18,1)|0);
 $xan = $call20;
 $19 = $antecedent;
 $20 = $xan;
 HEAP32[$20>>2] = $19;
 $21 = $antecedent;
 $call21 = (_prop_require_brac($21,1)|0);
 $xrb = $call21;
 STACKTOP = sp;return;
}
function _process_goi_clause($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $call1 = 0, $call6 = 0, $call8 = 0, $data = 0, $goi = 0, $term = 0, $termc = 0, $tobool = 0, $tobool2 = 0, $type = 0, $x$addr = 0;
 var $xdg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $0 = $x$addr;
 $call = (_find_nth_cmavo_child($0,1,300)|0);
 $goi = $call;
 $1 = $x$addr;
 $call1 = (_find_nth_child($1,1,137)|0);
 $term = $call1;
 $2 = $goi;
 $tobool = ($2|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((91280|0),(91284|0),32,(91295|0));
  // unreachable;
 }
 $3 = $term;
 $tobool2 = ($3|0)!=(0|0);
 if (!($tobool2)) {
  ___assert_fail((91314|0),(91284|0),33,(91295|0));
  // unreachable;
 }
 $4 = $term;
 $call6 = (_child_ref($4,0)|0);
 $termc = $call6;
 $5 = $termc;
 $data = ((($5)) + 44|0);
 $type = ((($data)) + 12|0);
 $6 = HEAP32[$type>>2]|0;
 switch ($6|0) {
 case 150: case 132:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $7 = $goi;
 $call8 = (_prop_dont_gloss($7,1)|0);
 $xdg = $call8;
 STACKTOP = sp;return;
}
function _process_noi_clause($x) {
 $x = $x|0;
 var $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 STACKTOP = sp;return;
}
function _process_keha($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $cmp4 = 0, $cmp9 = 0, $data = 0, $data1 = 0, $data6 = 0;
 var $parent = 0, $parent5 = 0, $rel = 0, $type = 0, $type3 = 0, $type8 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $parent = ((($0)) + 8|0);
 $1 = HEAP32[$parent>>2]|0;
 $rel = $1;
 while(1) {
  $2 = $rel;
  $data = ((($2)) + 44|0);
  $type = ((($data)) + 12|0);
  $3 = HEAP32[$type>>2]|0;
  $cmp = ($3|0)!=(91);
  if ($cmp) {
   $4 = $rel;
   $data1 = ((($4)) + 44|0);
   $type3 = ((($data1)) + 12|0);
   $5 = HEAP32[$type3>>2]|0;
   $cmp4 = ($5|0)!=(7);
   $12 = $cmp4;
  } else {
   $12 = 0;
  }
  $6 = $rel;
  if (!($12)) {
   break;
  }
  $parent5 = ((($6)) + 8|0);
  $7 = HEAP32[$parent5>>2]|0;
  $rel = $7;
 }
 $data6 = ((($6)) + 44|0);
 $type8 = ((($data6)) + 12|0);
 $8 = HEAP32[$type8>>2]|0;
 $cmp9 = ($8|0)==(91);
 if (!($cmp9)) {
  STACKTOP = sp;return;
 }
 $9 = $rel;
 $10 = $x$addr;
 $call = (_prop_rel_clause_link($10,1)|0);
 HEAP32[$call>>2] = $9;
 $11 = $rel;
 (_prop_contains_keha($11,1)|0);
 STACKTOP = sp;return;
}
function _tense_processing($top) {
 $top = $top|0;
 var $0 = 0, $top$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $top$addr = $top;
 $0 = $top$addr;
 _scan_tenses($0);
 STACKTOP = sp;return;
}
function _scan_tenses($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $arrayidx = 0, $c = 0, $children = 0, $cmp = 0, $cmp2 = 0, $cmp4 = 0, $data = 0, $data6 = 0, $i = 0, $inc = 0, $nc = 0, $nt = 0, $type = 0, $type1 = 0, $type3 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 $2 = $x$addr;
 if ($cmp) {
  $data = ((($2)) + 44|0);
  $nt = $data;
  $3 = $nt;
  $type1 = ((($3)) + 12|0);
  $4 = HEAP32[$type1>>2]|0;
  switch ($4|0) {
  case 30: case 108: case 158:  {
   $5 = $x$addr;
   _check_tense_context($5);
   break;
  }
  default: {
  }
  }
  $6 = $nt;
  $7 = HEAP32[$6>>2]|0;
  $nc = $7;
  $i = 0;
  while(1) {
   $8 = $i;
   $9 = $nc;
   $cmp2 = ($8|0)<($9|0);
   if (!($cmp2)) {
    break;
   }
   $10 = $nt;
   $children = ((($10)) + 16|0);
   $11 = HEAP32[$children>>2]|0;
   $12 = $i;
   $arrayidx = (($11) + ($12<<2)|0);
   $13 = HEAP32[$arrayidx>>2]|0;
   $c = $13;
   $14 = $c;
   _scan_tenses($14);
   $15 = $i;
   $inc = (($15) + 1)|0;
   $i = $inc;
  }
  STACKTOP = sp;return;
 } else {
  $type3 = ((($2)) + 40|0);
  $16 = HEAP32[$type3>>2]|0;
  $cmp4 = ($16|0)==(2);
  if (!($cmp4)) {
   STACKTOP = sp;return;
  }
  $17 = $x$addr;
  $data6 = ((($17)) + 44|0);
  $18 = HEAP32[$data6>>2]|0;
  switch ($18|0) {
  case 349: case 261: case 285: case 367: case 377:  {
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  $19 = $x$addr;
  _check_tense_context($19);
  STACKTOP = sp;return;
 }
}
function _check_tense_context($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call12 = 0, $call19 = 0, $call3 = 0, $call6 = 0, $call9 = 0, $data = 0, $nt = 0, $parent = 0, $parent1 = 0, $parent23 = 0, $start_column = 0, $start_line = 0, $tc = 0, $type = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $x$addr = $x;
 $0 = $x$addr;
 $parent1 = ((($0)) + 8|0);
 $1 = HEAP32[$parent1>>2]|0;
 $parent = $1;
 L1: while(1) {
  $2 = $parent;
  $data = ((($2)) + 44|0);
  $nt = $data;
  $3 = $nt;
  $type = ((($3)) + 12|0);
  $4 = HEAP32[$type>>2]|0;
  switch ($4|0) {
  case 132: case 150:  {
   label = 3;
   break L1;
   break;
  }
  case 43: case 46: case 42: case 41: case 21: case 22: case 32: case 155:  {
   label = 4;
   break L1;
   break;
  }
  case 129: case 126:  {
   label = 5;
   break L1;
   break;
  }
  case 59: case 57: case 19: case 145: case 116:  {
   label = 6;
   break L1;
   break;
  }
  case 35:  {
   label = 7;
   break L1;
   break;
  }
  case 18:  {
   label = 8;
   break L1;
   break;
  }
  case 7:  {
   label = 9;
   break L1;
   break;
  }
  case 14: case 10: case 81: case 65:  {
   label = 11;
   break L1;
   break;
  }
  default: {
  }
  }
  $22 = $parent;
  $parent23 = ((($22)) + 8|0);
  $23 = HEAP32[$parent23>>2]|0;
  $parent = $23;
 }
 if ((label|0) == 3) {
  $5 = $x$addr;
  $call = (_prop_tense_ctx($5,1)|0);
  $tc = $call;
  $6 = $tc;
  HEAP32[$6>>2] = 2;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 4) {
  $7 = $x$addr;
  $call3 = (_prop_tense_ctx($7,1)|0);
  $tc = $call3;
  $8 = $tc;
  HEAP32[$8>>2] = 4;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 5) {
  $9 = $x$addr;
  $call6 = (_prop_tense_ctx($9,1)|0);
  $tc = $call6;
  $10 = $tc;
  HEAP32[$10>>2] = 3;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 6) {
  $11 = $x$addr;
  $call9 = (_prop_tense_ctx($11,1)|0);
  $tc = $call9;
  $12 = $tc;
  HEAP32[$12>>2] = 1;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  $13 = $x$addr;
  $call12 = (_prop_tense_ctx($13,1)|0);
  $tc = $call12;
  $14 = $tc;
  HEAP32[$14>>2] = 6;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $15 = $x$addr;
  $call19 = (_prop_tense_ctx($15,1)|0);
  $tc = $call19;
  $16 = $tc;
  HEAP32[$16>>2] = 5;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 9) {
  $17 = HEAP32[7856]|0;
  $18 = $x$addr;
  $start_line = ((($18)) + 32|0);
  $19 = HEAP32[$start_line>>2]|0;
  $20 = $x$addr;
  $start_column = ((($20)) + 36|0);
  $21 = HEAP32[$start_column>>2]|0;
  HEAP32[$vararg_buffer>>2] = $19;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $21;
  (_fprintf($17,91367,$vararg_buffer)|0);
  _abort();
  // unreachable;
 }
 else if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function _translate($word) {
 $word = $word|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $and = 0, $arrayidx = 0, $buf = 0, $call = 0, $res = 0, $retval = 0, $tobool = 0, $word$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $word$addr = $word;
 $0 = HEAP32[29739]|0;
 $add = (($0) + 1)|0;
 $and = $add & 63;
 HEAP32[29739] = $and;
 $arrayidx = (124808 + ($and<<9)|0);
 $buf = $arrayidx;
 $1 = $word$addr;
 $call = (_dict_lookup($1)|0);
 $res = $call;
 $2 = $res;
 $tobool = ($2|0)!=(0|0);
 if ($tobool) {
  $3 = $buf;
  $4 = $res;
  (_strcpy($3,$4)|0);
  $5 = $buf;
  $retval = $5;
  $6 = $retval;
  STACKTOP = sp;return ($6|0);
 } else {
  $retval = 0;
  $6 = $retval;
  STACKTOP = sp;return ($6|0);
 }
 return (0)|0;
}
function _translate_fuivla_prefix($w,$place,$ctx) {
 $w = $w|0;
 $place = $place|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx5 = 0, $arrayidx6 = 0, $call = 0;
 var $call7 = 0, $canon = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $comp = 0, $cond = 0, $conv = 0, $conv3 = 0, $ctx$addr = 0, $first = 0, $i = 0, $inc = 0, $last = 0, $n_comps = 0, $place$addr = 0, $places = 0, $sub = 0, $text = 0, $tobool = 0;
 var $tobool10 = 0, $tobool8 = 0, $trans = 0, $w$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1328|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1328|0);
 $comp = sp + 24|0;
 $n_comps = sp + 16|0;
 $w$addr = $w;
 $place$addr = $place;
 $ctx$addr = $ctx;
 $0 = $w$addr;
 $call = (_canon_lujvo($0)|0);
 $canon = $call;
 $1 = $canon;
 _split_into_comps($1,$comp,$n_comps);
 HEAP8[157576] = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = HEAP32[$n_comps>>2]|0;
  $cmp = ($2|0)<($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $i;
  $cmp1 = ($4|0)==(0);
  $conv = $cmp1&1;
  $first = $conv;
  $5 = $i;
  $6 = HEAP32[$n_comps>>2]|0;
  $sub = (($6) - 1)|0;
  $cmp2 = ($5|0)==($sub|0);
  $conv3 = $cmp2&1;
  $last = $conv3;
  $7 = $i;
  $arrayidx = (($comp) + (($7*40)|0)|0);
  $text = ((($arrayidx)) + 8|0);
  $8 = $i;
  $arrayidx5 = (($comp) + (($8*40)|0)|0);
  $places = ((($arrayidx5)) + 16|0);
  $arrayidx6 = ((($places)) + 4|0);
  $9 = HEAP32[$arrayidx6>>2]|0;
  $10 = $last;
  $tobool = ($10|0)!=(0);
  $11 = $ctx$addr;
  $cond = $tobool ? $11 : 2;
  $call7 = (_adv_translate($text,$9,$cond)|0);
  $trans = $call7;
  $12 = $first;
  $tobool8 = ($12|0)!=(0);
  if (!($tobool8)) {
   (_strcat(157576,91432)|0);
  }
  $13 = $trans;
  $tobool10 = ($13|0)!=(0|0);
  if ($tobool10) {
   $14 = $trans;
   (_strcat(157576,$14)|0);
  } else {
   (_strcat(157576,92258)|0);
  }
  $15 = $i;
  $inc = (($15) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return (157576|0);
}
function _split_into_comps($canon,$comp,$ncomp) {
 $canon = $canon|0;
 $comp = $comp|0;
 $ncomp = $ncomp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $arrayidx35 = 0, $arrayidx38 = 0, $arrayidx41 = 0, $arrayidx44 = 0, $arrayidx50 = 0, $arrayidx51 = 0, $arrayidx58 = 0, $buffer = 0, $call16 = 0;
 var $call18 = 0, $call22 = 0, $call26 = 0, $canon$addr = 0, $cmp = 0, $cmp14 = 0, $cmp32 = 0, $cmp48 = 0, $cmp53 = 0, $cmp7 = 0, $cmp8 = 0, $comp$addr = 0, $conv = 0, $conv13 = 0, $conv15 = 0, $dec = 0, $i = 0, $inc = 0, $inc61 = 0, $incdec$ptr = 0;
 var $incdec$ptr11 = 0, $nc = 0, $ncomp$addr = 0, $p = 0, $place = 0, $places = 0, $places37 = 0, $places40 = 0, $places43 = 0, $places57 = 0, $pure_start = 0, $q = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast63 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast64 = 0, $sub$ptr$sub = 0, $sub$ptr$sub65 = 0, $t = 0;
 var $text = 0, $tobool = 0, $tobool17 = 0, $tobool19 = 0, $tobool23 = 0, $tobool27 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $buffer = sp + 40|0;
 $canon$addr = $canon;
 $comp$addr = $comp;
 $ncomp$addr = $ncomp;
 $nc = 0;
 $place = 0;
 $0 = $canon$addr;
 (_strcpy($buffer,$0)|0);
 $p = $buffer;
 while(1) {
  $1 = $p;
  $2 = HEAP8[$1>>0]|0;
  $tobool = ($2<<24>>24)!=(0);
  if (!($tobool)) {
   break;
  }
  $3 = $p;
  $incdec$ptr = ((($3)) + 1|0);
  $p = $incdec$ptr;
 }
 while(1) {
  $4 = $p;
  $cmp = ($4>>>0)>($buffer>>>0);
  if (!($cmp)) {
   break;
  }
  while(1) {
   $5 = $p;
   $cmp7 = ($5>>>0)>($buffer>>>0);
   if (!($cmp7)) {
    break;
   }
   $6 = $p;
   $7 = HEAP8[$6>>0]|0;
   $conv = $7 << 24 >> 24;
   $cmp8 = ($conv|0)!=(43);
   if (!($cmp8)) {
    break;
   }
   $8 = $p;
   $incdec$ptr11 = ((($8)) + -1|0);
   $p = $incdec$ptr11;
  }
  $place = 0;
  $9 = $p;
  $10 = $p;
  $11 = HEAP8[$10>>0]|0;
  $conv13 = $11 << 24 >> 24;
  $cmp14 = ($conv13|0)==(43);
  $conv15 = $cmp14&1;
  $add$ptr = (($9) + ($conv15)|0);
  $q = $add$ptr;
  $12 = $q;
  $call16 = (_strcmp($12,108346)|0);
  $tobool17 = ($call16|0)!=(0);
  do {
   if ($tobool17) {
    $13 = $q;
    $call18 = (_strcmp($13,110725)|0);
    $tobool19 = ($call18|0)!=(0);
    if (!($tobool19)) {
     $place = 3;
     break;
    }
    $14 = $q;
    $call22 = (_strcmp($14,111675)|0);
    $tobool23 = ($call22|0)!=(0);
    if (!($tobool23)) {
     $place = 4;
     break;
    }
    $15 = $q;
    $call26 = (_strcmp($15,112678)|0);
    $tobool27 = ($call26|0)!=(0);
    if (!($tobool27)) {
     $place = 5;
    }
   } else {
    $place = 2;
   }
  } while(0);
  $16 = $place;
  $cmp32 = ($16|0)>(0);
  if ($cmp32) {
   $17 = $comp$addr;
   $places = ((($17)) + 16|0);
   $arrayidx35 = ((($places)) + 4|0);
   $18 = HEAP32[$arrayidx35>>2]|0;
   $t = $18;
   $19 = $comp$addr;
   $places37 = ((($19)) + 16|0);
   $20 = $place;
   $arrayidx38 = (($places37) + ($20<<2)|0);
   $21 = HEAP32[$arrayidx38>>2]|0;
   $22 = $comp$addr;
   $places40 = ((($22)) + 16|0);
   $arrayidx41 = ((($places40)) + 4|0);
   HEAP32[$arrayidx41>>2] = $21;
   $23 = $t;
   $24 = $comp$addr;
   $places43 = ((($24)) + 16|0);
   $25 = $place;
   $arrayidx44 = (($places43) + ($25<<2)|0);
   HEAP32[$arrayidx44>>2] = $23;
   $26 = $p;
   $sub$ptr$lhs$cast = $26;
   $sub$ptr$rhs$cast = $buffer;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $27 = $comp$addr;
   HEAP32[$27>>2] = $sub$ptr$sub;
  } else {
   $28 = $nc;
   $sub = (($28) - 1)|0;
   $i = $sub;
   while(1) {
    $29 = $i;
    $cmp48 = ($29|0)>=(0);
    if (!($cmp48)) {
     break;
    }
    $30 = $comp$addr;
    $31 = $i;
    $add = (($31) + 1)|0;
    $arrayidx50 = (($30) + (($add*40)|0)|0);
    $32 = $comp$addr;
    $33 = $i;
    $arrayidx51 = (($32) + (($33*40)|0)|0);
    dest=$arrayidx50; src=$arrayidx51; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $34 = $i;
    $dec = (($34) + -1)|0;
    $i = $dec;
   }
   $i = 1;
   while(1) {
    $35 = $i;
    $cmp53 = ($35|0)<=(5);
    if (!($cmp53)) {
     break;
    }
    $36 = $i;
    $37 = $comp$addr;
    $places57 = ((($37)) + 16|0);
    $38 = $i;
    $arrayidx58 = (($places57) + ($38<<2)|0);
    HEAP32[$arrayidx58>>2] = $36;
    $39 = $i;
    $inc = (($39) + 1)|0;
    $i = $inc;
   }
   $40 = $nc;
   $inc61 = (($40) + 1)|0;
   $nc = $inc61;
   $41 = $p;
   $sub$ptr$lhs$cast63 = $41;
   $sub$ptr$rhs$cast64 = $buffer;
   $sub$ptr$sub65 = (($sub$ptr$lhs$cast63) - ($sub$ptr$rhs$cast64))|0;
   $42 = $comp$addr;
   HEAP32[$42>>2] = $sub$ptr$sub65;
   $43 = $comp$addr;
   $pure_start = ((($43)) + 4|0);
   HEAP32[$pure_start>>2] = $sub$ptr$sub65;
   $44 = $comp$addr;
   $text = ((($44)) + 8|0);
   $45 = $q;
   (_strcpy($text,$45)|0);
  }
  $46 = $p;
  HEAP8[$46>>0] = 0;
 }
 $47 = $nc;
 $48 = $ncomp$addr;
 HEAP32[$48>>2] = $47;
 STACKTOP = sp;return;
}
function _adv_translate($w,$place,$ctx) {
 $w = $w|0;
 $place = $place|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $arrayidx = 0, $arrayidx18 = 0, $buffer = 0, $buffer1 = 0, $call10 = 0, $call13 = 0, $call19 = 0, $call2 = 0, $call30 = 0, $call34 = 0, $call39 = 0, $call48 = 0, $call58 = 0;
 var $call66 = 0, $call76 = 0, $call84 = 0, $cmp = 0, $cmp25 = 0, $conv = 0, $conv24 = 0, $conv29 = 0, $conv33 = 0, $conv37 = 0, $ctx$addr = 0, $ctx_suf_as_string = 0, $ctx_suffix = 0, $found_full_trans = 0, $incdec$ptr = 0, $incdec$ptr32 = 0, $p = 0, $place$addr = 0, $pos = 0, $q = 0;
 var $retval = 0, $sub = 0, $tobool = 0, $tobool11 = 0, $tobool16 = 0, $tobool21 = 0, $tobool31 = 0, $tobool35 = 0, $tobool40 = 0, $tobool49 = 0, $tobool5 = 0, $tobool61 = 0, $tobool67 = 0, $tobool72 = 0, $tobool77 = 0, $tobool80 = 0, $tobool85 = 0, $trans = 0, $trans1 = 0, $vararg_buffer = 0;
 var $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $w$addr = 0, $w1n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2304|0);
 $vararg_buffer21 = sp + 56|0;
 $vararg_buffer18 = sp + 48|0;
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $w1n = sp + 2176|0;
 $buffer = sp + 1152|0;
 $buffer1 = sp + 128|0;
 $ctx_suffix = sp + 120|0;
 $ctx_suf_as_string = sp + 80|0;
 $w$addr = $w;
 $place$addr = $place;
 $ctx$addr = $ctx;
 ;HEAP8[$ctx_suffix>>0]=HEAP8[91434>>0]|0;HEAP8[$ctx_suffix+1>>0]=HEAP8[91434+1>>0]|0;HEAP8[$ctx_suffix+2>>0]=HEAP8[91434+2>>0]|0;HEAP8[$ctx_suffix+3>>0]=HEAP8[91434+3>>0]|0;
 ;HEAP32[$ctx_suf_as_string>>2]=HEAP32[7728>>2]|0;HEAP32[$ctx_suf_as_string+4>>2]=HEAP32[7728+4>>2]|0;HEAP32[$ctx_suf_as_string+8>>2]=HEAP32[7728+8>>2]|0;HEAP32[$ctx_suf_as_string+12>>2]=HEAP32[7728+12>>2]|0;
 $found_full_trans = 0;
 $0 = $place$addr;
 $cmp = ($0|0)==(0);
 if ($cmp) {
  $place$addr = 1;
  $ctx$addr = 1;
 }
 $1 = $w$addr;
 $2 = $place$addr;
 $3 = $ctx$addr;
 $arrayidx = (($ctx_suffix) + ($3)|0);
 $4 = HEAP8[$arrayidx>>0]|0;
 $conv = $4 << 24 >> 24;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $conv;
 (_sprintf($buffer,91438,$vararg_buffer)|0);
 $call2 = (_translate($buffer)|0);
 $trans = $call2;
 $5 = $trans;
 $tobool = ($5|0)!=(0|0);
 if ($tobool) {
  $found_full_trans = 1;
 }
 $6 = $trans;
 $tobool5 = ($6|0)!=(0|0);
 if (!($tobool5)) {
  $7 = $w$addr;
  $8 = $place$addr;
  HEAP32[$vararg_buffer3>>2] = $7;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $8;
  (_sprintf($buffer,91446,$vararg_buffer3)|0);
  $call10 = (_translate($buffer)|0);
  $trans = $call10;
  $9 = $trans;
  $tobool11 = ($9|0)!=(0|0);
  if (!($tobool11)) {
   $10 = $w$addr;
   $11 = $place$addr;
   $call13 = (_translate_pattern($10,$11,215176)|0);
   $trans = $call13;
  }
 }
 $12 = $trans;
 $tobool16 = ($12|0)!=(0|0);
 if (!($tobool16)) {
  $13 = $w$addr;
  $14 = $place$addr;
  $15 = $ctx$addr;
  $arrayidx18 = (($ctx_suf_as_string) + ($15<<2)|0);
  $16 = HEAP32[$arrayidx18>>2]|0;
  $call19 = (_translate_pattern($13,$14,$16)|0);
  $trans = $call19;
 }
 $17 = $trans;
 $tobool21 = ($17|0)!=(0|0);
 if ($tobool21) {
  $18 = $trans;
  $19 = HEAP8[$18>>0]|0;
  $conv24 = $19 << 24 >> 24;
  $cmp25 = ($conv24|0)==(64);
  if (!($cmp25)) {
   $37 = $w$addr;
   $38 = $place$addr;
   HEAP32[$vararg_buffer11>>2] = $37;
   $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
   HEAP32[$vararg_ptr14>>2] = $38;
   (_sprintf($buffer1,91501,$vararg_buffer11)|0);
   $call48 = (_translate($buffer1)|0);
   $trans1 = $call48;
   $39 = $trans1;
   $tobool49 = ($39|0)!=(0|0);
   if ($tobool49) {
    $40 = $trans1;
    (_strcpy($w1n,$40)|0);
   } else {
    HEAP8[$w1n>>0] = 0;
   }
   $41 = $trans;
   $42 = $ctx$addr;
   $43 = $found_full_trans;
   $call58 = (_fix_trans_in_context($buffer,$41,$42,$w1n,$43)|0);
   (_strcpy(158600,$call58)|0);
   $retval = 158600;
   $65 = $retval;
   STACKTOP = sp;return ($65|0);
  }
  $p = $buffer;
  $20 = $trans;
  $add$ptr = ((($20)) + 1|0);
  $q = $add$ptr;
  while(1) {
   $21 = $q;
   $22 = HEAP8[$21>>0]|0;
   $conv29 = $22 << 24 >> 24;
   $call30 = (_isalpha($conv29)|0);
   $tobool31 = ($call30|0)!=(0);
   if (!($tobool31)) {
    break;
   }
   $23 = $q;
   $incdec$ptr = ((($23)) + 1|0);
   $q = $incdec$ptr;
   $24 = HEAP8[$23>>0]|0;
   $25 = $p;
   $incdec$ptr32 = ((($25)) + 1|0);
   $p = $incdec$ptr32;
   HEAP8[$25>>0] = $24;
  }
  $26 = $p;
  HEAP8[$26>>0] = 0;
  $27 = $q;
  $28 = HEAP8[$27>>0]|0;
  $conv33 = $28 << 24 >> 24;
  $call34 = (_isdigit($conv33)|0);
  $tobool35 = ($call34|0)!=(0);
  if ($tobool35) {
   $29 = $q;
   $30 = HEAP8[$29>>0]|0;
   $conv37 = $30 << 24 >> 24;
   $sub = (($conv37) - 48)|0;
   $pos = $sub;
   $31 = $pos;
   $32 = $ctx$addr;
   $call39 = (_adv_translate($buffer,$31,$32)|0);
   $retval = $call39;
   $65 = $retval;
   STACKTOP = sp;return ($65|0);
  }
  $33 = HEAP32[29726]|0;
  $tobool40 = ($33|0)!=(0);
  if ($tobool40) {
   $34 = HEAP32[7856]|0;
   $35 = $place$addr;
   $36 = $w$addr;
   HEAP32[$vararg_buffer7>>2] = $35;
   $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
   HEAP32[$vararg_ptr10>>2] = $36;
   (_fprintf($34,91452,$vararg_buffer7)|0);
  }
  $retval = 91498;
  $65 = $retval;
  STACKTOP = sp;return ($65|0);
 }
 $44 = HEAP32[29726]|0;
 $tobool61 = ($44|0)!=(0);
 if ($tobool61) {
  $45 = HEAP32[7856]|0;
  HEAP32[$vararg_buffer15>>2] = $buffer;
  (_fprintf($45,91508,$vararg_buffer15)|0);
 }
 $46 = $w$addr;
 $call66 = (_translate($46)|0);
 $trans = $call66;
 $47 = $trans;
 $tobool67 = ($47|0)!=(0|0);
 if ($tobool67) {
  $48 = $trans;
  (_strcpy(158600,$48)|0);
  (_strcat(158600,91498)|0);
  $retval = 158600;
  $65 = $retval;
  STACKTOP = sp;return ($65|0);
 }
 $49 = HEAP32[29726]|0;
 $tobool72 = ($49|0)!=(0);
 if ($tobool72) {
  $50 = HEAP32[7856]|0;
  $51 = $w$addr;
  HEAP32[$vararg_buffer18>>2] = $51;
  (_fprintf($50,91536,$vararg_buffer18)|0);
 }
 $52 = $w$addr;
 $53 = $place$addr;
 $54 = $ctx$addr;
 $call76 = (_attempt_pattern_match($52,$53,$54)|0);
 $trans = $call76;
 $55 = $trans;
 $tobool77 = ($55|0)!=(0|0);
 if ($tobool77) {
  $56 = $trans;
  $retval = $56;
  $65 = $retval;
  STACKTOP = sp;return ($65|0);
 }
 $57 = HEAP32[29726]|0;
 $tobool80 = ($57|0)!=(0);
 if ($tobool80) {
  $58 = HEAP32[7856]|0;
  $59 = $w$addr;
  HEAP32[$vararg_buffer21>>2] = $59;
  (_fprintf($58,91592,$vararg_buffer21)|0);
 }
 $60 = $w$addr;
 $61 = $place$addr;
 $62 = $ctx$addr;
 $call84 = (_translate_unknown($60,$61,$62)|0);
 $trans = $call84;
 $63 = $trans;
 $tobool85 = ($63|0)!=(0|0);
 if ($tobool85) {
  $64 = $trans;
  (_strcpy(158600,$64)|0);
  (_strcat(158600,91498)|0);
  $retval = 158600;
  $65 = $retval;
  STACKTOP = sp;return ($65|0);
 } else {
  (_strcpy(158600,91498)|0);
  $retval = 158600;
  $65 = $retval;
  STACKTOP = sp;return ($65|0);
 }
 return (0)|0;
}
function _translate_pattern($w,$place,$suffix) {
 $w = $w|0;
 $place = $place|0;
 $suffix = $suffix|0;
 var $new_start = 0, $place$addr = 0, $suffix$addr = 0, $w$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $w$addr = $w;
 $place$addr = $place;
 $suffix$addr = $suffix;
 $new_start = 0;
 STACKTOP = sp;return (0|0);
}
function _fix_trans_in_context($src,$trans,$ctx,$w1n,$found_full_trans) {
 $src = $src|0;
 $trans = $trans|0;
 $ctx = $ctx|0;
 $w1n = $w1n|0;
 $found_full_trans = $found_full_trans|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $and = 0;
 var $arrayidx = 0, $arrayidx2 = 0, $call108 = 0, $call16 = 0, $call23 = 0, $call28 = 0, $call37 = 0, $call44 = 0, $call70 = 0, $call74 = 0, $cmp = 0, $conv = 0, $conv5 = 0, $ctx$addr = 0, $found_full_trans$addr = 0, $or$cond = 0, $result = 0, $retval = 0, $src$addr = 0, $tempbuf = 0;
 var $tobool = 0, $tobool119 = 0, $tobool120 = 0, $tobool19 = 0, $tobool32 = 0, $tobool47 = 0, $tobool59 = 0, $trans$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer4 = 0;
 var $vararg_buffer7 = 0, $w1 = 0, $w1n$addr = 0, $wordclass = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1296|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1296|0);
 $vararg_buffer34 = sp + 96|0;
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer28 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $w1 = sp + 1160|0;
 $tempbuf = sp + 136|0;
 $src$addr = $src;
 $trans$addr = $trans;
 $ctx$addr = $ctx;
 $w1n$addr = $w1n;
 $found_full_trans$addr = $found_full_trans;
 $0 = HEAP32[29739]|0;
 $add = (($0) + 1)|0;
 $and = $add & 63;
 HEAP32[29739] = $and;
 $arrayidx = (124808 + ($and<<9)|0);
 $result = $arrayidx;
 $1 = $trans$addr;
 $arrayidx2 = ((($1)) + 1|0);
 $2 = HEAP8[$arrayidx2>>0]|0;
 $conv = $2 << 24 >> 24;
 $cmp = ($conv|0)==(59);
 if (!($cmp)) {
  $51 = $found_full_trans$addr;
  $tobool119 = ($51|0)==(0);
  $52 = HEAP32[29726]|0;
  $tobool120 = ($52|0)!=(0);
  $or$cond = $tobool119 & $tobool120;
  if ($or$cond) {
   $53 = HEAP32[7856]|0;
   $54 = $src$addr;
   HEAP32[$vararg_buffer34>>2] = $54;
   (_fprintf($53,91508,$vararg_buffer34)|0);
  }
  $55 = $trans$addr;
  $retval = $55;
  $56 = $retval;
  STACKTOP = sp;return ($56|0);
 }
 $3 = $trans$addr;
 $4 = HEAP8[$3>>0]|0;
 $conv5 = $4 << 24 >> 24;
 switch ($conv5|0) {
 case 69: case 68:  {
  $wordclass = 0;
  break;
 }
 case 83:  {
  $wordclass = 1;
  break;
 }
 case 65:  {
  $wordclass = 2;
  break;
 }
 case 80:  {
  $wordclass = 3;
  break;
 }
 case 82:  {
  $wordclass = 4;
  break;
 }
 case 73:  {
  $wordclass = 5;
  break;
 }
 default: {
  $5 = HEAP32[29726]|0;
  $tobool = ($5|0)!=(0);
  if ($tobool) {
   $6 = HEAP32[7856]|0;
   $7 = $src$addr;
   HEAP32[$vararg_buffer>>2] = $7;
   (_fprintf($6,91734,$vararg_buffer)|0);
  }
  $retval = 0;
  $56 = $retval;
  STACKTOP = sp;return ($56|0);
 }
 }
 $8 = $trans$addr;
 $add$ptr = ((($8)) + 2|0);
 (_strcpy($w1,$add$ptr)|0);
 $9 = $wordclass;
 L21: do {
  switch ($9|0) {
  case 0:  {
   $10 = $ctx$addr;
   switch ($10|0) {
   case 0:  {
    $11 = $result;
    $call16 = (_make_plural($w1)|0);
    (_strcpy($11,$call16)|0);
    break L21;
    break;
   }
   case 1:  {
    $12 = $w1n$addr;
    $13 = HEAP8[$12>>0]|0;
    $tobool19 = ($13<<24>>24)!=(0);
    $14 = $result;
    if ($tobool19) {
     $15 = $w1n$addr;
     HEAP32[$vararg_buffer1>>2] = $15;
     (_sprintf($14,91785,$vararg_buffer1)|0);
     break L21;
    } else {
     $call23 = (_make_plural($w1)|0);
     HEAP32[$vararg_buffer4>>2] = $call23;
     (_sprintf($14,91785,$vararg_buffer4)|0);
     break L21;
    }
    break;
   }
   case 2:  {
    $16 = $result;
    $call28 = (_basic_trans($w1)|0);
    (_strcpy($16,$call28)|0);
    $17 = $result;
    (_strcat($17,91794)|0);
    break L21;
    break;
   }
   case 3:  {
    $18 = $w1n$addr;
    $19 = HEAP8[$18>>0]|0;
    $tobool32 = ($19<<24>>24)!=(0);
    $20 = $result;
    if ($tobool32) {
     $21 = $w1n$addr;
     (_strcpy($20,$21)|0);
     break L21;
    } else {
     $call37 = (_make_plural($w1)|0);
     (_strcpy($20,$call37)|0);
     break L21;
    }
    break;
   }
   default: {
    break L21;
   }
   }
   break;
  }
  case 1:  {
   $22 = $ctx$addr;
   switch ($22|0) {
   case 0:  {
    $23 = $result;
    $call44 = (_basic_trans($w1)|0);
    (_strcpy($23,$call44)|0);
    break L21;
    break;
   }
   case 1:  {
    $24 = $w1n$addr;
    $25 = HEAP8[$24>>0]|0;
    $tobool47 = ($25<<24>>24)!=(0);
    $26 = $result;
    if ($tobool47) {
     $27 = $w1n$addr;
     HEAP32[$vararg_buffer7>>2] = $27;
     (_sprintf($26,91785,$vararg_buffer7)|0);
     break L21;
    } else {
     HEAP32[$vararg_buffer10>>2] = $w1;
     (_sprintf($26,91785,$vararg_buffer10)|0);
     break L21;
    }
    break;
   }
   case 2:  {
    $28 = $result;
    (_strcpy($28,$w1)|0);
    $29 = $result;
    (_strcat($29,91794)|0);
    break L21;
    break;
   }
   case 3:  {
    $30 = $w1n$addr;
    $31 = HEAP8[$30>>0]|0;
    $tobool59 = ($31<<24>>24)!=(0);
    $32 = $result;
    if ($tobool59) {
     $33 = $w1n$addr;
     (_strcpy($32,$33)|0);
     break L21;
    } else {
     (_strcpy($32,$w1)|0);
     break L21;
    }
    break;
   }
   default: {
    break L21;
   }
   }
   break;
  }
  case 2:  {
   $34 = $ctx$addr;
   switch ($34|0) {
   case 3: case 0:  {
    $35 = $result;
    $call70 = (_append_er($w1)|0);
    (_strcpy($35,$call70)|0);
    break L21;
    break;
   }
   case 2: case 1:  {
    $36 = $result;
    $call74 = (_append_ing($w1)|0);
    (_strcpy($36,$call74)|0);
    break L21;
    break;
   }
   default: {
    break L21;
   }
   }
   break;
  }
  case 3:  {
   $37 = $ctx$addr;
   switch ($37|0) {
   case 0:  {
    $38 = $result;
    HEAP32[$vararg_buffer13>>2] = $w1;
    (_sprintf($38,91799,$vararg_buffer13)|0);
    break L21;
    break;
   }
   case 1:  {
    $39 = $result;
    HEAP32[$vararg_buffer16>>2] = $w1;
    (_sprintf($39,91785,$vararg_buffer16)|0);
    break L21;
    break;
   }
   case 2:  {
    $40 = $result;
    (_strcpy($40,$w1)|0);
    break L21;
    break;
   }
   case 3:  {
    $41 = $result;
    HEAP32[$vararg_buffer19>>2] = $w1;
    (_sprintf($41,91799,$vararg_buffer19)|0);
    break L21;
    break;
   }
   default: {
    break L21;
   }
   }
   break;
  }
  case 4:  {
   $42 = $ctx$addr;
   switch ($42|0) {
   case 0:  {
    $43 = $result;
    HEAP32[$vararg_buffer22>>2] = $w1;
    (_sprintf($43,91811,$vararg_buffer22)|0);
    break L21;
    break;
   }
   case 1:  {
    $44 = $result;
    HEAP32[$vararg_buffer25>>2] = $w1;
    (_sprintf($44,91785,$vararg_buffer25)|0);
    break L21;
    break;
   }
   case 2:  {
    $45 = $result;
    (_strcpy($45,$w1)|0);
    break L21;
    break;
   }
   case 3:  {
    $46 = $result;
    HEAP32[$vararg_buffer28>>2] = $w1;
    (_sprintf($46,91811,$vararg_buffer28)|0);
    break L21;
    break;
   }
   default: {
    break L21;
   }
   }
   break;
  }
  case 5:  {
   $call108 = (_append_ing($w1)|0);
   (_strcpy($tempbuf,$call108)|0);
   $47 = $ctx$addr;
   switch ($47|0) {
   case 3: case 0:  {
    $48 = $result;
    HEAP32[$vararg_buffer31>>2] = $tempbuf;
    (_sprintf($48,91811,$vararg_buffer31)|0);
    break L21;
    break;
   }
   case 2: case 1:  {
    $49 = $result;
    (_strcpy($49,$tempbuf)|0);
    break L21;
    break;
   }
   default: {
    break L21;
   }
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $50 = $result;
 $retval = $50;
 $56 = $retval;
 STACKTOP = sp;return ($56|0);
}
function _attempt_pattern_match($w,$place,$ctx) {
 $w = $w|0;
 $place = $place|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx6 = 0, $call = 0, $call1 = 0, $call18 = 0, $call21 = 0, $call9 = 0, $canon = 0, $cmp = 0, $cmp10 = 0, $cmp12 = 0, $cmp15 = 0, $comp = 0, $ctx$addr = 0, $dec = 0;
 var $dec30 = 0, $gather = 0, $inc = 0, $ncomp = 0, $new_place = 0, $place$addr = 0, $places = 0, $prec = 0, $retval = 0, $suffix = 0, $text = 0, $tobool = 0, $tobool19 = 0, $tobool2 = 0, $tobool22 = 0, $trans = 0, $w$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1328|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1328|0);
 $comp = sp + 24|0;
 $ncomp = sp + 16|0;
 $w$addr = $w;
 $place$addr = $place;
 $ctx$addr = $ctx;
 $0 = $w$addr;
 $call = (_canon_lujvo($0)|0);
 $canon = $call;
 $1 = $canon;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  $retval = 0;
  $25 = $retval;
  STACKTOP = sp;return ($25|0);
 }
 $2 = $canon;
 $call1 = (_strchr($2,43)|0);
 $tobool2 = ($call1|0)!=(0|0);
 if (!($tobool2)) {
  $retval = 0;
  $25 = $retval;
  STACKTOP = sp;return ($25|0);
 }
 $3 = $canon;
 _split_into_comps($3,$comp,$ncomp);
 $4 = HEAP32[$ncomp>>2]|0;
 $cmp = ($4|0)==(1);
 if ($cmp) {
  $places = ((($comp)) + 16|0);
  $5 = $place$addr;
  $arrayidx6 = (($places) + ($5<<2)|0);
  $6 = HEAP32[$arrayidx6>>2]|0;
  $new_place = $6;
  $text = ((($comp)) + 8|0);
  $7 = $new_place;
  $8 = $ctx$addr;
  $call9 = (_adv_translate($text,$7,$8)|0);
  $retval = $call9;
  $25 = $retval;
  STACKTOP = sp;return ($25|0);
 }
 $prec = 5;
 L13: while(1) {
  $9 = $prec;
  $cmp10 = ($9|0)>=(0);
  if (!($cmp10)) {
   label = 19;
   break;
  }
  $suffix = 1;
  while(1) {
   $10 = $suffix;
   $cmp12 = ($10|0)>=(0);
   if (!($cmp12)) {
    break;
   }
   $gather = 1;
   while(1) {
    $11 = $gather;
    $cmp15 = ($11|0)<=(2);
    if (!($cmp15)) {
     break;
    }
    $12 = $prec;
    $13 = $suffix;
    $14 = $gather;
    $15 = $canon;
    $16 = HEAP32[$ncomp>>2]|0;
    $17 = $place$addr;
    $18 = $ctx$addr;
    $call18 = (_lookup_template_match($12,$13,$14,$15,$comp,$16,$17,$18)|0);
    $trans = $call18;
    $19 = $trans;
    $tobool19 = ($19|0)!=(0|0);
    if (!($tobool19)) {
     break;
    }
    $20 = $trans;
    $call21 = (_strcmp($20,91432)|0);
    $tobool22 = ($call21|0)!=(0);
    if ($tobool22) {
     label = 15;
     break L13;
    }
    $22 = $gather;
    $inc = (($22) + 1)|0;
    $gather = $inc;
   }
   $23 = $suffix;
   $dec = (($23) + -1)|0;
   $suffix = $dec;
  }
  $24 = $prec;
  $dec30 = (($24) + -1)|0;
  $prec = $dec30;
 }
 if ((label|0) == 15) {
  $21 = $trans;
  $retval = $21;
  $25 = $retval;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 19) {
  $retval = 0;
  $25 = $retval;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _translate_unknown($w,$place,$ctx) {
 $w = $w|0;
 $place = $place|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call2 = 0, $call26 = 0, $call6 = 0, $cmp = 0, $cmp14 = 0, $cmp18 = 0, $cmp8 = 0, $conv = 0, $conv17 = 0;
 var $count = 0, $ctx$addr = 0, $hyphen_pos = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr12 = 0, $incdec$ptr23 = 0, $incdec$ptr25 = 0, $ltrans = 0, $morf_type = 0, $p = 0, $place$addr = 0, $pwe = 0, $pws = 0, $q = 0, $retval = 0, $tobool = 0, $tobool27 = 0, $w$addr = 0, $word_starts = 0;
 var $xtra = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $xtra = sp + 280|0;
 $word_starts = sp + 24|0;
 $pwe = sp + 16|0;
 $w$addr = $w;
 $place$addr = $place;
 $ctx$addr = $ctx;
 $0 = $w$addr;
 $call = (_strchr($0,43)|0);
 $tobool = ($call|0)!=(0|0);
 if ($tobool) {
  $1 = $w$addr;
  $2 = $place$addr;
  $call1 = (_translate_lujvo($1,$2)|0);
  $retval = $call1;
  $28 = $retval;
  STACKTOP = sp;return ($28|0);
 }
 HEAP32[$pwe>>2] = $word_starts;
 $pws = $word_starts;
 $3 = $w$addr;
 $call2 = (_morf_scan($3,$pwe,$xtra)|0);
 $morf_type = $call2;
 $4 = $morf_type;
 switch ($4|0) {
 case 8: case 10: case 0:  {
  $retval = 0;
  $28 = $retval;
  STACKTOP = sp;return ($28|0);
  break;
 }
 case 7:  {
  $retval = 92258;
  $28 = $retval;
  STACKTOP = sp;return ($28|0);
  break;
 }
 case 1:  {
  $retval = 92258;
  $28 = $retval;
  STACKTOP = sp;return ($28|0);
  break;
 }
 case 2:  {
  $5 = $w$addr;
  $6 = $place$addr;
  $call6 = (_translate_lujvo($5,$6)|0);
  $retval = $call6;
  $28 = $retval;
  STACKTOP = sp;return ($28|0);
  break;
 }
 case 6: case 5: case 4: case 3:  {
  $7 = HEAP32[$xtra>>2]|0;
  $hyphen_pos = $7;
  $8 = $w$addr;
  $p = $8;
  $q = 159624;
  while(1) {
   $9 = $p;
   $10 = $hyphen_pos;
   $cmp = ($9>>>0)<($10>>>0);
   if (!($cmp)) {
    break;
   }
   $11 = $p;
   $12 = HEAP8[$11>>0]|0;
   $conv = $12 << 24 >> 24;
   $cmp8 = ($conv|0)!=(44);
   if ($cmp8) {
    $13 = $p;
    $14 = HEAP8[$13>>0]|0;
    $15 = $q;
    $incdec$ptr = ((($15)) + 1|0);
    $q = $incdec$ptr;
    HEAP8[$15>>0] = $14;
   }
   $16 = $p;
   $incdec$ptr12 = ((($16)) + 1|0);
   $p = $incdec$ptr12;
  }
  $count = 0;
  while(1) {
   $17 = $count;
   $cmp14 = ($17|0)<(2);
   $18 = $p;
   if (!($cmp14)) {
    break;
   }
   $19 = HEAP8[$18>>0]|0;
   $conv17 = $19 << 24 >> 24;
   $cmp18 = ($conv17|0)!=(44);
   if ($cmp18) {
    $20 = $count;
    $inc = (($20) + 1)|0;
    $count = $inc;
   }
   $21 = $p;
   $incdec$ptr23 = ((($21)) + 1|0);
   $p = $incdec$ptr23;
  }
  $incdec$ptr25 = ((($18)) + -1|0);
  $p = $incdec$ptr25;
  $22 = $q;
  HEAP8[$22>>0] = 0;
  $23 = $place$addr;
  $24 = $ctx$addr;
  $call26 = (_translate_fuivla_prefix(159624,$23,$24)|0);
  $ltrans = $call26;
  $25 = $ltrans;
  $tobool27 = ($25|0)!=(0|0);
  if ($tobool27) {
   $26 = $ltrans;
   (_strcpy(159624,$26)|0);
  } else {
   (_strcpy(159624,92258)|0);
  }
  (_strcat(159624,91655)|0);
  $27 = $p;
  (_strcat(159624,$27)|0);
  (_strcat(159624,116386)|0);
  $retval = 159624;
  $28 = $retval;
  STACKTOP = sp;return ($28|0);
  break;
 }
 case 9:  {
  $retval = 91658;
  $28 = $retval;
  STACKTOP = sp;return ($28|0);
  break;
 }
 default: {
  $retval = 92258;
  $28 = $retval;
  STACKTOP = sp;return ($28|0);
 }
 }
 return (0)|0;
}
function _translate_lujvo($word,$place) {
 $word = $word|0;
 $place = $place|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx7 = 0, $arrayidx9 = 0, $call = 0, $call14 = 0, $canon = 0, $cmp = 0, $cmp15 = 0, $cmp5 = 0, $cmp6 = 0, $comp = 0, $cond = 0;
 var $cond13 = 0, $conv = 0, $i = 0, $inc = 0, $last = 0, $ncomp = 0, $place$addr = 0, $places = 0, $result = 0, $retval = 0, $sub = 0, $text = 0, $tobool = 0, $tobool12 = 0, $tobool20 = 0, $tobool8 = 0, $trans = 0, $word$addr = 0, $xplace = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1328|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1328|0);
 $comp = sp + 32|0;
 $ncomp = sp + 24|0;
 $word$addr = $word;
 $place$addr = $place;
 $0 = $word$addr;
 $call = (_canon_lujvo($0)|0);
 $canon = $call;
 $1 = $canon;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  $retval = 92258;
  $24 = $retval;
  STACKTOP = sp;return ($24|0);
 }
 $2 = $canon;
 _split_into_comps($2,$comp,$ncomp);
 $3 = HEAP32[$ncomp>>2]|0;
 $cmp = ($3|0)<(2);
 if ($cmp) {
  $retval = 0;
  $24 = $retval;
  STACKTOP = sp;return ($24|0);
 }
 $4 = HEAP32[29739]|0;
 $add = (($4) + 1)|0;
 $and = $add & 63;
 HEAP32[29739] = $and;
 $arrayidx = (124808 + ($and<<9)|0);
 $result = $arrayidx;
 $5 = $result;
 HEAP8[$5>>0] = 0;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = HEAP32[$ncomp>>2]|0;
  $cmp5 = ($6|0)<($7|0);
  if (!($cmp5)) {
   break;
  }
  $8 = $i;
  $9 = HEAP32[$ncomp>>2]|0;
  $sub = (($9) - 1)|0;
  $cmp6 = ($8|0)==($sub|0);
  $conv = $cmp6&1;
  $last = $conv;
  $10 = $i;
  $arrayidx7 = (($comp) + (($10*40)|0)|0);
  $places = ((($arrayidx7)) + 16|0);
  $11 = $last;
  $tobool8 = ($11|0)!=(0);
  $12 = $place$addr;
  $cond = $tobool8 ? $12 : 1;
  $arrayidx9 = (($places) + ($cond<<2)|0);
  $13 = HEAP32[$arrayidx9>>2]|0;
  $xplace = $13;
  $14 = $i;
  $arrayidx10 = (($comp) + (($14*40)|0)|0);
  $text = ((($arrayidx10)) + 8|0);
  $15 = $xplace;
  $16 = $last;
  $tobool12 = ($16|0)!=(0);
  $cond13 = $tobool12 ? 0 : 2;
  $call14 = (_adv_translate($text,$15,$cond13)|0);
  $trans = $call14;
  $17 = $i;
  $cmp15 = ($17|0)>(0);
  if ($cmp15) {
   $18 = $result;
   (_strcat($18,91432)|0);
  }
  $19 = $trans;
  $tobool20 = ($19|0)!=(0|0);
  $20 = $result;
  if ($tobool20) {
   $21 = $trans;
   (_strcat($20,$21)|0);
  } else {
   (_strcat($20,92258)|0);
  }
  $22 = $i;
  $inc = (($22) + 1)|0;
  $i = $inc;
 }
 $23 = $result;
 $retval = $23;
 $24 = $retval;
 STACKTOP = sp;return ($24|0);
}
function _lookup_template_match($prec,$suffix,$gather,$orig,$comp,$ncomp,$place,$ctx) {
 $prec = $prec|0;
 $suffix = $suffix|0;
 $gather = $gather|0;
 $orig = $orig|0;
 $comp = $comp|0;
 $ncomp = $ncomp|0;
 $place = $place|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr15 = 0, $arrayidx = 0, $arrayidx13 = 0;
 var $arrayidx18 = 0, $arrayidx2 = 0, $arrayidx20 = 0, $arrayidx23 = 0, $arrayidx41 = 0, $arrayidx5 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $buffer = 0, $buffer1 = 0, $call26 = 0, $call34 = 0, $call45 = 0, $call48 = 0, $call56 = 0, $call66 = 0, $cmp = 0, $comp$addr = 0, $conv = 0;
 var $conv42 = 0, $ctx$addr = 0, $ctx_suf_as_string = 0, $cutg = 0, $cuts = 0, $gather$addr = 0, $generic = 0, $got_full_trans = 0, $ncomp$addr = 0, $new_place = 0, $orig$addr = 0, $place$addr = 0, $places = 0, $places19 = 0, $prec$addr = 0, $pure_start = 0, $redir_place = 0, $retval = 0, $specific = 0, $sub = 0;
 var $sub1 = 0, $sub17 = 0, $sub43 = 0, $sub6 = 0, $subst = 0, $suffix$addr = 0, $tobool = 0, $tobool27 = 0, $tobool36 = 0, $tobool49 = 0, $tobool57 = 0, $trans = 0, $trans1 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $w1n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1280|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1280|0);
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $generic = sp + 1152|0;
 $specific = sp + 896|0;
 $buffer = sp + 640|0;
 $ctx_suf_as_string = sp + 64|0;
 $buffer1 = sp + 384|0;
 $w1n = sp + 128|0;
 $prec$addr = $prec;
 $suffix$addr = $suffix;
 $gather$addr = $gather;
 $orig$addr = $orig;
 $comp$addr = $comp;
 $ncomp$addr = $ncomp;
 $place$addr = $place;
 $ctx$addr = $ctx;
 ;HEAP32[$ctx_suf_as_string>>2]=HEAP32[7728>>2]|0;HEAP32[$ctx_suf_as_string+4>>2]=HEAP32[7728+4>>2]|0;HEAP32[$ctx_suf_as_string+8>>2]=HEAP32[7728+8>>2]|0;HEAP32[$ctx_suf_as_string+12>>2]=HEAP32[7728+12>>2]|0;
 $0 = $suffix$addr;
 $tobool = ($0|0)!=(0);
 $1 = $comp$addr;
 if ($tobool) {
  $2 = $ncomp$addr;
  $3 = $gather$addr;
  $sub = (($2) - ($3))|0;
  $arrayidx = (($1) + (($sub*40)|0)|0);
  $pure_start = ((($arrayidx)) + 4|0);
  $4 = HEAP32[$pure_start>>2]|0;
  $cutg = $4;
  $5 = $comp$addr;
  $6 = $ncomp$addr;
  $7 = $gather$addr;
  $sub1 = (($6) - ($7))|0;
  $arrayidx2 = (($5) + (($sub1*40)|0)|0);
  $8 = HEAP32[$arrayidx2>>2]|0;
  $cuts = $8;
  $9 = $orig$addr;
  $10 = $cutg;
  $add$ptr = (($9) + ($10)|0);
  (_strcpy($generic,$add$ptr)|0);
  $11 = $orig$addr;
  $12 = $cuts;
  (_strncpy($specific,$11,$12)|0);
  $13 = $cuts;
  $arrayidx5 = (($specific) + ($13)|0);
  HEAP8[$arrayidx5>>0] = 0;
  $14 = $comp$addr;
  $15 = $ncomp$addr;
  $16 = $gather$addr;
  $sub6 = (($15) - ($16))|0;
  $arrayidx7 = (($14) + (($sub6*40)|0)|0);
  $places = ((($arrayidx7)) + 16|0);
  $17 = $place$addr;
  $arrayidx8 = (($places) + ($17<<2)|0);
  $18 = HEAP32[$arrayidx8>>2]|0;
  $new_place = $18;
 } else {
  $19 = $gather$addr;
  $arrayidx9 = (($1) + (($19*40)|0)|0);
  $20 = HEAP32[$arrayidx9>>2]|0;
  $add = (($20) + 1)|0;
  $cutg = $add;
  $21 = $cutg;
  $cuts = $21;
  $22 = $orig$addr;
  $23 = $cutg;
  (_strncpy($generic,$22,$23)|0);
  $24 = $cutg;
  $arrayidx13 = (($generic) + ($24)|0);
  HEAP8[$arrayidx13>>0] = 0;
  $25 = $orig$addr;
  $26 = $cuts;
  $add$ptr15 = (($25) + ($26)|0);
  (_strcpy($specific,$add$ptr15)|0);
  $27 = $comp$addr;
  $28 = $gather$addr;
  $sub17 = (($28) - 1)|0;
  $arrayidx18 = (($27) + (($sub17*40)|0)|0);
  $places19 = ((($arrayidx18)) + 16|0);
  $29 = $place$addr;
  $arrayidx20 = (($places19) + ($29<<2)|0);
  $30 = HEAP32[$arrayidx20>>2]|0;
  $new_place = $30;
 }
 $31 = $prec$addr;
 $32 = $new_place;
 $33 = $ctx$addr;
 $arrayidx23 = (($ctx_suf_as_string) + ($33<<2)|0);
 $34 = HEAP32[$arrayidx23>>2]|0;
 HEAP32[$vararg_buffer>>2] = $31;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $generic;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $32;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $34;
 (_sprintf($buffer,91665,$vararg_buffer)|0);
 $call26 = (_translate($buffer)|0);
 $trans = $call26;
 $35 = $trans;
 $tobool27 = ($35|0)!=(0|0);
 if ($tobool27) {
  $got_full_trans = 1;
 } else {
  $got_full_trans = 0;
  $36 = $prec$addr;
  $37 = $new_place;
  HEAP32[$vararg_buffer4>>2] = $36;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $generic;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $37;
  (_sprintf($buffer,91677,$vararg_buffer4)|0);
  $call34 = (_translate($buffer)|0);
  $trans = $call34;
 }
 $38 = $trans;
 $tobool36 = ($38|0)!=(0|0);
 if (!($tobool36)) {
  $retval = 0;
  $54 = $retval;
  STACKTOP = sp;return ($54|0);
 }
 $39 = $trans;
 $40 = HEAP8[$39>>0]|0;
 $conv = $40 << 24 >> 24;
 $cmp = ($conv|0)==(64);
 $41 = $trans;
 if ($cmp) {
  $arrayidx41 = ((($41)) + 1|0);
  $42 = HEAP8[$arrayidx41>>0]|0;
  $conv42 = $42 << 24 >> 24;
  $sub43 = (($conv42) - 48)|0;
  $redir_place = $sub43;
  $43 = $redir_place;
  $44 = $ctx$addr;
  $call45 = (_adv_translate($specific,$43,$44)|0);
  $retval = $call45;
  $54 = $retval;
  STACKTOP = sp;return ($54|0);
 }
 $call48 = (_subst_base_in_pattern($41,$specific)|0);
 $subst = $call48;
 $45 = $got_full_trans;
 $tobool49 = ($45|0)!=(0);
 if ($tobool49) {
  $46 = $subst;
  $retval = $46;
  $54 = $retval;
  STACKTOP = sp;return ($54|0);
 }
 $47 = $prec$addr;
 $48 = $new_place;
 HEAP32[$vararg_buffer9>>2] = $47;
 $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
 HEAP32[$vararg_ptr12>>2] = $generic;
 $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
 HEAP32[$vararg_ptr13>>2] = $48;
 (_sprintf($buffer1,91687,$vararg_buffer9)|0);
 $call56 = (_translate($buffer1)|0);
 $trans1 = $call56;
 $49 = $trans1;
 $tobool57 = ($49|0)!=(0|0);
 if ($tobool57) {
  $50 = $trans1;
  (_strcpy($w1n,$50)|0);
 } else {
  HEAP8[$w1n>>0] = 0;
 }
 $51 = $subst;
 $52 = $ctx$addr;
 $53 = $got_full_trans;
 $call66 = (_fix_trans_in_context($buffer,$51,$52,$w1n,$53)|0);
 $retval = $call66;
 $54 = $retval;
 STACKTOP = sp;return ($54|0);
}
function _subst_base_in_pattern($trans,$base) {
 $trans = $trans|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $arrayidx = 0, $base$addr = 0, $call11 = 0, $cmp = 0, $context = 0, $conv = 0, $conv3 = 0, $conv5 = 0, $ctx = 0;
 var $incdec$ptr = 0, $incdec$ptr15 = 0, $incdec$ptr16 = 0, $incdec$ptr17 = 0, $incdec$ptr19 = 0, $incdec$ptr4 = 0, $localtrans = 0, $p = 0, $place = 0, $q = 0, $r = 0, $result = 0, $sub = 0, $tobool = 0, $tobool13 = 0, $tobool9 = 0, $trans$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $trans$addr = $trans;
 $base$addr = $base;
 $0 = HEAP32[29739]|0;
 $add = (($0) + 1)|0;
 $and = $add & 63;
 HEAP32[29739] = $and;
 $arrayidx = (124808 + ($and<<9)|0);
 $result = $arrayidx;
 $1 = $result;
 $q = $1;
 $2 = $trans$addr;
 $p = $2;
 while(1) {
  $3 = $p;
  $4 = HEAP8[$3>>0]|0;
  $tobool = ($4<<24>>24)!=(0);
  if (!($tobool)) {
   break;
  }
  $5 = $p;
  $6 = HEAP8[$5>>0]|0;
  $conv = $6 << 24 >> 24;
  $cmp = ($conv|0)==(37);
  $7 = $p;
  $incdec$ptr = ((($7)) + 1|0);
  $p = $incdec$ptr;
  if (!($cmp)) {
   $25 = HEAP8[$7>>0]|0;
   $26 = $q;
   $incdec$ptr19 = ((($26)) + 1|0);
   $q = $incdec$ptr19;
   HEAP8[$26>>0] = $25;
   continue;
  }
  $8 = HEAP8[$incdec$ptr>>0]|0;
  $conv3 = $8 << 24 >> 24;
  $sub = (($conv3) - 48)|0;
  $place = $sub;
  $9 = $p;
  $incdec$ptr4 = ((($9)) + 1|0);
  $p = $incdec$ptr4;
  $10 = HEAP8[$incdec$ptr4>>0]|0;
  $context = $10;
  $11 = $context;
  $conv5 = $11 << 24 >> 24;
  switch ($conv5|0) {
  case 110:  {
   $ctx = 0;
   break;
  }
  case 118:  {
   $ctx = 1;
   break;
  }
  case 113:  {
   $ctx = 2;
   break;
  }
  case 116:  {
   $ctx = 3;
   break;
  }
  default: {
   $ctx = 0;
   $12 = HEAP32[29726]|0;
   $tobool9 = ($12|0)!=(0);
   if ($tobool9) {
    $13 = HEAP32[7856]|0;
    $14 = $trans$addr;
    HEAP32[$vararg_buffer>>2] = $14;
    (_fprintf($13,91698,$vararg_buffer)|0);
   }
  }
  }
  $15 = $base$addr;
  $16 = $place;
  $17 = $ctx;
  $call11 = (_adv_translate($15,$16,$17)|0);
  $localtrans = $call11;
  $18 = $localtrans;
  $r = $18;
  while(1) {
   $19 = $r;
   $20 = HEAP8[$19>>0]|0;
   $tobool13 = ($20<<24>>24)!=(0);
   if (!($tobool13)) {
    break;
   }
   $21 = $r;
   $incdec$ptr15 = ((($21)) + 1|0);
   $r = $incdec$ptr15;
   $22 = HEAP8[$21>>0]|0;
   $23 = $q;
   $incdec$ptr16 = ((($23)) + 1|0);
   $q = $incdec$ptr16;
   HEAP8[$23>>0] = $22;
  }
  $24 = $p;
  $incdec$ptr17 = ((($24)) + 1|0);
  $p = $incdec$ptr17;
 }
 $27 = $q;
 HEAP8[$27>>0] = 0;
 $28 = $result;
 STACKTOP = sp;return ($28|0);
}
function _make_plural($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add5 = 0, $and = 0, $and6 = 0, $arrayidx = 0, $arrayidx2 = 0;
 var $arrayidx24 = 0, $arrayidx28 = 0, $arrayidx34 = 0, $arrayidx45 = 0, $arrayidx51 = 0, $arrayidx62 = 0, $arrayidx68 = 0, $arrayidx7 = 0, $call = 0, $call12 = 0, $call14 = 0, $call17 = 0, $call21 = 0, $call3 = 0, $call70 = 0, $cmp = 0, $cmp22 = 0, $cmp25 = 0, $cmp30 = 0, $cmp36 = 0;
 var $cmp41 = 0, $cmp47 = 0, $cmp53 = 0, $cmp58 = 0, $cmp64 = 0, $conv = 0, $conv29 = 0, $conv35 = 0, $conv46 = 0, $conv52 = 0, $conv63 = 0, $conv69 = 0, $head = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $incdec$ptr9 = 0, $n = 0, $p = 0, $q = 0, $result = 0;
 var $result2 = 0, $retval = 0, $star_pos = 0, $sub = 0, $sub27 = 0, $sub33 = 0, $sub44 = 0, $sub50 = 0, $sub61 = 0, $sub67 = 0, $tobool = 0, $tobool15 = 0, $tobool4 = 0, $tobool71 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $x$addr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1088|0);
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $head = sp + 64|0;
 $x$addr = $x;
 $0 = HEAP32[29739]|0;
 $add = (($0) + 1)|0;
 $and = $add & 63;
 HEAP32[29739] = $and;
 $arrayidx = (124808 + ($and<<9)|0);
 $result = $arrayidx;
 $1 = $x$addr;
 $call = (_strchr($1,42)|0);
 $star_pos = $call;
 $2 = $star_pos;
 $tobool = ($2|0)!=(0|0);
 if ($tobool) {
  $3 = $star_pos;
  $arrayidx2 = ((($3)) + 1|0);
  $4 = HEAP8[$arrayidx2>>0]|0;
  $call3 = (_is_ok_after_star($4)|0);
  $tobool4 = ($call3|0)!=(0);
  if ($tobool4) {
   $5 = HEAP32[29739]|0;
   $add5 = (($5) + 1)|0;
   $and6 = $add5 & 63;
   HEAP32[29739] = $and6;
   $arrayidx7 = (124808 + ($and6<<9)|0);
   $result2 = $arrayidx7;
   $6 = $x$addr;
   $p = $6;
   $q = $head;
   while(1) {
    $7 = $p;
    $8 = $star_pos;
    $cmp = ($7>>>0)<($8>>>0);
    if (!($cmp)) {
     break;
    }
    $9 = $p;
    $incdec$ptr = ((($9)) + 1|0);
    $p = $incdec$ptr;
    $10 = HEAP8[$9>>0]|0;
    $11 = $q;
    $incdec$ptr9 = ((($11)) + 1|0);
    $q = $incdec$ptr9;
    HEAP8[$11>>0] = $10;
   }
   $12 = $q;
   HEAP8[$12>>0] = 0;
   $13 = $p;
   $incdec$ptr10 = ((($13)) + 1|0);
   $p = $incdec$ptr10;
   $14 = $result2;
   $call12 = (_make_plural($head)|0);
   (_strcpy($14,$call12)|0);
   $15 = $p;
   $call14 = (_strchr($15,42)|0);
   $tobool15 = ($call14|0)!=(0|0);
   $16 = $result2;
   $17 = $p;
   if ($tobool15) {
    $call17 = (_make_plural($17)|0);
    (_strcat($16,$call17)|0);
   } else {
    (_strcat($16,$17)|0);
   }
   $18 = $result2;
   $retval = $18;
   $53 = $retval;
   STACKTOP = sp;return ($53|0);
  }
 }
 $19 = $x$addr;
 $call21 = (_strlen($19)|0);
 $n = $call21;
 $20 = $n;
 $cmp22 = ($20|0)>(0);
 do {
  if ($cmp22) {
   $21 = $x$addr;
   $22 = $n;
   $sub = (($22) - 1)|0;
   $arrayidx24 = (($21) + ($sub)|0);
   $23 = HEAP8[$arrayidx24>>0]|0;
   $conv = $23 << 24 >> 24;
   $cmp25 = ($conv|0)==(115);
   if (!($cmp25)) {
    $24 = $x$addr;
    $25 = $n;
    $sub27 = (($25) - 1)|0;
    $arrayidx28 = (($24) + ($sub27)|0);
    $26 = HEAP8[$arrayidx28>>0]|0;
    $conv29 = $26 << 24 >> 24;
    $cmp30 = ($conv29|0)==(122);
    if (!($cmp30)) {
     $27 = $x$addr;
     $28 = $n;
     $sub33 = (($28) - 1)|0;
     $arrayidx34 = (($27) + ($sub33)|0);
     $29 = HEAP8[$arrayidx34>>0]|0;
     $conv35 = $29 << 24 >> 24;
     $cmp36 = ($conv35|0)==(120);
     if (!($cmp36)) {
      label = 15;
      break;
     }
    }
   }
   $30 = $result;
   $31 = $x$addr;
   HEAP32[$vararg_buffer>>2] = $31;
   (_sprintf($30,91881,$vararg_buffer)|0);
  } else {
   label = 15;
  }
 } while(0);
 do {
  if ((label|0) == 15) {
   $32 = $n;
   $cmp41 = ($32|0)>(1);
   if ($cmp41) {
    $33 = $x$addr;
    $34 = $n;
    $sub44 = (($34) - 1)|0;
    $arrayidx45 = (($33) + ($sub44)|0);
    $35 = HEAP8[$arrayidx45>>0]|0;
    $conv46 = $35 << 24 >> 24;
    $cmp47 = ($conv46|0)==(104);
    if ($cmp47) {
     $36 = $x$addr;
     $37 = $n;
     $sub50 = (($37) - 2)|0;
     $arrayidx51 = (($36) + ($sub50)|0);
     $38 = HEAP8[$arrayidx51>>0]|0;
     $conv52 = $38 << 24 >> 24;
     $cmp53 = ($conv52|0)==(99);
     if ($cmp53) {
      $39 = $result;
      $40 = $x$addr;
      HEAP32[$vararg_buffer1>>2] = $40;
      (_sprintf($39,91881,$vararg_buffer1)|0);
      break;
     }
    }
   }
   $41 = $n;
   $cmp58 = ($41|0)>(1);
   if ($cmp58) {
    $42 = $x$addr;
    $43 = $n;
    $sub61 = (($43) - 1)|0;
    $arrayidx62 = (($42) + ($sub61)|0);
    $44 = HEAP8[$arrayidx62>>0]|0;
    $conv63 = $44 << 24 >> 24;
    $cmp64 = ($conv63|0)==(121);
    if ($cmp64) {
     $45 = $x$addr;
     $46 = $n;
     $sub67 = (($46) - 2)|0;
     $arrayidx68 = (($45) + ($sub67)|0);
     $47 = HEAP8[$arrayidx68>>0]|0;
     $conv69 = $47 << 24 >> 24;
     $call70 = (_strchr(91888,$conv69)|0);
     $tobool71 = ($call70|0)!=(0|0);
     if ($tobool71) {
      $48 = $result;
      $49 = $x$addr;
      HEAP32[$vararg_buffer4>>2] = $49;
      (_sprintf($48,91909,$vararg_buffer4)|0);
      break;
     }
    }
   }
   $50 = $result;
   $51 = $x$addr;
   HEAP32[$vararg_buffer7>>2] = $51;
   (_sprintf($50,91917,$vararg_buffer7)|0);
  }
 } while(0);
 $52 = $result;
 $retval = $52;
 $53 = $retval;
 STACKTOP = sp;return ($53|0);
}
function _basic_trans($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $arrayidx = 0, $arrayidx4 = 0, $call = 0;
 var $cmp = 0, $conv = 0, $conv5 = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $p = 0, $q = 0, $result = 0, $tobool = 0, $tobool6 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = HEAP32[29739]|0;
 $add = (($0) + 1)|0;
 $and = $add & 63;
 HEAP32[29739] = $and;
 $arrayidx = (124808 + ($and<<9)|0);
 $result = $arrayidx;
 $1 = $x$addr;
 $p = $1;
 $2 = $result;
 $q = $2;
 while(1) {
  $3 = $p;
  $4 = HEAP8[$3>>0]|0;
  $tobool = ($4<<24>>24)!=(0);
  if (!($tobool)) {
   break;
  }
  $5 = $p;
  $6 = HEAP8[$5>>0]|0;
  $conv = $6 << 24 >> 24;
  $cmp = ($conv|0)!=(42);
  if ($cmp) {
   label = 5;
  } else {
   $7 = $p;
   $arrayidx4 = ((($7)) + 1|0);
   $8 = HEAP8[$arrayidx4>>0]|0;
   $conv5 = $8 << 24 >> 24;
   $call = (_isspace($conv5)|0);
   $tobool6 = ($call|0)!=(0);
   if (!($tobool6)) {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $9 = $p;
   $10 = HEAP8[$9>>0]|0;
   $11 = $q;
   $incdec$ptr = ((($11)) + 1|0);
   $q = $incdec$ptr;
   HEAP8[$11>>0] = $10;
  }
  $12 = $p;
  $incdec$ptr7 = ((($12)) + 1|0);
  $p = $incdec$ptr7;
 }
 $13 = $q;
 HEAP8[$13>>0] = 0;
 $14 = $result;
 STACKTOP = sp;return ($14|0);
}
function _append_er($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $arrayidx = 0, $arrayidx25 = 0, $arrayidx3 = 0, $call = 0, $call1 = 0, $call10 = 0, $call14 = 0, $call17 = 0, $call22 = 0, $call8 = 0;
 var $cmp = 0, $cmp23 = 0, $cmp26 = 0, $conv = 0, $head = 0, $incdec$ptr = 0, $incdec$ptr5 = 0, $incdec$ptr6 = 0, $n = 0, $p = 0, $q = 0, $result2 = 0, $retval = 0, $star_pos = 0, $sub = 0, $tobool = 0, $tobool11 = 0, $tobool15 = 0, $tobool2 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1072|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $head = sp + 40|0;
 $x$addr = $x;
 $0 = $x$addr;
 $call = (_strchr($0,42)|0);
 $star_pos = $call;
 $1 = $star_pos;
 $tobool = ($1|0)!=(0|0);
 if ($tobool) {
  $2 = $star_pos;
  $arrayidx = ((($2)) + 1|0);
  $3 = HEAP8[$arrayidx>>0]|0;
  $call1 = (_is_ok_after_star($3)|0);
  $tobool2 = ($call1|0)!=(0);
  if ($tobool2) {
   $4 = HEAP32[29739]|0;
   $add = (($4) + 1)|0;
   $and = $add & 63;
   HEAP32[29739] = $and;
   $arrayidx3 = (124808 + ($and<<9)|0);
   $result2 = $arrayidx3;
   $5 = $x$addr;
   $p = $5;
   $q = $head;
   while(1) {
    $6 = $p;
    $7 = $star_pos;
    $cmp = ($6>>>0)<($7>>>0);
    if (!($cmp)) {
     break;
    }
    $8 = $p;
    $incdec$ptr = ((($8)) + 1|0);
    $p = $incdec$ptr;
    $9 = HEAP8[$8>>0]|0;
    $10 = $q;
    $incdec$ptr5 = ((($10)) + 1|0);
    $q = $incdec$ptr5;
    HEAP8[$10>>0] = $9;
   }
   $11 = $q;
   HEAP8[$11>>0] = 0;
   $12 = $p;
   $incdec$ptr6 = ((($12)) + 1|0);
   $p = $incdec$ptr6;
   $13 = $result2;
   $call8 = (_append_er($head)|0);
   (_strcpy($13,$call8)|0);
   $14 = $p;
   $call10 = (_starts_with_preposition($14)|0);
   $tobool11 = ($call10|0)!=(0);
   if (!($tobool11)) {
    $15 = $result2;
    (_strcat($15,91841)|0);
   }
   $16 = $p;
   $call14 = (_strchr($16,42)|0);
   $tobool15 = ($call14|0)!=(0|0);
   $17 = $result2;
   $18 = $p;
   if ($tobool15) {
    $call17 = (_append_er($18)|0);
    (_strcat($17,$call17)|0);
   } else {
    (_strcat($17,$18)|0);
   }
   $19 = $result2;
   $retval = $19;
   $27 = $retval;
   STACKTOP = sp;return ($27|0);
  }
 }
 $20 = $x$addr;
 $call22 = (_strlen($20)|0);
 $n = $call22;
 $21 = $n;
 $cmp23 = ($21|0)>(0);
 if ($cmp23) {
  $22 = $x$addr;
  $23 = $n;
  $sub = (($23) - 1)|0;
  $arrayidx25 = (($22) + ($sub)|0);
  $24 = HEAP8[$arrayidx25>>0]|0;
  $conv = $24 << 24 >> 24;
  $cmp26 = ($conv|0)==(101);
  if ($cmp26) {
   $25 = $x$addr;
   HEAP32[$vararg_buffer>>2] = $25;
   (_sprintf(161800,91845,$vararg_buffer)|0);
  } else {
   label = 15;
  }
 } else {
  label = 15;
 }
 if ((label|0) == 15) {
  $26 = $x$addr;
  HEAP32[$vararg_buffer1>>2] = $26;
  (_sprintf(161800,91853,$vararg_buffer1)|0);
 }
 $retval = 161800;
 $27 = $retval;
 STACKTOP = sp;return ($27|0);
}
function _append_ing($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $arrayidx = 0, $arrayidx20 = 0, $arrayidx25 = 0, $arrayidx3 = 0, $arrayidx33 = 0, $call = 0, $call1 = 0;
 var $call10 = 0, $call13 = 0, $call17 = 0, $call27 = 0, $call8 = 0, $cmp = 0, $cmp18 = 0, $cmp21 = 0, $conv = 0, $conv26 = 0, $head = 0, $incdec$ptr = 0, $incdec$ptr5 = 0, $incdec$ptr6 = 0, $n = 0, $p = 0, $q = 0, $result2 = 0, $retval = 0, $star_pos = 0;
 var $sub = 0, $sub24 = 0, $sub30 = 0, $sub32 = 0, $tobool = 0, $tobool11 = 0, $tobool2 = 0, $tobool28 = 0, $vararg_buffer = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $vararg_buffer = sp;
 $head = sp + 32|0;
 $x$addr = $x;
 $0 = $x$addr;
 $call = (_strchr($0,42)|0);
 $star_pos = $call;
 $1 = $star_pos;
 $tobool = ($1|0)!=(0|0);
 if ($tobool) {
  $2 = $star_pos;
  $arrayidx = ((($2)) + 1|0);
  $3 = HEAP8[$arrayidx>>0]|0;
  $call1 = (_is_ok_after_star($3)|0);
  $tobool2 = ($call1|0)!=(0);
  if ($tobool2) {
   $4 = HEAP32[29739]|0;
   $add = (($4) + 1)|0;
   $and = $add & 63;
   HEAP32[29739] = $and;
   $arrayidx3 = (124808 + ($and<<9)|0);
   $result2 = $arrayidx3;
   $5 = $x$addr;
   $p = $5;
   $q = $head;
   while(1) {
    $6 = $p;
    $7 = $star_pos;
    $cmp = ($6>>>0)<($7>>>0);
    if (!($cmp)) {
     break;
    }
    $8 = $p;
    $incdec$ptr = ((($8)) + 1|0);
    $p = $incdec$ptr;
    $9 = HEAP8[$8>>0]|0;
    $10 = $q;
    $incdec$ptr5 = ((($10)) + 1|0);
    $q = $incdec$ptr5;
    HEAP8[$10>>0] = $9;
   }
   $11 = $q;
   HEAP8[$11>>0] = 0;
   $12 = $p;
   $incdec$ptr6 = ((($12)) + 1|0);
   $p = $incdec$ptr6;
   $13 = $result2;
   $call8 = (_append_ing($head)|0);
   (_strcpy($13,$call8)|0);
   $14 = $p;
   $call10 = (_strchr($14,42)|0);
   $tobool11 = ($call10|0)!=(0|0);
   $15 = $result2;
   $16 = $p;
   if ($tobool11) {
    $call13 = (_append_ing($16)|0);
    (_strcat($15,$call13)|0);
   } else {
    (_strcat($15,$16)|0);
   }
   $17 = $result2;
   $retval = $17;
   $30 = $retval;
   STACKTOP = sp;return ($30|0);
  }
 }
 $18 = $x$addr;
 $call17 = (_strlen($18)|0);
 $n = $call17;
 $19 = $n;
 $cmp18 = ($19|0)>(1);
 if ($cmp18) {
  $20 = $x$addr;
  $21 = $n;
  $sub = (($21) - 1)|0;
  $arrayidx20 = (($20) + ($sub)|0);
  $22 = HEAP8[$arrayidx20>>0]|0;
  $conv = $22 << 24 >> 24;
  $cmp21 = ($conv|0)==(101);
  if ($cmp21) {
   $23 = $x$addr;
   $24 = $n;
   $sub24 = (($24) - 2)|0;
   $arrayidx25 = (($23) + ($sub24)|0);
   $25 = HEAP8[$arrayidx25>>0]|0;
   $conv26 = $25 << 24 >> 24;
   $call27 = (_strchr(91823,$conv26)|0);
   $tobool28 = ($call27|0)!=(0|0);
   if ($tobool28) {
    label = 14;
   } else {
    $26 = $x$addr;
    $27 = $n;
    $sub30 = (($27) - 1)|0;
    (_strncpy(161672,$26,$sub30)|0);
    $28 = $n;
    $sub32 = (($28) - 1)|0;
    $arrayidx33 = (161672 + ($sub32)|0);
    HEAP8[$arrayidx33>>0] = 0;
    (_strcat(161672,91829)|0);
   }
  } else {
   label = 14;
  }
 } else {
  label = 14;
 }
 if ((label|0) == 14) {
  $29 = $x$addr;
  HEAP32[$vararg_buffer>>2] = $29;
  (_sprintf(161672,91834,$vararg_buffer)|0);
 }
 $retval = 161672;
 $30 = $retval;
 STACKTOP = sp;return ($30|0);
}
function _is_ok_after_star($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $cmp = 0, $conv = 0, $conv2 = 0, $lor$ext = 0, $tobool = 0, $tobool1 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $tobool = ($0<<24>>24)!=(0);
 if ($tobool) {
  $1 = $x$addr;
  $conv = $1 << 24 >> 24;
  $call = (_isspace($conv)|0);
  $tobool1 = ($call|0)!=(0);
  if ($tobool1) {
   $3 = 1;
  } else {
   $2 = $x$addr;
   $conv2 = $2 << 24 >> 24;
   $cmp = ($conv2|0)==(47);
   $3 = $cmp;
  }
 } else {
  $3 = 1;
 }
 $lor$ext = $3&1;
 STACKTOP = sp;return ($lor$ext|0);
}
function _starts_with_preposition($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $call1 = 0, $call3 = 0, $call6 = 0, $call9 = 0, $conv = 0, $incdec$ptr = 0, $retval = 0, $tobool = 0, $tobool10 = 0, $tobool2 = 0, $tobool4 = 0;
 var $tobool7 = 0, $x$addr = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $y = $0;
 while(1) {
  $1 = $y;
  $2 = HEAP8[$1>>0]|0;
  $conv = $2 << 24 >> 24;
  $call = (_isspace($conv)|0);
  $tobool = ($call|0)!=(0);
  $3 = $y;
  if (!($tobool)) {
   break;
  }
  $incdec$ptr = ((($3)) + 1|0);
  $y = $incdec$ptr;
 }
 $call1 = (_strncmp($3,91862,2)|0);
 $tobool2 = ($call1|0)!=(0);
 if ($tobool2) {
  $4 = $y;
  $call3 = (_strncmp($4,91865,2)|0);
  $tobool4 = ($call3|0)!=(0);
  if ($tobool4) {
   $5 = $y;
   $call6 = (_strncmp($5,91868,4)|0);
   $tobool7 = ($call6|0)!=(0);
   if ($tobool7) {
    $6 = $y;
    $call9 = (_strncmp($6,91873,7)|0);
    $tobool10 = ($call9|0)!=(0);
    if ($tobool10) {
     $retval = 0;
     $7 = $retval;
     STACKTOP = sp;return ($7|0);
    }
   }
  }
 }
 $retval = 1;
 $7 = $retval;
 STACKTOP = sp;return ($7|0);
}
function _stag_next_state($current_state,$next_token) {
 $current_state = $current_state|0;
 $next_token = $next_token|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add = 0, $add7 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx20 = 0, $arrayidx23 = 0, $arrayidx8 = 0, $cmp = 0, $cmp10 = 0, $cmp12 = 0, $cmp16 = 0, $cmp4 = 0, $conv = 0, $conv2 = 0, $conv21 = 0, $conv24 = 0, $conv9 = 0, $current_state$addr = 0;
 var $h = 0, $l = 0, $m = 0, $next_token$addr = 0, $retval = 0, $shr = 0, $xm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $current_state$addr = $current_state;
 $next_token$addr = $next_token;
 L1: while(1) {
  $0 = $current_state$addr;
  $cmp = ($0|0)>=(0);
  if (!($cmp)) {
   label = 11;
   break;
  }
  $1 = $current_state$addr;
  $arrayidx = (41194 + ($1<<1)|0);
  $2 = HEAP16[$arrayidx>>1]|0;
  $conv = $2&65535;
  $l = $conv;
  $3 = $current_state$addr;
  $add = (($3) + 1)|0;
  $arrayidx1 = (41194 + ($add<<1)|0);
  $4 = HEAP16[$arrayidx1>>1]|0;
  $conv2 = $4&65535;
  $h = $conv2;
  while(1) {
   $5 = $h;
   $6 = $l;
   $cmp4 = ($5|0)>($6|0);
   if (!($cmp4)) {
    break;
   }
   $7 = $h;
   $8 = $l;
   $add7 = (($7) + ($8))|0;
   $shr = $add7 >> 1;
   $m = $shr;
   $9 = $m;
   $arrayidx8 = (91923 + ($9)|0);
   $10 = HEAP8[$arrayidx8>>0]|0;
   $conv9 = $10&255;
   $xm = $conv9;
   $11 = $xm;
   $12 = $next_token$addr;
   $cmp10 = ($11|0)==($12|0);
   $13 = $m;
   if ($cmp10) {
    label = 12;
    break L1;
   }
   $14 = $l;
   $cmp12 = ($13|0)==($14|0);
   if ($cmp12) {
    break;
   }
   $15 = $xm;
   $16 = $next_token$addr;
   $cmp16 = ($15|0)>($16|0);
   $17 = $m;
   if ($cmp16) {
    $h = $17;
    continue;
   } else {
    $l = $17;
    continue;
   }
  }
  $18 = $current_state$addr;
  $arrayidx20 = (41288 + ($18<<1)|0);
  $19 = HEAP16[$arrayidx20>>1]|0;
  $conv21 = $19 << 16 >> 16;
  $current_state$addr = $conv21;
 }
 if ((label|0) == 11) {
  $retval = -1;
  $21 = $retval;
  STACKTOP = sp;return ($21|0);
 }
 else if ((label|0) == 12) {
  $arrayidx23 = (41380 + ($13<<1)|0);
  $20 = HEAP16[$arrayidx23>>1]|0;
  $conv24 = $20 << 16 >> 16;
  $retval = $conv24;
  $21 = $retval;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _dict_lookup($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $arrayidx = 0, $arrayidx14 = 0, $call = 0, $cmp = 0, $cmp11 = 0, $cmp3 = 0, $cmp5 = 0, $cmp8 = 0, $h = 0, $key$addr = 0, $l = 0, $m = 0, $r = 0, $retval = 0, $shr = 0, $tobool = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $key$addr = $key;
 $0 = HEAP32[29740]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  _init();
 }
 $1 = HEAP32[29740]|0;
 $cmp = ($1|0)<(0);
 if ($cmp) {
  $retval = 0;
  $19 = $retval;
  STACKTOP = sp;return ($19|0);
 }
 $l = 0;
 $2 = HEAP32[29741]|0;
 $h = $2;
 while(1) {
  $3 = $h;
  $4 = $l;
  $cmp3 = ($3|0)>($4|0);
  if (!($cmp3)) {
   label = 12;
   break;
  }
  $5 = $h;
  $6 = $l;
  $add = (($5) + ($6))|0;
  $shr = $add >> 1;
  $m = $shr;
  $7 = $key$addr;
  $8 = HEAP32[29742]|0;
  $9 = $m;
  $arrayidx = (($8) + ($9<<3)|0);
  $10 = HEAP32[$arrayidx>>2]|0;
  $call = (_strcmp($7,$10)|0);
  $r = $call;
  $11 = $r;
  $cmp5 = ($11|0)==(0);
  if ($cmp5) {
   label = 13;
   break;
  }
  $12 = $m;
  $13 = $l;
  $cmp8 = ($12|0)==($13|0);
  if ($cmp8) {
   label = 12;
   break;
  }
  $14 = $r;
  $cmp11 = ($14|0)<(0);
  $15 = $m;
  if ($cmp11) {
   $h = $15;
   continue;
  } else {
   $l = $15;
   continue;
  }
 }
 if ((label|0) == 12) {
  $retval = 0;
  $19 = $retval;
  STACKTOP = sp;return ($19|0);
 }
 else if ((label|0) == 13) {
  $16 = HEAP32[29742]|0;
  $17 = $m;
  $arrayidx14 = (($16) + ($17<<3)|0);
  $val = ((($arrayidx14)) + 4|0);
  $18 = HEAP32[$val>>2]|0;
  $retval = $18;
  $19 = $retval;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call$ = 0, $call3 = 0, $dname = 0, $in = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[29740]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 HEAP32[29740] = 1;
 $call = (_getenv((92125|0))|0);
 $dname = $call;
 $1 = $dname;
 $tobool1 = ($1|0)!=(0|0);
 $call$ = $tobool1 ? $call : 92144;
 $dname = $call$;
 $2 = $dname;
 $call3 = (_fopen($2,92157)|0);
 $in = $call3;
 $3 = $in;
 $tobool4 = ($3|0)!=(0|0);
 if ($tobool4) {
  $4 = $in;
  _read_database($4);
  $5 = $in;
  (_fclose($5)|0);
  STACKTOP = sp;return;
 } else {
  HEAP32[29740] = -1;
  STACKTOP = sp;return;
 }
}
function _read_database($in) {
 $in = $in|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr29 = 0, $add$ptr29$sink = 0, $add$ptr37 = 0, $add$ptr38 = 0, $arrayidx = 0, $arrayidx23 = 0, $arrayidx25 = 0, $arrayidx27 = 0, $arrayidx30 = 0, $arrayidx30$sink = 0, $arrayidx33 = 0;
 var $arrayidx35 = 0, $arrayidx39 = 0, $arrayidx6 = 0, $call = 0, $call1 = 0, $call11 = 0, $call13 = 0, $call14 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $call7 = 0, $call8 = 0, $cmp = 0, $cmp15 = 0, $cmp19 = 0, $cmp21 = 0, $cmp9 = 0, $dict_base = 0, $dict_size = 0;
 var $entries = 0, $i = 0, $in$addr = 0, $inc = 0, $inc42 = 0, $len = 0, $mul = 0, $mul12 = 0, $mul2 = 0, $offset = 0, $result = 0, $sb = 0, $st_size = 0, $sub = 0, $sub24 = 0, $sub26 = 0, $val = 0, $val40 = 0, $vararg_buffer = 0, $vlen = 0;
 var $vlen28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer = sp;
 $sb = sp + 20|0;
 $in$addr = $in;
 $dict_base = 0;
 $0 = $in$addr;
 $call = (_get_long($0)|0);
 HEAP32[29741] = $call;
 $1 = HEAP32[29741]|0;
 $mul = $1<<3;
 $call1 = (_Malloc($mul)|0);
 $entries = $call1;
 $2 = HEAP32[29741]|0;
 $mul2 = $2<<3;
 $call3 = (_Malloc($mul2)|0);
 HEAP32[29742] = $call3;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = HEAP32[29741]|0;
  $cmp = ($3|0)<($4|0);
  $5 = $in$addr;
  if (!($cmp)) {
   break;
  }
  $call4 = (_getc($5)|0);
  $len = $call4;
  $6 = $len;
  $7 = $entries;
  $8 = $i;
  $arrayidx = (($7) + ($8<<3)|0);
  HEAP32[$arrayidx>>2] = $6;
  $9 = $in$addr;
  $call5 = (_getc($9)|0);
  $len = $call5;
  $10 = $len;
  $11 = $entries;
  $12 = $i;
  $arrayidx6 = (($11) + ($12<<3)|0);
  $vlen = ((($arrayidx6)) + 4|0);
  HEAP32[$vlen>>2] = $10;
  $13 = $i;
  $inc = (($13) + 1)|0;
  $i = $inc;
 }
 $call7 = (_fileno($5)|0);
 $call8 = (_fstat($call7,$sb)|0);
 $cmp9 = ($call8|0)<(0);
 if ($cmp9) {
  $14 = HEAP32[7856]|0;
  (_fprintf($14,92160,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $15 = $in$addr;
 $call11 = (_ftell($15)|0);
 $offset = $call11;
 $st_size = ((($sb)) + 36|0);
 $16 = HEAP32[$st_size>>2]|0;
 $17 = $offset;
 $sub = (($16) - ($17))|0;
 $dict_size = $sub;
 $18 = $dict_size;
 $mul12 = $18;
 $call13 = (_Malloc($mul12)|0);
 $dict_base = $call13;
 $19 = $dict_base;
 $20 = $dict_size;
 $21 = $in$addr;
 $call14 = (_fread($19,1,$20,$21)|0);
 $result = $call14;
 $22 = $result;
 $23 = $dict_size;
 $cmp15 = ($22|0)!=($23|0);
 if ($cmp15) {
  _perror(92196);
  _exit(1);
  // unreachable;
 }
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = HEAP32[29741]|0;
  $cmp19 = ($24|0)<($25|0);
  if (!($cmp19)) {
   break;
  }
  $26 = $i;
  $cmp21 = ($26|0)==(0);
  if ($cmp21) {
   $27 = $dict_base;
   $28 = HEAP32[29742]|0;
   $29 = $i;
   $arrayidx23 = (($28) + ($29<<3)|0);
   $add$ptr29$sink = $27;$arrayidx30$sink = $arrayidx23;
  } else {
   $30 = HEAP32[29742]|0;
   $31 = $i;
   $sub24 = (($31) - 1)|0;
   $arrayidx25 = (($30) + ($sub24<<3)|0);
   $val = ((($arrayidx25)) + 4|0);
   $32 = HEAP32[$val>>2]|0;
   $33 = $entries;
   $34 = $i;
   $sub26 = (($34) - 1)|0;
   $arrayidx27 = (($33) + ($sub26<<3)|0);
   $vlen28 = ((($arrayidx27)) + 4|0);
   $35 = HEAP32[$vlen28>>2]|0;
   $add$ptr = (($32) + ($35)|0);
   $add$ptr29 = ((($add$ptr)) + 1|0);
   $36 = HEAP32[29742]|0;
   $37 = $i;
   $arrayidx30 = (($36) + ($37<<3)|0);
   $add$ptr29$sink = $add$ptr29;$arrayidx30$sink = $arrayidx30;
  }
  HEAP32[$arrayidx30$sink>>2] = $add$ptr29$sink;
  $38 = HEAP32[29742]|0;
  $39 = $i;
  $arrayidx33 = (($38) + ($39<<3)|0);
  $40 = HEAP32[$arrayidx33>>2]|0;
  $41 = $entries;
  $42 = $i;
  $arrayidx35 = (($41) + ($42<<3)|0);
  $43 = HEAP32[$arrayidx35>>2]|0;
  $add$ptr37 = (($40) + ($43)|0);
  $add$ptr38 = ((($add$ptr37)) + 1|0);
  $44 = HEAP32[29742]|0;
  $45 = $i;
  $arrayidx39 = (($44) + ($45<<3)|0);
  $val40 = ((($arrayidx39)) + 4|0);
  HEAP32[$val40>>2] = $add$ptr38;
  $46 = $i;
  $inc42 = (($46) + 1)|0;
  $i = $inc42;
 }
 $47 = $entries;
 _Free($47);
 STACKTOP = sp;return;
}
function _get_long($in) {
 $in = $in|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $a = 0, $b = 0, $c = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $d = 0, $in$addr = 0, $or = 0, $or6 = 0, $or8 = 0;
 var $shl = 0, $shl4 = 0, $shl5 = 0, $shl7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $in$addr = $in;
 $0 = $in$addr;
 $call = (_getc($0)|0);
 $a = $call;
 $1 = $in$addr;
 $call1 = (_getc($1)|0);
 $b = $call1;
 $2 = $in$addr;
 $call2 = (_getc($2)|0);
 $c = $call2;
 $3 = $in$addr;
 $call3 = (_getc($3)|0);
 $d = $call3;
 $4 = $a;
 $shl = $4 << 24;
 $5 = $b;
 $shl4 = $5 << 16;
 $or = $shl | $shl4;
 $6 = $c;
 $shl5 = $6 << 8;
 $or6 = $or | $shl5;
 $7 = $d;
 $shl7 = $7 << 0;
 $or8 = $or6 | $shl7;
 STACKTOP = sp;return ($or8|0);
}
function _canon_lujvo($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call1 = 0, $call4 = 0, $retval = 0, $tobool = 0, $tobool2 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $call = (_strchr($0,43)|0);
 $tobool = ($call|0)!=(0|0);
 $1 = $x$addr;
 do {
  if ($tobool) {
   $retval = $1;
  } else {
   $call1 = (_contains_compound_consonant($1)|0);
   $tobool2 = ($call1|0)!=(0);
   if ($tobool2) {
    $2 = $x$addr;
    $call4 = (_split_lujvo($2)|0);
    $retval = $call4;
    break;
   } else {
    $retval = 0;
    break;
   }
  }
 } while(0);
 $3 = $retval;
 STACKTOP = sp;return ($3|0);
}
function _contains_compound_consonant($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr1 = 0, $call = 0, $call10 = 0;
 var $call2 = 0, $call4 = 0, $cmp = 0, $cmp8 = 0, $conv = 0, $incdec$ptr = 0, $p = 0, $q = 0, $retval = 0, $s = 0, $tobool = 0, $tobool11 = 0, $tobool15 = 0, $tobool5 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $0 = $x$addr;
 $call = (_strlen($0)|0);
 $cmp = ($call>>>0)<(2);
 if ($cmp) {
  $retval = 0;
  $15 = $retval;
  STACKTOP = sp;return ($15|0);
 }
 $1 = $x$addr;
 $p = $1;
 while(1) {
  $2 = $p;
  $add$ptr = ((($2)) + 1|0);
  $q = $add$ptr;
  $3 = $q;
  $add$ptr1 = ((($3)) + 1|0);
  $s = $add$ptr1;
  $4 = $p;
  $5 = HEAP8[$4>>0]|0;
  $call2 = (_is_consonant($5)|0);
  $tobool = ($call2|0)!=(0);
  if ($tobool) {
   $6 = $q;
   $7 = HEAP8[$6>>0]|0;
   $call4 = (_is_consonant($7)|0);
   $tobool5 = ($call4|0)!=(0);
   if ($tobool5) {
    label = 6;
    break;
   }
   $8 = $q;
   $9 = HEAP8[$8>>0]|0;
   $conv = $9 << 24 >> 24;
   $cmp8 = ($conv|0)==(121);
   if ($cmp8) {
    $10 = $s;
    $11 = HEAP8[$10>>0]|0;
    $call10 = (_is_consonant($11)|0);
    $tobool11 = ($call10|0)!=(0);
    if ($tobool11) {
     label = 9;
     break;
    }
   }
  }
  $12 = $p;
  $incdec$ptr = ((($12)) + 1|0);
  $p = $incdec$ptr;
  $13 = $p;
  $14 = HEAP8[$13>>0]|0;
  $tobool15 = ($14<<24>>24)!=(0);
  if (!($tobool15)) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 6) {
  $retval = 1;
  $15 = $retval;
  STACKTOP = sp;return ($15|0);
 }
 else if ((label|0) == 9) {
  $retval = 1;
  $15 = $retval;
  STACKTOP = sp;return ($15|0);
 }
 else if ((label|0) == 11) {
  $retval = 0;
  $15 = $retval;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _split_lujvo($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx101 = 0, $arrayidx106 = 0, $arrayidx110 = 0, $arrayidx115 = 0, $arrayidx16 = 0, $arrayidx22 = 0, $arrayidx28 = 0, $arrayidx32 = 0, $arrayidx43 = 0, $arrayidx47 = 0, $arrayidx52 = 0, $arrayidx56 = 0, $arrayidx61 = 0, $arrayidx65 = 0, $arrayidx70 = 0, $arrayidx74 = 0;
 var $arrayidx79 = 0, $arrayidx82 = 0, $arrayidx87 = 0, $arrayidx97 = 0, $call = 0, $call107 = 0, $call2 = 0, $call39 = 0, $call44 = 0, $call48 = 0, $call53 = 0, $call57 = 0, $call62 = 0, $call71 = 0, $call80 = 0, $call98 = 0, $cmp = 0, $cmp103 = 0, $cmp112 = 0, $cmp117 = 0;
 var $cmp18 = 0, $cmp24 = 0, $cmp30 = 0, $cmp34 = 0, $cmp67 = 0, $cmp76 = 0, $cmp84 = 0, $cmp89 = 0, $comp = 0, $conv = 0, $conv102 = 0, $conv111 = 0, $conv116 = 0, $conv17 = 0, $conv23 = 0, $conv29 = 0, $conv33 = 0, $conv66 = 0, $conv75 = 0, $conv83 = 0;
 var $conv88 = 0, $first = 0, $len = 0, $retval = 0, $tobool = 0, $tobool108 = 0, $tobool3 = 0, $tobool40 = 0, $tobool45 = 0, $tobool49 = 0, $tobool54 = 0, $tobool58 = 0, $tobool63 = 0, $tobool72 = 0, $tobool81 = 0, $tobool9 = 0, $tobool99 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = sp + 12|0;
 HEAP32[$x$addr>>2] = $x;
 $first = 1;
 HEAP8[161928] = 0;
 L1: while(1) {
  $0 = HEAP32[$x$addr>>2]|0;
  $call = (_strlen($0)|0);
  $len = $call;
  $1 = $len;
  switch ($1|0) {
  case 2: case 1: case 0:  {
   label = 3;
   break L1;
   break;
  }
  case 4: case 3:  {
   label = 4;
   break L1;
   break;
  }
  case 5:  {
   label = 9;
   break L1;
   break;
  }
  default: {
  }
  }
  $8 = HEAP32[$x$addr>>2]|0;
  $arrayidx = ((($8)) + 3|0);
  $9 = HEAP8[$arrayidx>>0]|0;
  $conv = $9 << 24 >> 24;
  $cmp = ($conv|0)==(121);
  L4: do {
   if ($cmp) {
    $10 = $first;
    _strip_leading_rafsi($x$addr,3,1,$10,161928);
   } else {
    $11 = HEAP32[$x$addr>>2]|0;
    $arrayidx16 = ((($11)) + 4|0);
    $12 = HEAP8[$arrayidx16>>0]|0;
    $conv17 = $12 << 24 >> 24;
    $cmp18 = ($conv17|0)==(121);
    if ($cmp18) {
     $13 = $first;
     _strip_leading_rafsi($x$addr,4,1,$13,161928);
     break;
    }
    $14 = HEAP32[$x$addr>>2]|0;
    $arrayidx22 = ((($14)) + 5|0);
    $15 = HEAP8[$arrayidx22>>0]|0;
    $conv23 = $15 << 24 >> 24;
    $cmp24 = ($conv23|0)==(121);
    if ($cmp24) {
     $16 = $first;
     _strip_leading_rafsi($x$addr,5,1,$16,161928);
     break;
    }
    $17 = HEAP32[$x$addr>>2]|0;
    $arrayidx28 = ((($17)) + 6|0);
    $18 = HEAP8[$arrayidx28>>0]|0;
    $conv29 = $18 << 24 >> 24;
    $cmp30 = ($conv29|0)==(121);
    if ($cmp30) {
     $19 = HEAP32[$x$addr>>2]|0;
     $arrayidx32 = ((($19)) + 3|0);
     $20 = HEAP8[$arrayidx32>>0]|0;
     $conv33 = $20 << 24 >> 24;
     $cmp34 = ($conv33|0)==(39);
     if ($cmp34) {
      $21 = $first;
      _strip_leading_rafsi($x$addr,6,1,$21,161928);
      break;
     }
    }
    $22 = HEAP32[$x$addr>>2]|0;
    $23 = HEAP8[$22>>0]|0;
    $call39 = (_is_consonant($23)|0);
    $tobool40 = ($call39|0)!=(0);
    if (!($tobool40)) {
     label = 22;
     break L1;
    }
    $24 = HEAP32[$x$addr>>2]|0;
    $arrayidx43 = ((($24)) + 1|0);
    $25 = HEAP8[$arrayidx43>>0]|0;
    $call44 = (_IC($25)|0);
    $tobool45 = ($call44|0)!=(0);
    if ($tobool45) {
     $26 = HEAP32[$x$addr>>2]|0;
     $arrayidx47 = ((($26)) + 2|0);
     $27 = HEAP8[$arrayidx47>>0]|0;
     $call48 = (_IV($27)|0);
     $tobool49 = ($call48|0)!=(0);
     if ($tobool49) {
      $28 = $first;
      _strip_leading_rafsi($x$addr,3,0,$28,161928);
      break;
     }
    }
    $29 = HEAP32[$x$addr>>2]|0;
    $arrayidx52 = ((($29)) + 1|0);
    $30 = HEAP8[$arrayidx52>>0]|0;
    $call53 = (_IV($30)|0);
    $tobool54 = ($call53|0)!=(0);
    if ($tobool54) {
     $31 = HEAP32[$x$addr>>2]|0;
     $arrayidx56 = ((($31)) + 2|0);
     $32 = HEAP8[$arrayidx56>>0]|0;
     $call57 = (_IC($32)|0);
     $tobool58 = ($call57|0)!=(0);
     if ($tobool58) {
      $33 = $first;
      _strip_leading_rafsi($x$addr,3,0,$33,161928);
      break;
     }
    }
    $34 = HEAP32[$x$addr>>2]|0;
    $arrayidx61 = ((($34)) + 1|0);
    $35 = HEAP8[$arrayidx61>>0]|0;
    $call62 = (_IV($35)|0);
    $tobool63 = ($call62|0)!=(0);
    if (!($tobool63)) {
     label = 47;
     break L1;
    }
    $36 = HEAP32[$x$addr>>2]|0;
    $arrayidx65 = ((($36)) + 2|0);
    $37 = HEAP8[$arrayidx65>>0]|0;
    $conv66 = $37 << 24 >> 24;
    $cmp67 = ($conv66|0)==(39);
    $38 = HEAP32[$x$addr>>2]|0;
    if ($cmp67) {
     $arrayidx70 = ((($38)) + 3|0);
     $39 = HEAP8[$arrayidx70>>0]|0;
     $call71 = (_IV($39)|0);
     $tobool72 = ($call71|0)!=(0);
     if (!($tobool72)) {
      label = 38;
      break L1;
     }
     $40 = HEAP32[$x$addr>>2]|0;
     $arrayidx74 = ((($40)) + 4|0);
     $41 = HEAP8[$arrayidx74>>0]|0;
     $conv75 = $41 << 24 >> 24;
     $cmp76 = ($conv75|0)==(114);
     if ($cmp76) {
      $42 = HEAP32[$x$addr>>2]|0;
      $arrayidx79 = ((($42)) + 5|0);
      $43 = HEAP8[$arrayidx79>>0]|0;
      $call80 = (_IC($43)|0);
      $tobool81 = ($call80|0)!=(0);
      if (!($tobool81)) {
       label = 34;
      }
     } else {
      label = 34;
     }
     do {
      if ((label|0) == 34) {
       label = 0;
       $44 = HEAP32[$x$addr>>2]|0;
       $arrayidx82 = ((($44)) + 4|0);
       $45 = HEAP8[$arrayidx82>>0]|0;
       $conv83 = $45 << 24 >> 24;
       $cmp84 = ($conv83|0)==(110);
       if ($cmp84) {
        $46 = HEAP32[$x$addr>>2]|0;
        $arrayidx87 = ((($46)) + 5|0);
        $47 = HEAP8[$arrayidx87>>0]|0;
        $conv88 = $47 << 24 >> 24;
        $cmp89 = ($conv88|0)==(114);
        if ($cmp89) {
         break;
        }
       }
       $49 = $first;
       _strip_leading_rafsi($x$addr,4,0,$49,161928);
       break L4;
      }
     } while(0);
     $48 = $first;
     _strip_leading_rafsi($x$addr,4,1,$48,161928);
     break;
    }
    $arrayidx97 = ((($38)) + 2|0);
    $50 = HEAP8[$arrayidx97>>0]|0;
    $call98 = (_IV($50)|0);
    $tobool99 = ($call98|0)!=(0);
    if (!($tobool99)) {
     $61 = $first;
     _strip_leading_rafsi($x$addr,3,0,$61,161928);
     break;
    }
    $51 = HEAP32[$x$addr>>2]|0;
    $arrayidx101 = ((($51)) + 3|0);
    $52 = HEAP8[$arrayidx101>>0]|0;
    $conv102 = $52 << 24 >> 24;
    $cmp103 = ($conv102|0)==(114);
    if ($cmp103) {
     $53 = HEAP32[$x$addr>>2]|0;
     $arrayidx106 = ((($53)) + 4|0);
     $54 = HEAP8[$arrayidx106>>0]|0;
     $call107 = (_IC($54)|0);
     $tobool108 = ($call107|0)!=(0);
     if (!($tobool108)) {
      label = 42;
     }
    } else {
     label = 42;
    }
    do {
     if ((label|0) == 42) {
      label = 0;
      $55 = HEAP32[$x$addr>>2]|0;
      $arrayidx110 = ((($55)) + 3|0);
      $56 = HEAP8[$arrayidx110>>0]|0;
      $conv111 = $56 << 24 >> 24;
      $cmp112 = ($conv111|0)==(110);
      if ($cmp112) {
       $57 = HEAP32[$x$addr>>2]|0;
       $arrayidx115 = ((($57)) + 4|0);
       $58 = HEAP8[$arrayidx115>>0]|0;
       $conv116 = $58 << 24 >> 24;
       $cmp117 = ($conv116|0)==(114);
       if ($cmp117) {
        break;
       }
      }
      $60 = $first;
      _strip_leading_rafsi($x$addr,3,0,$60,161928);
      break L4;
     }
    } while(0);
    $59 = $first;
    _strip_leading_rafsi($x$addr,3,1,$59,161928);
   }
  } while(0);
  $first = 0;
 }
 if ((label|0) == 3) {
  $retval = 0;
  $62 = $retval;
  STACKTOP = sp;return ($62|0);
 }
 else if ((label|0) == 4) {
  $2 = HEAP32[$x$addr>>2]|0;
  $call2 = (_lookup_component($2)|0);
  $comp = $call2;
  $3 = $comp;
  $tobool = ($3|0)!=(0|0);
  if ($tobool) {
   $4 = $first;
   $tobool3 = ($4|0)!=(0);
   if (!($tobool3)) {
    (_strcat(161928,92232)|0);
   }
   $5 = $comp;
   (_strcat(161928,$5)|0);
  }
  $retval = 161928;
  $62 = $retval;
  STACKTOP = sp;return ($62|0);
 }
 else if ((label|0) == 9) {
  $6 = $first;
  $tobool9 = ($6|0)!=(0);
  if (!($tobool9)) {
   (_strcat(161928,92232)|0);
  }
  $7 = HEAP32[$x$addr>>2]|0;
  (_strcat(161928,$7)|0);
  $retval = 161928;
  $62 = $retval;
  STACKTOP = sp;return ($62|0);
 }
 else if ((label|0) == 22) {
  $retval = 0;
  $62 = $retval;
  STACKTOP = sp;return ($62|0);
 }
 else if ((label|0) == 38) {
  $retval = 0;
  $62 = $retval;
  STACKTOP = sp;return ($62|0);
 }
 else if ((label|0) == 47) {
  $retval = 0;
  $62 = $retval;
  STACKTOP = sp;return ($62|0);
 }
 return (0)|0;
}
function _lookup_component($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $gismu = 0, $match = 0, $retval = 0, $specimen = 0, $tobool = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $specimen = sp + 8|0;
 $x$addr = $x;
 $0 = $x$addr;
 HEAP32[$specimen>>2] = $0;
 $call = (_bsearch($specimen,7928,2884,8,72)|0);
 $match = $call;
 $1 = $match;
 $tobool = ($1|0)!=(0|0);
 if ($tobool) {
  $2 = $match;
  $gismu = ((($2)) + 4|0);
  $3 = HEAP32[$gismu>>2]|0;
  $retval = $3;
  $4 = $retval;
  STACKTOP = sp;return ($4|0);
 } else {
  $retval = 92258;
  $4 = $retval;
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function _strip_leading_rafsi($y,$len,$hy,$first,$result) {
 $y = $y|0;
 $len = $len|0;
 $hy = $hy|0;
 $first = $first|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0;
 var $add$ptr6 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx2 = 0, $buf = 0, $call = 0, $cmp = 0, $comp = 0, $cond = 0, $first$addr = 0, $hy$addr = 0, $i = 0, $inc = 0, $len$addr = 0, $result$addr = 0, $tobool = 0, $tobool4 = 0, $x = 0, $y$addr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf = sp + 32|0;
 $y$addr = $y;
 $len$addr = $len;
 $hy$addr = $hy;
 $first$addr = $first;
 $result$addr = $result;
 $0 = $y$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $len$addr;
  $cmp = ($2|0)<($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $x;
  $5 = $i;
  $arrayidx = (($4) + ($5)|0);
  $6 = HEAP8[$arrayidx>>0]|0;
  $7 = $i;
  $arrayidx1 = (($buf) + ($7)|0);
  HEAP8[$arrayidx1>>0] = $6;
  $8 = $i;
  $inc = (($8) + 1)|0;
  $i = $inc;
 }
 $9 = $len$addr;
 $arrayidx2 = (($buf) + ($9)|0);
 HEAP8[$arrayidx2>>0] = 0;
 $call = (_lookup_component($buf)|0);
 $comp = $call;
 $10 = $first$addr;
 $tobool = ($10|0)!=(0);
 if (!($tobool)) {
  $11 = $result$addr;
  (_strcat($11,92232)|0);
 }
 $12 = $result$addr;
 $13 = $comp;
 $tobool4 = ($13|0)!=(0|0);
 $14 = $comp;
 $cond = $tobool4 ? $14 : 92258;
 (_strcat($12,$cond)|0);
 $15 = $x;
 $16 = $len$addr;
 $add$ptr = (($15) + ($16)|0);
 $17 = $hy$addr;
 $add$ptr6 = (($add$ptr) + ($17)|0);
 $18 = $y$addr;
 HEAP32[$18>>2] = $add$ptr6;
 STACKTOP = sp;return;
}
function _is_consonant($c) {
 $c = $c|0;
 var $0 = 0, $c$addr = 0, $call = 0, $cmp = 0, $conv = 0, $conv1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c$addr = $c;
 $0 = $c$addr;
 $conv = $0 << 24 >> 24;
 $call = (_strchr(92240,$conv)|0);
 $cmp = ($call|0)!=(0|0);
 $conv1 = $cmp&1;
 STACKTOP = sp;return ($conv1|0);
}
function _IC($c) {
 $c = $c|0;
 var $0 = 0, $c$addr = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c$addr = $c;
 $0 = $c$addr;
 $call = (_is_consonant($0)|0);
 STACKTOP = sp;return ($call|0);
}
function _IV($c) {
 $c = $c|0;
 var $0 = 0, $c$addr = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c$addr = $c;
 $0 = $c$addr;
 $call = (_is_vowel($0)|0);
 STACKTOP = sp;return ($call|0);
}
function _is_vowel($c) {
 $c = $c|0;
 var $0 = 0, $c$addr = 0, $call = 0, $cmp = 0, $conv = 0, $conv1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c$addr = $c;
 $0 = $c$addr;
 $conv = $0 << 24 >> 24;
 $call = (_strchr(92234,$conv)|0);
 $cmp = ($call|0)!=(0|0);
 $conv1 = $cmp&1;
 STACKTOP = sp;return ($conv1|0);
}
function _compare_r2g($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $a$addr = 0, $aa = 0, $b$addr = 0, $bb = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $a$addr = $a;
 $b$addr = $b;
 $0 = $a$addr;
 $aa = $0;
 $1 = $b$addr;
 $bb = $1;
 $2 = $aa;
 $3 = HEAP32[$2>>2]|0;
 $4 = $bb;
 $5 = HEAP32[$4>>2]|0;
 $call = (_strcmp($3,$5)|0);
 STACKTOP = sp;return ($call|0);
}
function _initialise() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[29744] = 3;
 return;
}
function _write_prologue() {
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 (_printf(114002,$vararg_buffer)|0);
 (_printf(115930,$vararg_buffer1)|0);
 (_printf(114371,$vararg_buffer3)|0);
 STACKTOP = sp;return;
}
function _latex_write_epilog() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 (_printf(113986,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _latex_write_open_bracket($type,$subscript) {
 $type = $type|0;
 $subscript = $subscript|0;
 var $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $subscript$addr = 0, $switch = 0, $type$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0;
 var $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer35 = sp + 120|0;
 $vararg_buffer32 = sp + 112|0;
 $vararg_buffer30 = sp + 104|0;
 $vararg_buffer27 = sp + 96|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer20 = sp + 72|0;
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $type$addr = $type;
 $subscript$addr = $subscript;
 _clear_eols_3180();
 $0 = HEAP32[29744]|0;
 $$off = (($0) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  (_printf(116343,$vararg_buffer)|0);
 }
 $1 = $type$addr;
 switch ($1|0) {
 case 7:  {
  (_printf(113941,$vararg_buffer30)|0);
  $8 = $subscript$addr;
  HEAP32[$vararg_buffer32>>2] = $8;
  (_printf(113882,$vararg_buffer32)|0);
  break;
 }
 case 1:  {
  (_printf(116406,$vararg_buffer1)|0);
  $2 = $subscript$addr;
  HEAP32[$vararg_buffer3>>2] = $2;
  (_printf(113882,$vararg_buffer3)|0);
  break;
 }
 case 2:  {
  (_printf(116408,$vararg_buffer5)|0);
  $3 = $subscript$addr;
  HEAP32[$vararg_buffer7>>2] = $3;
  (_printf(113882,$vararg_buffer7)|0);
  break;
 }
 case 3:  {
  (_printf(115198,$vararg_buffer10)|0);
  $4 = $subscript$addr;
  HEAP32[$vararg_buffer12>>2] = $4;
  (_printf(113882,$vararg_buffer12)|0);
  break;
 }
 case 4:  {
  (_printf(115201,$vararg_buffer15)|0);
  $5 = $subscript$addr;
  HEAP32[$vararg_buffer17>>2] = $5;
  (_printf(113882,$vararg_buffer17)|0);
  break;
 }
 case 5:  {
  (_printf(115211,$vararg_buffer20)|0);
  $6 = $subscript$addr;
  HEAP32[$vararg_buffer22>>2] = $6;
  (_printf(113882,$vararg_buffer22)|0);
  break;
 }
 case 6:  {
  (_printf(115220,$vararg_buffer25)|0);
  $7 = $subscript$addr;
  HEAP32[$vararg_buffer27>>2] = $7;
  (_printf(113882,$vararg_buffer27)|0);
  break;
 }
 default: {
 }
 }
 $9 = $type$addr;
 $cmp = ($9|0)!=(0);
 if (!($cmp)) {
  HEAP32[29744] = 0;
  STACKTOP = sp;return;
 }
 (_printf(116343,$vararg_buffer35)|0);
 HEAP32[29744] = 0;
 STACKTOP = sp;return;
}
function _latex_write_close_bracket($type,$subscript) {
 $type = $type|0;
 $subscript = $subscript|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cond = 0, $subscript$addr = 0, $type$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0;
 var $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer35 = sp + 120|0;
 $vararg_buffer32 = sp + 112|0;
 $vararg_buffer30 = sp + 104|0;
 $vararg_buffer27 = sp + 96|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer20 = sp + 72|0;
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $type$addr = $type;
 $subscript$addr = $subscript;
 $0 = HEAP32[29744]|0;
 $cond = ($0|0)==(0);
 if ($cond) {
  (_printf(116343,$vararg_buffer)|0);
 }
 $1 = $type$addr;
 switch ($1|0) {
 case 7:  {
  (_printf(113913,$vararg_buffer30)|0);
  $8 = $subscript$addr;
  HEAP32[$vararg_buffer32>>2] = $8;
  (_printf(113882,$vararg_buffer32)|0);
  break;
 }
 case 1:  {
  (_printf(116384,$vararg_buffer1)|0);
  $2 = $subscript$addr;
  HEAP32[$vararg_buffer3>>2] = $2;
  (_printf(113882,$vararg_buffer3)|0);
  break;
 }
 case 2:  {
  (_printf(116386,$vararg_buffer5)|0);
  $3 = $subscript$addr;
  HEAP32[$vararg_buffer7>>2] = $3;
  (_printf(113882,$vararg_buffer7)|0);
  break;
 }
 case 3:  {
  (_printf(115160,$vararg_buffer10)|0);
  $4 = $subscript$addr;
  HEAP32[$vararg_buffer12>>2] = $4;
  (_printf(113882,$vararg_buffer12)|0);
  break;
 }
 case 4:  {
  (_printf(115163,$vararg_buffer15)|0);
  $5 = $subscript$addr;
  HEAP32[$vararg_buffer17>>2] = $5;
  (_printf(113882,$vararg_buffer17)|0);
  break;
 }
 case 5:  {
  (_printf(115173,$vararg_buffer20)|0);
  $6 = $subscript$addr;
  HEAP32[$vararg_buffer22>>2] = $6;
  (_printf(113882,$vararg_buffer22)|0);
  break;
 }
 case 6:  {
  (_printf(115182,$vararg_buffer25)|0);
  $7 = $subscript$addr;
  HEAP32[$vararg_buffer27>>2] = $7;
  (_printf(113882,$vararg_buffer27)|0);
  break;
 }
 default: {
 }
 }
 $9 = $type$addr;
 $cmp = ($9|0)!=(0);
 if (!($cmp)) {
  HEAP32[29744] = 2;
  STACKTOP = sp;return;
 }
 (_printf(116343,$vararg_buffer35)|0);
 HEAP32[29744] = 2;
 STACKTOP = sp;return;
}
function _set_eols($eols) {
 $eols = $eols|0;
 var $0 = 0, $1 = 0, $add = 0, $eols$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $eols$addr = $eols;
 $0 = $eols$addr;
 $1 = HEAP32[29745]|0;
 $add = (($1) + ($0))|0;
 HEAP32[29745] = $add;
 STACKTOP = sp;return;
}
function _write_lojban_text($text) {
 $text = $text|0;
 var $$off = 0, $0 = 0, $1 = 0, $switch = 0, $text$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $text$addr = $text;
 $0 = HEAP32[29744]|0;
 $$off = (($0) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  (_printf(116341,$vararg_buffer)|0);
 }
 $1 = $text$addr;
 HEAP32[$vararg_buffer1>>2] = $1;
 (_printf(113861,$vararg_buffer1)|0);
 HEAP32[29744] = 1;
 STACKTOP = sp;return;
}
function _write_translation($text) {
 $text = $text|0;
 var $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call3 = 0, $cmp = 0, $conv = 0, $switch = 0, $text$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $text$addr = $text;
 $0 = HEAP32[29744]|0;
 $$off = (($0) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  (_printf(116341,$vararg_buffer)|0);
 }
 $1 = $text$addr;
 $2 = HEAP8[$1>>0]|0;
 $conv = $2 << 24 >> 24;
 $cmp = ($conv|0)==(36);
 $3 = $text$addr;
 if ($cmp) {
  _write_special($3);
  HEAP32[29744] = 1;
  STACKTOP = sp;return;
 } else {
  $call3 = (_make_texsafe($3)|0);
  HEAP32[$vararg_buffer1>>2] = $call3;
  (_printf(113841,$vararg_buffer1)|0);
  HEAP32[29744] = 1;
  STACKTOP = sp;return;
 }
}
function _start_tags() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 (_printf(113815,$vararg_buffer)|0);
 HEAP32[29743] = 1;
 STACKTOP = sp;return;
}
function _end_tags() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 (_printf(113786,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _start_tag() {
 var $0 = 0, $tobool = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[29743]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  (_printf(113758,$vararg_buffer)|0);
 }
 HEAP32[29743] = 0;
 STACKTOP = sp;return;
}
function _write_tag_text($brivla,$place,$trans,$brac) {
 $brivla = $brivla|0;
 $place = $place|0;
 $trans = $trans|0;
 $brac = $brac|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $brac$addr = 0, $brivla$addr = 0, $call = 0, $place$addr = 0, $tobool = 0, $trans$addr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $brivla$addr = $brivla;
 $place$addr = $place;
 $trans$addr = $trans;
 $brac$addr = $brac;
 $0 = $brac$addr;
 $tobool = ($0|0)!=(0);
 $1 = $brivla$addr;
 $2 = $place$addr;
 $3 = $trans$addr;
 $call = (_make_texsafe($3)|0);
 if ($tobool) {
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $2;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $call;
  (_printf(113690,$vararg_buffer)|0);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer3>>2] = $1;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $2;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = $call;
  (_printf(113725,$vararg_buffer3)|0);
  STACKTOP = sp;return;
 }
}
function _write_partial_tag_text($t) {
 $t = $t|0;
 var $0 = 0, $t$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $t$addr = $t;
 $0 = $t$addr;
 HEAP32[$vararg_buffer>>2] = $0;
 (_printf(113662,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _make_texsafe($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conv = 0, $incdec$ptr = 0;
 var $incdec$ptr1 = 0, $incdec$ptr2 = 0, $incdec$ptr4 = 0, $incdec$ptr5 = 0, $incdec$ptr6 = 0, $incdec$ptr7 = 0, $incdec$ptr8 = 0, $incdec$ptr9 = 0, $p = 0, $q = 0, $s$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $0 = $s$addr;
 $p = $0;
 $q = 163976;
 L1: while(1) {
  $1 = $p;
  $2 = HEAP8[$1>>0]|0;
  $tobool = ($2<<24>>24)!=(0);
  if (!($tobool)) {
   break;
  }
  $3 = $p;
  $4 = HEAP8[$3>>0]|0;
  $conv = $4 << 24 >> 24;
  switch ($conv|0) {
  case 35: case 95: case 37: case 125: case 123: case 38: case 94:  {
   $5 = $q;
   $incdec$ptr = ((($5)) + 1|0);
   $q = $incdec$ptr;
   HEAP8[$5>>0] = 92;
   $6 = $p;
   $incdec$ptr1 = ((($6)) + 1|0);
   $p = $incdec$ptr1;
   $7 = HEAP8[$6>>0]|0;
   $8 = $q;
   $incdec$ptr2 = ((($8)) + 1|0);
   $q = $incdec$ptr2;
   HEAP8[$8>>0] = $7;
   continue L1;
   break;
  }
  case 62: case 60:  {
   $9 = $q;
   $incdec$ptr4 = ((($9)) + 1|0);
   $q = $incdec$ptr4;
   HEAP8[$9>>0] = 36;
   $10 = $p;
   $incdec$ptr5 = ((($10)) + 1|0);
   $p = $incdec$ptr5;
   $11 = HEAP8[$10>>0]|0;
   $12 = $q;
   $incdec$ptr6 = ((($12)) + 1|0);
   $q = $incdec$ptr6;
   HEAP8[$12>>0] = $11;
   $13 = $q;
   $incdec$ptr7 = ((($13)) + 1|0);
   $q = $incdec$ptr7;
   HEAP8[$13>>0] = 36;
   continue L1;
   break;
  }
  default: {
   $14 = $p;
   $incdec$ptr8 = ((($14)) + 1|0);
   $p = $incdec$ptr8;
   $15 = HEAP8[$14>>0]|0;
   $16 = $q;
   $incdec$ptr9 = ((($16)) + 1|0);
   $q = $incdec$ptr9;
   HEAP8[$16>>0] = $15;
   continue L1;
  }
  }
 }
 $17 = $q;
 HEAP8[$17>>0] = 0;
 STACKTOP = sp;return (163976|0);
}
function _write_special($text) {
 $text = $text|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $call2 = 0, $call7 = 0, $text$addr = 0, $tobool = 0, $tobool3 = 0, $tobool8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $text$addr = $text;
 $0 = $text$addr;
 $call = (_strcmp($0,116345)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  (_printf(115118,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $1 = $text$addr;
 $call2 = (_strcmp($1,116359)|0);
 $tobool3 = ($call2|0)!=(0);
 if (!($tobool3)) {
  (_printf(116251,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 }
 $2 = $text$addr;
 $call7 = (_strcmp($2,116372)|0);
 $tobool8 = ($call7|0)!=(0);
 if ($tobool8) {
  STACKTOP = sp;return;
 }
 (_printf(116254,$vararg_buffer3)|0);
 STACKTOP = sp;return;
}
function _clear_eols_3180() {
 var $0 = 0, $1 = 0, $2 = 0.0, $cmp = 0, $cmp1 = 0, $vararg_buffer = 0, $xes = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp + 8|0;
 $0 = HEAP32[29745]|0;
 $cmp = ($0|0)>(0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[29745]|0;
 $cmp1 = ($1|0)>(1);
 if ($cmp1) {
  $xes = 1.5;
 } else {
  $xes = 1.0;
 }
 $2 = $xes;
 HEAPF64[$vararg_buffer>>3] = $2;
 (_printf(113968,$vararg_buffer)|0);
 HEAP32[29744] = 0;
 HEAP32[29745] = 0;
 STACKTOP = sp;return;
}
function _initialise_4277() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[29747] = 3;
 return;
}
function _write_prologue_4278() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 (_printf(114586,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _write_epilog() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 (_printf(114577,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _write_open_bracket($type,$subscript) {
 $type = $type|0;
 $subscript = $subscript|0;
 var $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $subscript$addr = 0, $switch = 0, $type$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0;
 var $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer32 = sp + 112|0;
 $vararg_buffer30 = sp + 104|0;
 $vararg_buffer27 = sp + 96|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer20 = sp + 72|0;
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $type$addr = $type;
 $subscript$addr = $subscript;
 _clear_eols_4314();
 $0 = HEAP32[29747]|0;
 $$off = (($0) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  (_printf(116343,$vararg_buffer)|0);
 }
 $1 = $type$addr;
 switch ($1|0) {
 case 7:  {
  (_printf(114559,$vararg_buffer30)|0);
  $8 = $subscript$addr;
  HEAP32[$vararg_buffer32>>2] = $8;
  (_printf(114513,$vararg_buffer32)|0);
  HEAP32[29747] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  (_printf(116406,$vararg_buffer1)|0);
  $2 = $subscript$addr;
  HEAP32[$vararg_buffer3>>2] = $2;
  (_printf(114513,$vararg_buffer3)|0);
  HEAP32[29747] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  (_printf(116408,$vararg_buffer5)|0);
  $3 = $subscript$addr;
  HEAP32[$vararg_buffer7>>2] = $3;
  (_printf(114513,$vararg_buffer7)|0);
  HEAP32[29747] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  (_printf(116410,$vararg_buffer10)|0);
  $4 = $subscript$addr;
  HEAP32[$vararg_buffer12>>2] = $4;
  (_printf(114513,$vararg_buffer12)|0);
  HEAP32[29747] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  (_printf(114415,$vararg_buffer15)|0);
  $5 = $subscript$addr;
  HEAP32[$vararg_buffer17>>2] = $5;
  (_printf(114513,$vararg_buffer17)|0);
  HEAP32[29747] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  (_printf(116406,$vararg_buffer20)|0);
  $6 = $subscript$addr;
  HEAP32[$vararg_buffer22>>2] = $6;
  (_printf(114513,$vararg_buffer22)|0);
  HEAP32[29747] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  (_printf(116406,$vararg_buffer25)|0);
  $7 = $subscript$addr;
  HEAP32[$vararg_buffer27>>2] = $7;
  (_printf(114513,$vararg_buffer27)|0);
  HEAP32[29747] = 0;
  STACKTOP = sp;return;
  break;
 }
 default: {
  HEAP32[29747] = 0;
  STACKTOP = sp;return;
 }
 }
}
function _write_close_bracket($type,$subscript) {
 $type = $type|0;
 $subscript = $subscript|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $cond = 0, $subscript$addr = 0, $type$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0;
 var $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer32 = sp + 112|0;
 $vararg_buffer30 = sp + 104|0;
 $vararg_buffer27 = sp + 96|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer20 = sp + 72|0;
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $type$addr = $type;
 $subscript$addr = $subscript;
 $0 = HEAP32[29747]|0;
 $cond = ($0|0)==(0);
 if ($cond) {
  (_printf(116343,$vararg_buffer)|0);
 }
 $1 = $type$addr;
 switch ($1|0) {
 case 7:  {
  (_printf(114550,$vararg_buffer30)|0);
  $8 = $subscript$addr;
  HEAP32[$vararg_buffer32>>2] = $8;
  (_printf(114513,$vararg_buffer32)|0);
  HEAP32[29747] = 2;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  (_printf(116384,$vararg_buffer1)|0);
  $2 = $subscript$addr;
  HEAP32[$vararg_buffer3>>2] = $2;
  (_printf(114513,$vararg_buffer3)|0);
  HEAP32[29747] = 2;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  (_printf(116386,$vararg_buffer5)|0);
  $3 = $subscript$addr;
  HEAP32[$vararg_buffer7>>2] = $3;
  (_printf(114513,$vararg_buffer7)|0);
  HEAP32[29747] = 2;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  (_printf(116388,$vararg_buffer10)|0);
  $4 = $subscript$addr;
  HEAP32[$vararg_buffer12>>2] = $4;
  (_printf(114513,$vararg_buffer12)|0);
  HEAP32[29747] = 2;
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  (_printf(114420,$vararg_buffer15)|0);
  $5 = $subscript$addr;
  HEAP32[$vararg_buffer17>>2] = $5;
  (_printf(114513,$vararg_buffer17)|0);
  HEAP32[29747] = 2;
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  (_printf(116384,$vararg_buffer20)|0);
  $6 = $subscript$addr;
  HEAP32[$vararg_buffer22>>2] = $6;
  (_printf(114513,$vararg_buffer22)|0);
  HEAP32[29747] = 2;
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  (_printf(116384,$vararg_buffer25)|0);
  $7 = $subscript$addr;
  HEAP32[$vararg_buffer27>>2] = $7;
  (_printf(114513,$vararg_buffer27)|0);
  HEAP32[29747] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
  HEAP32[29747] = 2;
  STACKTOP = sp;return;
 }
 }
}
function _set_eols_4279($eols) {
 $eols = $eols|0;
 var $0 = 0, $1 = 0, $add = 0, $eols$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $eols$addr = $eols;
 $0 = $eols$addr;
 $1 = HEAP32[29748]|0;
 $add = (($1) + ($0))|0;
 HEAP32[29748] = $add;
 STACKTOP = sp;return;
}
function _write_lojban_text_4280($text) {
 $text = $text|0;
 var $$off = 0, $0 = 0, $1 = 0, $switch = 0, $text$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $text$addr = $text;
 $0 = HEAP32[29747]|0;
 $$off = (($0) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  (_printf(116341,$vararg_buffer)|0);
 }
 $1 = $text$addr;
 HEAP32[$vararg_buffer1>>2] = $1;
 (_printf(114503,$vararg_buffer1)|0);
 HEAP32[29747] = 1;
 STACKTOP = sp;return;
}
function _write_translation_4281($text) {
 $text = $text|0;
 var $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call3 = 0, $cmp = 0, $conv = 0, $switch = 0, $text$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $text$addr = $text;
 $0 = HEAP32[29747]|0;
 $$off = (($0) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  (_printf(116341,$vararg_buffer)|0);
 }
 $1 = $text$addr;
 $2 = HEAP8[$1>>0]|0;
 $conv = $2 << 24 >> 24;
 $cmp = ($conv|0)==(36);
 $3 = $text$addr;
 if ($cmp) {
  _write_special_4299($3);
  HEAP32[29747] = 1;
  STACKTOP = sp;return;
 } else {
  $call3 = (_make_htmlsafe($3)|0);
  HEAP32[$vararg_buffer1>>2] = $call3;
  (_printf(114459,$vararg_buffer1)|0);
  HEAP32[29747] = 1;
  STACKTOP = sp;return;
 }
}
function _start_tags_4282() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 (_printf(114440,$vararg_buffer)|0);
 HEAP32[29746] = 1;
 STACKTOP = sp;return;
}
function _end_tags_4283() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 (_printf(114425,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _start_tag_4284() {
 var $0 = 0, $tobool = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[29746]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  (_printf(116240,$vararg_buffer)|0);
 }
 HEAP32[29746] = 0;
 STACKTOP = sp;return;
}
function _write_tag_text_4285($brivla,$place,$trans,$brac) {
 $brivla = $brivla|0;
 $place = $place|0;
 $trans = $trans|0;
 $brac = $brac|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $brac$addr = 0, $brivla$addr = 0, $call = 0, $place$addr = 0, $tobool = 0, $trans$addr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $brivla$addr = $brivla;
 $place$addr = $place;
 $trans$addr = $trans;
 $brac$addr = $brac;
 $0 = $brac$addr;
 $tobool = ($0|0)!=(0);
 $1 = $brivla$addr;
 $2 = $place$addr;
 $3 = $trans$addr;
 $call = (_make_htmlsafe($3)|0);
 if ($tobool) {
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $2;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $call;
  (_printf(114389,$vararg_buffer)|0);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer3>>2] = $1;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $2;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = $call;
  (_printf(114400,$vararg_buffer3)|0);
  STACKTOP = sp;return;
 }
}
function _write_partial_tag_text_4286($t) {
 $t = $t|0;
 var $0 = 0, $t$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $t$addr = $t;
 $0 = $t$addr;
 HEAP32[$vararg_buffer>>2] = $0;
 (_printf(116219,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _make_htmlsafe($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr3 = 0, $add$ptr6 = 0, $conv = 0, $incdec$ptr = 0;
 var $incdec$ptr7 = 0, $p = 0, $q = 0, $s$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $0 = $s$addr;
 $p = $0;
 $q = 166024;
 L1: while(1) {
  $1 = $p;
  $2 = HEAP8[$1>>0]|0;
  $tobool = ($2<<24>>24)!=(0);
  if (!($tobool)) {
   break;
  }
  $3 = $p;
  $4 = HEAP8[$3>>0]|0;
  $conv = $4 << 24 >> 24;
  switch ($conv|0) {
  case 38:  {
   $5 = $q;
   (_strcpy($5,114409)|0);
   $6 = $q;
   $add$ptr = ((($6)) + 5|0);
   $q = $add$ptr;
   continue L1;
   break;
  }
  case 60:  {
   $7 = $q;
   (_strcpy($7,114415)|0);
   $8 = $q;
   $add$ptr3 = ((($8)) + 4|0);
   $q = $add$ptr3;
   continue L1;
   break;
  }
  case 62:  {
   $9 = $q;
   (_strcpy($9,114420)|0);
   $10 = $q;
   $add$ptr6 = ((($10)) + 4|0);
   $q = $add$ptr6;
   continue L1;
   break;
  }
  default: {
   $11 = $p;
   $incdec$ptr = ((($11)) + 1|0);
   $p = $incdec$ptr;
   $12 = HEAP8[$11>>0]|0;
   $13 = $q;
   $incdec$ptr7 = ((($13)) + 1|0);
   $q = $incdec$ptr7;
   HEAP8[$13>>0] = $12;
   continue L1;
  }
  }
 }
 $14 = $q;
 HEAP8[$14>>0] = 0;
 STACKTOP = sp;return (166024|0);
}
function _write_special_4299($text) {
 $text = $text|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $call2 = 0, $call7 = 0, $text$addr = 0, $tobool = 0, $tobool3 = 0, $tobool8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $text$addr = $text;
 $0 = $text$addr;
 $call = (_strcmp($0,116345)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  (_printf(114469,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $1 = $text$addr;
 $call2 = (_strcmp($1,116359)|0);
 $tobool3 = ($call2|0)!=(0);
 if (!($tobool3)) {
  (_printf(114475,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 }
 $2 = $text$addr;
 $call7 = (_strcmp($2,116372)|0);
 $tobool8 = ($call7|0)!=(0);
 if ($tobool8) {
  STACKTOP = sp;return;
 }
 (_printf(114475,$vararg_buffer3)|0);
 STACKTOP = sp;return;
}
function _clear_eols_4314() {
 var $0 = 0, $cmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[29748]|0;
 $cmp = ($0|0)>(0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 (_printf(114568,$vararg_buffer)|0);
 HEAP32[29747] = 0;
 HEAP32[29748] = 0;
 STACKTOP = sp;return;
}
function _bad_cmene_next_state($current_state,$next_token) {
 $current_state = $current_state|0;
 $next_token = $next_token|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add = 0, $add7 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx20 = 0, $arrayidx23 = 0, $arrayidx8 = 0, $cmp = 0, $cmp10 = 0, $cmp12 = 0, $cmp16 = 0, $cmp4 = 0, $conv = 0, $conv2 = 0, $conv21 = 0, $conv24 = 0, $conv9 = 0, $current_state$addr = 0;
 var $h = 0, $l = 0, $m = 0, $next_token$addr = 0, $retval = 0, $shr = 0, $xm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $current_state$addr = $current_state;
 $next_token$addr = $next_token;
 L1: while(1) {
  $0 = $current_state$addr;
  $cmp = ($0|0)>=(0);
  if (!($cmp)) {
   label = 11;
   break;
  }
  $1 = $current_state$addr;
  $arrayidx = (41784 + ($1<<1)|0);
  $2 = HEAP16[$arrayidx>>1]|0;
  $conv = $2&65535;
  $l = $conv;
  $3 = $current_state$addr;
  $add = (($3) + 1)|0;
  $arrayidx1 = (41784 + ($add<<1)|0);
  $4 = HEAP16[$arrayidx1>>1]|0;
  $conv2 = $4&65535;
  $h = $conv2;
  while(1) {
   $5 = $h;
   $6 = $l;
   $cmp4 = ($5|0)>($6|0);
   if (!($cmp4)) {
    break;
   }
   $7 = $h;
   $8 = $l;
   $add7 = (($7) + ($8))|0;
   $shr = $add7 >> 1;
   $m = $shr;
   $9 = $m;
   $arrayidx8 = (114642 + ($9)|0);
   $10 = HEAP8[$arrayidx8>>0]|0;
   $conv9 = $10&255;
   $xm = $conv9;
   $11 = $xm;
   $12 = $next_token$addr;
   $cmp10 = ($11|0)==($12|0);
   $13 = $m;
   if ($cmp10) {
    label = 12;
    break L1;
   }
   $14 = $l;
   $cmp12 = ($13|0)==($14|0);
   if ($cmp12) {
    break;
   }
   $15 = $xm;
   $16 = $next_token$addr;
   $cmp16 = ($15|0)>($16|0);
   $17 = $m;
   if ($cmp16) {
    $h = $17;
    continue;
   } else {
    $l = $17;
    continue;
   }
  }
  $18 = $current_state$addr;
  $arrayidx20 = (41826 + ($18<<1)|0);
  $19 = HEAP16[$arrayidx20>>1]|0;
  $conv21 = $19 << 16 >> 16;
  $current_state$addr = $conv21;
 }
 if ((label|0) == 11) {
  $retval = -1;
  $21 = $retval;
  STACKTOP = sp;return ($21|0);
 }
 else if ((label|0) == 12) {
  $arrayidx23 = (41866 + ($13<<1)|0);
  $20 = HEAP16[$arrayidx23>>1]|0;
  $conv24 = $20 << 16 >> 16;
  $retval = $conv24;
  $21 = $retval;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _is_bad_cmene($word,$split,$ladoi,$tail) {
 $word = $word|0;
 $split = $split|0;
 $ladoi = $ladoi|0;
 $tail = $tail|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $arrayidx = 0, $arrayidx16 = 0, $arrayidx21 = 0, $arrayidx3 = 0, $call = 0, $cmp = 0, $cmp17 = 0;
 var $cmp4 = 0, $cmp6 = 0, $conv = 0, $conv1 = 0, $cs = 0, $incdec$ptr = 0, $ladoi$addr = 0, $ladoi_1 = 0, $mc = 0, $ns = 0, $or$cond = 0, $p = 0, $res = 0, $retval = 0, $split$addr = 0, $tail$addr = 0, $tobool = 0, $tobool12 = 0, $tobool22 = 0, $tobool26 = 0;
 var $tobool9 = 0, $word$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $word$addr = $word;
 $split$addr = $split;
 $ladoi$addr = $ladoi;
 $tail$addr = $tail;
 $cs = 0;
 $0 = $word$addr;
 $p = $0;
 while(1) {
  $1 = $p;
  $2 = HEAP8[$1>>0]|0;
  $tobool = ($2<<24>>24)!=(0);
  if (!($tobool)) {
   break;
  }
  $3 = $p;
  $4 = HEAP8[$3>>0]|0;
  $conv = $4 << 24 >> 24;
  $and = $conv & 255;
  $arrayidx = (114717 + ($and)|0);
  $5 = HEAP8[$arrayidx>>0]|0;
  $conv1 = $5&255;
  $mc = $conv1;
  $6 = $mc;
  $cmp = ($6|0)==(10);
  if (!($cmp)) {
   $7 = $cs;
   $8 = $mc;
   $call = (_bad_cmene_next_state($7,$8)|0);
   $ns = $call;
   $9 = $ns;
   $arrayidx3 = (31104 + ($9<<2)|0);
   $10 = HEAP32[$arrayidx3>>2]|0;
   $res = $10;
   $11 = $res;
   $cmp4 = ($11|0)==(3);
   $12 = $res;
   $cmp6 = ($12|0)==(2);
   $or$cond = $cmp4 | $cmp6;
   if ($or$cond) {
    label = 5;
    break;
   }
   $19 = $ns;
   $arrayidx16 = (31184 + ($19<<2)|0);
   $20 = HEAP32[$arrayidx16>>2]|0;
   $cmp17 = ($20|0)==(1);
   if ($cmp17) {
    $21 = $p;
    $ladoi_1 = $21;
   }
   $22 = $ns;
   $cs = $22;
  }
  $23 = $p;
  $incdec$ptr = ((($23)) + 1|0);
  $p = $incdec$ptr;
 }
 if ((label|0) == 5) {
  $13 = $ladoi$addr;
  $tobool9 = ($13|0)!=(0|0);
  if ($tobool9) {
   $14 = $ladoi_1;
   $15 = $ladoi$addr;
   HEAP32[$15>>2] = $14;
  }
  $16 = $tail$addr;
  $tobool12 = ($16|0)!=(0|0);
  if ($tobool12) {
   $17 = $p;
   $18 = $tail$addr;
   HEAP32[$18>>2] = $17;
  }
 }
 $24 = $ns;
 $arrayidx21 = (31104 + ($24<<2)|0);
 $25 = HEAP32[$arrayidx21>>2]|0;
 $res = $25;
 $26 = $split$addr;
 $tobool22 = ($26|0)!=(0|0);
 if ($tobool22) {
  $27 = $split$addr;
  HEAP32[$27>>2] = 0;
 }
 $28 = $res;
 switch ($28|0) {
 case 1:  {
  $retval = 0;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
  break;
 }
 case 2:  {
  $29 = $split$addr;
  $tobool26 = ($29|0)!=(0|0);
  if ($tobool26) {
   $30 = $split$addr;
   HEAP32[$30>>2] = 1;
  }
  $retval = 1;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
  break;
 }
 case 0: case 3:  {
  $retval = 1;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
  break;
 }
 default: {
  $retval = 0;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 }
 }
 return (0)|0;
}
function _error_scan($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $c = 0, $c1 = 0, $call = 0, $children = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp3 = 0, $cmp6 = 0, $data = 0, $data7 = 0, $i = 0, $inc = 0, $nc = 0, $nt = 0;
 var $start_column = 0, $start_line = 0, $type = 0, $type2 = 0, $type5 = 0, $type9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $x$addr = $x;
 $0 = $x$addr;
 $type = ((($0)) + 40|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(10);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $2 = $x$addr;
 $data = ((($2)) + 44|0);
 $nt = $data;
 $3 = $nt;
 $4 = HEAP32[$3>>2]|0;
 $nc = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $nc;
  $cmp1 = ($5|0)<($6|0);
  $7 = $nt;
  if (!($cmp1)) {
   break;
  }
  $children = ((($7)) + 16|0);
  $8 = HEAP32[$children>>2]|0;
  $9 = $i;
  $arrayidx = (($8) + ($9<<2)|0);
  $10 = HEAP32[$arrayidx>>2]|0;
  $c = $10;
  $11 = $c;
  _error_scan($11);
  $12 = $i;
  $inc = (($12) + 1)|0;
  $i = $inc;
 }
 $type2 = ((($7)) + 12|0);
 $13 = HEAP32[$type2>>2]|0;
 $cmp3 = ($13|0)==(13);
 if (!($cmp3)) {
  STACKTOP = sp;return;
 }
 $14 = $x$addr;
 $call = (_child_ref($14,0)|0);
 $c1 = $call;
 $15 = $c1;
 $type5 = ((($15)) + 40|0);
 $16 = HEAP32[$type5>>2]|0;
 $cmp6 = ($16|0)==(10);
 if (!($cmp6)) {
  STACKTOP = sp;return;
 }
 $17 = $c1;
 $data7 = ((($17)) + 44|0);
 $type9 = ((($data7)) + 12|0);
 $18 = HEAP32[$type9>>2]|0;
 $cmp10 = ($18|0)==(138);
 if (!($cmp10)) {
  STACKTOP = sp;return;
 }
 $19 = HEAP32[7856]|0;
 $20 = $x$addr;
 $start_line = ((($20)) + 32|0);
 $21 = HEAP32[$start_line>>2]|0;
 $22 = $x$addr;
 $start_column = ((($22)) + 36|0);
 $23 = HEAP32[$start_column>>2]|0;
 HEAP32[$vararg_buffer>>2] = $21;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $23;
 (_fprintf($19,114973,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _initialise_4330() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[29751] = 3;
 HEAP8[168072] = 0;
 HEAP8[172168] = 0;
 HEAP8[176264] = 0;
 return;
}
function _write_prologue_4331() {
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 (_printf(115236,$vararg_buffer)|0);
 (_printf(115930,$vararg_buffer1)|0);
 (_printf(116194,$vararg_buffer3)|0);
 STACKTOP = sp;return;
}
function _write_open_bracket_4332($type,$subscript) {
 $type = $type|0;
 $subscript = $subscript|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp29 = 0, $conv = 0, $conv1 = 0, $subscript$addr = 0, $switch = 0;
 var $tobool = 0, $tobool2 = 0, $type$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer35 = sp + 120|0;
 $vararg_buffer32 = sp + 112|0;
 $vararg_buffer30 = sp + 104|0;
 $vararg_buffer27 = sp + 96|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer20 = sp + 72|0;
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $type$addr = $type;
 $subscript$addr = $subscript;
 $0 = $type$addr;
 $cmp = ($0|0)==(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $1 = HEAP8[172168]|0;
 $conv = $1 << 24 >> 24;
 $tobool = ($conv|0)!=(0);
 if ($tobool) {
  label = 4;
 } else {
  $2 = HEAP8[176264]|0;
  $conv1 = $2 << 24 >> 24;
  $tobool2 = ($conv1|0)!=(0);
  if ($tobool2) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _flush_block();
 }
 _clear_eols_4349();
 $3 = HEAP32[29751]|0;
 $$off = (($3) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  (_printf(116343,$vararg_buffer)|0);
 }
 $4 = $type$addr;
 switch ($4|0) {
 case 7:  {
  (_printf(115230,$vararg_buffer30)|0);
  $11 = $subscript$addr;
  HEAP32[$vararg_buffer32>>2] = $11;
  (_printf(115145,$vararg_buffer32)|0);
  break;
 }
 case 1:  {
  (_printf(116406,$vararg_buffer1)|0);
  $5 = $subscript$addr;
  HEAP32[$vararg_buffer3>>2] = $5;
  (_printf(115145,$vararg_buffer3)|0);
  break;
 }
 case 2:  {
  (_printf(116408,$vararg_buffer5)|0);
  $6 = $subscript$addr;
  HEAP32[$vararg_buffer7>>2] = $6;
  (_printf(115145,$vararg_buffer7)|0);
  break;
 }
 case 3:  {
  (_printf(115198,$vararg_buffer10)|0);
  $7 = $subscript$addr;
  HEAP32[$vararg_buffer12>>2] = $7;
  (_printf(115145,$vararg_buffer12)|0);
  break;
 }
 case 4:  {
  (_printf(115201,$vararg_buffer15)|0);
  $8 = $subscript$addr;
  HEAP32[$vararg_buffer17>>2] = $8;
  (_printf(115145,$vararg_buffer17)|0);
  break;
 }
 case 5:  {
  (_printf(115211,$vararg_buffer20)|0);
  $9 = $subscript$addr;
  HEAP32[$vararg_buffer22>>2] = $9;
  (_printf(115145,$vararg_buffer22)|0);
  break;
 }
 case 6:  {
  (_printf(115220,$vararg_buffer25)|0);
  $10 = $subscript$addr;
  HEAP32[$vararg_buffer27>>2] = $10;
  (_printf(115145,$vararg_buffer27)|0);
  break;
 }
 default: {
 }
 }
 $12 = $type$addr;
 $cmp29 = ($12|0)!=(0);
 if ($cmp29) {
  (_printf(116343,$vararg_buffer35)|0);
 }
 HEAP32[29751] = 0;
 STACKTOP = sp;return;
}
function _write_close_bracket_4333($type,$subscript) {
 $type = $type|0;
 $subscript = $subscript|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp29 = 0, $cond = 0, $conv = 0, $conv1 = 0, $subscript$addr = 0, $tobool = 0;
 var $tobool2 = 0, $type$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer35 = sp + 120|0;
 $vararg_buffer32 = sp + 112|0;
 $vararg_buffer30 = sp + 104|0;
 $vararg_buffer27 = sp + 96|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer20 = sp + 72|0;
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $type$addr = $type;
 $subscript$addr = $subscript;
 $0 = $type$addr;
 $cmp = ($0|0)==(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $1 = HEAP8[172168]|0;
 $conv = $1 << 24 >> 24;
 $tobool = ($conv|0)!=(0);
 if ($tobool) {
  label = 4;
 } else {
  $2 = HEAP8[176264]|0;
  $conv1 = $2 << 24 >> 24;
  $tobool2 = ($conv1|0)!=(0);
  if ($tobool2) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _flush_block();
 }
 $3 = HEAP32[29751]|0;
 $cond = ($3|0)==(0);
 if ($cond) {
  (_printf(116343,$vararg_buffer)|0);
 }
 $4 = $type$addr;
 switch ($4|0) {
 case 7:  {
  (_printf(115192,$vararg_buffer30)|0);
  $11 = $subscript$addr;
  HEAP32[$vararg_buffer32>>2] = $11;
  (_printf(115145,$vararg_buffer32)|0);
  break;
 }
 case 1:  {
  (_printf(116384,$vararg_buffer1)|0);
  $5 = $subscript$addr;
  HEAP32[$vararg_buffer3>>2] = $5;
  (_printf(115145,$vararg_buffer3)|0);
  break;
 }
 case 2:  {
  (_printf(116386,$vararg_buffer5)|0);
  $6 = $subscript$addr;
  HEAP32[$vararg_buffer7>>2] = $6;
  (_printf(115145,$vararg_buffer7)|0);
  break;
 }
 case 3:  {
  (_printf(115160,$vararg_buffer10)|0);
  $7 = $subscript$addr;
  HEAP32[$vararg_buffer12>>2] = $7;
  (_printf(115145,$vararg_buffer12)|0);
  break;
 }
 case 4:  {
  (_printf(115163,$vararg_buffer15)|0);
  $8 = $subscript$addr;
  HEAP32[$vararg_buffer17>>2] = $8;
  (_printf(115145,$vararg_buffer17)|0);
  break;
 }
 case 5:  {
  (_printf(115173,$vararg_buffer20)|0);
  $9 = $subscript$addr;
  HEAP32[$vararg_buffer22>>2] = $9;
  (_printf(115145,$vararg_buffer22)|0);
  break;
 }
 case 6:  {
  (_printf(115182,$vararg_buffer25)|0);
  $10 = $subscript$addr;
  HEAP32[$vararg_buffer27>>2] = $10;
  (_printf(115145,$vararg_buffer27)|0);
  break;
 }
 default: {
 }
 }
 $12 = $type$addr;
 $cmp29 = ($12|0)!=(0);
 if ($cmp29) {
  (_printf(116343,$vararg_buffer35)|0);
 }
 HEAP32[29751] = 2;
 STACKTOP = sp;return;
}
function _set_eols_4334($eols) {
 $eols = $eols|0;
 var $0 = 0, $1 = 0, $add = 0, $eols$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $eols$addr = $eols;
 $0 = $eols$addr;
 $1 = HEAP32[29750]|0;
 $add = (($1) + ($0))|0;
 HEAP32[29750] = $add;
 STACKTOP = sp;return;
}
function _write_lojban_text_4335($text) {
 $text = $text|0;
 var $0 = 0, $1 = 0, $text$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $text$addr = $text;
 $0 = HEAP8[176264]|0;
 $tobool = ($0<<24>>24)!=(0);
 if ($tobool) {
  _flush_block();
 }
 _clear_eols_4349();
 (_strcat(172168,116343)|0);
 $1 = $text$addr;
 (_strcat(172168,$1)|0);
 STACKTOP = sp;return;
}
function _write_translation_4336($text) {
 $text = $text|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call2 = 0, $cmp = 0, $conv = 0, $text$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $text$addr = $text;
 $0 = $text$addr;
 $1 = HEAP8[$0>>0]|0;
 $conv = $1 << 24 >> 24;
 $cmp = ($conv|0)==(36);
 if ($cmp) {
  $2 = $text$addr;
  _write_special_4359($2);
  STACKTOP = sp;return;
 } else {
  (_strcat(176264,116343)|0);
  $3 = $text$addr;
  $call2 = (_make_texsafe($3)|0);
  (_strcat(176264,$call2)|0);
  STACKTOP = sp;return;
 }
}
function _start_tags_4337() {
 var $0 = 0, $1 = 0, $conv = 0, $conv1 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[172168]|0;
 $conv = $0 << 24 >> 24;
 $tobool = ($conv|0)!=(0);
 if ($tobool) {
  label = 3;
 } else {
  $1 = HEAP8[176264]|0;
  $conv1 = $1 << 24 >> 24;
  $tobool2 = ($conv1|0)!=(0);
  if ($tobool2) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  _flush_block();
 }
 _clear_eols_4349();
 (_strcat(168072,116408)|0);
 HEAP32[29749] = 1;
 return;
}
function _end_tags_4338() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_strcat(168072,116243)|0);
 return;
}
function _start_tag_4339() {
 var $0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[29749]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  (_strcat(168072,116240)|0);
 }
 HEAP32[29749] = 0;
 return;
}
function _write_tag_text_4340($brivla,$place,$trans,$brac) {
 $brivla = $brivla|0;
 $place = $place|0;
 $trans = $trans|0;
 $brac = $brac|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $brac$addr = 0, $brivla$addr = 0, $buffer = 0, $call = 0, $place$addr = 0, $tobool = 0, $tobool5 = 0, $trans$addr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1072|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $buffer = sp + 48|0;
 $brivla$addr = $brivla;
 $place$addr = $place;
 $trans$addr = $trans;
 $brac$addr = $brac;
 $0 = $brac$addr;
 $tobool = ($0|0)!=(0);
 $1 = $brivla$addr;
 $2 = $place$addr;
 $3 = $trans$addr;
 $call = (_make_texsafe($3)|0);
 if ($tobool) {
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $2;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $call;
  (_sprintf($buffer,116222,$vararg_buffer)|0);
 } else {
  HEAP32[$vararg_buffer3>>2] = $1;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $2;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = $call;
  (_sprintf($buffer,116232,$vararg_buffer3)|0);
 }
 $4 = HEAP8[(168073)>>0]|0;
 $tobool5 = ($4<<24>>24)!=(0);
 if (!($tobool5)) {
  (_strcat(168072,$buffer)|0);
  STACKTOP = sp;return;
 }
 (_strcat(168072,116341)|0);
 (_strcat(168072,$buffer)|0);
 STACKTOP = sp;return;
}
function _write_partial_tag_text_4341($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $buffer = 0, $t$addr = 0, $tobool = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $vararg_buffer = sp;
 $buffer = sp + 8|0;
 $t$addr = $t;
 $0 = $t$addr;
 HEAP32[$vararg_buffer>>2] = $0;
 (_sprintf($buffer,116219,$vararg_buffer)|0);
 $1 = HEAP8[(168073)>>0]|0;
 $tobool = ($1<<24>>24)!=(0);
 if (!($tobool)) {
  (_strcat(168072,$buffer)|0);
  STACKTOP = sp;return;
 }
 (_strcat(168072,116341)|0);
 (_strcat(168072,$buffer)|0);
 STACKTOP = sp;return;
}
function _flush_block() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cmp = 0, $conv = 0, $conv4 = 0, $incdec$ptr = 0, $p = 0, $tobool = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = 172168;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 176264;
 (_printf(115051,$vararg_buffer)|0);
 (_printf(115087,$vararg_buffer2)|0);
 $p = 168072;
 while(1) {
  $0 = $p;
  $1 = HEAP8[$0>>0]|0;
  $tobool = ($1<<24>>24)!=(0);
  if (!($tobool)) {
   break;
  }
  $2 = $p;
  $3 = HEAP8[$2>>0]|0;
  $conv = $3 << 24 >> 24;
  $cmp = ($conv|0)==(10);
  if ($cmp) {
   (_printf(115095,$vararg_buffer4)|0);
  } else {
   $4 = $p;
   $5 = HEAP8[$4>>0]|0;
   $conv4 = $5 << 24 >> 24;
   (_putchar($conv4)|0);
  }
  $6 = $p;
  $incdec$ptr = ((($6)) + 1|0);
  $p = $incdec$ptr;
 }
 (_printf(115112,$vararg_buffer6)|0);
 HEAP8[168072] = 0;
 HEAP8[172168] = 0;
 HEAP8[176264] = 0;
 STACKTOP = sp;return;
}
function _clear_eols_4349() {
 var $0 = 0, $1 = 0, $cmp = 0, $cmp1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[29750]|0;
 $cmp = ($0|0)>(0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[29750]|0;
 $cmp1 = ($1|0)>(1);
 if ($cmp1) {
  (_printf(115036,$vararg_buffer)|0);
 } else {
  (_printf(116259,$vararg_buffer1)|0);
 }
 HEAP32[29751] = 0;
 HEAP32[29750] = 0;
 STACKTOP = sp;return;
}
function _write_special_4359($text) {
 $text = $text|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $call2 = 0, $call7 = 0, $text$addr = 0, $tobool = 0, $tobool3 = 0, $tobool8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $text$addr = $text;
 $0 = $text$addr;
 $call = (_strcmp($0,116345)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  (_strcat(176264,115118)|0);
  STACKTOP = sp;return;
 }
 $1 = $text$addr;
 $call2 = (_strcmp($1,116359)|0);
 $tobool3 = ($call2|0)!=(0);
 if (!($tobool3)) {
  (_strcat(176264,116251)|0);
  STACKTOP = sp;return;
 }
 $2 = $text$addr;
 $call7 = (_strcmp($2,116372)|0);
 $tobool8 = ($call7|0)!=(0);
 if ($tobool8) {
  STACKTOP = sp;return;
 }
 (_strcat(176264,116254)|0);
 STACKTOP = sp;return;
}
function _initialise_4386() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[29753] = 3;
 return;
}
function _write_prologue_4387() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _write_epilog_4388() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 (_printf(116341,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _write_open_bracket_4389($type,$subscript) {
 $type = $type|0;
 $subscript = $subscript|0;
 var $$off = 0, $0 = 0, $1 = 0, $subscript$addr = 0, $switch = 0, $type$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $type$addr = $type;
 $subscript$addr = $subscript;
 _clear_eols_4423();
 $0 = HEAP32[29753]|0;
 $$off = (($0) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  (_printf(116343,$vararg_buffer)|0);
 }
 $1 = $type$addr;
 switch ($1|0) {
 case 7:  {
  (_printf(116422,$vararg_buffer13)|0);
  break;
 }
 case 1:  {
  (_printf(116406,$vararg_buffer1)|0);
  break;
 }
 case 2:  {
  (_printf(116408,$vararg_buffer3)|0);
  break;
 }
 case 3:  {
  (_printf(116410,$vararg_buffer5)|0);
  break;
 }
 case 4:  {
  (_printf(116412,$vararg_buffer7)|0);
  break;
 }
 case 5:  {
  (_printf(116257,$vararg_buffer9)|0);
  break;
 }
 case 6:  {
  (_printf(116257,$vararg_buffer11)|0);
  break;
 }
 default: {
 }
 }
 HEAP32[29753] = 0;
 STACKTOP = sp;return;
}
function _write_close_bracket_4390($type,$subscript) {
 $type = $type|0;
 $subscript = $subscript|0;
 var $0 = 0, $1 = 0, $cond = 0, $subscript$addr = 0, $type$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $type$addr = $type;
 $subscript$addr = $subscript;
 $0 = HEAP32[29753]|0;
 $cond = ($0|0)==(0);
 if ($cond) {
  (_printf(116343,$vararg_buffer)|0);
 }
 $1 = $type$addr;
 switch ($1|0) {
 case 7:  {
  (_printf(116399,$vararg_buffer13)|0);
  break;
 }
 case 1:  {
  (_printf(116384,$vararg_buffer1)|0);
  break;
 }
 case 2:  {
  (_printf(116386,$vararg_buffer3)|0);
  break;
 }
 case 3:  {
  (_printf(116388,$vararg_buffer5)|0);
  break;
 }
 case 4:  {
  (_printf(116390,$vararg_buffer7)|0);
  break;
 }
 case 5:  {
  (_printf(116257,$vararg_buffer9)|0);
  break;
 }
 case 6:  {
  (_printf(116257,$vararg_buffer11)|0);
  break;
 }
 default: {
 }
 }
 HEAP32[29753] = 2;
 STACKTOP = sp;return;
}
function _set_eols_4391($eols) {
 $eols = $eols|0;
 var $0 = 0, $1 = 0, $add = 0, $eols$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $eols$addr = $eols;
 $0 = $eols$addr;
 $1 = HEAP32[29754]|0;
 $add = (($1) + ($0))|0;
 HEAP32[29754] = $add;
 STACKTOP = sp;return;
}
function _write_lojban_text_4392($text) {
 $text = $text|0;
 var $$off = 0, $0 = 0, $1 = 0, $2 = 0, $switch = 0, $text$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $text$addr = $text;
 $0 = HEAP32[29753]|0;
 $$off = (($0) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  (_printf(116343,$vararg_buffer)|0);
 }
 $1 = $text$addr;
 HEAP32[$vararg_buffer1>>2] = $1;
 (_printf(116219,$vararg_buffer1)|0);
 $2 = HEAP32[7981]|0;
 (_fflush($2)|0);
 HEAP32[29753] = 1;
 STACKTOP = sp;return;
}
function _write_translation_4393($text) {
 $text = $text|0;
 var $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $conv = 0, $switch = 0, $text$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $text$addr = $text;
 $0 = HEAP32[29753]|0;
 $$off = (($0) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  (_printf(116343,$vararg_buffer)|0);
 }
 $1 = $text$addr;
 $2 = HEAP8[$1>>0]|0;
 $conv = $2 << 24 >> 24;
 $cmp = ($conv|0)==(36);
 $3 = $text$addr;
 if ($cmp) {
  _write_special_4408($3);
  HEAP32[29753] = 1;
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer1>>2] = $3;
  (_printf(116246,$vararg_buffer1)|0);
  HEAP32[29753] = 1;
  STACKTOP = sp;return;
 }
}
function _start_tags_4394() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 (_printf(116408,$vararg_buffer)|0);
 HEAP32[29752] = 1;
 STACKTOP = sp;return;
}
function _end_tags_4395() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 (_printf(116243,$vararg_buffer)|0);
 HEAP32[29753] = 2;
 STACKTOP = sp;return;
}
function _start_tag_4396() {
 var $0 = 0, $tobool = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[29752]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  (_printf(116240,$vararg_buffer)|0);
 }
 HEAP32[29752] = 0;
 STACKTOP = sp;return;
}
function _write_tag_text_4397($brivla,$place,$trans,$brac) {
 $brivla = $brivla|0;
 $place = $place|0;
 $trans = $trans|0;
 $brac = $brac|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $brac$addr = 0, $brivla$addr = 0, $place$addr = 0, $tobool = 0, $trans$addr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $brivla$addr = $brivla;
 $place$addr = $place;
 $trans$addr = $trans;
 $brac$addr = $brac;
 $0 = $brac$addr;
 $tobool = ($0|0)!=(0);
 $1 = $brivla$addr;
 $2 = $place$addr;
 $3 = $trans$addr;
 if ($tobool) {
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $2;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $3;
  (_printf(116222,$vararg_buffer)|0);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer3>>2] = $1;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $2;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = $3;
  (_printf(116232,$vararg_buffer3)|0);
  STACKTOP = sp;return;
 }
}
function _write_partial_tag_text_4398($t) {
 $t = $t|0;
 var $0 = 0, $t$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $t$addr = $t;
 $0 = $t$addr;
 HEAP32[$vararg_buffer>>2] = $0;
 (_printf(116219,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _write_special_4408($text) {
 $text = $text|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $call2 = 0, $call7 = 0, $text$addr = 0, $tobool = 0, $tobool3 = 0, $tobool8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $text$addr = $text;
 $0 = $text$addr;
 $call = (_strcmp($0,116345)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  (_printf(116356,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $1 = $text$addr;
 $call2 = (_strcmp($1,116359)|0);
 $tobool3 = ($call2|0)!=(0);
 if (!($tobool3)) {
  (_printf(116251,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 }
 $2 = $text$addr;
 $call7 = (_strcmp($2,116372)|0);
 $tobool8 = ($call7|0)!=(0);
 if ($tobool8) {
  STACKTOP = sp;return;
 }
 (_printf(116254,$vararg_buffer3)|0);
 STACKTOP = sp;return;
}
function _clear_eols_4423() {
 var $0 = 0, $cmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[29754]|0;
 $cmp = ($0|0)>(0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 (_printf(116259,$vararg_buffer)|0);
 HEAP32[29753] = 0;
 HEAP32[29754] = 0;
 STACKTOP = sp;return;
}
function _initialise_4432() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx = 0, $cmp = 0, $i = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 HEAP32[29758] = 3;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(32);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (180360 + ($1<<9)|0);
  HEAP8[$arrayidx>>0] = 0;
  $2 = $i;
  $inc = (($2) + 1)|0;
  $i = $inc;
 }
 HEAP8[196744] = 0;
 HEAP8[197256] = 0;
 HEAP32[29755] = 0;
 _clear_line_buffer();
 $3 = HEAP32[29719]|0;
 HEAP32[7855] = $3;
 STACKTOP = sp;return;
}
function _write_prologue_4433() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _write_epilog_4434() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _flush_block_4452();
 _flush_line();
 return;
}
function _write_open_bracket_4435($type,$subscript) {
 $type = $type|0;
 $subscript = $subscript|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brac = 0, $brac1 = 0, $brac2 = 0, $brac3 = 0, $cmp = 0;
 var $cmp4 = 0, $conv = 0, $conv1 = 0, $or$cond = 0, $subscript$addr = 0, $tobool = 0, $tobool15 = 0, $tobool2 = 0, $tobool20 = 0, $type$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $type$addr = $type;
 $subscript$addr = $subscript;
 $0 = $type$addr;
 $cmp = ($0|0)==(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $1 = HEAP8[196744]|0;
 $conv = $1 << 24 >> 24;
 $tobool = ($conv|0)!=(0);
 if ($tobool) {
  label = 4;
 } else {
  $2 = HEAP8[197256]|0;
  $conv1 = $2 << 24 >> 24;
  $tobool2 = ($conv1|0)!=(0);
  $3 = HEAP32[29755]|0;
  $cmp4 = ($3|0)>(0);
  $or$cond = $tobool2 | $cmp4;
  if ($or$cond) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _flush_block_4452();
 }
 _clear_eols_4453();
 $brac3 = 0;
 $brac2 = 0;
 $brac1 = 0;
 $brac = 0;
 $4 = $type$addr;
 switch ($4|0) {
 case 0:  {
  $brac = 0;
  break;
 }
 case 1:  {
  $brac = 116406;
  break;
 }
 case 2:  {
  $brac = 116408;
  break;
 }
 case 3:  {
  $brac = 116410;
  break;
 }
 case 4:  {
  $brac = 116412;
  break;
 }
 case 5:  {
  $brac1 = 116414;
  $brac2 = 116417;
  $brac3 = 116417;
  break;
 }
 case 6:  {
  $brac1 = 116417;
  $brac2 = 116417;
  $brac3 = 116419;
  break;
 }
 case 7:  {
  $brac = 116422;
  break;
 }
 default: {
 }
 }
 $5 = $brac;
 $tobool15 = ($5|0)!=(0|0);
 if ($tobool15) {
  $6 = $brac;
  HEAP32[$vararg_buffer>>2] = $6;
  (_sprintf(196744,116274,$vararg_buffer)|0);
  $7 = $brac;
  HEAP32[$vararg_buffer1>>2] = $7;
  (_sprintf(197256,116274,$vararg_buffer1)|0);
  $8 = $brac;
  HEAP32[$vararg_buffer4>>2] = $8;
  (_sprintf(180360,116274,$vararg_buffer4)|0);
  $9 = $subscript$addr;
  HEAP32[$vararg_buffer7>>2] = $9;
  (_sprintf((180872),116402,$vararg_buffer7)|0);
  label = 18;
 } else {
  $10 = $brac1;
  $tobool20 = ($10|0)!=(0|0);
  if ($tobool20) {
   $11 = $brac1;
   HEAP32[$vararg_buffer10>>2] = $11;
   (_sprintf(196744,116274,$vararg_buffer10)|0);
   $12 = $brac2;
   HEAP32[$vararg_buffer13>>2] = $12;
   (_sprintf(197256,116274,$vararg_buffer13)|0);
   $13 = $brac3;
   HEAP32[$vararg_buffer16>>2] = $13;
   (_sprintf(180360,116274,$vararg_buffer16)|0);
   $14 = $subscript$addr;
   HEAP32[$vararg_buffer19>>2] = $14;
   (_sprintf((180872),116402,$vararg_buffer19)|0);
   label = 18;
  }
 }
 if ((label|0) == 18) {
  HEAP32[29755] = 2;
 }
 HEAP32[29758] = 0;
 STACKTOP = sp;return;
}
function _write_close_bracket_4436($type,$subscript) {
 $type = $type|0;
 $subscript = $subscript|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brac = 0, $brac1 = 0, $brac2 = 0, $brac3 = 0, $cmp = 0, $conv = 0;
 var $conv1 = 0, $subscript$addr = 0, $tobool = 0, $tobool12 = 0, $tobool17 = 0, $tobool2 = 0, $type$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $type$addr = $type;
 $subscript$addr = $subscript;
 $0 = $type$addr;
 $cmp = ($0|0)==(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $1 = HEAP8[196744]|0;
 $conv = $1 << 24 >> 24;
 $tobool = ($conv|0)!=(0);
 if ($tobool) {
  label = 4;
 } else {
  $2 = HEAP8[197256]|0;
  $conv1 = $2 << 24 >> 24;
  $tobool2 = ($conv1|0)!=(0);
  if ($tobool2) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _flush_block_4452();
 }
 $brac3 = 0;
 $brac2 = 0;
 $brac1 = 0;
 $brac = 0;
 $3 = $type$addr;
 switch ($3|0) {
 case 0:  {
  $brac = 0;
  break;
 }
 case 1:  {
  $brac = 116384;
  break;
 }
 case 2:  {
  $brac = 116386;
  break;
 }
 case 3:  {
  $brac = 116388;
  break;
 }
 case 4:  {
  $brac = 116390;
  break;
 }
 case 5:  {
  $brac1 = 116392;
  $brac2 = 116394;
  $brac3 = 116394;
  break;
 }
 case 6:  {
  $brac1 = 116394;
  $brac2 = 116394;
  $brac3 = 116397;
  break;
 }
 case 7:  {
  $brac = 116399;
  break;
 }
 default: {
 }
 }
 $4 = $brac;
 $tobool12 = ($4|0)!=(0|0);
 if ($tobool12) {
  $5 = $brac;
  HEAP32[$vararg_buffer>>2] = $5;
  (_sprintf(196744,116274,$vararg_buffer)|0);
  $6 = $brac;
  HEAP32[$vararg_buffer1>>2] = $6;
  (_sprintf(197256,116274,$vararg_buffer1)|0);
  $7 = $brac;
  HEAP32[$vararg_buffer4>>2] = $7;
  (_sprintf(180360,116274,$vararg_buffer4)|0);
  $8 = $subscript$addr;
  HEAP32[$vararg_buffer7>>2] = $8;
  (_sprintf((180872),116402,$vararg_buffer7)|0);
  label = 18;
 } else {
  $9 = $brac1;
  $tobool17 = ($9|0)!=(0|0);
  if ($tobool17) {
   $10 = $brac1;
   HEAP32[$vararg_buffer10>>2] = $10;
   (_sprintf(196744,116274,$vararg_buffer10)|0);
   $11 = $brac2;
   HEAP32[$vararg_buffer13>>2] = $11;
   (_sprintf(197256,116274,$vararg_buffer13)|0);
   $12 = $brac3;
   HEAP32[$vararg_buffer16>>2] = $12;
   (_sprintf(180360,116274,$vararg_buffer16)|0);
   $13 = $subscript$addr;
   HEAP32[$vararg_buffer19>>2] = $13;
   (_sprintf((180872),116402,$vararg_buffer19)|0);
   label = 18;
  }
 }
 if ((label|0) == 18) {
  HEAP32[29755] = 2;
 }
 HEAP32[29758] = 2;
 STACKTOP = sp;return;
}
function _set_eols_4437($eols) {
 $eols = $eols|0;
 var $0 = 0, $1 = 0, $add = 0, $eols$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $eols$addr = $eols;
 $0 = $eols$addr;
 $1 = HEAP32[29757]|0;
 $add = (($1) + ($0))|0;
 HEAP32[29757] = $add;
 STACKTOP = sp;return;
}
function _write_lojban_text_4438($text) {
 $text = $text|0;
 var $0 = 0, $1 = 0, $text$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $text$addr = $text;
 $0 = HEAP8[197256]|0;
 $tobool = ($0<<24>>24)!=(0);
 if ($tobool) {
  _flush_block_4452();
 }
 _clear_eols_4453();
 $1 = $text$addr;
 (_strcat(196744,$1)|0);
 (_strcat(196744,116343)|0);
 STACKTOP = sp;return;
}
function _write_translation_4439($text) {
 $text = $text|0;
 var $0 = 0, $1 = 0, $2 = 0, $cmp = 0, $conv = 0, $text$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $text$addr = $text;
 $0 = $text$addr;
 $1 = HEAP8[$0>>0]|0;
 $conv = $1 << 24 >> 24;
 $cmp = ($conv|0)==(36);
 $2 = $text$addr;
 if ($cmp) {
  _write_special_4459($2);
  STACKTOP = sp;return;
 } else {
  (_strcat(197256,$2)|0);
  (_strcat(197256,116343)|0);
  STACKTOP = sp;return;
 }
}
function _start_tags_4440() {
 var $0 = 0, $1 = 0, $conv = 0, $conv1 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[196744]|0;
 $conv = $0 << 24 >> 24;
 $tobool = ($conv|0)!=(0);
 if ($tobool) {
  label = 3;
 } else {
  $1 = HEAP8[197256]|0;
  $conv1 = $1 << 24 >> 24;
  $tobool2 = ($conv1|0)!=(0);
  if ($tobool2) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  _flush_block_4452();
 }
 _clear_eols_4453();
 HEAP32[29756] = 1;
 return;
}
function _end_tags_4441() {
 var $0 = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[29755]|0;
 $inc = (($0) + 1)|0;
 HEAP32[29755] = $inc;
 return;
}
function _start_tag_4442() {
 var $0 = 0, $1 = 0, $inc = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[29756]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  HEAP32[29756] = 0;
  return;
 }
 $1 = HEAP32[29755]|0;
 $inc = (($1) + 1)|0;
 HEAP32[29755] = $inc;
 HEAP32[29756] = 0;
 return;
}
function _write_tag_text_4443($brivla,$place,$trans,$brac) {
 $brivla = $brivla|0;
 $place = $place|0;
 $trans = $trans|0;
 $brac = $brac|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx = 0, $arrayidx8 = 0, $brac$addr = 0, $brivla$addr = 0, $buffer1 = 0, $buffer2 = 0, $place$addr = 0, $tobool = 0, $trans$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $buffer1 = sp + 296|0;
 $buffer2 = sp + 40|0;
 $brivla$addr = $brivla;
 $place$addr = $place;
 $trans$addr = $trans;
 $brac$addr = $brac;
 $0 = $brivla$addr;
 $1 = $place$addr;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 (_sprintf($buffer1,116262,$vararg_buffer)|0);
 $2 = $brac$addr;
 $tobool = ($2|0)!=(0);
 $3 = $trans$addr;
 if ($tobool) {
  HEAP32[$vararg_buffer2>>2] = $3;
  (_sprintf($buffer2,116268,$vararg_buffer2)|0);
 } else {
  HEAP32[$vararg_buffer5>>2] = $3;
  (_sprintf($buffer2,116274,$vararg_buffer5)|0);
 }
 $4 = HEAP32[29755]|0;
 $arrayidx = (180360 + ($4<<9)|0);
 (_strcat($arrayidx,$buffer1)|0);
 $5 = HEAP32[29755]|0;
 $arrayidx8 = (180360 + ($5<<9)|0);
 (_strcat($arrayidx8,$buffer2)|0);
 STACKTOP = sp;return;
}
function _write_partial_tag_text_4444($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $arrayidx = 0, $t$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t$addr = $t;
 $0 = HEAP32[29755]|0;
 $arrayidx = (180360 + ($0<<9)|0);
 $1 = $t$addr;
 (_strcat($arrayidx,$1)|0);
 STACKTOP = sp;return;
}
function _flush_block_4452() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add41 = 0, $arrayidx = 0, $arrayidx23 = 0, $arrayidx26 = 0, $arrayidx28 = 0, $arrayidx36 = 0, $arrayidx48 = 0, $call = 0, $call11 = 0, $call6 = 0, $cmp = 0, $cmp10 = 0, $cmp12 = 0, $cmp15 = 0;
 var $cmp19 = 0, $cmp21 = 0, $cmp3 = 0, $cmp34 = 0, $cmp42 = 0, $cmp46 = 0, $cmp7 = 0, $i = 0, $inc = 0, $inc31 = 0, $inc39 = 0, $inc51 = 0, $len = 0, $max_len = 0, $or$cond = 0, $or$cond$not = 0, $or$cond1 = 0, $tobool = 0, $tobool1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP8[196744]|0;
 $tobool = ($0<<24>>24)!=(0);
 $1 = HEAP8[197256]|0;
 $tobool1 = ($1<<24>>24)!=(0);
 $or$cond = $tobool | $tobool1;
 $or$cond$not = $or$cond ^ 1;
 $2 = HEAP32[29755]|0;
 $cmp = ($2|0)==(0);
 $or$cond1 = $or$cond$not & $cmp;
 if ($or$cond1) {
  STACKTOP = sp;return;
 }
 $max_len = 0;
 $call = (_strlen(196744)|0);
 $len = $call;
 $3 = $len;
 $4 = $max_len;
 $cmp3 = ($3|0)>($4|0);
 if ($cmp3) {
  $5 = $len;
  $max_len = $5;
 }
 $call6 = (_strlen(197256)|0);
 $len = $call6;
 $6 = $len;
 $7 = $max_len;
 $cmp7 = ($6|0)>($7|0);
 if ($cmp7) {
  $8 = $len;
  $max_len = $8;
 }
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = HEAP32[29755]|0;
  $cmp10 = ($9|0)<($10|0);
  if (!($cmp10)) {
   break;
  }
  $11 = $i;
  $arrayidx = (180360 + ($11<<9)|0);
  $call11 = (_strlen($arrayidx)|0);
  $len = $call11;
  $12 = $len;
  $13 = $max_len;
  $cmp12 = ($12|0)>($13|0);
  if ($cmp12) {
   $14 = $len;
   $max_len = $14;
  }
  $15 = $i;
  $inc = (($15) + 1)|0;
  $i = $inc;
 }
 $16 = $max_len;
 $17 = HEAP32[29759]|0;
 $add = (($16) + ($17))|0;
 $18 = HEAP32[7855]|0;
 $cmp15 = ($add|0)>($18|0);
 if ($cmp15) {
  _flush_line();
 }
 $19 = $max_len;
 _append_to_width(196744,197768,$19);
 $20 = $max_len;
 _append_to_width(197256,198280,$20);
 $i = 0;
 while(1) {
  $21 = $i;
  $22 = HEAP32[29755]|0;
  $cmp19 = ($21|0)<($22|0);
  if (!($cmp19)) {
   break;
  }
  $23 = $i;
  $24 = HEAP32[29760]|0;
  $cmp21 = ($23|0)>=($24|0);
  if ($cmp21) {
   $25 = $i;
   $arrayidx23 = (198792 + ($25<<9)|0);
   $26 = HEAP32[29759]|0;
   _append_to_width(215176,$arrayidx23,$26);
  }
  $27 = $i;
  $arrayidx26 = (180360 + ($27<<9)|0);
  $28 = $i;
  $arrayidx28 = (198792 + ($28<<9)|0);
  $29 = $max_len;
  _append_to_width($arrayidx26,$arrayidx28,$29);
  $30 = $i;
  $inc31 = (($30) + 1)|0;
  $i = $inc31;
 }
 $31 = HEAP32[29755]|0;
 $i = $31;
 while(1) {
  $32 = $i;
  $33 = HEAP32[29760]|0;
  $cmp34 = ($32|0)<($33|0);
  if (!($cmp34)) {
   break;
  }
  $34 = $i;
  $arrayidx36 = (198792 + ($34<<9)|0);
  $35 = $max_len;
  _append_to_width(215176,$arrayidx36,$35);
  $36 = $i;
  $inc39 = (($36) + 1)|0;
  $i = $inc39;
 }
 $37 = $max_len;
 $38 = HEAP32[29759]|0;
 $add41 = (($38) + ($37))|0;
 HEAP32[29759] = $add41;
 $39 = HEAP32[29755]|0;
 $40 = HEAP32[29760]|0;
 $cmp42 = ($39|0)>($40|0);
 if ($cmp42) {
  $41 = HEAP32[29755]|0;
  HEAP32[29760] = $41;
 }
 $i = 0;
 while(1) {
  $42 = $i;
  $cmp46 = ($42|0)<(32);
  if (!($cmp46)) {
   break;
  }
  $43 = $i;
  $arrayidx48 = (180360 + ($43<<9)|0);
  HEAP8[$arrayidx48>>0] = 0;
  $44 = $i;
  $inc51 = (($44) + 1)|0;
  $i = $inc51;
 }
 HEAP8[196744] = 0;
 HEAP8[197256] = 0;
 HEAP32[29755] = 0;
 STACKTOP = sp;return;
}
function _clear_eols_4453() {
 var $0 = 0, $1 = 0, $cmp = 0, $cmp1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[29757]|0;
 $cmp = ($0|0)>(0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 _flush_line();
 $1 = HEAP32[29757]|0;
 $cmp1 = ($1|0)>(1);
 if ($cmp1) {
  (_printf(116278,$vararg_buffer)|0);
 } else {
  (_printf(116341,$vararg_buffer1)|0);
 }
 HEAP32[29758] = 0;
 HEAP32[29757] = 0;
 STACKTOP = sp;return;
}
function _flush_line() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $cmp = 0, $cmp4 = 0, $i = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[29759]|0;
 $cmp = ($0|0)==(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[7981]|0;
 (_fputs(197768,$1)|0);
 $2 = HEAP32[7981]|0;
 (_fputs(116341,$2)|0);
 $3 = HEAP32[7981]|0;
 (_fputs(198280,$3)|0);
 $4 = HEAP32[7981]|0;
 (_fputs(116341,$4)|0);
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = HEAP32[29760]|0;
  $cmp4 = ($5|0)<($6|0);
  if (!($cmp4)) {
   break;
  }
  $7 = $i;
  $arrayidx = (198792 + ($7<<9)|0);
  $8 = HEAP32[7981]|0;
  (_fputs($arrayidx,$8)|0);
  $9 = HEAP32[7981]|0;
  (_fputs(116341,$9)|0);
  $10 = $i;
  $inc = (($10) + 1)|0;
  $i = $inc;
 }
 $11 = HEAP32[7981]|0;
 (_fputs(116341,$11)|0);
 _clear_line_buffer();
 STACKTOP = sp;return;
}
function _clear_line_buffer() {
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $cmp = 0, $i = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(32);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (198792 + ($1<<9)|0);
  HEAP8[$arrayidx>>0] = 0;
  $2 = $i;
  $inc = (($2) + 1)|0;
  $i = $inc;
 }
 HEAP32[29760] = 0;
 HEAP8[197768] = 0;
 HEAP8[198280] = 0;
 HEAP32[29759] = 0;
 STACKTOP = sp;return;
}
function _append_to_width($src,$dbuf,$wid) {
 $src = $src|0;
 $dbuf = $dbuf|0;
 $wid = $wid|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx1 = 0, $buffer = 0, $call = 0, $cmp = 0, $dbuf$addr = 0, $i = 0, $inc = 0, $len = 0;
 var $src$addr = 0, $sub = 0, $toadd = 0, $wid$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $buffer = sp + 24|0;
 $src$addr = $src;
 $dbuf$addr = $dbuf;
 $wid$addr = $wid;
 $0 = $src$addr;
 $call = (_strlen($0)|0);
 $len = $call;
 $1 = $wid$addr;
 $2 = $len;
 $sub = (($1) - ($2))|0;
 $toadd = $sub;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $toadd;
  $cmp = ($3|0)<($4|0);
  if (!($cmp)) {
   break;
  }
  $5 = $i;
  $arrayidx = (($buffer) + ($5)|0);
  HEAP8[$arrayidx>>0] = 32;
  $6 = $i;
  $inc = (($6) + 1)|0;
  $i = $inc;
 }
 $7 = $toadd;
 $arrayidx1 = (($buffer) + ($7)|0);
 HEAP8[$arrayidx1>>0] = 0;
 $8 = $dbuf$addr;
 $9 = $src$addr;
 (_strcat($8,$9)|0);
 $10 = $dbuf$addr;
 (_strcat($10,$buffer)|0);
 STACKTOP = sp;return;
}
function _write_special_4459($text) {
 $text = $text|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $call2 = 0, $call7 = 0, $text$addr = 0, $tobool = 0, $tobool3 = 0, $tobool8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $text$addr = $text;
 $0 = $text$addr;
 $call = (_strcmp($0,116345)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  (_strcat(197256,116356)|0);
  STACKTOP = sp;return;
 }
 $1 = $text$addr;
 $call2 = (_strcmp($1,116359)|0);
 $tobool3 = ($call2|0)!=(0);
 if (!($tobool3)) {
  (_strcat(197256,116370)|0);
  STACKTOP = sp;return;
 }
 $2 = $text$addr;
 $call7 = (_strcmp($2,116372)|0);
 $tobool8 = ($call7|0)!=(0);
 if ($tobool8) {
  STACKTOP = sp;return;
 }
 (_strcat(197256,116370)|0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i133 = 0, $$pre$i186 = 0, $$pre$i27$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i187Z2D = 0, $$pre$phi$i28$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink$i = 0, $$sink$i$i = 0, $$sink$i166 = 0, $$sink2$i = 0, $$sink2$i183 = 0, $$sink4$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F290$0$i = 0, $I252$0$i$i = 0, $I316$0$i = 0, $I57$0$i$i = 0, $K105$0$i$i = 0, $K305$0$i$i = 0, $K373$0$i = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i175 = 0;
 var $R$3$i = 0, $R$3$i$i = 0, $R$3$i179 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i174 = 0, $T$0$i = 0, $T$0$i$i = 0, $T$0$i29$i = 0, $add$i = 0, $add$i$i = 0, $add$i134 = 0, $add$i152 = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i140 = 0, $add$ptr$i169 = 0, $add$ptr$i2$i$i = 0;
 var $add$ptr$i31$i = 0, $add$ptr$i38$i = 0, $add$ptr$i54$i = 0, $add$ptr14$i$i = 0, $add$ptr15$i$i = 0, $add$ptr16$i$i = 0, $add$ptr166 = 0, $add$ptr169 = 0, $add$ptr17$i$i = 0, $add$ptr178 = 0, $add$ptr181$i = 0, $add$ptr182 = 0, $add$ptr189$i = 0, $add$ptr190$i = 0, $add$ptr193 = 0, $add$ptr199 = 0, $add$ptr2$i$i = 0, $add$ptr205$i$i = 0, $add$ptr212$i$i = 0, $add$ptr225$i = 0;
 var $add$ptr227$i = 0, $add$ptr24$i$i = 0, $add$ptr262$i = 0, $add$ptr269$i = 0, $add$ptr273$i = 0, $add$ptr282$i = 0, $add$ptr3$i$i = 0, $add$ptr30$i$i = 0, $add$ptr369$i$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i36$i = 0, $add$ptr4$i43$i = 0, $add$ptr441$i = 0, $add$ptr5$i$i = 0, $add$ptr6$i$i = 0, $add$ptr6$i$i$i = 0, $add$ptr6$i47$i = 0, $add$ptr7$i$i = 0, $add$ptr81$i$i = 0;
 var $add$ptr95 = 0, $add$ptr98 = 0, $add10$i = 0, $add101$i = 0, $add110$i = 0, $add13$i = 0, $add14$i = 0, $add140$i = 0, $add144 = 0, $add150$i = 0, $add17$i = 0, $add17$i155 = 0, $add177$i = 0, $add18$i = 0, $add19$i = 0, $add2 = 0, $add20$i = 0, $add206$i$i = 0, $add212$i = 0, $add215$i = 0;
 var $add22$i = 0, $add246$i = 0, $add26$i$i = 0, $add268$i = 0, $add269$i$i = 0, $add274$i$i = 0, $add278$i$i = 0, $add280$i$i = 0, $add283$i$i = 0, $add337$i = 0, $add342$i = 0, $add346$i = 0, $add348$i = 0, $add351$i = 0, $add46$i = 0, $add50 = 0, $add51$i = 0, $add54 = 0, $add54$i = 0, $add58 = 0;
 var $add62 = 0, $add64 = 0, $add74$i$i = 0, $add77$i = 0, $add78$i = 0, $add79$i$i = 0, $add8 = 0, $add82$i = 0, $add83$i$i = 0, $add85$i$i = 0, $add86$i = 0, $add88$i$i = 0, $add9$i = 0, $add90$i = 0, $add92$i = 0, $and = 0, $and$i = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i11$i = 0;
 var $and$i149 = 0, $and$i32$i = 0, $and$i39$i = 0, $and100$i = 0, $and103$i = 0, $and104$i = 0, $and106 = 0, $and11$add51$i = 0, $and11$i = 0, $and119$i$i = 0, $and12$i = 0, $and13$i = 0, $and13$i$i = 0, $and133$i$i = 0, $and14 = 0, $and145 = 0, $and17$i = 0, $and194$i = 0, $and194$i182 = 0, $and199$i = 0;
 var $and209$i$i = 0, $and21$i = 0, $and21$i156 = 0, $and227$i$i = 0, $and236$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and282$i$i = 0, $and29$i = 0, $and292$i = 0, $and295$i$i = 0, $and3$i = 0, $and3$i$i = 0, $and3$i$i$i = 0, $and3$i34$i = 0, $and3$i41$i = 0, $and30$i = 0, $and318$i$i = 0, $and32$i = 0;
 var $and32$i$i = 0, $and33$i$i = 0, $and331$i = 0, $and336$i = 0, $and341$i = 0, $and350$i = 0, $and363$i = 0, $and37$i$i = 0, $and387$i = 0, $and4 = 0, $and40$i$i = 0, $and41 = 0, $and42$i = 0, $and43 = 0, $and46 = 0, $and49 = 0, $and49$i = 0, $and49$i$i = 0, $and53 = 0, $and57 = 0;
 var $and6$i = 0, $and6$i$i = 0, $and6$i10$i = 0, $and6$i14$i = 0, $and61 = 0, $and64$i = 0, $and68$i = 0, $and69$i$i = 0, $and7 = 0, $and73$i = 0, $and73$i$i = 0, $and74 = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and81$i = 0, $and85$i = 0, $and87$i$i = 0, $and89$i = 0;
 var $and9$i = 0, $and96$i$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i157 = 0, $arrayidx$i50$i = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx106$i = 0, $arrayidx107$i$i = 0, $arrayidx113$i = 0, $arrayidx113$i167 = 0, $arrayidx121$i = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx137$i = 0, $arrayidx143$i$i = 0, $arrayidx148$i = 0, $arrayidx151$i = 0;
 var $arrayidx151$i$i = 0, $arrayidx154$i = 0, $arrayidx155$i = 0, $arrayidx161$i = 0, $arrayidx165$i = 0, $arrayidx165$i177 = 0, $arrayidx178$i$i = 0, $arrayidx184$i = 0, $arrayidx184$i$i = 0, $arrayidx195$i$i = 0, $arrayidx196$i = 0, $arrayidx204$i = 0, $arrayidx212$i = 0, $arrayidx223$i$i = 0, $arrayidx228$i = 0, $arrayidx23$i = 0, $arrayidx232$i = 0, $arrayidx239$i = 0, $arrayidx245$i = 0, $arrayidx256$i = 0;
 var $arrayidx27$i = 0, $arrayidx275$i = 0, $arrayidx287$i$i = 0, $arrayidx289$i = 0, $arrayidx290$i$i = 0, $arrayidx325$i$i = 0, $arrayidx355$i = 0, $arrayidx358$i = 0, $arrayidx394$i = 0, $arrayidx40$i = 0, $arrayidx44$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx92$i$i = 0, $arrayidx94$i = 0, $arrayidx94$i165 = 0;
 var $arrayidx96$i$i = 0, $bk$i = 0, $bk$i$i = 0, $bk$i171 = 0, $bk$i22$i = 0, $bk102$i$i = 0, $bk122 = 0, $bk124 = 0, $bk139$i$i = 0, $bk145$i = 0, $bk158$i$i = 0, $bk161$i$i = 0, $bk18 = 0, $bk218$i = 0, $bk220$i = 0, $bk246$i$i = 0, $bk248$i$i = 0, $bk302$i$i = 0, $bk311$i = 0, $bk313$i = 0;
 var $bk338$i$i = 0, $bk357$i$i = 0, $bk360$i$i = 0, $bk370$i = 0, $bk407$i = 0, $bk429$i = 0, $bk432$i = 0, $bk55$i$i = 0, $bk56$i = 0, $bk67$i$i = 0, $bk74$i$i = 0, $bk85 = 0, $bk91$i$i = 0, $br$2$ph$i = 0, $call107$i = 0, $call131$i = 0, $call132$i = 0, $call275$i = 0, $call37$i = 0, $call68$i = 0;
 var $call83$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child357$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i12$i = 0, $cmp$i146 = 0, $cmp$i3$i$i = 0, $cmp$i33$i = 0, $cmp$i40$i = 0, $cmp$i52$i = 0, $cmp$i9$i = 0, $cmp1 = 0, $cmp1$i = 0, $cmp10 = 0, $cmp100$i$i = 0, $cmp102$i = 0;
 var $cmp104$i$i = 0, $cmp105$i = 0, $cmp106$i$i = 0, $cmp108$i = 0, $cmp108$i$i = 0, $cmp116$i = 0, $cmp118$i = 0, $cmp119$i = 0, $cmp12$i = 0, $cmp120$i$i = 0, $cmp120$i24$i = 0, $cmp123$i = 0, $cmp124$i$i = 0, $cmp126$i = 0, $cmp127$i = 0, $cmp128 = 0, $cmp128$i = 0, $cmp128$i$i = 0, $cmp133$i = 0, $cmp135$i = 0;
 var $cmp137$i = 0, $cmp138$i = 0, $cmp139 = 0, $cmp141$i = 0, $cmp146 = 0, $cmp147$i = 0, $cmp14795$i = 0, $cmp15$i = 0, $cmp151$i = 0, $cmp152$i = 0, $cmp155$i = 0, $cmp156 = 0, $cmp156$i = 0, $cmp156$i$i = 0, $cmp157$i = 0, $cmp159$i = 0, $cmp162 = 0, $cmp162$i = 0, $cmp162$i176 = 0, $cmp166$i = 0;
 var $cmp168$i$i = 0, $cmp174$i = 0, $cmp180$i = 0, $cmp185$i = 0, $cmp185$i$i = 0, $cmp186 = 0, $cmp186$i = 0, $cmp19$i = 0, $cmp190$i = 0, $cmp191$i = 0, $cmp2$i$i = 0, $cmp2$i$i$i = 0, $cmp20$i$i = 0, $cmp203$i = 0, $cmp209$i = 0, $cmp21$i = 0, $cmp215$i$i = 0, $cmp217$i = 0, $cmp218$i = 0, $cmp224$i = 0;
 var $cmp228$i = 0, $cmp229$i = 0, $cmp24$i = 0, $cmp24$i$i = 0, $cmp246$i = 0, $cmp254$i$i = 0, $cmp257$i = 0, $cmp258$i$i = 0, $cmp26$i = 0, $cmp265$i = 0, $cmp27$i$i = 0, $cmp28$i = 0, $cmp28$i$i = 0, $cmp284$i = 0, $cmp286$i = 0, $cmp29 = 0, $cmp3$i$i = 0, $cmp306$i$i = 0, $cmp31 = 0, $cmp319$i = 0;
 var $cmp319$i$i = 0, $cmp32$i = 0, $cmp32$i137 = 0, $cmp323$i = 0, $cmp327$i$i = 0, $cmp34$i = 0, $cmp34$i$i = 0, $cmp35$i = 0, $cmp36$i = 0, $cmp36$i$i = 0, $cmp374$i = 0, $cmp38$i = 0, $cmp38$i$i = 0, $cmp388$i = 0, $cmp396$i = 0, $cmp40$i = 0, $cmp43$i = 0, $cmp45$i = 0, $cmp46$i = 0, $cmp46$i$i = 0;
 var $cmp49$i = 0, $cmp5 = 0, $cmp55$i = 0, $cmp55$i161 = 0, $cmp57$i = 0, $cmp57$i162 = 0, $cmp59$i$i = 0, $cmp60$i = 0, $cmp62$i = 0, $cmp63$i = 0, $cmp63$i$i = 0, $cmp65$i = 0, $cmp66$i = 0, $cmp66$i139 = 0, $cmp69$i = 0, $cmp7$i$i = 0, $cmp70 = 0, $cmp72$i = 0, $cmp75$i$i = 0, $cmp76$i = 0;
 var $cmp81$i = 0, $cmp85$i = 0, $cmp89$i = 0, $cmp9$i$i = 0, $cmp90$i = 0, $cmp91$i = 0, $cmp93$i = 0, $cmp95$i = 0, $cmp96$i = 0, $cmp97$i = 0, $cmp97$i$i = 0, $cmp976$i = 0, $cmp99 = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i13$i = 0, $cond$i158 = 0, $cond$i35$i = 0;
 var $cond$i42$i = 0, $cond1$i$i = 0, $cond115$i$i = 0, $cond13$i$i = 0, $cond15$i$i = 0, $cond2$i = 0, $cond315$i$i = 0, $cond383$i = 0, $exitcond$i$i = 0, $fd$i = 0, $fd$i$i = 0, $fd$i172 = 0, $fd103$i$i = 0, $fd123 = 0, $fd140$i$i = 0, $fd146$i = 0, $fd148$i$i = 0, $fd160$i$i = 0, $fd219$i = 0, $fd247$i$i = 0;
 var $fd303$i$i = 0, $fd312$i = 0, $fd339$i$i = 0, $fd344$i$i = 0, $fd359$i$i = 0, $fd371$i = 0, $fd408$i = 0, $fd416$i = 0, $fd431$i = 0, $fd54$i$i = 0, $fd57$i = 0, $fd68$i$i = 0, $fd69 = 0, $fd78$i$i = 0, $fd9 = 0, $fd92$i$i = 0, $head = 0, $head$i = 0, $head$i$i = 0, $head$i$i$i = 0;
 var $head$i159 = 0, $head$i18$i = 0, $head$i37$i = 0, $head$i46$i = 0, $head118$i$i = 0, $head168 = 0, $head173 = 0, $head177 = 0, $head179 = 0, $head179$i = 0, $head182$i = 0, $head187$i = 0, $head189$i = 0, $head195 = 0, $head198 = 0, $head208$i$i = 0, $head211$i$i = 0, $head23$i$i = 0, $head25 = 0, $head26$i$i = 0;
 var $head265$i = 0, $head268$i = 0, $head271$i = 0, $head274$i = 0, $head279$i = 0, $head281$i = 0, $head29$i = 0, $head29$i$i = 0, $head317$i$i = 0, $head32$i$i = 0, $head34$i$i = 0, $head386$i = 0, $head7$i$i = 0, $head7$i$i$i = 0, $head7$i48$i = 0, $head94 = 0, $head97 = 0, $head99$i = 0, $i$01$i$i = 0, $idx$0$i = 0;
 var $inc$i$i = 0, $index$i = 0, $index$i$i = 0, $index$i180 = 0, $index$i25$i = 0, $index288$i$i = 0, $index356$i = 0, $magic$i$i = 0, $nb$0 = 0, $neg = 0, $neg$i = 0, $neg$i$i = 0, $neg$i136 = 0, $neg$i181 = 0, $neg103$i = 0, $neg13 = 0, $neg132$i$i = 0, $neg48$i = 0, $neg73 = 0, $next$i = 0;
 var $next$i$i = 0, $next$i$i$i = 0, $next231$i = 0, $not$cmp$i = 0, $not$cmp107$i = 0, $not$cmp114$i = 0, $not$cmp141$i = 0, $not$cmp144$i$i = 0, $not$cmp205$i = 0, $not$cmp3$i = 0, $not$cmp493$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i163 = 0, $or$cond1$i = 0, $or$cond1$i160 = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5$i = 0;
 var $or$cond7$i = 0, $or$cond7$not$i = 0, $or$cond8$i = 0, $or$cond93$i = 0, $or$cond94$i = 0, $or$i = 0, $or$i$i = 0, $or$i$i$i = 0, $or$i164 = 0, $or$i45$i = 0, $or101$i$i = 0, $or110 = 0, $or167 = 0, $or172 = 0, $or176 = 0, $or178$i = 0, $or180 = 0, $or183$i = 0, $or186$i = 0, $or188$i = 0;
 var $or19$i$i = 0, $or194 = 0, $or197 = 0, $or204$i = 0, $or210$i$i = 0, $or22$i$i = 0, $or23 = 0, $or232$i$i = 0, $or26 = 0, $or264$i = 0, $or267$i = 0, $or270$i = 0, $or275$i = 0, $or278$i = 0, $or28$i$i = 0, $or280$i = 0, $or297$i = 0, $or300$i$i = 0, $or33$i$i = 0, $or368$i = 0;
 var $or40 = 0, $or44$i$i = 0, $or93 = 0, $or96 = 0, $parent$i = 0, $parent$i$i = 0, $parent$i170 = 0, $parent$i23$i = 0, $parent135$i = 0, $parent138$i$i = 0, $parent149$i = 0, $parent162$i$i = 0, $parent165$i$i = 0, $parent166$i = 0, $parent179$i$i = 0, $parent196$i$i = 0, $parent226$i = 0, $parent240$i = 0, $parent257$i = 0, $parent301$i$i = 0;
 var $parent337$i$i = 0, $parent361$i$i = 0, $parent369$i = 0, $parent406$i = 0, $parent433$i = 0, $qsize$0$i$i = 0, $retval$0 = 0, $rsize$0$i = 0, $rsize$0$lcssa$i = 0, $rsize$07$i = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$48$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sflags193$i = 0, $sflags235$i = 0, $shl = 0, $shl$i = 0;
 var $shl$i$i = 0, $shl$i150 = 0, $shl$i49$i = 0, $shl102 = 0, $shl105 = 0, $shl116$i$i = 0, $shl12 = 0, $shl127$i$i = 0, $shl131$i$i = 0, $shl15$i = 0, $shl18$i = 0, $shl192$i = 0, $shl195$i = 0, $shl198$i = 0, $shl22 = 0, $shl222$i$i = 0, $shl226$i$i = 0, $shl265$i$i = 0, $shl270$i$i = 0, $shl276$i$i = 0;
 var $shl279$i$i = 0, $shl288$i = 0, $shl291$i = 0, $shl294$i$i = 0, $shl31$i = 0, $shl316$i$i = 0, $shl326$i$i = 0, $shl333$i = 0, $shl338$i = 0, $shl344$i = 0, $shl347$i = 0, $shl35 = 0, $shl362$i = 0, $shl37 = 0, $shl384$i = 0, $shl39$i$i = 0, $shl395$i = 0, $shl48$i$i = 0, $shl52$i = 0, $shl60$i = 0;
 var $shl65 = 0, $shl70$i$i = 0, $shl72 = 0, $shl75$i$i = 0, $shl81$i$i = 0, $shl84$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i = 0, $shr$i$i = 0, $shr$i145 = 0, $shr$i21$i = 0, $shr101 = 0, $shr11$i = 0, $shr11$i153 = 0, $shr110$i$i = 0, $shr12$i = 0, $shr124$i$i = 0;
 var $shr15$i = 0, $shr16$i = 0, $shr16$i154 = 0, $shr19$i = 0, $shr194$i = 0, $shr20$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr263$i$i = 0, $shr267$i$i = 0, $shr27$i = 0, $shr272$i$i = 0, $shr277$i$i = 0, $shr281$i$i = 0, $shr283$i = 0, $shr3 = 0, $shr310$i$i = 0, $shr318$i = 0, $shr323$i$i = 0, $shr330$i = 0;
 var $shr335$i = 0, $shr340$i = 0, $shr345$i = 0, $shr349$i = 0, $shr378$i = 0, $shr392$i = 0, $shr4$i = 0, $shr42$i = 0, $shr45 = 0, $shr47 = 0, $shr48 = 0, $shr5$i = 0, $shr5$i148 = 0, $shr51 = 0, $shr52 = 0, $shr55 = 0, $shr56 = 0, $shr58$i$i = 0, $shr59 = 0, $shr60 = 0;
 var $shr63 = 0, $shr68$i$i = 0, $shr7$i = 0, $shr7$i151 = 0, $shr72$i = 0, $shr72$i$i = 0, $shr75$i = 0, $shr76$i = 0, $shr77$i$i = 0, $shr79$i = 0, $shr8$i = 0, $shr80$i = 0, $shr82$i$i = 0, $shr83$i = 0, $shr84$i = 0, $shr86$i$i = 0, $shr87$i = 0, $shr88$i = 0, $shr91$i = 0, $size$i$i = 0;
 var $size$i$i$i = 0, $size188$i = 0, $size245$i = 0, $sizebits$0$i = 0, $sizebits$0$shl52$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0104$i = 0, $sp$1103$i = 0, $ssize$2$ph$i = 0, $sub = 0, $sub$i = 0, $sub$i135 = 0, $sub$i144 = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$lhs$cast$i15$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$rhs$cast$i16$i = 0;
 var $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i17$i = 0, $sub$ptr$sub$tsize$4$i = 0, $sub10$i = 0, $sub101$i = 0, $sub101$rsize$4$i = 0, $sub112$i = 0, $sub113$i$i = 0, $sub118$i = 0, $sub14$i = 0, $sub16$i$i = 0, $sub160 = 0, $sub172$i = 0, $sub18$i$i = 0, $sub190 = 0, $sub2$i = 0, $sub22$i = 0, $sub260$i = 0, $sub262$i$i = 0;
 var $sub266$i$i = 0, $sub271$i$i = 0, $sub275$i$i = 0, $sub30$i = 0, $sub31$i = 0, $sub31$rsize$0$i = 0, $sub313$i$i = 0, $sub329$i = 0, $sub33$i = 0, $sub334$i = 0, $sub339$i = 0, $sub343$i = 0, $sub381$i = 0, $sub4$i = 0, $sub41$i = 0, $sub42 = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i44$i = 0;
 var $sub50$i = 0, $sub6$i = 0, $sub63$i = 0, $sub67$i = 0, $sub67$i$i = 0, $sub70$i = 0, $sub71$i$i = 0, $sub76$i$i = 0, $sub80$i$i = 0, $sub91 = 0, $sub99$i = 0, $t$0$i = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$47$i = 0, $tbase$792$i = 0, $tobool$i$i = 0, $tobool107 = 0, $tobool195$i = 0;
 var $tobool200$i = 0, $tobool228$i$i = 0, $tobool237$i = 0, $tobool293$i = 0, $tobool296$i$i = 0, $tobool30$i = 0, $tobool364$i = 0, $tobool97$i$i = 0, $tsize$2617179$i = 0, $tsize$4$i = 0, $tsize$791$i = 0, $v$0$i = 0, $v$0$lcssa$i = 0, $v$08$i = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$4$ph$i = 0, $v$49$i = 0, $xor$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $magic$i$i = sp;
 $cmp = ($bytes>>>0)<(245);
 do {
  if ($cmp) {
   $cmp1 = ($bytes>>>0)<(11);
   $add2 = (($bytes) + 11)|0;
   $and = $add2 & -8;
   $cond = $cmp1 ? 16 : $and;
   $shr = $cond >>> 3;
   $0 = HEAP32[29761]|0;
   $shr3 = $0 >>> $shr;
   $and4 = $shr3 & 3;
   $cmp5 = ($and4|0)==(0);
   if (!($cmp5)) {
    $neg = $shr3 & 1;
    $and7 = $neg ^ 1;
    $add8 = (($and7) + ($shr))|0;
    $shl = $add8 << 1;
    $arrayidx = (119084 + ($shl<<2)|0);
    $1 = ((($arrayidx)) + 8|0);
    $2 = HEAP32[$1>>2]|0;
    $fd9 = ((($2)) + 8|0);
    $3 = HEAP32[$fd9>>2]|0;
    $cmp10 = ($arrayidx|0)==($3|0);
    if ($cmp10) {
     $shl12 = 1 << $add8;
     $neg13 = $shl12 ^ -1;
     $and14 = $0 & $neg13;
     HEAP32[29761] = $and14;
    } else {
     $bk18 = ((($3)) + 12|0);
     HEAP32[$bk18>>2] = $arrayidx;
     HEAP32[$1>>2] = $3;
    }
    $shl22 = $add8 << 3;
    $or23 = $shl22 | 3;
    $head = ((($2)) + 4|0);
    HEAP32[$head>>2] = $or23;
    $add$ptr = (($2) + ($shl22)|0);
    $head25 = ((($add$ptr)) + 4|0);
    $4 = HEAP32[$head25>>2]|0;
    $or26 = $4 | 1;
    HEAP32[$head25>>2] = $or26;
    $retval$0 = $fd9;
    STACKTOP = sp;return ($retval$0|0);
   }
   $5 = HEAP32[(119052)>>2]|0;
   $cmp29 = ($cond>>>0)>($5>>>0);
   if ($cmp29) {
    $cmp31 = ($shr3|0)==(0);
    if (!($cmp31)) {
     $shl35 = $shr3 << $shr;
     $shl37 = 2 << $shr;
     $sub = (0 - ($shl37))|0;
     $or40 = $shl37 | $sub;
     $and41 = $shl35 & $or40;
     $sub42 = (0 - ($and41))|0;
     $and43 = $and41 & $sub42;
     $sub44 = (($and43) + -1)|0;
     $shr45 = $sub44 >>> 12;
     $and46 = $shr45 & 16;
     $shr47 = $sub44 >>> $and46;
     $shr48 = $shr47 >>> 5;
     $and49 = $shr48 & 8;
     $add50 = $and49 | $and46;
     $shr51 = $shr47 >>> $and49;
     $shr52 = $shr51 >>> 2;
     $and53 = $shr52 & 4;
     $add54 = $add50 | $and53;
     $shr55 = $shr51 >>> $and53;
     $shr56 = $shr55 >>> 1;
     $and57 = $shr56 & 2;
     $add58 = $add54 | $and57;
     $shr59 = $shr55 >>> $and57;
     $shr60 = $shr59 >>> 1;
     $and61 = $shr60 & 1;
     $add62 = $add58 | $and61;
     $shr63 = $shr59 >>> $and61;
     $add64 = (($add62) + ($shr63))|0;
     $shl65 = $add64 << 1;
     $arrayidx66 = (119084 + ($shl65<<2)|0);
     $6 = ((($arrayidx66)) + 8|0);
     $7 = HEAP32[$6>>2]|0;
     $fd69 = ((($7)) + 8|0);
     $8 = HEAP32[$fd69>>2]|0;
     $cmp70 = ($arrayidx66|0)==($8|0);
     if ($cmp70) {
      $shl72 = 1 << $add64;
      $neg73 = $shl72 ^ -1;
      $and74 = $0 & $neg73;
      HEAP32[29761] = $and74;
      $10 = $and74;
     } else {
      $bk85 = ((($8)) + 12|0);
      HEAP32[$bk85>>2] = $arrayidx66;
      HEAP32[$6>>2] = $8;
      $10 = $0;
     }
     $shl90 = $add64 << 3;
     $sub91 = (($shl90) - ($cond))|0;
     $or93 = $cond | 3;
     $head94 = ((($7)) + 4|0);
     HEAP32[$head94>>2] = $or93;
     $add$ptr95 = (($7) + ($cond)|0);
     $or96 = $sub91 | 1;
     $head97 = ((($add$ptr95)) + 4|0);
     HEAP32[$head97>>2] = $or96;
     $add$ptr98 = (($add$ptr95) + ($sub91)|0);
     HEAP32[$add$ptr98>>2] = $sub91;
     $cmp99 = ($5|0)==(0);
     if (!($cmp99)) {
      $9 = HEAP32[(119064)>>2]|0;
      $shr101 = $5 >>> 3;
      $shl102 = $shr101 << 1;
      $arrayidx103 = (119084 + ($shl102<<2)|0);
      $shl105 = 1 << $shr101;
      $and106 = $10 & $shl105;
      $tobool107 = ($and106|0)==(0);
      if ($tobool107) {
       $or110 = $10 | $shl105;
       HEAP32[29761] = $or110;
       $$pre = ((($arrayidx103)) + 8|0);
       $$pre$phiZ2D = $$pre;$F104$0 = $arrayidx103;
      } else {
       $11 = ((($arrayidx103)) + 8|0);
       $12 = HEAP32[$11>>2]|0;
       $$pre$phiZ2D = $11;$F104$0 = $12;
      }
      HEAP32[$$pre$phiZ2D>>2] = $9;
      $bk122 = ((($F104$0)) + 12|0);
      HEAP32[$bk122>>2] = $9;
      $fd123 = ((($9)) + 8|0);
      HEAP32[$fd123>>2] = $F104$0;
      $bk124 = ((($9)) + 12|0);
      HEAP32[$bk124>>2] = $arrayidx103;
     }
     HEAP32[(119052)>>2] = $sub91;
     HEAP32[(119064)>>2] = $add$ptr95;
     $retval$0 = $fd69;
     STACKTOP = sp;return ($retval$0|0);
    }
    $13 = HEAP32[(119048)>>2]|0;
    $cmp128 = ($13|0)==(0);
    if ($cmp128) {
     $nb$0 = $cond;
    } else {
     $sub$i = (0 - ($13))|0;
     $and$i = $13 & $sub$i;
     $sub2$i = (($and$i) + -1)|0;
     $shr$i = $sub2$i >>> 12;
     $and3$i = $shr$i & 16;
     $shr4$i = $sub2$i >>> $and3$i;
     $shr5$i = $shr4$i >>> 5;
     $and6$i = $shr5$i & 8;
     $add$i = $and6$i | $and3$i;
     $shr7$i = $shr4$i >>> $and6$i;
     $shr8$i = $shr7$i >>> 2;
     $and9$i = $shr8$i & 4;
     $add10$i = $add$i | $and9$i;
     $shr11$i = $shr7$i >>> $and9$i;
     $shr12$i = $shr11$i >>> 1;
     $and13$i = $shr12$i & 2;
     $add14$i = $add10$i | $and13$i;
     $shr15$i = $shr11$i >>> $and13$i;
     $shr16$i = $shr15$i >>> 1;
     $and17$i = $shr16$i & 1;
     $add18$i = $add14$i | $and17$i;
     $shr19$i = $shr15$i >>> $and17$i;
     $add20$i = (($add18$i) + ($shr19$i))|0;
     $arrayidx$i = (119348 + ($add20$i<<2)|0);
     $14 = HEAP32[$arrayidx$i>>2]|0;
     $head$i = ((($14)) + 4|0);
     $15 = HEAP32[$head$i>>2]|0;
     $and21$i = $15 & -8;
     $sub22$i = (($and21$i) - ($cond))|0;
     $arrayidx232$i = ((($14)) + 16|0);
     $16 = HEAP32[$arrayidx232$i>>2]|0;
     $not$cmp3$i = ($16|0)==(0|0);
     $$sink4$i = $not$cmp3$i&1;
     $arrayidx275$i = (((($14)) + 16|0) + ($$sink4$i<<2)|0);
     $17 = HEAP32[$arrayidx275$i>>2]|0;
     $cmp286$i = ($17|0)==(0|0);
     if ($cmp286$i) {
      $rsize$0$lcssa$i = $sub22$i;$v$0$lcssa$i = $14;
     } else {
      $18 = $17;$rsize$07$i = $sub22$i;$v$08$i = $14;
      while(1) {
       $head29$i = ((($18)) + 4|0);
       $19 = HEAP32[$head29$i>>2]|0;
       $and30$i = $19 & -8;
       $sub31$i = (($and30$i) - ($cond))|0;
       $cmp32$i = ($sub31$i>>>0)<($rsize$07$i>>>0);
       $sub31$rsize$0$i = $cmp32$i ? $sub31$i : $rsize$07$i;
       $$v$0$i = $cmp32$i ? $18 : $v$08$i;
       $arrayidx23$i = ((($18)) + 16|0);
       $20 = HEAP32[$arrayidx23$i>>2]|0;
       $not$cmp$i = ($20|0)==(0|0);
       $$sink$i = $not$cmp$i&1;
       $arrayidx27$i = (((($18)) + 16|0) + ($$sink$i<<2)|0);
       $21 = HEAP32[$arrayidx27$i>>2]|0;
       $cmp28$i = ($21|0)==(0|0);
       if ($cmp28$i) {
        $rsize$0$lcssa$i = $sub31$rsize$0$i;$v$0$lcssa$i = $$v$0$i;
        break;
       } else {
        $18 = $21;$rsize$07$i = $sub31$rsize$0$i;$v$08$i = $$v$0$i;
       }
      }
     }
     $add$ptr$i = (($v$0$lcssa$i) + ($cond)|0);
     $cmp35$i = ($v$0$lcssa$i>>>0)<($add$ptr$i>>>0);
     if ($cmp35$i) {
      $parent$i = ((($v$0$lcssa$i)) + 24|0);
      $22 = HEAP32[$parent$i>>2]|0;
      $bk$i = ((($v$0$lcssa$i)) + 12|0);
      $23 = HEAP32[$bk$i>>2]|0;
      $cmp40$i = ($23|0)==($v$0$lcssa$i|0);
      do {
       if ($cmp40$i) {
        $arrayidx61$i = ((($v$0$lcssa$i)) + 20|0);
        $25 = HEAP32[$arrayidx61$i>>2]|0;
        $cmp62$i = ($25|0)==(0|0);
        if ($cmp62$i) {
         $arrayidx65$i = ((($v$0$lcssa$i)) + 16|0);
         $26 = HEAP32[$arrayidx65$i>>2]|0;
         $cmp66$i = ($26|0)==(0|0);
         if ($cmp66$i) {
          $R$3$i = 0;
          break;
         } else {
          $R$1$i = $26;$RP$1$i = $arrayidx65$i;
         }
        } else {
         $R$1$i = $25;$RP$1$i = $arrayidx61$i;
        }
        while(1) {
         $arrayidx71$i = ((($R$1$i)) + 20|0);
         $27 = HEAP32[$arrayidx71$i>>2]|0;
         $cmp72$i = ($27|0)==(0|0);
         if (!($cmp72$i)) {
          $R$1$i = $27;$RP$1$i = $arrayidx71$i;
          continue;
         }
         $arrayidx75$i = ((($R$1$i)) + 16|0);
         $28 = HEAP32[$arrayidx75$i>>2]|0;
         $cmp76$i = ($28|0)==(0|0);
         if ($cmp76$i) {
          break;
         } else {
          $R$1$i = $28;$RP$1$i = $arrayidx75$i;
         }
        }
        HEAP32[$RP$1$i>>2] = 0;
        $R$3$i = $R$1$i;
       } else {
        $fd$i = ((($v$0$lcssa$i)) + 8|0);
        $24 = HEAP32[$fd$i>>2]|0;
        $bk56$i = ((($24)) + 12|0);
        HEAP32[$bk56$i>>2] = $23;
        $fd57$i = ((($23)) + 8|0);
        HEAP32[$fd57$i>>2] = $24;
        $R$3$i = $23;
       }
      } while(0);
      $cmp90$i = ($22|0)==(0|0);
      do {
       if (!($cmp90$i)) {
        $index$i = ((($v$0$lcssa$i)) + 28|0);
        $29 = HEAP32[$index$i>>2]|0;
        $arrayidx94$i = (119348 + ($29<<2)|0);
        $30 = HEAP32[$arrayidx94$i>>2]|0;
        $cmp95$i = ($v$0$lcssa$i|0)==($30|0);
        if ($cmp95$i) {
         HEAP32[$arrayidx94$i>>2] = $R$3$i;
         $cond$i = ($R$3$i|0)==(0|0);
         if ($cond$i) {
          $shl$i = 1 << $29;
          $neg$i = $shl$i ^ -1;
          $and103$i = $13 & $neg$i;
          HEAP32[(119048)>>2] = $and103$i;
          break;
         }
        } else {
         $arrayidx113$i = ((($22)) + 16|0);
         $31 = HEAP32[$arrayidx113$i>>2]|0;
         $not$cmp114$i = ($31|0)!=($v$0$lcssa$i|0);
         $$sink2$i = $not$cmp114$i&1;
         $arrayidx121$i = (((($22)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$arrayidx121$i>>2] = $R$3$i;
         $cmp126$i = ($R$3$i|0)==(0|0);
         if ($cmp126$i) {
          break;
         }
        }
        $parent135$i = ((($R$3$i)) + 24|0);
        HEAP32[$parent135$i>>2] = $22;
        $arrayidx137$i = ((($v$0$lcssa$i)) + 16|0);
        $32 = HEAP32[$arrayidx137$i>>2]|0;
        $cmp138$i = ($32|0)==(0|0);
        if (!($cmp138$i)) {
         $arrayidx148$i = ((($R$3$i)) + 16|0);
         HEAP32[$arrayidx148$i>>2] = $32;
         $parent149$i = ((($32)) + 24|0);
         HEAP32[$parent149$i>>2] = $R$3$i;
        }
        $arrayidx154$i = ((($v$0$lcssa$i)) + 20|0);
        $33 = HEAP32[$arrayidx154$i>>2]|0;
        $cmp155$i = ($33|0)==(0|0);
        if (!($cmp155$i)) {
         $arrayidx165$i = ((($R$3$i)) + 20|0);
         HEAP32[$arrayidx165$i>>2] = $33;
         $parent166$i = ((($33)) + 24|0);
         HEAP32[$parent166$i>>2] = $R$3$i;
        }
       }
      } while(0);
      $cmp174$i = ($rsize$0$lcssa$i>>>0)<(16);
      if ($cmp174$i) {
       $add177$i = (($rsize$0$lcssa$i) + ($cond))|0;
       $or178$i = $add177$i | 3;
       $head179$i = ((($v$0$lcssa$i)) + 4|0);
       HEAP32[$head179$i>>2] = $or178$i;
       $add$ptr181$i = (($v$0$lcssa$i) + ($add177$i)|0);
       $head182$i = ((($add$ptr181$i)) + 4|0);
       $34 = HEAP32[$head182$i>>2]|0;
       $or183$i = $34 | 1;
       HEAP32[$head182$i>>2] = $or183$i;
      } else {
       $or186$i = $cond | 3;
       $head187$i = ((($v$0$lcssa$i)) + 4|0);
       HEAP32[$head187$i>>2] = $or186$i;
       $or188$i = $rsize$0$lcssa$i | 1;
       $head189$i = ((($add$ptr$i)) + 4|0);
       HEAP32[$head189$i>>2] = $or188$i;
       $add$ptr190$i = (($add$ptr$i) + ($rsize$0$lcssa$i)|0);
       HEAP32[$add$ptr190$i>>2] = $rsize$0$lcssa$i;
       $cmp191$i = ($5|0)==(0);
       if (!($cmp191$i)) {
        $35 = HEAP32[(119064)>>2]|0;
        $shr194$i = $5 >>> 3;
        $shl195$i = $shr194$i << 1;
        $arrayidx196$i = (119084 + ($shl195$i<<2)|0);
        $shl198$i = 1 << $shr194$i;
        $and199$i = $0 & $shl198$i;
        $tobool200$i = ($and199$i|0)==(0);
        if ($tobool200$i) {
         $or204$i = $0 | $shl198$i;
         HEAP32[29761] = $or204$i;
         $$pre$i = ((($arrayidx196$i)) + 8|0);
         $$pre$phi$iZ2D = $$pre$i;$F197$0$i = $arrayidx196$i;
        } else {
         $36 = ((($arrayidx196$i)) + 8|0);
         $37 = HEAP32[$36>>2]|0;
         $$pre$phi$iZ2D = $36;$F197$0$i = $37;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $35;
        $bk218$i = ((($F197$0$i)) + 12|0);
        HEAP32[$bk218$i>>2] = $35;
        $fd219$i = ((($35)) + 8|0);
        HEAP32[$fd219$i>>2] = $F197$0$i;
        $bk220$i = ((($35)) + 12|0);
        HEAP32[$bk220$i>>2] = $arrayidx196$i;
       }
       HEAP32[(119052)>>2] = $rsize$0$lcssa$i;
       HEAP32[(119064)>>2] = $add$ptr$i;
      }
      $add$ptr225$i = ((($v$0$lcssa$i)) + 8|0);
      $retval$0 = $add$ptr225$i;
      STACKTOP = sp;return ($retval$0|0);
     } else {
      $nb$0 = $cond;
     }
    }
   } else {
    $nb$0 = $cond;
   }
  } else {
   $cmp139 = ($bytes>>>0)>(4294967231);
   if ($cmp139) {
    $nb$0 = -1;
   } else {
    $add144 = (($bytes) + 11)|0;
    $and145 = $add144 & -8;
    $38 = HEAP32[(119048)>>2]|0;
    $cmp146 = ($38|0)==(0);
    if ($cmp146) {
     $nb$0 = $and145;
    } else {
     $sub$i144 = (0 - ($and145))|0;
     $shr$i145 = $add144 >>> 8;
     $cmp$i146 = ($shr$i145|0)==(0);
     if ($cmp$i146) {
      $idx$0$i = 0;
     } else {
      $cmp1$i = ($and145>>>0)>(16777215);
      if ($cmp1$i) {
       $idx$0$i = 31;
      } else {
       $sub4$i = (($shr$i145) + 1048320)|0;
       $shr5$i148 = $sub4$i >>> 16;
       $and$i149 = $shr5$i148 & 8;
       $shl$i150 = $shr$i145 << $and$i149;
       $sub6$i = (($shl$i150) + 520192)|0;
       $shr7$i151 = $sub6$i >>> 16;
       $and8$i = $shr7$i151 & 4;
       $add$i152 = $and8$i | $and$i149;
       $shl9$i = $shl$i150 << $and8$i;
       $sub10$i = (($shl9$i) + 245760)|0;
       $shr11$i153 = $sub10$i >>> 16;
       $and12$i = $shr11$i153 & 2;
       $add13$i = $add$i152 | $and12$i;
       $sub14$i = (14 - ($add13$i))|0;
       $shl15$i = $shl9$i << $and12$i;
       $shr16$i154 = $shl15$i >>> 15;
       $add17$i155 = (($sub14$i) + ($shr16$i154))|0;
       $shl18$i = $add17$i155 << 1;
       $add19$i = (($add17$i155) + 7)|0;
       $shr20$i = $and145 >>> $add19$i;
       $and21$i156 = $shr20$i & 1;
       $add22$i = $and21$i156 | $shl18$i;
       $idx$0$i = $add22$i;
      }
     }
     $arrayidx$i157 = (119348 + ($idx$0$i<<2)|0);
     $39 = HEAP32[$arrayidx$i157>>2]|0;
     $cmp24$i = ($39|0)==(0|0);
     L74: do {
      if ($cmp24$i) {
       $rsize$3$i = $sub$i144;$t$2$i = 0;$v$3$i = 0;
       label = 57;
      } else {
       $cmp26$i = ($idx$0$i|0)==(31);
       $shr27$i = $idx$0$i >>> 1;
       $sub30$i = (25 - ($shr27$i))|0;
       $cond$i158 = $cmp26$i ? 0 : $sub30$i;
       $shl31$i = $and145 << $cond$i158;
       $rsize$0$i = $sub$i144;$rst$0$i = 0;$sizebits$0$i = $shl31$i;$t$0$i = $39;$v$0$i = 0;
       while(1) {
        $head$i159 = ((($t$0$i)) + 4|0);
        $40 = HEAP32[$head$i159>>2]|0;
        $and32$i = $40 & -8;
        $sub33$i = (($and32$i) - ($and145))|0;
        $cmp34$i = ($sub33$i>>>0)<($rsize$0$i>>>0);
        if ($cmp34$i) {
         $cmp36$i = ($sub33$i|0)==(0);
         if ($cmp36$i) {
          $rsize$48$i = 0;$t$47$i = $t$0$i;$v$49$i = $t$0$i;
          label = 61;
          break L74;
         } else {
          $rsize$1$i = $sub33$i;$v$1$i = $t$0$i;
         }
        } else {
         $rsize$1$i = $rsize$0$i;$v$1$i = $v$0$i;
        }
        $arrayidx40$i = ((($t$0$i)) + 20|0);
        $41 = HEAP32[$arrayidx40$i>>2]|0;
        $shr42$i = $sizebits$0$i >>> 31;
        $arrayidx44$i = (((($t$0$i)) + 16|0) + ($shr42$i<<2)|0);
        $42 = HEAP32[$arrayidx44$i>>2]|0;
        $cmp45$i = ($41|0)==(0|0);
        $cmp46$i = ($41|0)==($42|0);
        $or$cond1$i160 = $cmp45$i | $cmp46$i;
        $rst$1$i = $or$cond1$i160 ? $rst$0$i : $41;
        $cmp49$i = ($42|0)==(0|0);
        $not$cmp493$i = $cmp49$i ^ 1;
        $shl52$i = $not$cmp493$i&1;
        $sizebits$0$shl52$i = $sizebits$0$i << $shl52$i;
        if ($cmp49$i) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 57;
         break;
        } else {
         $rsize$0$i = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$shl52$i;$t$0$i = $42;$v$0$i = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $cmp55$i161 = ($t$2$i|0)==(0|0);
      $cmp57$i162 = ($v$3$i|0)==(0|0);
      $or$cond$i163 = $cmp55$i161 & $cmp57$i162;
      if ($or$cond$i163) {
       $shl60$i = 2 << $idx$0$i;
       $sub63$i = (0 - ($shl60$i))|0;
       $or$i164 = $shl60$i | $sub63$i;
       $and64$i = $38 & $or$i164;
       $cmp65$i = ($and64$i|0)==(0);
       if ($cmp65$i) {
        $nb$0 = $and145;
        break;
       }
       $sub67$i = (0 - ($and64$i))|0;
       $and68$i = $and64$i & $sub67$i;
       $sub70$i = (($and68$i) + -1)|0;
       $shr72$i = $sub70$i >>> 12;
       $and73$i = $shr72$i & 16;
       $shr75$i = $sub70$i >>> $and73$i;
       $shr76$i = $shr75$i >>> 5;
       $and77$i = $shr76$i & 8;
       $add78$i = $and77$i | $and73$i;
       $shr79$i = $shr75$i >>> $and77$i;
       $shr80$i = $shr79$i >>> 2;
       $and81$i = $shr80$i & 4;
       $add82$i = $add78$i | $and81$i;
       $shr83$i = $shr79$i >>> $and81$i;
       $shr84$i = $shr83$i >>> 1;
       $and85$i = $shr84$i & 2;
       $add86$i = $add82$i | $and85$i;
       $shr87$i = $shr83$i >>> $and85$i;
       $shr88$i = $shr87$i >>> 1;
       $and89$i = $shr88$i & 1;
       $add90$i = $add86$i | $and89$i;
       $shr91$i = $shr87$i >>> $and89$i;
       $add92$i = (($add90$i) + ($shr91$i))|0;
       $arrayidx94$i165 = (119348 + ($add92$i<<2)|0);
       $43 = HEAP32[$arrayidx94$i165>>2]|0;
       $t$4$ph$i = $43;$v$4$ph$i = 0;
      } else {
       $t$4$ph$i = $t$2$i;$v$4$ph$i = $v$3$i;
      }
      $cmp976$i = ($t$4$ph$i|0)==(0|0);
      if ($cmp976$i) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$4$ph$i;
      } else {
       $rsize$48$i = $rsize$3$i;$t$47$i = $t$4$ph$i;$v$49$i = $v$4$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $head99$i = ((($t$47$i)) + 4|0);
       $44 = HEAP32[$head99$i>>2]|0;
       $and100$i = $44 & -8;
       $sub101$i = (($and100$i) - ($and145))|0;
       $cmp102$i = ($sub101$i>>>0)<($rsize$48$i>>>0);
       $sub101$rsize$4$i = $cmp102$i ? $sub101$i : $rsize$48$i;
       $t$4$v$4$i = $cmp102$i ? $t$47$i : $v$49$i;
       $arrayidx106$i = ((($t$47$i)) + 16|0);
       $45 = HEAP32[$arrayidx106$i>>2]|0;
       $not$cmp107$i = ($45|0)==(0|0);
       $$sink$i166 = $not$cmp107$i&1;
       $arrayidx113$i167 = (((($t$47$i)) + 16|0) + ($$sink$i166<<2)|0);
       $46 = HEAP32[$arrayidx113$i167>>2]|0;
       $cmp97$i = ($46|0)==(0|0);
       if ($cmp97$i) {
        $rsize$4$lcssa$i = $sub101$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
        break;
       } else {
        $rsize$48$i = $sub101$rsize$4$i;$t$47$i = $46;$v$49$i = $t$4$v$4$i;
        label = 61;
       }
      }
     }
     $cmp116$i = ($v$4$lcssa$i|0)==(0|0);
     if ($cmp116$i) {
      $nb$0 = $and145;
     } else {
      $47 = HEAP32[(119052)>>2]|0;
      $sub118$i = (($47) - ($and145))|0;
      $cmp119$i = ($rsize$4$lcssa$i>>>0)<($sub118$i>>>0);
      if ($cmp119$i) {
       $add$ptr$i169 = (($v$4$lcssa$i) + ($and145)|0);
       $cmp123$i = ($v$4$lcssa$i>>>0)<($add$ptr$i169>>>0);
       if (!($cmp123$i)) {
        $retval$0 = 0;
        STACKTOP = sp;return ($retval$0|0);
       }
       $parent$i170 = ((($v$4$lcssa$i)) + 24|0);
       $48 = HEAP32[$parent$i170>>2]|0;
       $bk$i171 = ((($v$4$lcssa$i)) + 12|0);
       $49 = HEAP32[$bk$i171>>2]|0;
       $cmp128$i = ($49|0)==($v$4$lcssa$i|0);
       do {
        if ($cmp128$i) {
         $arrayidx151$i = ((($v$4$lcssa$i)) + 20|0);
         $51 = HEAP32[$arrayidx151$i>>2]|0;
         $cmp152$i = ($51|0)==(0|0);
         if ($cmp152$i) {
          $arrayidx155$i = ((($v$4$lcssa$i)) + 16|0);
          $52 = HEAP32[$arrayidx155$i>>2]|0;
          $cmp156$i = ($52|0)==(0|0);
          if ($cmp156$i) {
           $R$3$i179 = 0;
           break;
          } else {
           $R$1$i175 = $52;$RP$1$i174 = $arrayidx155$i;
          }
         } else {
          $R$1$i175 = $51;$RP$1$i174 = $arrayidx151$i;
         }
         while(1) {
          $arrayidx161$i = ((($R$1$i175)) + 20|0);
          $53 = HEAP32[$arrayidx161$i>>2]|0;
          $cmp162$i176 = ($53|0)==(0|0);
          if (!($cmp162$i176)) {
           $R$1$i175 = $53;$RP$1$i174 = $arrayidx161$i;
           continue;
          }
          $arrayidx165$i177 = ((($R$1$i175)) + 16|0);
          $54 = HEAP32[$arrayidx165$i177>>2]|0;
          $cmp166$i = ($54|0)==(0|0);
          if ($cmp166$i) {
           break;
          } else {
           $R$1$i175 = $54;$RP$1$i174 = $arrayidx165$i177;
          }
         }
         HEAP32[$RP$1$i174>>2] = 0;
         $R$3$i179 = $R$1$i175;
        } else {
         $fd$i172 = ((($v$4$lcssa$i)) + 8|0);
         $50 = HEAP32[$fd$i172>>2]|0;
         $bk145$i = ((($50)) + 12|0);
         HEAP32[$bk145$i>>2] = $49;
         $fd146$i = ((($49)) + 8|0);
         HEAP32[$fd146$i>>2] = $50;
         $R$3$i179 = $49;
        }
       } while(0);
       $cmp180$i = ($48|0)==(0|0);
       do {
        if ($cmp180$i) {
         $64 = $38;
        } else {
         $index$i180 = ((($v$4$lcssa$i)) + 28|0);
         $55 = HEAP32[$index$i180>>2]|0;
         $arrayidx184$i = (119348 + ($55<<2)|0);
         $56 = HEAP32[$arrayidx184$i>>2]|0;
         $cmp185$i = ($v$4$lcssa$i|0)==($56|0);
         if ($cmp185$i) {
          HEAP32[$arrayidx184$i>>2] = $R$3$i179;
          $cond2$i = ($R$3$i179|0)==(0|0);
          if ($cond2$i) {
           $shl192$i = 1 << $55;
           $neg$i181 = $shl192$i ^ -1;
           $and194$i182 = $38 & $neg$i181;
           HEAP32[(119048)>>2] = $and194$i182;
           $64 = $and194$i182;
           break;
          }
         } else {
          $arrayidx204$i = ((($48)) + 16|0);
          $57 = HEAP32[$arrayidx204$i>>2]|0;
          $not$cmp205$i = ($57|0)!=($v$4$lcssa$i|0);
          $$sink2$i183 = $not$cmp205$i&1;
          $arrayidx212$i = (((($48)) + 16|0) + ($$sink2$i183<<2)|0);
          HEAP32[$arrayidx212$i>>2] = $R$3$i179;
          $cmp217$i = ($R$3$i179|0)==(0|0);
          if ($cmp217$i) {
           $64 = $38;
           break;
          }
         }
         $parent226$i = ((($R$3$i179)) + 24|0);
         HEAP32[$parent226$i>>2] = $48;
         $arrayidx228$i = ((($v$4$lcssa$i)) + 16|0);
         $58 = HEAP32[$arrayidx228$i>>2]|0;
         $cmp229$i = ($58|0)==(0|0);
         if (!($cmp229$i)) {
          $arrayidx239$i = ((($R$3$i179)) + 16|0);
          HEAP32[$arrayidx239$i>>2] = $58;
          $parent240$i = ((($58)) + 24|0);
          HEAP32[$parent240$i>>2] = $R$3$i179;
         }
         $arrayidx245$i = ((($v$4$lcssa$i)) + 20|0);
         $59 = HEAP32[$arrayidx245$i>>2]|0;
         $cmp246$i = ($59|0)==(0|0);
         if ($cmp246$i) {
          $64 = $38;
         } else {
          $arrayidx256$i = ((($R$3$i179)) + 20|0);
          HEAP32[$arrayidx256$i>>2] = $59;
          $parent257$i = ((($59)) + 24|0);
          HEAP32[$parent257$i>>2] = $R$3$i179;
          $64 = $38;
         }
        }
       } while(0);
       $cmp265$i = ($rsize$4$lcssa$i>>>0)<(16);
       do {
        if ($cmp265$i) {
         $add268$i = (($rsize$4$lcssa$i) + ($and145))|0;
         $or270$i = $add268$i | 3;
         $head271$i = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$head271$i>>2] = $or270$i;
         $add$ptr273$i = (($v$4$lcssa$i) + ($add268$i)|0);
         $head274$i = ((($add$ptr273$i)) + 4|0);
         $60 = HEAP32[$head274$i>>2]|0;
         $or275$i = $60 | 1;
         HEAP32[$head274$i>>2] = $or275$i;
        } else {
         $or278$i = $and145 | 3;
         $head279$i = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$head279$i>>2] = $or278$i;
         $or280$i = $rsize$4$lcssa$i | 1;
         $head281$i = ((($add$ptr$i169)) + 4|0);
         HEAP32[$head281$i>>2] = $or280$i;
         $add$ptr282$i = (($add$ptr$i169) + ($rsize$4$lcssa$i)|0);
         HEAP32[$add$ptr282$i>>2] = $rsize$4$lcssa$i;
         $shr283$i = $rsize$4$lcssa$i >>> 3;
         $cmp284$i = ($rsize$4$lcssa$i>>>0)<(256);
         if ($cmp284$i) {
          $shl288$i = $shr283$i << 1;
          $arrayidx289$i = (119084 + ($shl288$i<<2)|0);
          $61 = HEAP32[29761]|0;
          $shl291$i = 1 << $shr283$i;
          $and292$i = $61 & $shl291$i;
          $tobool293$i = ($and292$i|0)==(0);
          if ($tobool293$i) {
           $or297$i = $61 | $shl291$i;
           HEAP32[29761] = $or297$i;
           $$pre$i186 = ((($arrayidx289$i)) + 8|0);
           $$pre$phi$i187Z2D = $$pre$i186;$F290$0$i = $arrayidx289$i;
          } else {
           $62 = ((($arrayidx289$i)) + 8|0);
           $63 = HEAP32[$62>>2]|0;
           $$pre$phi$i187Z2D = $62;$F290$0$i = $63;
          }
          HEAP32[$$pre$phi$i187Z2D>>2] = $add$ptr$i169;
          $bk311$i = ((($F290$0$i)) + 12|0);
          HEAP32[$bk311$i>>2] = $add$ptr$i169;
          $fd312$i = ((($add$ptr$i169)) + 8|0);
          HEAP32[$fd312$i>>2] = $F290$0$i;
          $bk313$i = ((($add$ptr$i169)) + 12|0);
          HEAP32[$bk313$i>>2] = $arrayidx289$i;
          break;
         }
         $shr318$i = $rsize$4$lcssa$i >>> 8;
         $cmp319$i = ($shr318$i|0)==(0);
         if ($cmp319$i) {
          $I316$0$i = 0;
         } else {
          $cmp323$i = ($rsize$4$lcssa$i>>>0)>(16777215);
          if ($cmp323$i) {
           $I316$0$i = 31;
          } else {
           $sub329$i = (($shr318$i) + 1048320)|0;
           $shr330$i = $sub329$i >>> 16;
           $and331$i = $shr330$i & 8;
           $shl333$i = $shr318$i << $and331$i;
           $sub334$i = (($shl333$i) + 520192)|0;
           $shr335$i = $sub334$i >>> 16;
           $and336$i = $shr335$i & 4;
           $add337$i = $and336$i | $and331$i;
           $shl338$i = $shl333$i << $and336$i;
           $sub339$i = (($shl338$i) + 245760)|0;
           $shr340$i = $sub339$i >>> 16;
           $and341$i = $shr340$i & 2;
           $add342$i = $add337$i | $and341$i;
           $sub343$i = (14 - ($add342$i))|0;
           $shl344$i = $shl338$i << $and341$i;
           $shr345$i = $shl344$i >>> 15;
           $add346$i = (($sub343$i) + ($shr345$i))|0;
           $shl347$i = $add346$i << 1;
           $add348$i = (($add346$i) + 7)|0;
           $shr349$i = $rsize$4$lcssa$i >>> $add348$i;
           $and350$i = $shr349$i & 1;
           $add351$i = $and350$i | $shl347$i;
           $I316$0$i = $add351$i;
          }
         }
         $arrayidx355$i = (119348 + ($I316$0$i<<2)|0);
         $index356$i = ((($add$ptr$i169)) + 28|0);
         HEAP32[$index356$i>>2] = $I316$0$i;
         $child357$i = ((($add$ptr$i169)) + 16|0);
         $arrayidx358$i = ((($child357$i)) + 4|0);
         HEAP32[$arrayidx358$i>>2] = 0;
         HEAP32[$child357$i>>2] = 0;
         $shl362$i = 1 << $I316$0$i;
         $and363$i = $64 & $shl362$i;
         $tobool364$i = ($and363$i|0)==(0);
         if ($tobool364$i) {
          $or368$i = $64 | $shl362$i;
          HEAP32[(119048)>>2] = $or368$i;
          HEAP32[$arrayidx355$i>>2] = $add$ptr$i169;
          $parent369$i = ((($add$ptr$i169)) + 24|0);
          HEAP32[$parent369$i>>2] = $arrayidx355$i;
          $bk370$i = ((($add$ptr$i169)) + 12|0);
          HEAP32[$bk370$i>>2] = $add$ptr$i169;
          $fd371$i = ((($add$ptr$i169)) + 8|0);
          HEAP32[$fd371$i>>2] = $add$ptr$i169;
          break;
         }
         $65 = HEAP32[$arrayidx355$i>>2]|0;
         $cmp374$i = ($I316$0$i|0)==(31);
         $shr378$i = $I316$0$i >>> 1;
         $sub381$i = (25 - ($shr378$i))|0;
         $cond383$i = $cmp374$i ? 0 : $sub381$i;
         $shl384$i = $rsize$4$lcssa$i << $cond383$i;
         $K373$0$i = $shl384$i;$T$0$i = $65;
         while(1) {
          $head386$i = ((($T$0$i)) + 4|0);
          $66 = HEAP32[$head386$i>>2]|0;
          $and387$i = $66 & -8;
          $cmp388$i = ($and387$i|0)==($rsize$4$lcssa$i|0);
          if ($cmp388$i) {
           label = 97;
           break;
          }
          $shr392$i = $K373$0$i >>> 31;
          $arrayidx394$i = (((($T$0$i)) + 16|0) + ($shr392$i<<2)|0);
          $shl395$i = $K373$0$i << 1;
          $67 = HEAP32[$arrayidx394$i>>2]|0;
          $cmp396$i = ($67|0)==(0|0);
          if ($cmp396$i) {
           label = 96;
           break;
          } else {
           $K373$0$i = $shl395$i;$T$0$i = $67;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$arrayidx394$i>>2] = $add$ptr$i169;
          $parent406$i = ((($add$ptr$i169)) + 24|0);
          HEAP32[$parent406$i>>2] = $T$0$i;
          $bk407$i = ((($add$ptr$i169)) + 12|0);
          HEAP32[$bk407$i>>2] = $add$ptr$i169;
          $fd408$i = ((($add$ptr$i169)) + 8|0);
          HEAP32[$fd408$i>>2] = $add$ptr$i169;
          break;
         }
         else if ((label|0) == 97) {
          $fd416$i = ((($T$0$i)) + 8|0);
          $68 = HEAP32[$fd416$i>>2]|0;
          $bk429$i = ((($68)) + 12|0);
          HEAP32[$bk429$i>>2] = $add$ptr$i169;
          HEAP32[$fd416$i>>2] = $add$ptr$i169;
          $fd431$i = ((($add$ptr$i169)) + 8|0);
          HEAP32[$fd431$i>>2] = $68;
          $bk432$i = ((($add$ptr$i169)) + 12|0);
          HEAP32[$bk432$i>>2] = $T$0$i;
          $parent433$i = ((($add$ptr$i169)) + 24|0);
          HEAP32[$parent433$i>>2] = 0;
          break;
         }
        }
       } while(0);
       $add$ptr441$i = ((($v$4$lcssa$i)) + 8|0);
       $retval$0 = $add$ptr441$i;
       STACKTOP = sp;return ($retval$0|0);
      } else {
       $nb$0 = $and145;
      }
     }
    }
   }
  }
 } while(0);
 $69 = HEAP32[(119052)>>2]|0;
 $cmp156 = ($69>>>0)<($nb$0>>>0);
 if (!($cmp156)) {
  $sub160 = (($69) - ($nb$0))|0;
  $70 = HEAP32[(119064)>>2]|0;
  $cmp162 = ($sub160>>>0)>(15);
  if ($cmp162) {
   $add$ptr166 = (($70) + ($nb$0)|0);
   HEAP32[(119064)>>2] = $add$ptr166;
   HEAP32[(119052)>>2] = $sub160;
   $or167 = $sub160 | 1;
   $head168 = ((($add$ptr166)) + 4|0);
   HEAP32[$head168>>2] = $or167;
   $add$ptr169 = (($add$ptr166) + ($sub160)|0);
   HEAP32[$add$ptr169>>2] = $sub160;
   $or172 = $nb$0 | 3;
   $head173 = ((($70)) + 4|0);
   HEAP32[$head173>>2] = $or172;
  } else {
   HEAP32[(119052)>>2] = 0;
   HEAP32[(119064)>>2] = 0;
   $or176 = $69 | 3;
   $head177 = ((($70)) + 4|0);
   HEAP32[$head177>>2] = $or176;
   $add$ptr178 = (($70) + ($69)|0);
   $head179 = ((($add$ptr178)) + 4|0);
   $71 = HEAP32[$head179>>2]|0;
   $or180 = $71 | 1;
   HEAP32[$head179>>2] = $or180;
  }
  $add$ptr182 = ((($70)) + 8|0);
  $retval$0 = $add$ptr182;
  STACKTOP = sp;return ($retval$0|0);
 }
 $72 = HEAP32[(119056)>>2]|0;
 $cmp186 = ($72>>>0)>($nb$0>>>0);
 if ($cmp186) {
  $sub190 = (($72) - ($nb$0))|0;
  HEAP32[(119056)>>2] = $sub190;
  $73 = HEAP32[(119068)>>2]|0;
  $add$ptr193 = (($73) + ($nb$0)|0);
  HEAP32[(119068)>>2] = $add$ptr193;
  $or194 = $sub190 | 1;
  $head195 = ((($add$ptr193)) + 4|0);
  HEAP32[$head195>>2] = $or194;
  $or197 = $nb$0 | 3;
  $head198 = ((($73)) + 4|0);
  HEAP32[$head198>>2] = $or197;
  $add$ptr199 = ((($73)) + 8|0);
  $retval$0 = $add$ptr199;
  STACKTOP = sp;return ($retval$0|0);
 }
 $74 = HEAP32[29879]|0;
 $cmp$i = ($74|0)==(0);
 if ($cmp$i) {
  HEAP32[(119524)>>2] = 4096;
  HEAP32[(119520)>>2] = 4096;
  HEAP32[(119528)>>2] = -1;
  HEAP32[(119532)>>2] = -1;
  HEAP32[(119536)>>2] = 0;
  HEAP32[(119488)>>2] = 0;
  $75 = $magic$i$i;
  $xor$i$i = $75 & -16;
  $and6$i$i = $xor$i$i ^ 1431655768;
  HEAP32[$magic$i$i>>2] = $and6$i$i;
  HEAP32[29879] = $and6$i$i;
  $76 = 4096;
 } else {
  $$pre$i133 = HEAP32[(119524)>>2]|0;
  $76 = $$pre$i133;
 }
 $add$i134 = (($nb$0) + 48)|0;
 $sub$i135 = (($nb$0) + 47)|0;
 $add9$i = (($76) + ($sub$i135))|0;
 $neg$i136 = (0 - ($76))|0;
 $and11$i = $add9$i & $neg$i136;
 $cmp12$i = ($and11$i>>>0)>($nb$0>>>0);
 if (!($cmp12$i)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $77 = HEAP32[(119484)>>2]|0;
 $cmp15$i = ($77|0)==(0);
 if (!($cmp15$i)) {
  $78 = HEAP32[(119476)>>2]|0;
  $add17$i = (($78) + ($and11$i))|0;
  $cmp19$i = ($add17$i>>>0)<=($78>>>0);
  $cmp21$i = ($add17$i>>>0)>($77>>>0);
  $or$cond1$i = $cmp19$i | $cmp21$i;
  if ($or$cond1$i) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $79 = HEAP32[(119488)>>2]|0;
 $and29$i = $79 & 4;
 $tobool30$i = ($and29$i|0)==(0);
 L167: do {
  if ($tobool30$i) {
   $80 = HEAP32[(119068)>>2]|0;
   $cmp32$i137 = ($80|0)==(0|0);
   L169: do {
    if ($cmp32$i137) {
     label = 118;
    } else {
     $sp$0$i$i = (119492);
     while(1) {
      $81 = HEAP32[$sp$0$i$i>>2]|0;
      $cmp$i52$i = ($81>>>0)>($80>>>0);
      if (!($cmp$i52$i)) {
       $size$i$i = ((($sp$0$i$i)) + 4|0);
       $82 = HEAP32[$size$i$i>>2]|0;
       $add$ptr$i54$i = (($81) + ($82)|0);
       $cmp2$i$i = ($add$ptr$i54$i>>>0)>($80>>>0);
       if ($cmp2$i$i) {
        break;
       }
      }
      $next$i$i = ((($sp$0$i$i)) + 8|0);
      $83 = HEAP32[$next$i$i>>2]|0;
      $cmp3$i$i = ($83|0)==(0|0);
      if ($cmp3$i$i) {
       label = 118;
       break L169;
      } else {
       $sp$0$i$i = $83;
      }
     }
     $add77$i = (($add9$i) - ($72))|0;
     $and80$i = $add77$i & $neg$i136;
     $cmp81$i = ($and80$i>>>0)<(2147483647);
     if ($cmp81$i) {
      $call83$i = (_sbrk(($and80$i|0))|0);
      $88 = HEAP32[$sp$0$i$i>>2]|0;
      $89 = HEAP32[$size$i$i>>2]|0;
      $add$ptr$i140 = (($88) + ($89)|0);
      $cmp85$i = ($call83$i|0)==($add$ptr$i140|0);
      if ($cmp85$i) {
       $cmp89$i = ($call83$i|0)==((-1)|0);
       if ($cmp89$i) {
        $tsize$2617179$i = $and80$i;
       } else {
        $tbase$792$i = $call83$i;$tsize$791$i = $and80$i;
        label = 135;
        break L167;
       }
      } else {
       $br$2$ph$i = $call83$i;$ssize$2$ph$i = $and80$i;
       label = 126;
      }
     } else {
      $tsize$2617179$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $call37$i = (_sbrk(0)|0);
     $cmp38$i = ($call37$i|0)==((-1)|0);
     if ($cmp38$i) {
      $tsize$2617179$i = 0;
     } else {
      $84 = $call37$i;
      $85 = HEAP32[(119520)>>2]|0;
      $sub41$i = (($85) + -1)|0;
      $and42$i = $sub41$i & $84;
      $cmp43$i = ($and42$i|0)==(0);
      $add46$i = (($sub41$i) + ($84))|0;
      $neg48$i = (0 - ($85))|0;
      $and49$i = $add46$i & $neg48$i;
      $sub50$i = (($and49$i) - ($84))|0;
      $add51$i = $cmp43$i ? 0 : $sub50$i;
      $and11$add51$i = (($add51$i) + ($and11$i))|0;
      $86 = HEAP32[(119476)>>2]|0;
      $add54$i = (($and11$add51$i) + ($86))|0;
      $cmp55$i = ($and11$add51$i>>>0)>($nb$0>>>0);
      $cmp57$i = ($and11$add51$i>>>0)<(2147483647);
      $or$cond$i = $cmp55$i & $cmp57$i;
      if ($or$cond$i) {
       $87 = HEAP32[(119484)>>2]|0;
       $cmp60$i = ($87|0)==(0);
       if (!($cmp60$i)) {
        $cmp63$i = ($add54$i>>>0)<=($86>>>0);
        $cmp66$i139 = ($add54$i>>>0)>($87>>>0);
        $or$cond2$i = $cmp63$i | $cmp66$i139;
        if ($or$cond2$i) {
         $tsize$2617179$i = 0;
         break;
        }
       }
       $call68$i = (_sbrk(($and11$add51$i|0))|0);
       $cmp69$i = ($call68$i|0)==($call37$i|0);
       if ($cmp69$i) {
        $tbase$792$i = $call37$i;$tsize$791$i = $and11$add51$i;
        label = 135;
        break L167;
       } else {
        $br$2$ph$i = $call68$i;$ssize$2$ph$i = $and11$add51$i;
        label = 126;
       }
      } else {
       $tsize$2617179$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $sub112$i = (0 - ($ssize$2$ph$i))|0;
     $cmp91$i = ($br$2$ph$i|0)!=((-1)|0);
     $cmp93$i = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond5$i = $cmp93$i & $cmp91$i;
     $cmp96$i = ($add$i134>>>0)>($ssize$2$ph$i>>>0);
     $or$cond3$i = $cmp96$i & $or$cond5$i;
     if (!($or$cond3$i)) {
      $cmp118$i = ($br$2$ph$i|0)==((-1)|0);
      if ($cmp118$i) {
       $tsize$2617179$i = 0;
       break;
      } else {
       $tbase$792$i = $br$2$ph$i;$tsize$791$i = $ssize$2$ph$i;
       label = 135;
       break L167;
      }
     }
     $90 = HEAP32[(119524)>>2]|0;
     $sub99$i = (($sub$i135) - ($ssize$2$ph$i))|0;
     $add101$i = (($sub99$i) + ($90))|0;
     $neg103$i = (0 - ($90))|0;
     $and104$i = $add101$i & $neg103$i;
     $cmp105$i = ($and104$i>>>0)<(2147483647);
     if (!($cmp105$i)) {
      $tbase$792$i = $br$2$ph$i;$tsize$791$i = $ssize$2$ph$i;
      label = 135;
      break L167;
     }
     $call107$i = (_sbrk(($and104$i|0))|0);
     $cmp108$i = ($call107$i|0)==((-1)|0);
     if ($cmp108$i) {
      (_sbrk(($sub112$i|0))|0);
      $tsize$2617179$i = 0;
      break;
     } else {
      $add110$i = (($and104$i) + ($ssize$2$ph$i))|0;
      $tbase$792$i = $br$2$ph$i;$tsize$791$i = $add110$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $91 = HEAP32[(119488)>>2]|0;
   $or$i = $91 | 4;
   HEAP32[(119488)>>2] = $or$i;
   $tsize$4$i = $tsize$2617179$i;
   label = 133;
  } else {
   $tsize$4$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $cmp127$i = ($and11$i>>>0)<(2147483647);
  if ($cmp127$i) {
   $call131$i = (_sbrk(($and11$i|0))|0);
   $call132$i = (_sbrk(0)|0);
   $cmp133$i = ($call131$i|0)!=((-1)|0);
   $cmp135$i = ($call132$i|0)!=((-1)|0);
   $or$cond4$i = $cmp133$i & $cmp135$i;
   $cmp137$i = ($call131$i>>>0)<($call132$i>>>0);
   $or$cond7$i = $cmp137$i & $or$cond4$i;
   $sub$ptr$lhs$cast$i = $call132$i;
   $sub$ptr$rhs$cast$i = $call131$i;
   $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
   $add140$i = (($nb$0) + 40)|0;
   $cmp141$i = ($sub$ptr$sub$i>>>0)>($add140$i>>>0);
   $sub$ptr$sub$tsize$4$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
   $or$cond7$not$i = $or$cond7$i ^ 1;
   $cmp14795$i = ($call131$i|0)==((-1)|0);
   $not$cmp141$i = $cmp141$i ^ 1;
   $cmp147$i = $cmp14795$i | $not$cmp141$i;
   $or$cond93$i = $cmp147$i | $or$cond7$not$i;
   if (!($or$cond93$i)) {
    $tbase$792$i = $call131$i;$tsize$791$i = $sub$ptr$sub$tsize$4$i;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $92 = HEAP32[(119476)>>2]|0;
  $add150$i = (($92) + ($tsize$791$i))|0;
  HEAP32[(119476)>>2] = $add150$i;
  $93 = HEAP32[(119480)>>2]|0;
  $cmp151$i = ($add150$i>>>0)>($93>>>0);
  if ($cmp151$i) {
   HEAP32[(119480)>>2] = $add150$i;
  }
  $94 = HEAP32[(119068)>>2]|0;
  $cmp157$i = ($94|0)==(0|0);
  do {
   if ($cmp157$i) {
    $95 = HEAP32[(119060)>>2]|0;
    $cmp159$i = ($95|0)==(0|0);
    $cmp162$i = ($tbase$792$i>>>0)<($95>>>0);
    $or$cond8$i = $cmp159$i | $cmp162$i;
    if ($or$cond8$i) {
     HEAP32[(119060)>>2] = $tbase$792$i;
    }
    HEAP32[(119492)>>2] = $tbase$792$i;
    HEAP32[(119496)>>2] = $tsize$791$i;
    HEAP32[(119504)>>2] = 0;
    $96 = HEAP32[29879]|0;
    HEAP32[(119080)>>2] = $96;
    HEAP32[(119076)>>2] = -1;
    $i$01$i$i = 0;
    while(1) {
     $shl$i49$i = $i$01$i$i << 1;
     $arrayidx$i50$i = (119084 + ($shl$i49$i<<2)|0);
     $97 = ((($arrayidx$i50$i)) + 12|0);
     HEAP32[$97>>2] = $arrayidx$i50$i;
     $98 = ((($arrayidx$i50$i)) + 8|0);
     HEAP32[$98>>2] = $arrayidx$i50$i;
     $inc$i$i = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($inc$i$i|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $inc$i$i;
     }
    }
    $sub172$i = (($tsize$791$i) + -40)|0;
    $add$ptr$i38$i = ((($tbase$792$i)) + 8|0);
    $99 = $add$ptr$i38$i;
    $and$i39$i = $99 & 7;
    $cmp$i40$i = ($and$i39$i|0)==(0);
    $100 = (0 - ($99))|0;
    $and3$i41$i = $100 & 7;
    $cond$i42$i = $cmp$i40$i ? 0 : $and3$i41$i;
    $add$ptr4$i43$i = (($tbase$792$i) + ($cond$i42$i)|0);
    $sub5$i44$i = (($sub172$i) - ($cond$i42$i))|0;
    HEAP32[(119068)>>2] = $add$ptr4$i43$i;
    HEAP32[(119056)>>2] = $sub5$i44$i;
    $or$i45$i = $sub5$i44$i | 1;
    $head$i46$i = ((($add$ptr4$i43$i)) + 4|0);
    HEAP32[$head$i46$i>>2] = $or$i45$i;
    $add$ptr6$i47$i = (($add$ptr4$i43$i) + ($sub5$i44$i)|0);
    $head7$i48$i = ((($add$ptr6$i47$i)) + 4|0);
    HEAP32[$head7$i48$i>>2] = 40;
    $101 = HEAP32[(119532)>>2]|0;
    HEAP32[(119072)>>2] = $101;
   } else {
    $sp$0104$i = (119492);
    while(1) {
     $102 = HEAP32[$sp$0104$i>>2]|0;
     $size188$i = ((($sp$0104$i)) + 4|0);
     $103 = HEAP32[$size188$i>>2]|0;
     $add$ptr189$i = (($102) + ($103)|0);
     $cmp190$i = ($tbase$792$i|0)==($add$ptr189$i|0);
     if ($cmp190$i) {
      label = 145;
      break;
     }
     $next$i = ((($sp$0104$i)) + 8|0);
     $104 = HEAP32[$next$i>>2]|0;
     $cmp186$i = ($104|0)==(0|0);
     if ($cmp186$i) {
      break;
     } else {
      $sp$0104$i = $104;
     }
    }
    if ((label|0) == 145) {
     $sflags193$i = ((($sp$0104$i)) + 12|0);
     $105 = HEAP32[$sflags193$i>>2]|0;
     $and194$i = $105 & 8;
     $tobool195$i = ($and194$i|0)==(0);
     if ($tobool195$i) {
      $cmp203$i = ($94>>>0)>=($102>>>0);
      $cmp209$i = ($94>>>0)<($tbase$792$i>>>0);
      $or$cond94$i = $cmp209$i & $cmp203$i;
      if ($or$cond94$i) {
       $add212$i = (($103) + ($tsize$791$i))|0;
       HEAP32[$size188$i>>2] = $add212$i;
       $106 = HEAP32[(119056)>>2]|0;
       $add$ptr$i31$i = ((($94)) + 8|0);
       $107 = $add$ptr$i31$i;
       $and$i32$i = $107 & 7;
       $cmp$i33$i = ($and$i32$i|0)==(0);
       $108 = (0 - ($107))|0;
       $and3$i34$i = $108 & 7;
       $cond$i35$i = $cmp$i33$i ? 0 : $and3$i34$i;
       $add$ptr4$i36$i = (($94) + ($cond$i35$i)|0);
       $add215$i = (($tsize$791$i) - ($cond$i35$i))|0;
       $sub5$i$i = (($106) + ($add215$i))|0;
       HEAP32[(119068)>>2] = $add$ptr4$i36$i;
       HEAP32[(119056)>>2] = $sub5$i$i;
       $or$i$i = $sub5$i$i | 1;
       $head$i37$i = ((($add$ptr4$i36$i)) + 4|0);
       HEAP32[$head$i37$i>>2] = $or$i$i;
       $add$ptr6$i$i = (($add$ptr4$i36$i) + ($sub5$i$i)|0);
       $head7$i$i = ((($add$ptr6$i$i)) + 4|0);
       HEAP32[$head7$i$i>>2] = 40;
       $109 = HEAP32[(119532)>>2]|0;
       HEAP32[(119072)>>2] = $109;
       break;
      }
     }
    }
    $110 = HEAP32[(119060)>>2]|0;
    $cmp218$i = ($tbase$792$i>>>0)<($110>>>0);
    if ($cmp218$i) {
     HEAP32[(119060)>>2] = $tbase$792$i;
    }
    $add$ptr227$i = (($tbase$792$i) + ($tsize$791$i)|0);
    $sp$1103$i = (119492);
    while(1) {
     $111 = HEAP32[$sp$1103$i>>2]|0;
     $cmp228$i = ($111|0)==($add$ptr227$i|0);
     if ($cmp228$i) {
      label = 153;
      break;
     }
     $next231$i = ((($sp$1103$i)) + 8|0);
     $112 = HEAP32[$next231$i>>2]|0;
     $cmp224$i = ($112|0)==(0|0);
     if ($cmp224$i) {
      break;
     } else {
      $sp$1103$i = $112;
     }
    }
    if ((label|0) == 153) {
     $sflags235$i = ((($sp$1103$i)) + 12|0);
     $113 = HEAP32[$sflags235$i>>2]|0;
     $and236$i = $113 & 8;
     $tobool237$i = ($and236$i|0)==(0);
     if ($tobool237$i) {
      HEAP32[$sp$1103$i>>2] = $tbase$792$i;
      $size245$i = ((($sp$1103$i)) + 4|0);
      $114 = HEAP32[$size245$i>>2]|0;
      $add246$i = (($114) + ($tsize$791$i))|0;
      HEAP32[$size245$i>>2] = $add246$i;
      $add$ptr$i$i = ((($tbase$792$i)) + 8|0);
      $115 = $add$ptr$i$i;
      $and$i11$i = $115 & 7;
      $cmp$i12$i = ($and$i11$i|0)==(0);
      $116 = (0 - ($115))|0;
      $and3$i$i = $116 & 7;
      $cond$i13$i = $cmp$i12$i ? 0 : $and3$i$i;
      $add$ptr4$i$i = (($tbase$792$i) + ($cond$i13$i)|0);
      $add$ptr5$i$i = ((($add$ptr227$i)) + 8|0);
      $117 = $add$ptr5$i$i;
      $and6$i14$i = $117 & 7;
      $cmp7$i$i = ($and6$i14$i|0)==(0);
      $118 = (0 - ($117))|0;
      $and13$i$i = $118 & 7;
      $cond15$i$i = $cmp7$i$i ? 0 : $and13$i$i;
      $add$ptr16$i$i = (($add$ptr227$i) + ($cond15$i$i)|0);
      $sub$ptr$lhs$cast$i15$i = $add$ptr16$i$i;
      $sub$ptr$rhs$cast$i16$i = $add$ptr4$i$i;
      $sub$ptr$sub$i17$i = (($sub$ptr$lhs$cast$i15$i) - ($sub$ptr$rhs$cast$i16$i))|0;
      $add$ptr17$i$i = (($add$ptr4$i$i) + ($nb$0)|0);
      $sub18$i$i = (($sub$ptr$sub$i17$i) - ($nb$0))|0;
      $or19$i$i = $nb$0 | 3;
      $head$i18$i = ((($add$ptr4$i$i)) + 4|0);
      HEAP32[$head$i18$i>>2] = $or19$i$i;
      $cmp20$i$i = ($add$ptr16$i$i|0)==($94|0);
      do {
       if ($cmp20$i$i) {
        $119 = HEAP32[(119056)>>2]|0;
        $add$i$i = (($119) + ($sub18$i$i))|0;
        HEAP32[(119056)>>2] = $add$i$i;
        HEAP32[(119068)>>2] = $add$ptr17$i$i;
        $or22$i$i = $add$i$i | 1;
        $head23$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head23$i$i>>2] = $or22$i$i;
       } else {
        $120 = HEAP32[(119064)>>2]|0;
        $cmp24$i$i = ($add$ptr16$i$i|0)==($120|0);
        if ($cmp24$i$i) {
         $121 = HEAP32[(119052)>>2]|0;
         $add26$i$i = (($121) + ($sub18$i$i))|0;
         HEAP32[(119052)>>2] = $add26$i$i;
         HEAP32[(119064)>>2] = $add$ptr17$i$i;
         $or28$i$i = $add26$i$i | 1;
         $head29$i$i = ((($add$ptr17$i$i)) + 4|0);
         HEAP32[$head29$i$i>>2] = $or28$i$i;
         $add$ptr30$i$i = (($add$ptr17$i$i) + ($add26$i$i)|0);
         HEAP32[$add$ptr30$i$i>>2] = $add26$i$i;
         break;
        }
        $head32$i$i = ((($add$ptr16$i$i)) + 4|0);
        $122 = HEAP32[$head32$i$i>>2]|0;
        $and33$i$i = $122 & 3;
        $cmp34$i$i = ($and33$i$i|0)==(1);
        if ($cmp34$i$i) {
         $and37$i$i = $122 & -8;
         $shr$i21$i = $122 >>> 3;
         $cmp38$i$i = ($122>>>0)<(256);
         L237: do {
          if ($cmp38$i$i) {
           $fd$i$i = ((($add$ptr16$i$i)) + 8|0);
           $123 = HEAP32[$fd$i$i>>2]|0;
           $bk$i22$i = ((($add$ptr16$i$i)) + 12|0);
           $124 = HEAP32[$bk$i22$i>>2]|0;
           $cmp46$i$i = ($124|0)==($123|0);
           if ($cmp46$i$i) {
            $shl48$i$i = 1 << $shr$i21$i;
            $neg$i$i = $shl48$i$i ^ -1;
            $125 = HEAP32[29761]|0;
            $and49$i$i = $125 & $neg$i$i;
            HEAP32[29761] = $and49$i$i;
            break;
           } else {
            $bk67$i$i = ((($123)) + 12|0);
            HEAP32[$bk67$i$i>>2] = $124;
            $fd68$i$i = ((($124)) + 8|0);
            HEAP32[$fd68$i$i>>2] = $123;
            break;
           }
          } else {
           $parent$i23$i = ((($add$ptr16$i$i)) + 24|0);
           $126 = HEAP32[$parent$i23$i>>2]|0;
           $bk74$i$i = ((($add$ptr16$i$i)) + 12|0);
           $127 = HEAP32[$bk74$i$i>>2]|0;
           $cmp75$i$i = ($127|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp75$i$i) {
             $child$i$i = ((($add$ptr16$i$i)) + 16|0);
             $arrayidx96$i$i = ((($child$i$i)) + 4|0);
             $129 = HEAP32[$arrayidx96$i$i>>2]|0;
             $cmp97$i$i = ($129|0)==(0|0);
             if ($cmp97$i$i) {
              $130 = HEAP32[$child$i$i>>2]|0;
              $cmp100$i$i = ($130|0)==(0|0);
              if ($cmp100$i$i) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i = $130;$RP$1$i$i = $child$i$i;
              }
             } else {
              $R$1$i$i = $129;$RP$1$i$i = $arrayidx96$i$i;
             }
             while(1) {
              $arrayidx103$i$i = ((($R$1$i$i)) + 20|0);
              $131 = HEAP32[$arrayidx103$i$i>>2]|0;
              $cmp104$i$i = ($131|0)==(0|0);
              if (!($cmp104$i$i)) {
               $R$1$i$i = $131;$RP$1$i$i = $arrayidx103$i$i;
               continue;
              }
              $arrayidx107$i$i = ((($R$1$i$i)) + 16|0);
              $132 = HEAP32[$arrayidx107$i$i>>2]|0;
              $cmp108$i$i = ($132|0)==(0|0);
              if ($cmp108$i$i) {
               break;
              } else {
               $R$1$i$i = $132;$RP$1$i$i = $arrayidx107$i$i;
              }
             }
             HEAP32[$RP$1$i$i>>2] = 0;
             $R$3$i$i = $R$1$i$i;
            } else {
             $fd78$i$i = ((($add$ptr16$i$i)) + 8|0);
             $128 = HEAP32[$fd78$i$i>>2]|0;
             $bk91$i$i = ((($128)) + 12|0);
             HEAP32[$bk91$i$i>>2] = $127;
             $fd92$i$i = ((($127)) + 8|0);
             HEAP32[$fd92$i$i>>2] = $128;
             $R$3$i$i = $127;
            }
           } while(0);
           $cmp120$i24$i = ($126|0)==(0|0);
           if ($cmp120$i24$i) {
            break;
           }
           $index$i25$i = ((($add$ptr16$i$i)) + 28|0);
           $133 = HEAP32[$index$i25$i>>2]|0;
           $arrayidx123$i$i = (119348 + ($133<<2)|0);
           $134 = HEAP32[$arrayidx123$i$i>>2]|0;
           $cmp124$i$i = ($add$ptr16$i$i|0)==($134|0);
           do {
            if ($cmp124$i$i) {
             HEAP32[$arrayidx123$i$i>>2] = $R$3$i$i;
             $cond1$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond1$i$i)) {
              break;
             }
             $shl131$i$i = 1 << $133;
             $neg132$i$i = $shl131$i$i ^ -1;
             $135 = HEAP32[(119048)>>2]|0;
             $and133$i$i = $135 & $neg132$i$i;
             HEAP32[(119048)>>2] = $and133$i$i;
             break L237;
            } else {
             $arrayidx143$i$i = ((($126)) + 16|0);
             $136 = HEAP32[$arrayidx143$i$i>>2]|0;
             $not$cmp144$i$i = ($136|0)!=($add$ptr16$i$i|0);
             $$sink$i$i = $not$cmp144$i$i&1;
             $arrayidx151$i$i = (((($126)) + 16|0) + ($$sink$i$i<<2)|0);
             HEAP32[$arrayidx151$i$i>>2] = $R$3$i$i;
             $cmp156$i$i = ($R$3$i$i|0)==(0|0);
             if ($cmp156$i$i) {
              break L237;
             }
            }
           } while(0);
           $parent165$i$i = ((($R$3$i$i)) + 24|0);
           HEAP32[$parent165$i$i>>2] = $126;
           $child166$i$i = ((($add$ptr16$i$i)) + 16|0);
           $137 = HEAP32[$child166$i$i>>2]|0;
           $cmp168$i$i = ($137|0)==(0|0);
           if (!($cmp168$i$i)) {
            $arrayidx178$i$i = ((($R$3$i$i)) + 16|0);
            HEAP32[$arrayidx178$i$i>>2] = $137;
            $parent179$i$i = ((($137)) + 24|0);
            HEAP32[$parent179$i$i>>2] = $R$3$i$i;
           }
           $arrayidx184$i$i = ((($child166$i$i)) + 4|0);
           $138 = HEAP32[$arrayidx184$i$i>>2]|0;
           $cmp185$i$i = ($138|0)==(0|0);
           if ($cmp185$i$i) {
            break;
           }
           $arrayidx195$i$i = ((($R$3$i$i)) + 20|0);
           HEAP32[$arrayidx195$i$i>>2] = $138;
           $parent196$i$i = ((($138)) + 24|0);
           HEAP32[$parent196$i$i>>2] = $R$3$i$i;
          }
         } while(0);
         $add$ptr205$i$i = (($add$ptr16$i$i) + ($and37$i$i)|0);
         $add206$i$i = (($and37$i$i) + ($sub18$i$i))|0;
         $oldfirst$0$i$i = $add$ptr205$i$i;$qsize$0$i$i = $add206$i$i;
        } else {
         $oldfirst$0$i$i = $add$ptr16$i$i;$qsize$0$i$i = $sub18$i$i;
        }
        $head208$i$i = ((($oldfirst$0$i$i)) + 4|0);
        $139 = HEAP32[$head208$i$i>>2]|0;
        $and209$i$i = $139 & -2;
        HEAP32[$head208$i$i>>2] = $and209$i$i;
        $or210$i$i = $qsize$0$i$i | 1;
        $head211$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head211$i$i>>2] = $or210$i$i;
        $add$ptr212$i$i = (($add$ptr17$i$i) + ($qsize$0$i$i)|0);
        HEAP32[$add$ptr212$i$i>>2] = $qsize$0$i$i;
        $shr214$i$i = $qsize$0$i$i >>> 3;
        $cmp215$i$i = ($qsize$0$i$i>>>0)<(256);
        if ($cmp215$i$i) {
         $shl222$i$i = $shr214$i$i << 1;
         $arrayidx223$i$i = (119084 + ($shl222$i$i<<2)|0);
         $140 = HEAP32[29761]|0;
         $shl226$i$i = 1 << $shr214$i$i;
         $and227$i$i = $140 & $shl226$i$i;
         $tobool228$i$i = ($and227$i$i|0)==(0);
         if ($tobool228$i$i) {
          $or232$i$i = $140 | $shl226$i$i;
          HEAP32[29761] = $or232$i$i;
          $$pre$i27$i = ((($arrayidx223$i$i)) + 8|0);
          $$pre$phi$i28$iZ2D = $$pre$i27$i;$F224$0$i$i = $arrayidx223$i$i;
         } else {
          $141 = ((($arrayidx223$i$i)) + 8|0);
          $142 = HEAP32[$141>>2]|0;
          $$pre$phi$i28$iZ2D = $141;$F224$0$i$i = $142;
         }
         HEAP32[$$pre$phi$i28$iZ2D>>2] = $add$ptr17$i$i;
         $bk246$i$i = ((($F224$0$i$i)) + 12|0);
         HEAP32[$bk246$i$i>>2] = $add$ptr17$i$i;
         $fd247$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd247$i$i>>2] = $F224$0$i$i;
         $bk248$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk248$i$i>>2] = $arrayidx223$i$i;
         break;
        }
        $shr253$i$i = $qsize$0$i$i >>> 8;
        $cmp254$i$i = ($shr253$i$i|0)==(0);
        do {
         if ($cmp254$i$i) {
          $I252$0$i$i = 0;
         } else {
          $cmp258$i$i = ($qsize$0$i$i>>>0)>(16777215);
          if ($cmp258$i$i) {
           $I252$0$i$i = 31;
           break;
          }
          $sub262$i$i = (($shr253$i$i) + 1048320)|0;
          $shr263$i$i = $sub262$i$i >>> 16;
          $and264$i$i = $shr263$i$i & 8;
          $shl265$i$i = $shr253$i$i << $and264$i$i;
          $sub266$i$i = (($shl265$i$i) + 520192)|0;
          $shr267$i$i = $sub266$i$i >>> 16;
          $and268$i$i = $shr267$i$i & 4;
          $add269$i$i = $and268$i$i | $and264$i$i;
          $shl270$i$i = $shl265$i$i << $and268$i$i;
          $sub271$i$i = (($shl270$i$i) + 245760)|0;
          $shr272$i$i = $sub271$i$i >>> 16;
          $and273$i$i = $shr272$i$i & 2;
          $add274$i$i = $add269$i$i | $and273$i$i;
          $sub275$i$i = (14 - ($add274$i$i))|0;
          $shl276$i$i = $shl270$i$i << $and273$i$i;
          $shr277$i$i = $shl276$i$i >>> 15;
          $add278$i$i = (($sub275$i$i) + ($shr277$i$i))|0;
          $shl279$i$i = $add278$i$i << 1;
          $add280$i$i = (($add278$i$i) + 7)|0;
          $shr281$i$i = $qsize$0$i$i >>> $add280$i$i;
          $and282$i$i = $shr281$i$i & 1;
          $add283$i$i = $and282$i$i | $shl279$i$i;
          $I252$0$i$i = $add283$i$i;
         }
        } while(0);
        $arrayidx287$i$i = (119348 + ($I252$0$i$i<<2)|0);
        $index288$i$i = ((($add$ptr17$i$i)) + 28|0);
        HEAP32[$index288$i$i>>2] = $I252$0$i$i;
        $child289$i$i = ((($add$ptr17$i$i)) + 16|0);
        $arrayidx290$i$i = ((($child289$i$i)) + 4|0);
        HEAP32[$arrayidx290$i$i>>2] = 0;
        HEAP32[$child289$i$i>>2] = 0;
        $143 = HEAP32[(119048)>>2]|0;
        $shl294$i$i = 1 << $I252$0$i$i;
        $and295$i$i = $143 & $shl294$i$i;
        $tobool296$i$i = ($and295$i$i|0)==(0);
        if ($tobool296$i$i) {
         $or300$i$i = $143 | $shl294$i$i;
         HEAP32[(119048)>>2] = $or300$i$i;
         HEAP32[$arrayidx287$i$i>>2] = $add$ptr17$i$i;
         $parent301$i$i = ((($add$ptr17$i$i)) + 24|0);
         HEAP32[$parent301$i$i>>2] = $arrayidx287$i$i;
         $bk302$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk302$i$i>>2] = $add$ptr17$i$i;
         $fd303$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd303$i$i>>2] = $add$ptr17$i$i;
         break;
        }
        $144 = HEAP32[$arrayidx287$i$i>>2]|0;
        $cmp306$i$i = ($I252$0$i$i|0)==(31);
        $shr310$i$i = $I252$0$i$i >>> 1;
        $sub313$i$i = (25 - ($shr310$i$i))|0;
        $cond315$i$i = $cmp306$i$i ? 0 : $sub313$i$i;
        $shl316$i$i = $qsize$0$i$i << $cond315$i$i;
        $K305$0$i$i = $shl316$i$i;$T$0$i29$i = $144;
        while(1) {
         $head317$i$i = ((($T$0$i29$i)) + 4|0);
         $145 = HEAP32[$head317$i$i>>2]|0;
         $and318$i$i = $145 & -8;
         $cmp319$i$i = ($and318$i$i|0)==($qsize$0$i$i|0);
         if ($cmp319$i$i) {
          label = 194;
          break;
         }
         $shr323$i$i = $K305$0$i$i >>> 31;
         $arrayidx325$i$i = (((($T$0$i29$i)) + 16|0) + ($shr323$i$i<<2)|0);
         $shl326$i$i = $K305$0$i$i << 1;
         $146 = HEAP32[$arrayidx325$i$i>>2]|0;
         $cmp327$i$i = ($146|0)==(0|0);
         if ($cmp327$i$i) {
          label = 193;
          break;
         } else {
          $K305$0$i$i = $shl326$i$i;$T$0$i29$i = $146;
         }
        }
        if ((label|0) == 193) {
         HEAP32[$arrayidx325$i$i>>2] = $add$ptr17$i$i;
         $parent337$i$i = ((($add$ptr17$i$i)) + 24|0);
         HEAP32[$parent337$i$i>>2] = $T$0$i29$i;
         $bk338$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk338$i$i>>2] = $add$ptr17$i$i;
         $fd339$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd339$i$i>>2] = $add$ptr17$i$i;
         break;
        }
        else if ((label|0) == 194) {
         $fd344$i$i = ((($T$0$i29$i)) + 8|0);
         $147 = HEAP32[$fd344$i$i>>2]|0;
         $bk357$i$i = ((($147)) + 12|0);
         HEAP32[$bk357$i$i>>2] = $add$ptr17$i$i;
         HEAP32[$fd344$i$i>>2] = $add$ptr17$i$i;
         $fd359$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd359$i$i>>2] = $147;
         $bk360$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk360$i$i>>2] = $T$0$i29$i;
         $parent361$i$i = ((($add$ptr17$i$i)) + 24|0);
         HEAP32[$parent361$i$i>>2] = 0;
         break;
        }
       }
      } while(0);
      $add$ptr369$i$i = ((($add$ptr4$i$i)) + 8|0);
      $retval$0 = $add$ptr369$i$i;
      STACKTOP = sp;return ($retval$0|0);
     }
    }
    $sp$0$i$i$i = (119492);
    while(1) {
     $148 = HEAP32[$sp$0$i$i$i>>2]|0;
     $cmp$i$i$i = ($148>>>0)>($94>>>0);
     if (!($cmp$i$i$i)) {
      $size$i$i$i = ((($sp$0$i$i$i)) + 4|0);
      $149 = HEAP32[$size$i$i$i>>2]|0;
      $add$ptr$i$i$i = (($148) + ($149)|0);
      $cmp2$i$i$i = ($add$ptr$i$i$i>>>0)>($94>>>0);
      if ($cmp2$i$i$i) {
       break;
      }
     }
     $next$i$i$i = ((($sp$0$i$i$i)) + 8|0);
     $150 = HEAP32[$next$i$i$i>>2]|0;
     $sp$0$i$i$i = $150;
    }
    $add$ptr2$i$i = ((($add$ptr$i$i$i)) + -47|0);
    $add$ptr3$i$i = ((($add$ptr2$i$i)) + 8|0);
    $151 = $add$ptr3$i$i;
    $and$i$i = $151 & 7;
    $cmp$i9$i = ($and$i$i|0)==(0);
    $152 = (0 - ($151))|0;
    $and6$i10$i = $152 & 7;
    $cond$i$i = $cmp$i9$i ? 0 : $and6$i10$i;
    $add$ptr7$i$i = (($add$ptr2$i$i) + ($cond$i$i)|0);
    $add$ptr81$i$i = ((($94)) + 16|0);
    $cmp9$i$i = ($add$ptr7$i$i>>>0)<($add$ptr81$i$i>>>0);
    $cond13$i$i = $cmp9$i$i ? $94 : $add$ptr7$i$i;
    $add$ptr14$i$i = ((($cond13$i$i)) + 8|0);
    $add$ptr15$i$i = ((($cond13$i$i)) + 24|0);
    $sub16$i$i = (($tsize$791$i) + -40)|0;
    $add$ptr$i2$i$i = ((($tbase$792$i)) + 8|0);
    $153 = $add$ptr$i2$i$i;
    $and$i$i$i = $153 & 7;
    $cmp$i3$i$i = ($and$i$i$i|0)==(0);
    $154 = (0 - ($153))|0;
    $and3$i$i$i = $154 & 7;
    $cond$i$i$i = $cmp$i3$i$i ? 0 : $and3$i$i$i;
    $add$ptr4$i$i$i = (($tbase$792$i) + ($cond$i$i$i)|0);
    $sub5$i$i$i = (($sub16$i$i) - ($cond$i$i$i))|0;
    HEAP32[(119068)>>2] = $add$ptr4$i$i$i;
    HEAP32[(119056)>>2] = $sub5$i$i$i;
    $or$i$i$i = $sub5$i$i$i | 1;
    $head$i$i$i = ((($add$ptr4$i$i$i)) + 4|0);
    HEAP32[$head$i$i$i>>2] = $or$i$i$i;
    $add$ptr6$i$i$i = (($add$ptr4$i$i$i) + ($sub5$i$i$i)|0);
    $head7$i$i$i = ((($add$ptr6$i$i$i)) + 4|0);
    HEAP32[$head7$i$i$i>>2] = 40;
    $155 = HEAP32[(119532)>>2]|0;
    HEAP32[(119072)>>2] = $155;
    $head$i$i = ((($cond13$i$i)) + 4|0);
    HEAP32[$head$i$i>>2] = 27;
    ;HEAP32[$add$ptr14$i$i>>2]=HEAP32[(119492)>>2]|0;HEAP32[$add$ptr14$i$i+4>>2]=HEAP32[(119492)+4>>2]|0;HEAP32[$add$ptr14$i$i+8>>2]=HEAP32[(119492)+8>>2]|0;HEAP32[$add$ptr14$i$i+12>>2]=HEAP32[(119492)+12>>2]|0;
    HEAP32[(119492)>>2] = $tbase$792$i;
    HEAP32[(119496)>>2] = $tsize$791$i;
    HEAP32[(119504)>>2] = 0;
    HEAP32[(119500)>>2] = $add$ptr14$i$i;
    $156 = $add$ptr15$i$i;
    while(1) {
     $add$ptr24$i$i = ((($156)) + 4|0);
     HEAP32[$add$ptr24$i$i>>2] = 7;
     $head26$i$i = ((($156)) + 8|0);
     $cmp27$i$i = ($head26$i$i>>>0)<($add$ptr$i$i$i>>>0);
     if ($cmp27$i$i) {
      $156 = $add$ptr24$i$i;
     } else {
      break;
     }
    }
    $cmp28$i$i = ($cond13$i$i|0)==($94|0);
    if (!($cmp28$i$i)) {
     $sub$ptr$lhs$cast$i$i = $cond13$i$i;
     $sub$ptr$rhs$cast$i$i = $94;
     $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
     $157 = HEAP32[$head$i$i>>2]|0;
     $and32$i$i = $157 & -2;
     HEAP32[$head$i$i>>2] = $and32$i$i;
     $or33$i$i = $sub$ptr$sub$i$i | 1;
     $head34$i$i = ((($94)) + 4|0);
     HEAP32[$head34$i$i>>2] = $or33$i$i;
     HEAP32[$cond13$i$i>>2] = $sub$ptr$sub$i$i;
     $shr$i$i = $sub$ptr$sub$i$i >>> 3;
     $cmp36$i$i = ($sub$ptr$sub$i$i>>>0)<(256);
     if ($cmp36$i$i) {
      $shl$i$i = $shr$i$i << 1;
      $arrayidx$i$i = (119084 + ($shl$i$i<<2)|0);
      $158 = HEAP32[29761]|0;
      $shl39$i$i = 1 << $shr$i$i;
      $and40$i$i = $158 & $shl39$i$i;
      $tobool$i$i = ($and40$i$i|0)==(0);
      if ($tobool$i$i) {
       $or44$i$i = $158 | $shl39$i$i;
       HEAP32[29761] = $or44$i$i;
       $$pre$i$i = ((($arrayidx$i$i)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $arrayidx$i$i;
      } else {
       $159 = ((($arrayidx$i$i)) + 8|0);
       $160 = HEAP32[$159>>2]|0;
       $$pre$phi$i$iZ2D = $159;$F$0$i$i = $160;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $94;
      $bk$i$i = ((($F$0$i$i)) + 12|0);
      HEAP32[$bk$i$i>>2] = $94;
      $fd54$i$i = ((($94)) + 8|0);
      HEAP32[$fd54$i$i>>2] = $F$0$i$i;
      $bk55$i$i = ((($94)) + 12|0);
      HEAP32[$bk55$i$i>>2] = $arrayidx$i$i;
      break;
     }
     $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
     $cmp59$i$i = ($shr58$i$i|0)==(0);
     if ($cmp59$i$i) {
      $I57$0$i$i = 0;
     } else {
      $cmp63$i$i = ($sub$ptr$sub$i$i>>>0)>(16777215);
      if ($cmp63$i$i) {
       $I57$0$i$i = 31;
      } else {
       $sub67$i$i = (($shr58$i$i) + 1048320)|0;
       $shr68$i$i = $sub67$i$i >>> 16;
       $and69$i$i = $shr68$i$i & 8;
       $shl70$i$i = $shr58$i$i << $and69$i$i;
       $sub71$i$i = (($shl70$i$i) + 520192)|0;
       $shr72$i$i = $sub71$i$i >>> 16;
       $and73$i$i = $shr72$i$i & 4;
       $add74$i$i = $and73$i$i | $and69$i$i;
       $shl75$i$i = $shl70$i$i << $and73$i$i;
       $sub76$i$i = (($shl75$i$i) + 245760)|0;
       $shr77$i$i = $sub76$i$i >>> 16;
       $and78$i$i = $shr77$i$i & 2;
       $add79$i$i = $add74$i$i | $and78$i$i;
       $sub80$i$i = (14 - ($add79$i$i))|0;
       $shl81$i$i = $shl75$i$i << $and78$i$i;
       $shr82$i$i = $shl81$i$i >>> 15;
       $add83$i$i = (($sub80$i$i) + ($shr82$i$i))|0;
       $shl84$i$i = $add83$i$i << 1;
       $add85$i$i = (($add83$i$i) + 7)|0;
       $shr86$i$i = $sub$ptr$sub$i$i >>> $add85$i$i;
       $and87$i$i = $shr86$i$i & 1;
       $add88$i$i = $and87$i$i | $shl84$i$i;
       $I57$0$i$i = $add88$i$i;
      }
     }
     $arrayidx91$i$i = (119348 + ($I57$0$i$i<<2)|0);
     $index$i$i = ((($94)) + 28|0);
     HEAP32[$index$i$i>>2] = $I57$0$i$i;
     $arrayidx92$i$i = ((($94)) + 20|0);
     HEAP32[$arrayidx92$i$i>>2] = 0;
     HEAP32[$add$ptr81$i$i>>2] = 0;
     $161 = HEAP32[(119048)>>2]|0;
     $shl95$i$i = 1 << $I57$0$i$i;
     $and96$i$i = $161 & $shl95$i$i;
     $tobool97$i$i = ($and96$i$i|0)==(0);
     if ($tobool97$i$i) {
      $or101$i$i = $161 | $shl95$i$i;
      HEAP32[(119048)>>2] = $or101$i$i;
      HEAP32[$arrayidx91$i$i>>2] = $94;
      $parent$i$i = ((($94)) + 24|0);
      HEAP32[$parent$i$i>>2] = $arrayidx91$i$i;
      $bk102$i$i = ((($94)) + 12|0);
      HEAP32[$bk102$i$i>>2] = $94;
      $fd103$i$i = ((($94)) + 8|0);
      HEAP32[$fd103$i$i>>2] = $94;
      break;
     }
     $162 = HEAP32[$arrayidx91$i$i>>2]|0;
     $cmp106$i$i = ($I57$0$i$i|0)==(31);
     $shr110$i$i = $I57$0$i$i >>> 1;
     $sub113$i$i = (25 - ($shr110$i$i))|0;
     $cond115$i$i = $cmp106$i$i ? 0 : $sub113$i$i;
     $shl116$i$i = $sub$ptr$sub$i$i << $cond115$i$i;
     $K105$0$i$i = $shl116$i$i;$T$0$i$i = $162;
     while(1) {
      $head118$i$i = ((($T$0$i$i)) + 4|0);
      $163 = HEAP32[$head118$i$i>>2]|0;
      $and119$i$i = $163 & -8;
      $cmp120$i$i = ($and119$i$i|0)==($sub$ptr$sub$i$i|0);
      if ($cmp120$i$i) {
       label = 216;
       break;
      }
      $shr124$i$i = $K105$0$i$i >>> 31;
      $arrayidx126$i$i = (((($T$0$i$i)) + 16|0) + ($shr124$i$i<<2)|0);
      $shl127$i$i = $K105$0$i$i << 1;
      $164 = HEAP32[$arrayidx126$i$i>>2]|0;
      $cmp128$i$i = ($164|0)==(0|0);
      if ($cmp128$i$i) {
       label = 215;
       break;
      } else {
       $K105$0$i$i = $shl127$i$i;$T$0$i$i = $164;
      }
     }
     if ((label|0) == 215) {
      HEAP32[$arrayidx126$i$i>>2] = $94;
      $parent138$i$i = ((($94)) + 24|0);
      HEAP32[$parent138$i$i>>2] = $T$0$i$i;
      $bk139$i$i = ((($94)) + 12|0);
      HEAP32[$bk139$i$i>>2] = $94;
      $fd140$i$i = ((($94)) + 8|0);
      HEAP32[$fd140$i$i>>2] = $94;
      break;
     }
     else if ((label|0) == 216) {
      $fd148$i$i = ((($T$0$i$i)) + 8|0);
      $165 = HEAP32[$fd148$i$i>>2]|0;
      $bk158$i$i = ((($165)) + 12|0);
      HEAP32[$bk158$i$i>>2] = $94;
      HEAP32[$fd148$i$i>>2] = $94;
      $fd160$i$i = ((($94)) + 8|0);
      HEAP32[$fd160$i$i>>2] = $165;
      $bk161$i$i = ((($94)) + 12|0);
      HEAP32[$bk161$i$i>>2] = $T$0$i$i;
      $parent162$i$i = ((($94)) + 24|0);
      HEAP32[$parent162$i$i>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $166 = HEAP32[(119056)>>2]|0;
  $cmp257$i = ($166>>>0)>($nb$0>>>0);
  if ($cmp257$i) {
   $sub260$i = (($166) - ($nb$0))|0;
   HEAP32[(119056)>>2] = $sub260$i;
   $167 = HEAP32[(119068)>>2]|0;
   $add$ptr262$i = (($167) + ($nb$0)|0);
   HEAP32[(119068)>>2] = $add$ptr262$i;
   $or264$i = $sub260$i | 1;
   $head265$i = ((($add$ptr262$i)) + 4|0);
   HEAP32[$head265$i>>2] = $or264$i;
   $or267$i = $nb$0 | 3;
   $head268$i = ((($167)) + 4|0);
   HEAP32[$head268$i>>2] = $or267$i;
   $add$ptr269$i = ((($167)) + 8|0);
   $retval$0 = $add$ptr269$i;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $call275$i = (___errno_location()|0);
 HEAP32[$call275$i>>2] = 12;
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $F510$0 = 0, $I534$0 = 0, $K583$0 = 0;
 var $R$1 = 0, $R$3 = 0, $R332$1 = 0, $R332$3 = 0, $RP$1 = 0, $RP360$1 = 0, $T$0 = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr217 = 0, $add$ptr261 = 0, $add$ptr482 = 0, $add$ptr498 = 0, $add$ptr6 = 0, $add17 = 0, $add246 = 0, $add258 = 0, $add267 = 0, $add550 = 0, $add555 = 0;
 var $add559 = 0, $add561 = 0, $add564 = 0, $and12 = 0, $and140 = 0, $and210 = 0, $and215 = 0, $and232 = 0, $and240 = 0, $and266 = 0, $and301 = 0, $and410 = 0, $and46 = 0, $and495 = 0, $and5 = 0, $and512 = 0, $and545 = 0, $and549 = 0, $and554 = 0, $and563 = 0;
 var $and574 = 0, $and592 = 0, $and8 = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx157 = 0, $arrayidx182 = 0, $arrayidx188 = 0, $arrayidx198 = 0, $arrayidx362 = 0, $arrayidx374 = 0, $arrayidx379 = 0, $arrayidx400 = 0, $arrayidx419 = 0, $arrayidx427 = 0, $arrayidx454 = 0, $arrayidx460 = 0, $arrayidx470 = 0;
 var $arrayidx509 = 0, $arrayidx567 = 0, $arrayidx570 = 0, $arrayidx599 = 0, $arrayidx99 = 0, $bk = 0, $bk275 = 0, $bk321 = 0, $bk333 = 0, $bk355 = 0, $bk529 = 0, $bk531 = 0, $bk580 = 0, $bk611 = 0, $bk631 = 0, $bk634 = 0, $bk66 = 0, $bk73 = 0, $bk94 = 0, $child = 0;
 var $child171 = 0, $child361 = 0, $child443 = 0, $child569 = 0, $cmp = 0, $cmp$i = 0, $cmp100 = 0, $cmp104 = 0, $cmp109 = 0, $cmp114 = 0, $cmp127 = 0, $cmp13 = 0, $cmp131 = 0, $cmp162 = 0, $cmp173 = 0, $cmp18 = 0, $cmp189 = 0, $cmp211 = 0, $cmp22 = 0, $cmp228 = 0;
 var $cmp243 = 0, $cmp249 = 0, $cmp25 = 0, $cmp255 = 0, $cmp269 = 0, $cmp296 = 0, $cmp334 = 0, $cmp363 = 0, $cmp368 = 0, $cmp375 = 0, $cmp380 = 0, $cmp395 = 0, $cmp401 = 0, $cmp42 = 0, $cmp432 = 0, $cmp445 = 0, $cmp461 = 0, $cmp484 = 0, $cmp502 = 0, $cmp536 = 0;
 var $cmp540 = 0, $cmp584 = 0, $cmp593 = 0, $cmp601 = 0, $cmp640 = 0, $cmp74 = 0, $cond = 0, $cond255 = 0, $cond256 = 0, $dec = 0, $fd = 0, $fd273 = 0, $fd322 = 0, $fd338 = 0, $fd356 = 0, $fd530 = 0, $fd581 = 0, $fd612 = 0, $fd620 = 0, $fd633 = 0;
 var $fd67 = 0, $fd78 = 0, $fd95 = 0, $head209 = 0, $head216 = 0, $head231 = 0, $head248 = 0, $head260 = 0, $head4 = 0, $head481 = 0, $head497 = 0, $head591 = 0, $idx$neg = 0, $index = 0, $index399 = 0, $index568 = 0, $neg = 0, $neg139 = 0, $neg300 = 0, $neg409 = 0;
 var $next4$i = 0, $not$cmp150 = 0, $not$cmp420 = 0, $or = 0, $or247 = 0, $or259 = 0, $or480 = 0, $or496 = 0, $or516 = 0, $or578 = 0, $p$1 = 0, $parent = 0, $parent170 = 0, $parent183 = 0, $parent199 = 0, $parent331 = 0, $parent442 = 0, $parent455 = 0, $parent471 = 0, $parent579 = 0;
 var $parent610 = 0, $parent635 = 0, $psize$1 = 0, $psize$2 = 0, $shl138 = 0, $shl299 = 0, $shl408 = 0, $shl45 = 0, $shl508 = 0, $shl511 = 0, $shl546 = 0, $shl551 = 0, $shl557 = 0, $shl560 = 0, $shl573 = 0, $shl590 = 0, $shl600 = 0, $shr = 0, $shr268 = 0, $shr501 = 0;
 var $shr535 = 0, $shr544 = 0, $shr548 = 0, $shr553 = 0, $shr558 = 0, $shr562 = 0, $shr586 = 0, $shr597 = 0, $sp$0$i = 0, $sp$0$in$i = 0, $sub = 0, $sub547 = 0, $sub552 = 0, $sub556 = 0, $sub589 = 0, $tobool233 = 0, $tobool241 = 0, $tobool513 = 0, $tobool575 = 0, $tobool9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($mem|0)==(0|0);
 if ($cmp) {
  return;
 }
 $add$ptr = ((($mem)) + -8|0);
 $0 = HEAP32[(119060)>>2]|0;
 $head4 = ((($mem)) + -4|0);
 $1 = HEAP32[$head4>>2]|0;
 $and5 = $1 & -8;
 $add$ptr6 = (($add$ptr) + ($and5)|0);
 $and8 = $1 & 1;
 $tobool9 = ($and8|0)==(0);
 do {
  if ($tobool9) {
   $2 = HEAP32[$add$ptr>>2]|0;
   $and12 = $1 & 3;
   $cmp13 = ($and12|0)==(0);
   if ($cmp13) {
    return;
   }
   $idx$neg = (0 - ($2))|0;
   $add$ptr16 = (($add$ptr) + ($idx$neg)|0);
   $add17 = (($2) + ($and5))|0;
   $cmp18 = ($add$ptr16>>>0)<($0>>>0);
   if ($cmp18) {
    return;
   }
   $3 = HEAP32[(119064)>>2]|0;
   $cmp22 = ($add$ptr16|0)==($3|0);
   if ($cmp22) {
    $head209 = ((($add$ptr6)) + 4|0);
    $20 = HEAP32[$head209>>2]|0;
    $and210 = $20 & 3;
    $cmp211 = ($and210|0)==(3);
    if (!($cmp211)) {
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
    $add$ptr217 = (($add$ptr16) + ($add17)|0);
    $head216 = ((($add$ptr16)) + 4|0);
    $or = $add17 | 1;
    $and215 = $20 & -2;
    HEAP32[(119052)>>2] = $add17;
    HEAP32[$head209>>2] = $and215;
    HEAP32[$head216>>2] = $or;
    HEAP32[$add$ptr217>>2] = $add17;
    return;
   }
   $shr = $2 >>> 3;
   $cmp25 = ($2>>>0)<(256);
   if ($cmp25) {
    $fd = ((($add$ptr16)) + 8|0);
    $4 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr16)) + 12|0);
    $5 = HEAP32[$bk>>2]|0;
    $cmp42 = ($5|0)==($4|0);
    if ($cmp42) {
     $shl45 = 1 << $shr;
     $neg = $shl45 ^ -1;
     $6 = HEAP32[29761]|0;
     $and46 = $6 & $neg;
     HEAP32[29761] = $and46;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    } else {
     $bk66 = ((($4)) + 12|0);
     HEAP32[$bk66>>2] = $5;
     $fd67 = ((($5)) + 8|0);
     HEAP32[$fd67>>2] = $4;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
   }
   $parent = ((($add$ptr16)) + 24|0);
   $7 = HEAP32[$parent>>2]|0;
   $bk73 = ((($add$ptr16)) + 12|0);
   $8 = HEAP32[$bk73>>2]|0;
   $cmp74 = ($8|0)==($add$ptr16|0);
   do {
    if ($cmp74) {
     $child = ((($add$ptr16)) + 16|0);
     $arrayidx99 = ((($child)) + 4|0);
     $10 = HEAP32[$arrayidx99>>2]|0;
     $cmp100 = ($10|0)==(0|0);
     if ($cmp100) {
      $11 = HEAP32[$child>>2]|0;
      $cmp104 = ($11|0)==(0|0);
      if ($cmp104) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $11;$RP$1 = $child;
      }
     } else {
      $R$1 = $10;$RP$1 = $arrayidx99;
     }
     while(1) {
      $arrayidx108 = ((($R$1)) + 20|0);
      $12 = HEAP32[$arrayidx108>>2]|0;
      $cmp109 = ($12|0)==(0|0);
      if (!($cmp109)) {
       $R$1 = $12;$RP$1 = $arrayidx108;
       continue;
      }
      $arrayidx113 = ((($R$1)) + 16|0);
      $13 = HEAP32[$arrayidx113>>2]|0;
      $cmp114 = ($13|0)==(0|0);
      if ($cmp114) {
       break;
      } else {
       $R$1 = $13;$RP$1 = $arrayidx113;
      }
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd78 = ((($add$ptr16)) + 8|0);
     $9 = HEAP32[$fd78>>2]|0;
     $bk94 = ((($9)) + 12|0);
     HEAP32[$bk94>>2] = $8;
     $fd95 = ((($8)) + 8|0);
     HEAP32[$fd95>>2] = $9;
     $R$3 = $8;
    }
   } while(0);
   $cmp127 = ($7|0)==(0|0);
   if ($cmp127) {
    $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
   } else {
    $index = ((($add$ptr16)) + 28|0);
    $14 = HEAP32[$index>>2]|0;
    $arrayidx130 = (119348 + ($14<<2)|0);
    $15 = HEAP32[$arrayidx130>>2]|0;
    $cmp131 = ($add$ptr16|0)==($15|0);
    if ($cmp131) {
     HEAP32[$arrayidx130>>2] = $R$3;
     $cond255 = ($R$3|0)==(0|0);
     if ($cond255) {
      $shl138 = 1 << $14;
      $neg139 = $shl138 ^ -1;
      $16 = HEAP32[(119048)>>2]|0;
      $and140 = $16 & $neg139;
      HEAP32[(119048)>>2] = $and140;
      $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    } else {
     $arrayidx149 = ((($7)) + 16|0);
     $17 = HEAP32[$arrayidx149>>2]|0;
     $not$cmp150 = ($17|0)!=($add$ptr16|0);
     $$sink = $not$cmp150&1;
     $arrayidx157 = (((($7)) + 16|0) + ($$sink<<2)|0);
     HEAP32[$arrayidx157>>2] = $R$3;
     $cmp162 = ($R$3|0)==(0|0);
     if ($cmp162) {
      $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    }
    $parent170 = ((($R$3)) + 24|0);
    HEAP32[$parent170>>2] = $7;
    $child171 = ((($add$ptr16)) + 16|0);
    $18 = HEAP32[$child171>>2]|0;
    $cmp173 = ($18|0)==(0|0);
    if (!($cmp173)) {
     $arrayidx182 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx182>>2] = $18;
     $parent183 = ((($18)) + 24|0);
     HEAP32[$parent183>>2] = $R$3;
    }
    $arrayidx188 = ((($child171)) + 4|0);
    $19 = HEAP32[$arrayidx188>>2]|0;
    $cmp189 = ($19|0)==(0|0);
    if ($cmp189) {
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    } else {
     $arrayidx198 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx198>>2] = $19;
     $parent199 = ((($19)) + 24|0);
     HEAP32[$parent199>>2] = $R$3;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    }
   }
  } else {
   $21 = $add$ptr;$p$1 = $add$ptr;$psize$1 = $and5;
  }
 } while(0);
 $cmp228 = ($21>>>0)<($add$ptr6>>>0);
 if (!($cmp228)) {
  return;
 }
 $head231 = ((($add$ptr6)) + 4|0);
 $22 = HEAP32[$head231>>2]|0;
 $and232 = $22 & 1;
 $tobool233 = ($and232|0)==(0);
 if ($tobool233) {
  return;
 }
 $and240 = $22 & 2;
 $tobool241 = ($and240|0)==(0);
 if ($tobool241) {
  $23 = HEAP32[(119068)>>2]|0;
  $cmp243 = ($add$ptr6|0)==($23|0);
  $24 = HEAP32[(119064)>>2]|0;
  if ($cmp243) {
   $25 = HEAP32[(119056)>>2]|0;
   $add246 = (($25) + ($psize$1))|0;
   HEAP32[(119056)>>2] = $add246;
   HEAP32[(119068)>>2] = $p$1;
   $or247 = $add246 | 1;
   $head248 = ((($p$1)) + 4|0);
   HEAP32[$head248>>2] = $or247;
   $cmp249 = ($p$1|0)==($24|0);
   if (!($cmp249)) {
    return;
   }
   HEAP32[(119064)>>2] = 0;
   HEAP32[(119052)>>2] = 0;
   return;
  }
  $cmp255 = ($add$ptr6|0)==($24|0);
  if ($cmp255) {
   $26 = HEAP32[(119052)>>2]|0;
   $add258 = (($26) + ($psize$1))|0;
   HEAP32[(119052)>>2] = $add258;
   HEAP32[(119064)>>2] = $21;
   $or259 = $add258 | 1;
   $head260 = ((($p$1)) + 4|0);
   HEAP32[$head260>>2] = $or259;
   $add$ptr261 = (($21) + ($add258)|0);
   HEAP32[$add$ptr261>>2] = $add258;
   return;
  }
  $and266 = $22 & -8;
  $add267 = (($and266) + ($psize$1))|0;
  $shr268 = $22 >>> 3;
  $cmp269 = ($22>>>0)<(256);
  do {
   if ($cmp269) {
    $fd273 = ((($add$ptr6)) + 8|0);
    $27 = HEAP32[$fd273>>2]|0;
    $bk275 = ((($add$ptr6)) + 12|0);
    $28 = HEAP32[$bk275>>2]|0;
    $cmp296 = ($28|0)==($27|0);
    if ($cmp296) {
     $shl299 = 1 << $shr268;
     $neg300 = $shl299 ^ -1;
     $29 = HEAP32[29761]|0;
     $and301 = $29 & $neg300;
     HEAP32[29761] = $and301;
     break;
    } else {
     $bk321 = ((($27)) + 12|0);
     HEAP32[$bk321>>2] = $28;
     $fd322 = ((($28)) + 8|0);
     HEAP32[$fd322>>2] = $27;
     break;
    }
   } else {
    $parent331 = ((($add$ptr6)) + 24|0);
    $30 = HEAP32[$parent331>>2]|0;
    $bk333 = ((($add$ptr6)) + 12|0);
    $31 = HEAP32[$bk333>>2]|0;
    $cmp334 = ($31|0)==($add$ptr6|0);
    do {
     if ($cmp334) {
      $child361 = ((($add$ptr6)) + 16|0);
      $arrayidx362 = ((($child361)) + 4|0);
      $33 = HEAP32[$arrayidx362>>2]|0;
      $cmp363 = ($33|0)==(0|0);
      if ($cmp363) {
       $34 = HEAP32[$child361>>2]|0;
       $cmp368 = ($34|0)==(0|0);
       if ($cmp368) {
        $R332$3 = 0;
        break;
       } else {
        $R332$1 = $34;$RP360$1 = $child361;
       }
      } else {
       $R332$1 = $33;$RP360$1 = $arrayidx362;
      }
      while(1) {
       $arrayidx374 = ((($R332$1)) + 20|0);
       $35 = HEAP32[$arrayidx374>>2]|0;
       $cmp375 = ($35|0)==(0|0);
       if (!($cmp375)) {
        $R332$1 = $35;$RP360$1 = $arrayidx374;
        continue;
       }
       $arrayidx379 = ((($R332$1)) + 16|0);
       $36 = HEAP32[$arrayidx379>>2]|0;
       $cmp380 = ($36|0)==(0|0);
       if ($cmp380) {
        break;
       } else {
        $R332$1 = $36;$RP360$1 = $arrayidx379;
       }
      }
      HEAP32[$RP360$1>>2] = 0;
      $R332$3 = $R332$1;
     } else {
      $fd338 = ((($add$ptr6)) + 8|0);
      $32 = HEAP32[$fd338>>2]|0;
      $bk355 = ((($32)) + 12|0);
      HEAP32[$bk355>>2] = $31;
      $fd356 = ((($31)) + 8|0);
      HEAP32[$fd356>>2] = $32;
      $R332$3 = $31;
     }
    } while(0);
    $cmp395 = ($30|0)==(0|0);
    if (!($cmp395)) {
     $index399 = ((($add$ptr6)) + 28|0);
     $37 = HEAP32[$index399>>2]|0;
     $arrayidx400 = (119348 + ($37<<2)|0);
     $38 = HEAP32[$arrayidx400>>2]|0;
     $cmp401 = ($add$ptr6|0)==($38|0);
     if ($cmp401) {
      HEAP32[$arrayidx400>>2] = $R332$3;
      $cond256 = ($R332$3|0)==(0|0);
      if ($cond256) {
       $shl408 = 1 << $37;
       $neg409 = $shl408 ^ -1;
       $39 = HEAP32[(119048)>>2]|0;
       $and410 = $39 & $neg409;
       HEAP32[(119048)>>2] = $and410;
       break;
      }
     } else {
      $arrayidx419 = ((($30)) + 16|0);
      $40 = HEAP32[$arrayidx419>>2]|0;
      $not$cmp420 = ($40|0)!=($add$ptr6|0);
      $$sink4 = $not$cmp420&1;
      $arrayidx427 = (((($30)) + 16|0) + ($$sink4<<2)|0);
      HEAP32[$arrayidx427>>2] = $R332$3;
      $cmp432 = ($R332$3|0)==(0|0);
      if ($cmp432) {
       break;
      }
     }
     $parent442 = ((($R332$3)) + 24|0);
     HEAP32[$parent442>>2] = $30;
     $child443 = ((($add$ptr6)) + 16|0);
     $41 = HEAP32[$child443>>2]|0;
     $cmp445 = ($41|0)==(0|0);
     if (!($cmp445)) {
      $arrayidx454 = ((($R332$3)) + 16|0);
      HEAP32[$arrayidx454>>2] = $41;
      $parent455 = ((($41)) + 24|0);
      HEAP32[$parent455>>2] = $R332$3;
     }
     $arrayidx460 = ((($child443)) + 4|0);
     $42 = HEAP32[$arrayidx460>>2]|0;
     $cmp461 = ($42|0)==(0|0);
     if (!($cmp461)) {
      $arrayidx470 = ((($R332$3)) + 20|0);
      HEAP32[$arrayidx470>>2] = $42;
      $parent471 = ((($42)) + 24|0);
      HEAP32[$parent471>>2] = $R332$3;
     }
    }
   }
  } while(0);
  $or480 = $add267 | 1;
  $head481 = ((($p$1)) + 4|0);
  HEAP32[$head481>>2] = $or480;
  $add$ptr482 = (($21) + ($add267)|0);
  HEAP32[$add$ptr482>>2] = $add267;
  $43 = HEAP32[(119064)>>2]|0;
  $cmp484 = ($p$1|0)==($43|0);
  if ($cmp484) {
   HEAP32[(119052)>>2] = $add267;
   return;
  } else {
   $psize$2 = $add267;
  }
 } else {
  $and495 = $22 & -2;
  HEAP32[$head231>>2] = $and495;
  $or496 = $psize$1 | 1;
  $head497 = ((($p$1)) + 4|0);
  HEAP32[$head497>>2] = $or496;
  $add$ptr498 = (($21) + ($psize$1)|0);
  HEAP32[$add$ptr498>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $shr501 = $psize$2 >>> 3;
 $cmp502 = ($psize$2>>>0)<(256);
 if ($cmp502) {
  $shl508 = $shr501 << 1;
  $arrayidx509 = (119084 + ($shl508<<2)|0);
  $44 = HEAP32[29761]|0;
  $shl511 = 1 << $shr501;
  $and512 = $44 & $shl511;
  $tobool513 = ($and512|0)==(0);
  if ($tobool513) {
   $or516 = $44 | $shl511;
   HEAP32[29761] = $or516;
   $$pre = ((($arrayidx509)) + 8|0);
   $$pre$phiZ2D = $$pre;$F510$0 = $arrayidx509;
  } else {
   $45 = ((($arrayidx509)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $$pre$phiZ2D = $45;$F510$0 = $46;
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $bk529 = ((($F510$0)) + 12|0);
  HEAP32[$bk529>>2] = $p$1;
  $fd530 = ((($p$1)) + 8|0);
  HEAP32[$fd530>>2] = $F510$0;
  $bk531 = ((($p$1)) + 12|0);
  HEAP32[$bk531>>2] = $arrayidx509;
  return;
 }
 $shr535 = $psize$2 >>> 8;
 $cmp536 = ($shr535|0)==(0);
 if ($cmp536) {
  $I534$0 = 0;
 } else {
  $cmp540 = ($psize$2>>>0)>(16777215);
  if ($cmp540) {
   $I534$0 = 31;
  } else {
   $sub = (($shr535) + 1048320)|0;
   $shr544 = $sub >>> 16;
   $and545 = $shr544 & 8;
   $shl546 = $shr535 << $and545;
   $sub547 = (($shl546) + 520192)|0;
   $shr548 = $sub547 >>> 16;
   $and549 = $shr548 & 4;
   $add550 = $and549 | $and545;
   $shl551 = $shl546 << $and549;
   $sub552 = (($shl551) + 245760)|0;
   $shr553 = $sub552 >>> 16;
   $and554 = $shr553 & 2;
   $add555 = $add550 | $and554;
   $sub556 = (14 - ($add555))|0;
   $shl557 = $shl551 << $and554;
   $shr558 = $shl557 >>> 15;
   $add559 = (($sub556) + ($shr558))|0;
   $shl560 = $add559 << 1;
   $add561 = (($add559) + 7)|0;
   $shr562 = $psize$2 >>> $add561;
   $and563 = $shr562 & 1;
   $add564 = $and563 | $shl560;
   $I534$0 = $add564;
  }
 }
 $arrayidx567 = (119348 + ($I534$0<<2)|0);
 $index568 = ((($p$1)) + 28|0);
 HEAP32[$index568>>2] = $I534$0;
 $child569 = ((($p$1)) + 16|0);
 $arrayidx570 = ((($p$1)) + 20|0);
 HEAP32[$arrayidx570>>2] = 0;
 HEAP32[$child569>>2] = 0;
 $47 = HEAP32[(119048)>>2]|0;
 $shl573 = 1 << $I534$0;
 $and574 = $47 & $shl573;
 $tobool575 = ($and574|0)==(0);
 do {
  if ($tobool575) {
   $or578 = $47 | $shl573;
   HEAP32[(119048)>>2] = $or578;
   HEAP32[$arrayidx567>>2] = $p$1;
   $parent579 = ((($p$1)) + 24|0);
   HEAP32[$parent579>>2] = $arrayidx567;
   $bk580 = ((($p$1)) + 12|0);
   HEAP32[$bk580>>2] = $p$1;
   $fd581 = ((($p$1)) + 8|0);
   HEAP32[$fd581>>2] = $p$1;
  } else {
   $48 = HEAP32[$arrayidx567>>2]|0;
   $cmp584 = ($I534$0|0)==(31);
   $shr586 = $I534$0 >>> 1;
   $sub589 = (25 - ($shr586))|0;
   $cond = $cmp584 ? 0 : $sub589;
   $shl590 = $psize$2 << $cond;
   $K583$0 = $shl590;$T$0 = $48;
   while(1) {
    $head591 = ((($T$0)) + 4|0);
    $49 = HEAP32[$head591>>2]|0;
    $and592 = $49 & -8;
    $cmp593 = ($and592|0)==($psize$2|0);
    if ($cmp593) {
     label = 73;
     break;
    }
    $shr597 = $K583$0 >>> 31;
    $arrayidx599 = (((($T$0)) + 16|0) + ($shr597<<2)|0);
    $shl600 = $K583$0 << 1;
    $50 = HEAP32[$arrayidx599>>2]|0;
    $cmp601 = ($50|0)==(0|0);
    if ($cmp601) {
     label = 72;
     break;
    } else {
     $K583$0 = $shl600;$T$0 = $50;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$arrayidx599>>2] = $p$1;
    $parent610 = ((($p$1)) + 24|0);
    HEAP32[$parent610>>2] = $T$0;
    $bk611 = ((($p$1)) + 12|0);
    HEAP32[$bk611>>2] = $p$1;
    $fd612 = ((($p$1)) + 8|0);
    HEAP32[$fd612>>2] = $p$1;
    break;
   }
   else if ((label|0) == 73) {
    $fd620 = ((($T$0)) + 8|0);
    $51 = HEAP32[$fd620>>2]|0;
    $bk631 = ((($51)) + 12|0);
    HEAP32[$bk631>>2] = $p$1;
    HEAP32[$fd620>>2] = $p$1;
    $fd633 = ((($p$1)) + 8|0);
    HEAP32[$fd633>>2] = $51;
    $bk634 = ((($p$1)) + 12|0);
    HEAP32[$bk634>>2] = $T$0;
    $parent635 = ((($p$1)) + 24|0);
    HEAP32[$parent635>>2] = 0;
    break;
   }
  }
 } while(0);
 $52 = HEAP32[(119076)>>2]|0;
 $dec = (($52) + -1)|0;
 HEAP32[(119076)>>2] = $dec;
 $cmp640 = ($dec|0)==(0);
 if ($cmp640) {
  $sp$0$in$i = (119500);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $cmp$i = ($sp$0$i|0)==(0|0);
  $next4$i = ((($sp$0$i)) + 8|0);
  if ($cmp$i) {
   break;
  } else {
   $sp$0$in$i = $next4$i;
  }
 }
 HEAP32[(119076)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $add$ptr = 0, $add$ptr10 = 0, $add6 = 0, $and = 0, $and15 = 0, $and17 = 0, $call = 0, $call12 = 0, $call3 = 0, $call7 = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp18 = 0, $cmp20 = 0, $cmp5 = 0, $cmp8 = 0, $cond = 0, $cond19 = 0;
 var $cond24 = 0, $head = 0, $mem$1 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($oldmem|0)==(0|0);
 if ($cmp) {
  $call = (_malloc($bytes)|0);
  $mem$1 = $call;
  return ($mem$1|0);
 }
 $cmp1 = ($bytes>>>0)>(4294967231);
 if ($cmp1) {
  $call3 = (___errno_location()|0);
  HEAP32[$call3>>2] = 12;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $cmp5 = ($bytes>>>0)<(11);
 $add6 = (($bytes) + 11)|0;
 $and = $add6 & -8;
 $cond = $cmp5 ? 16 : $and;
 $add$ptr = ((($oldmem)) + -8|0);
 $call7 = (_try_realloc_chunk($add$ptr,$cond)|0);
 $cmp8 = ($call7|0)==(0|0);
 if (!($cmp8)) {
  $add$ptr10 = ((($call7)) + 8|0);
  $mem$1 = $add$ptr10;
  return ($mem$1|0);
 }
 $call12 = (_malloc($bytes)|0);
 $cmp13 = ($call12|0)==(0|0);
 if ($cmp13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $head = ((($oldmem)) + -4|0);
 $0 = HEAP32[$head>>2]|0;
 $and15 = $0 & -8;
 $and17 = $0 & 3;
 $cmp18 = ($and17|0)==(0);
 $cond19 = $cmp18 ? 8 : 4;
 $sub = (($and15) - ($cond19))|0;
 $cmp20 = ($sub>>>0)<($bytes>>>0);
 $cond24 = $cmp20 ? $sub : $bytes;
 _memcpy(($call12|0),($oldmem|0),($cond24|0))|0;
 _free($oldmem);
 $mem$1 = $call12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $R$1 = 0, $R$3 = 0, $RP$1 = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr298 = 0, $add$ptr30 = 0, $add$ptr303 = 0, $add$ptr317 = 0;
 var $add$ptr41 = 0, $add$ptr66 = 0, $add$ptr67 = 0, $add$ptr91 = 0, $add105 = 0, $add58 = 0, $and = 0, $and10 = 0, $and100 = 0, $and104 = 0, $and128 = 0, $and19 = 0, $and216 = 0, $and294 = 0, $and43 = 0, $and69 = 0, $and80 = 0, $arrayidx179 = 0, $arrayidx186 = 0, $arrayidx190 = 0;
 var $arrayidx206 = 0, $arrayidx226 = 0, $arrayidx234 = 0, $arrayidx261 = 0, $arrayidx267 = 0, $arrayidx278 = 0, $bk = 0, $bk147 = 0, $bk155 = 0, $bk174 = 0, $child = 0, $child249 = 0, $cmp$i = 0, $cmp1$i = 0, $cmp106 = 0, $cmp11 = 0, $cmp111 = 0, $cmp125 = 0, $cmp13 = 0, $cmp15 = 0;
 var $cmp156 = 0, $cmp180 = 0, $cmp183 = 0, $cmp187 = 0, $cmp191 = 0, $cmp2$i = 0, $cmp203 = 0, $cmp207 = 0, $cmp239 = 0, $cmp251 = 0, $cmp268 = 0, $cmp288 = 0, $cmp34 = 0, $cmp36 = 0, $cmp56 = 0, $cmp59 = 0, $cmp63 = 0, $cond = 0, $fd = 0, $fd148 = 0;
 var $fd159 = 0, $fd175 = 0, $head = 0, $head23 = 0, $head299 = 0, $head31 = 0, $head310 = 0, $head318 = 0, $head48 = 0, $head74 = 0, $head79 = 0, $head92 = 0, $head99 = 0, $index = 0, $neg = 0, $neg215 = 0, $newp$2 = 0, $not$cmp227 = 0, $or = 0, $or20 = 0;
 var $or28 = 0, $or295 = 0, $or296 = 0, $or300 = 0, $or306 = 0, $or307 = 0, $or315 = 0, $or319 = 0, $or32 = 0, $or44 = 0, $or45 = 0, $or50 = 0, $or70 = 0, $or71 = 0, $or76 = 0, $or88 = 0, $or89 = 0, $or93 = 0, $parent = 0, $parent248 = 0;
 var $parent262 = 0, $parent279 = 0, $shl$i = 0, $shl127 = 0, $shl214 = 0, $shr = 0, $storemerge = 0, $storemerge1 = 0, $sub = 0, $sub$i = 0, $sub110 = 0, $sub40 = 0, $sub62 = 0, $tobool101 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $head = ((($p)) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & -8;
 $add$ptr = (($p) + ($and)|0);
 $and10 = $0 & 3;
 $cmp11 = ($and10|0)==(0);
 if ($cmp11) {
  $cmp$i = ($nb>>>0)<(256);
  if ($cmp$i) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $add$i = (($nb) + 4)|0;
  $cmp1$i = ($and>>>0)<($add$i>>>0);
  if (!($cmp1$i)) {
   $sub$i = (($and) - ($nb))|0;
   $1 = HEAP32[(119524)>>2]|0;
   $shl$i = $1 << 1;
   $cmp2$i = ($sub$i>>>0)>($shl$i>>>0);
   if (!($cmp2$i)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $cmp13 = ($and>>>0)<($nb>>>0);
 if (!($cmp13)) {
  $sub = (($and) - ($nb))|0;
  $cmp15 = ($sub>>>0)>(15);
  if (!($cmp15)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $add$ptr17 = (($p) + ($nb)|0);
  $and19 = $0 & 1;
  $or = $and19 | $nb;
  $or20 = $or | 2;
  HEAP32[$head>>2] = $or20;
  $head23 = ((($add$ptr17)) + 4|0);
  $or28 = $sub | 3;
  HEAP32[$head23>>2] = $or28;
  $add$ptr30 = (($add$ptr17) + ($sub)|0);
  $head31 = ((($add$ptr30)) + 4|0);
  $2 = HEAP32[$head31>>2]|0;
  $or32 = $2 | 1;
  HEAP32[$head31>>2] = $or32;
  _dispose_chunk($add$ptr17,$sub);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $3 = HEAP32[(119068)>>2]|0;
 $cmp34 = ($add$ptr|0)==($3|0);
 if ($cmp34) {
  $4 = HEAP32[(119056)>>2]|0;
  $add = (($4) + ($and))|0;
  $cmp36 = ($add>>>0)>($nb>>>0);
  $sub40 = (($add) - ($nb))|0;
  $add$ptr41 = (($p) + ($nb)|0);
  if (!($cmp36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $or50 = $sub40 | 1;
  $head48 = ((($add$ptr41)) + 4|0);
  $and43 = $0 & 1;
  $or44 = $and43 | $nb;
  $or45 = $or44 | 2;
  HEAP32[$head>>2] = $or45;
  HEAP32[$head48>>2] = $or50;
  HEAP32[(119068)>>2] = $add$ptr41;
  HEAP32[(119056)>>2] = $sub40;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $5 = HEAP32[(119064)>>2]|0;
 $cmp56 = ($add$ptr|0)==($5|0);
 if ($cmp56) {
  $6 = HEAP32[(119052)>>2]|0;
  $add58 = (($6) + ($and))|0;
  $cmp59 = ($add58>>>0)<($nb>>>0);
  if ($cmp59) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $sub62 = (($add58) - ($nb))|0;
  $cmp63 = ($sub62>>>0)>(15);
  $and69 = $0 & 1;
  if ($cmp63) {
   $add$ptr66 = (($p) + ($nb)|0);
   $add$ptr67 = (($add$ptr66) + ($sub62)|0);
   $or70 = $and69 | $nb;
   $or71 = $or70 | 2;
   HEAP32[$head>>2] = $or71;
   $head74 = ((($add$ptr66)) + 4|0);
   $or76 = $sub62 | 1;
   HEAP32[$head74>>2] = $or76;
   HEAP32[$add$ptr67>>2] = $sub62;
   $head79 = ((($add$ptr67)) + 4|0);
   $7 = HEAP32[$head79>>2]|0;
   $and80 = $7 & -2;
   HEAP32[$head79>>2] = $and80;
   $storemerge = $add$ptr66;$storemerge1 = $sub62;
  } else {
   $or88 = $and69 | $add58;
   $or89 = $or88 | 2;
   HEAP32[$head>>2] = $or89;
   $add$ptr91 = (($p) + ($add58)|0);
   $head92 = ((($add$ptr91)) + 4|0);
   $8 = HEAP32[$head92>>2]|0;
   $or93 = $8 | 1;
   HEAP32[$head92>>2] = $or93;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(119052)>>2] = $storemerge1;
  HEAP32[(119064)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $head99 = ((($add$ptr)) + 4|0);
 $9 = HEAP32[$head99>>2]|0;
 $and100 = $9 & 2;
 $tobool101 = ($and100|0)==(0);
 if (!($tobool101)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $and104 = $9 & -8;
 $add105 = (($and104) + ($and))|0;
 $cmp106 = ($add105>>>0)<($nb>>>0);
 if ($cmp106) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $sub110 = (($add105) - ($nb))|0;
 $shr = $9 >>> 3;
 $cmp111 = ($9>>>0)<(256);
 do {
  if ($cmp111) {
   $fd = ((($add$ptr)) + 8|0);
   $10 = HEAP32[$fd>>2]|0;
   $bk = ((($add$ptr)) + 12|0);
   $11 = HEAP32[$bk>>2]|0;
   $cmp125 = ($11|0)==($10|0);
   if ($cmp125) {
    $shl127 = 1 << $shr;
    $neg = $shl127 ^ -1;
    $12 = HEAP32[29761]|0;
    $and128 = $12 & $neg;
    HEAP32[29761] = $and128;
    break;
   } else {
    $bk147 = ((($10)) + 12|0);
    HEAP32[$bk147>>2] = $11;
    $fd148 = ((($11)) + 8|0);
    HEAP32[$fd148>>2] = $10;
    break;
   }
  } else {
   $parent = ((($add$ptr)) + 24|0);
   $13 = HEAP32[$parent>>2]|0;
   $bk155 = ((($add$ptr)) + 12|0);
   $14 = HEAP32[$bk155>>2]|0;
   $cmp156 = ($14|0)==($add$ptr|0);
   do {
    if ($cmp156) {
     $child = ((($add$ptr)) + 16|0);
     $arrayidx179 = ((($child)) + 4|0);
     $16 = HEAP32[$arrayidx179>>2]|0;
     $cmp180 = ($16|0)==(0|0);
     if ($cmp180) {
      $17 = HEAP32[$child>>2]|0;
      $cmp183 = ($17|0)==(0|0);
      if ($cmp183) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $17;$RP$1 = $child;
      }
     } else {
      $R$1 = $16;$RP$1 = $arrayidx179;
     }
     while(1) {
      $arrayidx186 = ((($R$1)) + 20|0);
      $18 = HEAP32[$arrayidx186>>2]|0;
      $cmp187 = ($18|0)==(0|0);
      if (!($cmp187)) {
       $R$1 = $18;$RP$1 = $arrayidx186;
       continue;
      }
      $arrayidx190 = ((($R$1)) + 16|0);
      $19 = HEAP32[$arrayidx190>>2]|0;
      $cmp191 = ($19|0)==(0|0);
      if ($cmp191) {
       break;
      } else {
       $R$1 = $19;$RP$1 = $arrayidx190;
      }
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd159 = ((($add$ptr)) + 8|0);
     $15 = HEAP32[$fd159>>2]|0;
     $bk174 = ((($15)) + 12|0);
     HEAP32[$bk174>>2] = $14;
     $fd175 = ((($14)) + 8|0);
     HEAP32[$fd175>>2] = $15;
     $R$3 = $14;
    }
   } while(0);
   $cmp203 = ($13|0)==(0|0);
   if (!($cmp203)) {
    $index = ((($add$ptr)) + 28|0);
    $20 = HEAP32[$index>>2]|0;
    $arrayidx206 = (119348 + ($20<<2)|0);
    $21 = HEAP32[$arrayidx206>>2]|0;
    $cmp207 = ($add$ptr|0)==($21|0);
    if ($cmp207) {
     HEAP32[$arrayidx206>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $shl214 = 1 << $20;
      $neg215 = $shl214 ^ -1;
      $22 = HEAP32[(119048)>>2]|0;
      $and216 = $22 & $neg215;
      HEAP32[(119048)>>2] = $and216;
      break;
     }
    } else {
     $arrayidx226 = ((($13)) + 16|0);
     $23 = HEAP32[$arrayidx226>>2]|0;
     $not$cmp227 = ($23|0)!=($add$ptr|0);
     $$sink = $not$cmp227&1;
     $arrayidx234 = (((($13)) + 16|0) + ($$sink<<2)|0);
     HEAP32[$arrayidx234>>2] = $R$3;
     $cmp239 = ($R$3|0)==(0|0);
     if ($cmp239) {
      break;
     }
    }
    $parent248 = ((($R$3)) + 24|0);
    HEAP32[$parent248>>2] = $13;
    $child249 = ((($add$ptr)) + 16|0);
    $24 = HEAP32[$child249>>2]|0;
    $cmp251 = ($24|0)==(0|0);
    if (!($cmp251)) {
     $arrayidx261 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx261>>2] = $24;
     $parent262 = ((($24)) + 24|0);
     HEAP32[$parent262>>2] = $R$3;
    }
    $arrayidx267 = ((($child249)) + 4|0);
    $25 = HEAP32[$arrayidx267>>2]|0;
    $cmp268 = ($25|0)==(0|0);
    if (!($cmp268)) {
     $arrayidx278 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx278>>2] = $25;
     $parent279 = ((($25)) + 24|0);
     HEAP32[$parent279>>2] = $R$3;
    }
   }
  }
 } while(0);
 $cmp288 = ($sub110>>>0)<(16);
 $and294 = $0 & 1;
 if ($cmp288) {
  $or295 = $add105 | $and294;
  $or296 = $or295 | 2;
  HEAP32[$head>>2] = $or296;
  $add$ptr298 = (($p) + ($add105)|0);
  $head299 = ((($add$ptr298)) + 4|0);
  $26 = HEAP32[$head299>>2]|0;
  $or300 = $26 | 1;
  HEAP32[$head299>>2] = $or300;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $add$ptr303 = (($p) + ($nb)|0);
  $or306 = $and294 | $nb;
  $or307 = $or306 | 2;
  HEAP32[$head>>2] = $or307;
  $head310 = ((($add$ptr303)) + 4|0);
  $or315 = $sub110 | 3;
  HEAP32[$head310>>2] = $or315;
  $add$ptr317 = (($add$ptr303) + ($sub110)|0);
  $head318 = ((($add$ptr317)) + 4|0);
  $27 = HEAP32[$head318>>2]|0;
  $or319 = $27 | 1;
  HEAP32[$head318>>2] = $or319;
  _dispose_chunk($add$ptr303,$sub110);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $F517$0 = 0, $I545$0 = 0, $K597$0 = 0, $R$1 = 0, $R$3 = 0, $R328$1 = 0;
 var $R328$3 = 0, $RP$1 = 0, $RP357$1 = 0, $T$0 = 0, $add$ptr = 0, $add$ptr209 = 0, $add$ptr252 = 0, $add$ptr486 = 0, $add$ptr5 = 0, $add$ptr504 = 0, $add230 = 0, $add248 = 0, $add258 = 0, $add561 = 0, $add566 = 0, $add570 = 0, $add572 = 0, $add575 = 0, $add6 = 0, $and = 0;
 var $and128 = 0, $and2 = 0, $and202 = 0, $and207 = 0, $and224 = 0, $and257 = 0, $and295 = 0, $and32 = 0, $and410 = 0, $and501 = 0, $and520 = 0, $and556 = 0, $and560 = 0, $and565 = 0, $and574 = 0, $and587 = 0, $and606 = 0, $arrayidx100 = 0, $arrayidx118 = 0, $arrayidx138 = 0;
 var $arrayidx146 = 0, $arrayidx173 = 0, $arrayidx179 = 0, $arrayidx190 = 0, $arrayidx359 = 0, $arrayidx371 = 0, $arrayidx376 = 0, $arrayidx399 = 0, $arrayidx420 = 0, $arrayidx428 = 0, $arrayidx457 = 0, $arrayidx463 = 0, $arrayidx474 = 0, $arrayidx516 = 0, $arrayidx579 = 0, $arrayidx582 = 0, $arrayidx613 = 0, $arrayidx86 = 0, $arrayidx95 = 0, $bk = 0;
 var $bk266 = 0, $bk317 = 0, $bk329 = 0, $bk352 = 0, $bk52 = 0, $bk539 = 0, $bk541 = 0, $bk594 = 0, $bk60 = 0, $bk626 = 0, $bk648 = 0, $bk651 = 0, $bk81 = 0, $child = 0, $child161 = 0, $child358 = 0, $child445 = 0, $child581 = 0, $cmp = 0, $cmp10 = 0;
 var $cmp101 = 0, $cmp115 = 0, $cmp119 = 0, $cmp13 = 0, $cmp151 = 0, $cmp163 = 0, $cmp180 = 0, $cmp203 = 0, $cmp227 = 0, $cmp235 = 0, $cmp244 = 0, $cmp260 = 0, $cmp28 = 0, $cmp289 = 0, $cmp330 = 0, $cmp360 = 0, $cmp365 = 0, $cmp372 = 0, $cmp377 = 0, $cmp393 = 0;
 var $cmp400 = 0, $cmp433 = 0, $cmp447 = 0, $cmp464 = 0, $cmp489 = 0, $cmp508 = 0, $cmp547 = 0, $cmp551 = 0, $cmp598 = 0, $cmp607 = 0, $cmp61 = 0, $cmp615 = 0, $cmp87 = 0, $cmp91 = 0, $cmp96 = 0, $cond = 0, $cond2 = 0, $cond3 = 0, $fd = 0, $fd264 = 0;
 var $fd318 = 0, $fd334 = 0, $fd353 = 0, $fd53 = 0, $fd540 = 0, $fd595 = 0, $fd627 = 0, $fd635 = 0, $fd65 = 0, $fd650 = 0, $fd82 = 0, $head = 0, $head201 = 0, $head208 = 0, $head223 = 0, $head233 = 0, $head251 = 0, $head485 = 0, $head503 = 0, $head605 = 0;
 var $idx$neg = 0, $index = 0, $index398 = 0, $index580 = 0, $neg = 0, $neg127 = 0, $neg293 = 0, $neg408 = 0, $not$cmp139 = 0, $not$cmp421 = 0, $or = 0, $or232 = 0, $or250 = 0, $or484 = 0, $or502 = 0, $or525 = 0, $or592 = 0, $p$addr$1 = 0, $parent = 0, $parent160 = 0;
 var $parent174 = 0, $parent191 = 0, $parent327 = 0, $parent444 = 0, $parent458 = 0, $parent475 = 0, $parent593 = 0, $parent625 = 0, $parent652 = 0, $psize$addr$1 = 0, $psize$addr$2 = 0, $shl126 = 0, $shl292 = 0, $shl31 = 0, $shl407 = 0, $shl515 = 0, $shl519 = 0, $shl557 = 0, $shl562 = 0, $shl568 = 0;
 var $shl571 = 0, $shl586 = 0, $shl604 = 0, $shl614 = 0, $shr = 0, $shr259 = 0, $shr507 = 0, $shr546 = 0, $shr555 = 0, $shr559 = 0, $shr564 = 0, $shr569 = 0, $shr573 = 0, $shr600 = 0, $shr611 = 0, $sub = 0, $sub558 = 0, $sub563 = 0, $sub567 = 0, $sub603 = 0;
 var $tobool = 0, $tobool225 = 0, $tobool521 = 0, $tobool588 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add$ptr = (($p) + ($psize)|0);
 $head = ((($p)) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 do {
  if ($tobool) {
   $1 = HEAP32[$p>>2]|0;
   $and2 = $0 & 3;
   $cmp = ($and2|0)==(0);
   if ($cmp) {
    return;
   }
   $idx$neg = (0 - ($1))|0;
   $add$ptr5 = (($p) + ($idx$neg)|0);
   $add6 = (($1) + ($psize))|0;
   $2 = HEAP32[(119064)>>2]|0;
   $cmp10 = ($add$ptr5|0)==($2|0);
   if ($cmp10) {
    $head201 = ((($add$ptr)) + 4|0);
    $19 = HEAP32[$head201>>2]|0;
    $and202 = $19 & 3;
    $cmp203 = ($and202|0)==(3);
    if (!($cmp203)) {
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    }
    $add$ptr209 = (($add$ptr5) + ($add6)|0);
    $head208 = ((($add$ptr5)) + 4|0);
    $or = $add6 | 1;
    $and207 = $19 & -2;
    HEAP32[(119052)>>2] = $add6;
    HEAP32[$head201>>2] = $and207;
    HEAP32[$head208>>2] = $or;
    HEAP32[$add$ptr209>>2] = $add6;
    return;
   }
   $shr = $1 >>> 3;
   $cmp13 = ($1>>>0)<(256);
   if ($cmp13) {
    $fd = ((($add$ptr5)) + 8|0);
    $3 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr5)) + 12|0);
    $4 = HEAP32[$bk>>2]|0;
    $cmp28 = ($4|0)==($3|0);
    if ($cmp28) {
     $shl31 = 1 << $shr;
     $neg = $shl31 ^ -1;
     $5 = HEAP32[29761]|0;
     $and32 = $5 & $neg;
     HEAP32[29761] = $and32;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    } else {
     $bk52 = ((($3)) + 12|0);
     HEAP32[$bk52>>2] = $4;
     $fd53 = ((($4)) + 8|0);
     HEAP32[$fd53>>2] = $3;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    }
   }
   $parent = ((($add$ptr5)) + 24|0);
   $6 = HEAP32[$parent>>2]|0;
   $bk60 = ((($add$ptr5)) + 12|0);
   $7 = HEAP32[$bk60>>2]|0;
   $cmp61 = ($7|0)==($add$ptr5|0);
   do {
    if ($cmp61) {
     $child = ((($add$ptr5)) + 16|0);
     $arrayidx86 = ((($child)) + 4|0);
     $9 = HEAP32[$arrayidx86>>2]|0;
     $cmp87 = ($9|0)==(0|0);
     if ($cmp87) {
      $10 = HEAP32[$child>>2]|0;
      $cmp91 = ($10|0)==(0|0);
      if ($cmp91) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $10;$RP$1 = $child;
      }
     } else {
      $R$1 = $9;$RP$1 = $arrayidx86;
     }
     while(1) {
      $arrayidx95 = ((($R$1)) + 20|0);
      $11 = HEAP32[$arrayidx95>>2]|0;
      $cmp96 = ($11|0)==(0|0);
      if (!($cmp96)) {
       $R$1 = $11;$RP$1 = $arrayidx95;
       continue;
      }
      $arrayidx100 = ((($R$1)) + 16|0);
      $12 = HEAP32[$arrayidx100>>2]|0;
      $cmp101 = ($12|0)==(0|0);
      if ($cmp101) {
       break;
      } else {
       $R$1 = $12;$RP$1 = $arrayidx100;
      }
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd65 = ((($add$ptr5)) + 8|0);
     $8 = HEAP32[$fd65>>2]|0;
     $bk81 = ((($8)) + 12|0);
     HEAP32[$bk81>>2] = $7;
     $fd82 = ((($7)) + 8|0);
     HEAP32[$fd82>>2] = $8;
     $R$3 = $7;
    }
   } while(0);
   $cmp115 = ($6|0)==(0|0);
   if ($cmp115) {
    $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
   } else {
    $index = ((($add$ptr5)) + 28|0);
    $13 = HEAP32[$index>>2]|0;
    $arrayidx118 = (119348 + ($13<<2)|0);
    $14 = HEAP32[$arrayidx118>>2]|0;
    $cmp119 = ($add$ptr5|0)==($14|0);
    if ($cmp119) {
     HEAP32[$arrayidx118>>2] = $R$3;
     $cond2 = ($R$3|0)==(0|0);
     if ($cond2) {
      $shl126 = 1 << $13;
      $neg127 = $shl126 ^ -1;
      $15 = HEAP32[(119048)>>2]|0;
      $and128 = $15 & $neg127;
      HEAP32[(119048)>>2] = $and128;
      $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
      break;
     }
    } else {
     $arrayidx138 = ((($6)) + 16|0);
     $16 = HEAP32[$arrayidx138>>2]|0;
     $not$cmp139 = ($16|0)!=($add$ptr5|0);
     $$sink = $not$cmp139&1;
     $arrayidx146 = (((($6)) + 16|0) + ($$sink<<2)|0);
     HEAP32[$arrayidx146>>2] = $R$3;
     $cmp151 = ($R$3|0)==(0|0);
     if ($cmp151) {
      $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
      break;
     }
    }
    $parent160 = ((($R$3)) + 24|0);
    HEAP32[$parent160>>2] = $6;
    $child161 = ((($add$ptr5)) + 16|0);
    $17 = HEAP32[$child161>>2]|0;
    $cmp163 = ($17|0)==(0|0);
    if (!($cmp163)) {
     $arrayidx173 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx173>>2] = $17;
     $parent174 = ((($17)) + 24|0);
     HEAP32[$parent174>>2] = $R$3;
    }
    $arrayidx179 = ((($child161)) + 4|0);
    $18 = HEAP32[$arrayidx179>>2]|0;
    $cmp180 = ($18|0)==(0|0);
    if ($cmp180) {
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
    } else {
     $arrayidx190 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx190>>2] = $18;
     $parent191 = ((($18)) + 24|0);
     HEAP32[$parent191>>2] = $R$3;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
    }
   }
  } else {
   $p$addr$1 = $p;$psize$addr$1 = $psize;
  }
 } while(0);
 $head223 = ((($add$ptr)) + 4|0);
 $20 = HEAP32[$head223>>2]|0;
 $and224 = $20 & 2;
 $tobool225 = ($and224|0)==(0);
 if ($tobool225) {
  $21 = HEAP32[(119068)>>2]|0;
  $cmp227 = ($add$ptr|0)==($21|0);
  $22 = HEAP32[(119064)>>2]|0;
  if ($cmp227) {
   $23 = HEAP32[(119056)>>2]|0;
   $add230 = (($23) + ($psize$addr$1))|0;
   HEAP32[(119056)>>2] = $add230;
   HEAP32[(119068)>>2] = $p$addr$1;
   $or232 = $add230 | 1;
   $head233 = ((($p$addr$1)) + 4|0);
   HEAP32[$head233>>2] = $or232;
   $cmp235 = ($p$addr$1|0)==($22|0);
   if (!($cmp235)) {
    return;
   }
   HEAP32[(119064)>>2] = 0;
   HEAP32[(119052)>>2] = 0;
   return;
  }
  $cmp244 = ($add$ptr|0)==($22|0);
  if ($cmp244) {
   $24 = HEAP32[(119052)>>2]|0;
   $add248 = (($24) + ($psize$addr$1))|0;
   HEAP32[(119052)>>2] = $add248;
   HEAP32[(119064)>>2] = $p$addr$1;
   $or250 = $add248 | 1;
   $head251 = ((($p$addr$1)) + 4|0);
   HEAP32[$head251>>2] = $or250;
   $add$ptr252 = (($p$addr$1) + ($add248)|0);
   HEAP32[$add$ptr252>>2] = $add248;
   return;
  }
  $and257 = $20 & -8;
  $add258 = (($and257) + ($psize$addr$1))|0;
  $shr259 = $20 >>> 3;
  $cmp260 = ($20>>>0)<(256);
  do {
   if ($cmp260) {
    $fd264 = ((($add$ptr)) + 8|0);
    $25 = HEAP32[$fd264>>2]|0;
    $bk266 = ((($add$ptr)) + 12|0);
    $26 = HEAP32[$bk266>>2]|0;
    $cmp289 = ($26|0)==($25|0);
    if ($cmp289) {
     $shl292 = 1 << $shr259;
     $neg293 = $shl292 ^ -1;
     $27 = HEAP32[29761]|0;
     $and295 = $27 & $neg293;
     HEAP32[29761] = $and295;
     break;
    } else {
     $bk317 = ((($25)) + 12|0);
     HEAP32[$bk317>>2] = $26;
     $fd318 = ((($26)) + 8|0);
     HEAP32[$fd318>>2] = $25;
     break;
    }
   } else {
    $parent327 = ((($add$ptr)) + 24|0);
    $28 = HEAP32[$parent327>>2]|0;
    $bk329 = ((($add$ptr)) + 12|0);
    $29 = HEAP32[$bk329>>2]|0;
    $cmp330 = ($29|0)==($add$ptr|0);
    do {
     if ($cmp330) {
      $child358 = ((($add$ptr)) + 16|0);
      $arrayidx359 = ((($child358)) + 4|0);
      $31 = HEAP32[$arrayidx359>>2]|0;
      $cmp360 = ($31|0)==(0|0);
      if ($cmp360) {
       $32 = HEAP32[$child358>>2]|0;
       $cmp365 = ($32|0)==(0|0);
       if ($cmp365) {
        $R328$3 = 0;
        break;
       } else {
        $R328$1 = $32;$RP357$1 = $child358;
       }
      } else {
       $R328$1 = $31;$RP357$1 = $arrayidx359;
      }
      while(1) {
       $arrayidx371 = ((($R328$1)) + 20|0);
       $33 = HEAP32[$arrayidx371>>2]|0;
       $cmp372 = ($33|0)==(0|0);
       if (!($cmp372)) {
        $R328$1 = $33;$RP357$1 = $arrayidx371;
        continue;
       }
       $arrayidx376 = ((($R328$1)) + 16|0);
       $34 = HEAP32[$arrayidx376>>2]|0;
       $cmp377 = ($34|0)==(0|0);
       if ($cmp377) {
        break;
       } else {
        $R328$1 = $34;$RP357$1 = $arrayidx376;
       }
      }
      HEAP32[$RP357$1>>2] = 0;
      $R328$3 = $R328$1;
     } else {
      $fd334 = ((($add$ptr)) + 8|0);
      $30 = HEAP32[$fd334>>2]|0;
      $bk352 = ((($30)) + 12|0);
      HEAP32[$bk352>>2] = $29;
      $fd353 = ((($29)) + 8|0);
      HEAP32[$fd353>>2] = $30;
      $R328$3 = $29;
     }
    } while(0);
    $cmp393 = ($28|0)==(0|0);
    if (!($cmp393)) {
     $index398 = ((($add$ptr)) + 28|0);
     $35 = HEAP32[$index398>>2]|0;
     $arrayidx399 = (119348 + ($35<<2)|0);
     $36 = HEAP32[$arrayidx399>>2]|0;
     $cmp400 = ($add$ptr|0)==($36|0);
     if ($cmp400) {
      HEAP32[$arrayidx399>>2] = $R328$3;
      $cond3 = ($R328$3|0)==(0|0);
      if ($cond3) {
       $shl407 = 1 << $35;
       $neg408 = $shl407 ^ -1;
       $37 = HEAP32[(119048)>>2]|0;
       $and410 = $37 & $neg408;
       HEAP32[(119048)>>2] = $and410;
       break;
      }
     } else {
      $arrayidx420 = ((($28)) + 16|0);
      $38 = HEAP32[$arrayidx420>>2]|0;
      $not$cmp421 = ($38|0)!=($add$ptr|0);
      $$sink3 = $not$cmp421&1;
      $arrayidx428 = (((($28)) + 16|0) + ($$sink3<<2)|0);
      HEAP32[$arrayidx428>>2] = $R328$3;
      $cmp433 = ($R328$3|0)==(0|0);
      if ($cmp433) {
       break;
      }
     }
     $parent444 = ((($R328$3)) + 24|0);
     HEAP32[$parent444>>2] = $28;
     $child445 = ((($add$ptr)) + 16|0);
     $39 = HEAP32[$child445>>2]|0;
     $cmp447 = ($39|0)==(0|0);
     if (!($cmp447)) {
      $arrayidx457 = ((($R328$3)) + 16|0);
      HEAP32[$arrayidx457>>2] = $39;
      $parent458 = ((($39)) + 24|0);
      HEAP32[$parent458>>2] = $R328$3;
     }
     $arrayidx463 = ((($child445)) + 4|0);
     $40 = HEAP32[$arrayidx463>>2]|0;
     $cmp464 = ($40|0)==(0|0);
     if (!($cmp464)) {
      $arrayidx474 = ((($R328$3)) + 20|0);
      HEAP32[$arrayidx474>>2] = $40;
      $parent475 = ((($40)) + 24|0);
      HEAP32[$parent475>>2] = $R328$3;
     }
    }
   }
  } while(0);
  $or484 = $add258 | 1;
  $head485 = ((($p$addr$1)) + 4|0);
  HEAP32[$head485>>2] = $or484;
  $add$ptr486 = (($p$addr$1) + ($add258)|0);
  HEAP32[$add$ptr486>>2] = $add258;
  $41 = HEAP32[(119064)>>2]|0;
  $cmp489 = ($p$addr$1|0)==($41|0);
  if ($cmp489) {
   HEAP32[(119052)>>2] = $add258;
   return;
  } else {
   $psize$addr$2 = $add258;
  }
 } else {
  $and501 = $20 & -2;
  HEAP32[$head223>>2] = $and501;
  $or502 = $psize$addr$1 | 1;
  $head503 = ((($p$addr$1)) + 4|0);
  HEAP32[$head503>>2] = $or502;
  $add$ptr504 = (($p$addr$1) + ($psize$addr$1)|0);
  HEAP32[$add$ptr504>>2] = $psize$addr$1;
  $psize$addr$2 = $psize$addr$1;
 }
 $shr507 = $psize$addr$2 >>> 3;
 $cmp508 = ($psize$addr$2>>>0)<(256);
 if ($cmp508) {
  $shl515 = $shr507 << 1;
  $arrayidx516 = (119084 + ($shl515<<2)|0);
  $42 = HEAP32[29761]|0;
  $shl519 = 1 << $shr507;
  $and520 = $42 & $shl519;
  $tobool521 = ($and520|0)==(0);
  if ($tobool521) {
   $or525 = $42 | $shl519;
   HEAP32[29761] = $or525;
   $$pre = ((($arrayidx516)) + 8|0);
   $$pre$phiZ2D = $$pre;$F517$0 = $arrayidx516;
  } else {
   $43 = ((($arrayidx516)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $$pre$phiZ2D = $43;$F517$0 = $44;
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$addr$1;
  $bk539 = ((($F517$0)) + 12|0);
  HEAP32[$bk539>>2] = $p$addr$1;
  $fd540 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd540>>2] = $F517$0;
  $bk541 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk541>>2] = $arrayidx516;
  return;
 }
 $shr546 = $psize$addr$2 >>> 8;
 $cmp547 = ($shr546|0)==(0);
 if ($cmp547) {
  $I545$0 = 0;
 } else {
  $cmp551 = ($psize$addr$2>>>0)>(16777215);
  if ($cmp551) {
   $I545$0 = 31;
  } else {
   $sub = (($shr546) + 1048320)|0;
   $shr555 = $sub >>> 16;
   $and556 = $shr555 & 8;
   $shl557 = $shr546 << $and556;
   $sub558 = (($shl557) + 520192)|0;
   $shr559 = $sub558 >>> 16;
   $and560 = $shr559 & 4;
   $add561 = $and560 | $and556;
   $shl562 = $shl557 << $and560;
   $sub563 = (($shl562) + 245760)|0;
   $shr564 = $sub563 >>> 16;
   $and565 = $shr564 & 2;
   $add566 = $add561 | $and565;
   $sub567 = (14 - ($add566))|0;
   $shl568 = $shl562 << $and565;
   $shr569 = $shl568 >>> 15;
   $add570 = (($sub567) + ($shr569))|0;
   $shl571 = $add570 << 1;
   $add572 = (($add570) + 7)|0;
   $shr573 = $psize$addr$2 >>> $add572;
   $and574 = $shr573 & 1;
   $add575 = $and574 | $shl571;
   $I545$0 = $add575;
  }
 }
 $arrayidx579 = (119348 + ($I545$0<<2)|0);
 $index580 = ((($p$addr$1)) + 28|0);
 HEAP32[$index580>>2] = $I545$0;
 $child581 = ((($p$addr$1)) + 16|0);
 $arrayidx582 = ((($p$addr$1)) + 20|0);
 HEAP32[$arrayidx582>>2] = 0;
 HEAP32[$child581>>2] = 0;
 $45 = HEAP32[(119048)>>2]|0;
 $shl586 = 1 << $I545$0;
 $and587 = $45 & $shl586;
 $tobool588 = ($and587|0)==(0);
 if ($tobool588) {
  $or592 = $45 | $shl586;
  HEAP32[(119048)>>2] = $or592;
  HEAP32[$arrayidx579>>2] = $p$addr$1;
  $parent593 = ((($p$addr$1)) + 24|0);
  HEAP32[$parent593>>2] = $arrayidx579;
  $bk594 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk594>>2] = $p$addr$1;
  $fd595 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd595>>2] = $p$addr$1;
  return;
 }
 $46 = HEAP32[$arrayidx579>>2]|0;
 $cmp598 = ($I545$0|0)==(31);
 $shr600 = $I545$0 >>> 1;
 $sub603 = (25 - ($shr600))|0;
 $cond = $cmp598 ? 0 : $sub603;
 $shl604 = $psize$addr$2 << $cond;
 $K597$0 = $shl604;$T$0 = $46;
 while(1) {
  $head605 = ((($T$0)) + 4|0);
  $47 = HEAP32[$head605>>2]|0;
  $and606 = $47 & -8;
  $cmp607 = ($and606|0)==($psize$addr$2|0);
  if ($cmp607) {
   label = 69;
   break;
  }
  $shr611 = $K597$0 >>> 31;
  $arrayidx613 = (((($T$0)) + 16|0) + ($shr611<<2)|0);
  $shl614 = $K597$0 << 1;
  $48 = HEAP32[$arrayidx613>>2]|0;
  $cmp615 = ($48|0)==(0|0);
  if ($cmp615) {
   label = 68;
   break;
  } else {
   $K597$0 = $shl614;$T$0 = $48;
  }
 }
 if ((label|0) == 68) {
  HEAP32[$arrayidx613>>2] = $p$addr$1;
  $parent625 = ((($p$addr$1)) + 24|0);
  HEAP32[$parent625>>2] = $T$0;
  $bk626 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk626>>2] = $p$addr$1;
  $fd627 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd627>>2] = $p$addr$1;
  return;
 }
 else if ((label|0) == 69) {
  $fd635 = ((($T$0)) + 8|0);
  $49 = HEAP32[$fd635>>2]|0;
  $bk648 = ((($49)) + 12|0);
  HEAP32[$bk648>>2] = $p$addr$1;
  HEAP32[$fd635>>2] = $p$addr$1;
  $fd650 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd650>>2] = $49;
  $bk651 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk651>>2] = $T$0;
  $parent652 = ((($p$addr$1)) + 24|0);
  HEAP32[$parent652>>2] = 0;
  return;
 }
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (119540|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $call = 0, $call1 = 0, $call2 = 0, $fd = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $fd = ((($f)) + 60|0);
 $0 = HEAP32[$fd>>2]|0;
 $call = (_dummy($0)|0);
 HEAP32[$vararg_buffer>>2] = $call;
 $call1 = (___syscall6(6,($vararg_buffer|0))|0);
 $call2 = (___syscall_ret($call1)|0);
 STACKTOP = sp;return ($call2|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr32 = 0, $buf8 = 0, $buf_size = 0, $call = 0, $call40 = 0;
 var $call7 = 0, $call741 = 0, $call746 = 0, $cmp = 0, $cmp12 = 0, $cmp17 = 0, $cmp24 = 0, $cmp42 = 0, $cnt$0 = 0, $dec = 0, $fd = 0, $incdec$ptr = 0, $iov$043 = 0, $iov$1 = 0, $iov_base2 = 0, $iov_len = 0, $iov_len19 = 0, $iov_len23 = 0, $iov_len3 = 0, $iov_len36 = 0;
 var $iovcnt$045 = 0, $iovcnt$1 = 0, $iovs = 0, $or = 0, $rem$044 = 0, $retval$0 = 0, $sub = 0, $sub$ptr$sub = 0, $sub21 = 0, $sub28 = 0, $sub37 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $wbase = 0, $wend = 0, $wend14 = 0;
 var $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $wbase = ((($f)) + 28|0);
 $0 = HEAP32[$wbase>>2]|0;
 HEAP32[$iovs>>2] = $0;
 $iov_len = ((($iovs)) + 4|0);
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$sub = (($1) - ($0))|0;
 HEAP32[$iov_len>>2] = $sub$ptr$sub;
 $iov_base2 = ((($iovs)) + 8|0);
 HEAP32[$iov_base2>>2] = $buf;
 $iov_len3 = ((($iovs)) + 12|0);
 HEAP32[$iov_len3>>2] = $len;
 $add = (($sub$ptr$sub) + ($len))|0;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $3 = $iovs;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $call40 = (___syscall146(146,($vararg_buffer|0))|0);
 $call741 = (___syscall_ret($call40)|0);
 $cmp42 = ($add|0)==($call741|0);
 L1: do {
  if ($cmp42) {
   label = 3;
  } else {
   $call746 = $call741;$iov$043 = $iovs;$iovcnt$045 = 2;$rem$044 = $add;
   while(1) {
    $cmp12 = ($call746|0)<(0);
    if ($cmp12) {
     break;
    }
    $sub21 = (($rem$044) - ($call746))|0;
    $iov_len23 = ((($iov$043)) + 4|0);
    $8 = HEAP32[$iov_len23>>2]|0;
    $cmp24 = ($call746>>>0)>($8>>>0);
    $incdec$ptr = ((($iov$043)) + 8|0);
    $iov$1 = $cmp24 ? $incdec$ptr : $iov$043;
    $dec = $cmp24 << 31 >> 31;
    $iovcnt$1 = (($dec) + ($iovcnt$045))|0;
    $sub28 = $cmp24 ? $8 : 0;
    $cnt$0 = (($call746) - ($sub28))|0;
    $9 = HEAP32[$iov$1>>2]|0;
    $add$ptr32 = (($9) + ($cnt$0)|0);
    HEAP32[$iov$1>>2] = $add$ptr32;
    $iov_len36 = ((($iov$1)) + 4|0);
    $10 = HEAP32[$iov_len36>>2]|0;
    $sub37 = (($10) - ($cnt$0))|0;
    HEAP32[$iov_len36>>2] = $sub37;
    $11 = HEAP32[$fd>>2]|0;
    $12 = $iov$1;
    HEAP32[$vararg_buffer3>>2] = $11;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $12;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $iovcnt$1;
    $call = (___syscall146(146,($vararg_buffer3|0))|0);
    $call7 = (___syscall_ret($call)|0);
    $cmp = ($sub21|0)==($call7|0);
    if ($cmp) {
     label = 3;
     break L1;
    } else {
     $call746 = $call7;$iov$043 = $iov$1;$iovcnt$045 = $iovcnt$1;$rem$044 = $sub21;
    }
   }
   $wend14 = ((($f)) + 16|0);
   HEAP32[$wend14>>2] = 0;
   HEAP32[$wbase>>2] = 0;
   HEAP32[$wpos>>2] = 0;
   $6 = HEAP32[$f>>2]|0;
   $or = $6 | 32;
   HEAP32[$f>>2] = $or;
   $cmp17 = ($iovcnt$045|0)==(2);
   if ($cmp17) {
    $retval$0 = 0;
   } else {
    $iov_len19 = ((($iov$043)) + 4|0);
    $7 = HEAP32[$iov_len19>>2]|0;
    $sub = (($len) - ($7))|0;
    $retval$0 = $sub;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $buf8 = ((($f)) + 44|0);
  $4 = HEAP32[$buf8>>2]|0;
  $buf_size = ((($f)) + 48|0);
  $5 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($4) + ($5)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  HEAP32[$wbase>>2] = $4;
  HEAP32[$wpos>>2] = $4;
  $retval$0 = $len;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $call = 0, $call1 = 0, $cmp = 0, $fd = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $fd = ((($f)) + 60|0);
 $0 = HEAP32[$fd>>2]|0;
 $1 = $ret;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $1;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $call = (___syscall140(140,($vararg_buffer|0))|0);
 $call1 = (___syscall_ret($call)|0);
 $cmp = ($call1|0)<(0);
 if ($cmp) {
  HEAP32[$ret>>2] = -1;
  $2 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $2 = $$pre;
 }
 STACKTOP = sp;return ($2|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $call = 0, $cmp = 0, $retval$0 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($r>>>0)>(4294963200);
 if ($cmp) {
  $sub = (0 - ($r))|0;
  $call = (___errno_location()|0);
  HEAP32[$call>>2] = $sub;
  $retval$0 = -1;
 } else {
  $retval$0 = $r;
 }
 return ($retval$0|0);
}
function ___errno_location() {
 var $call = 0, $errno_val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___pthread_self_238()|0);
 $errno_val = ((($call)) + 64|0);
 return ($errno_val|0);
}
function ___pthread_self_238() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (31552|0);
}
function _dummy($fd) {
 $fd = $fd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($fd|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $and = 0, $arrayidx21 = 0, $arrayinit$element = 0, $buf3 = 0, $buf_size = 0, $call = 0, $call6 = 0, $cmp = 0, $cmp8 = 0, $fd = 0;
 var $incdec$ptr = 0, $iov = 0, $iov_len = 0, $iov_len4 = 0, $lnot$ext = 0, $or = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $sub13 = 0, $sub20 = 0, $tobool = 0, $tobool17 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $iov = sp + 16|0;
 HEAP32[$iov>>2] = $buf;
 $iov_len = ((($iov)) + 4|0);
 $buf_size = ((($f)) + 48|0);
 $0 = HEAP32[$buf_size>>2]|0;
 $tobool = ($0|0)!=(0);
 $lnot$ext = $tobool&1;
 $sub = (($len) - ($lnot$ext))|0;
 HEAP32[$iov_len>>2] = $sub;
 $arrayinit$element = ((($iov)) + 8|0);
 $buf3 = ((($f)) + 44|0);
 $1 = HEAP32[$buf3>>2]|0;
 HEAP32[$arrayinit$element>>2] = $1;
 $iov_len4 = ((($iov)) + 12|0);
 HEAP32[$iov_len4>>2] = $0;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $3 = $iov;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $call = (___syscall145(145,($vararg_buffer|0))|0);
 $call6 = (___syscall_ret($call)|0);
 $cmp = ($call6|0)<(1);
 if ($cmp) {
  $and = $call6 & 48;
  $xor = $and ^ 16;
  $4 = HEAP32[$f>>2]|0;
  $or = $4 | $xor;
  HEAP32[$f>>2] = $or;
  $retval$0 = $call6;
 } else {
  $5 = HEAP32[$iov_len>>2]|0;
  $cmp8 = ($call6>>>0)>($5>>>0);
  if ($cmp8) {
   $sub13 = (($call6) - ($5))|0;
   $6 = HEAP32[$buf3>>2]|0;
   $rpos = ((($f)) + 4|0);
   HEAP32[$rpos>>2] = $6;
   $add$ptr = (($6) + ($sub13)|0);
   $rend = ((($f)) + 8|0);
   HEAP32[$rend>>2] = $add$ptr;
   $7 = HEAP32[$buf_size>>2]|0;
   $tobool17 = ($7|0)==(0);
   if ($tobool17) {
    $retval$0 = $len;
   } else {
    $incdec$ptr = ((($6)) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr;
    $8 = HEAP8[$6>>0]|0;
    $sub20 = (($len) + -1)|0;
    $arrayidx21 = (($buf) + ($sub20)|0);
    HEAP8[$arrayidx21>>0] = $8;
    $retval$0 = $len;
   }
  } else {
   $retval$0 = $call6;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $call = 0, $call3 = 0, $fd = 0, $lbf = 0, $tobool = 0, $tobool2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $write = 0, $wsz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $wsz = sp + 16|0;
 $write = ((($f)) + 36|0);
 HEAP32[$write>>2] = 66;
 $0 = HEAP32[$f>>2]|0;
 $and = $0 & 64;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $fd = ((($f)) + 60|0);
  $1 = HEAP32[$fd>>2]|0;
  $2 = $wsz;
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  $call = (___syscall54(54,($vararg_buffer|0))|0);
  $tobool2 = ($call|0)==(0);
  if (!($tobool2)) {
   $lbf = ((($f)) + 75|0);
   HEAP8[$lbf>>0] = -1;
  }
 }
 $call3 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($call3|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cmp = 0, $conv = 0, $conv$lcssa = 0, $conv14 = 0, $conv2 = 0, $conv2$lcssa = 0, $conv20 = 0, $conv216 = 0, $conv221 = 0, $incdec$ptr = 0, $incdec$ptr9 = 0, $l$017 = 0, $n$addr$019 = 0, $n$addr$019$in = 0;
 var $or$cond = 0, $or$cond12 = 0, $r$018 = 0, $retval$0 = 0, $sub = 0, $tobool = 0, $tobool1 = 0, $tobool115 = 0, $tobool3 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($n|0)==(0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $0 = HEAP8[$_l>>0]|0;
  $conv14 = $0&255;
  $tobool115 = ($0<<24>>24)==(0);
  $1 = HEAP8[$_r>>0]|0;
  $conv216 = $1&255;
  L3: do {
   if ($tobool115) {
    $conv$lcssa = $conv14;$conv2$lcssa = $conv216;
   } else {
    $2 = $1;$3 = $0;$conv20 = $conv14;$conv221 = $conv216;$l$017 = $_l;$n$addr$019$in = $n;$r$018 = $_r;
    while(1) {
     $n$addr$019 = (($n$addr$019$in) + -1)|0;
     $tobool3 = ($2<<24>>24)!=(0);
     $tobool5 = ($n$addr$019|0)!=(0);
     $or$cond = $tobool5 & $tobool3;
     $cmp = ($3<<24>>24)==($2<<24>>24);
     $or$cond12 = $cmp & $or$cond;
     if (!($or$cond12)) {
      $conv$lcssa = $conv20;$conv2$lcssa = $conv221;
      break L3;
     }
     $incdec$ptr = ((($l$017)) + 1|0);
     $incdec$ptr9 = ((($r$018)) + 1|0);
     $4 = HEAP8[$incdec$ptr>>0]|0;
     $conv = $4&255;
     $tobool1 = ($4<<24>>24)==(0);
     $5 = HEAP8[$incdec$ptr9>>0]|0;
     $conv2 = $5&255;
     if ($tobool1) {
      $conv$lcssa = $conv;$conv2$lcssa = $conv2;
      break;
     } else {
      $2 = $5;$3 = $4;$conv20 = $conv;$conv221 = $conv2;$l$017 = $incdec$ptr;$n$addr$019$in = $n$addr$019;$r$018 = $incdec$ptr9;
     }
    }
   }
  } while(0);
  $sub = (($conv$lcssa) - ($conv2$lcssa))|0;
  $retval$0 = $sub;
 }
 return ($retval$0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $and = 0, $and15 = 0, $and16 = 0, $and39 = 0, $cmp = 0, $cmp11 = 0, $cmp1132 = 0, $cmp28 = 0, $cmp8 = 0, $cond = 0, $conv1 = 0, $dec = 0;
 var $dec34 = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $lnot = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa52 = 0, $n$addr$043 = 0, $n$addr$1$lcssa = 0, $n$addr$133 = 0, $n$addr$227 = 0, $n$addr$3 = 0, $neg = 0, $or$cond = 0, $or$cond42 = 0, $s$0$lcssa = 0, $s$0$lcssa53 = 0, $s$044 = 0, $s$128 = 0;
 var $s$2 = 0, $sub = 0, $sub22 = 0, $tobool = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool241 = 0, $tobool25 = 0, $tobool2526 = 0, $tobool36 = 0, $tobool40 = 0, $w$0$lcssa = 0, $w$034 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $0 = $src;
 $and39 = $0 & 3;
 $tobool40 = ($and39|0)!=(0);
 $tobool241 = ($n|0)!=(0);
 $or$cond42 = $tobool241 & $tobool40;
 L1: do {
  if ($or$cond42) {
   $1 = $c&255;
   $n$addr$043 = $n;$s$044 = $src;
   while(1) {
    $2 = HEAP8[$s$044>>0]|0;
    $cmp = ($2<<24>>24)==($1<<24>>24);
    if ($cmp) {
     $n$addr$0$lcssa52 = $n$addr$043;$s$0$lcssa53 = $s$044;
     label = 6;
     break L1;
    }
    $incdec$ptr = ((($s$044)) + 1|0);
    $dec = (($n$addr$043) + -1)|0;
    $3 = $incdec$ptr;
    $and = $3 & 3;
    $tobool = ($and|0)!=(0);
    $tobool2 = ($dec|0)!=(0);
    $or$cond = $tobool2 & $tobool;
    if ($or$cond) {
     $n$addr$043 = $dec;$s$044 = $incdec$ptr;
    } else {
     $n$addr$0$lcssa = $dec;$s$0$lcssa = $incdec$ptr;$tobool2$lcssa = $tobool2;
     label = 5;
     break;
    }
   }
  } else {
   $n$addr$0$lcssa = $n;$s$0$lcssa = $src;$tobool2$lcssa = $tobool241;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($tobool2$lcssa) {
   $n$addr$0$lcssa52 = $n$addr$0$lcssa;$s$0$lcssa53 = $s$0$lcssa;
   label = 6;
  } else {
   $n$addr$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $4 = HEAP8[$s$0$lcssa53>>0]|0;
   $5 = $c&255;
   $cmp8 = ($4<<24>>24)==($5<<24>>24);
   if ($cmp8) {
    $n$addr$3 = $n$addr$0$lcssa52;$s$2 = $s$0$lcssa53;
   } else {
    $mul = Math_imul($conv1, 16843009)|0;
    $cmp1132 = ($n$addr$0$lcssa52>>>0)>(3);
    L11: do {
     if ($cmp1132) {
      $n$addr$133 = $n$addr$0$lcssa52;$w$034 = $s$0$lcssa53;
      while(1) {
       $6 = HEAP32[$w$034>>2]|0;
       $xor = $6 ^ $mul;
       $sub = (($xor) + -16843009)|0;
       $neg = $xor & -2139062144;
       $and15 = $neg ^ -2139062144;
       $and16 = $and15 & $sub;
       $lnot = ($and16|0)==(0);
       if (!($lnot)) {
        break;
       }
       $incdec$ptr21 = ((($w$034)) + 4|0);
       $sub22 = (($n$addr$133) + -4)|0;
       $cmp11 = ($sub22>>>0)>(3);
       if ($cmp11) {
        $n$addr$133 = $sub22;$w$034 = $incdec$ptr21;
       } else {
        $n$addr$1$lcssa = $sub22;$w$0$lcssa = $incdec$ptr21;
        label = 11;
        break L11;
       }
      }
      $n$addr$227 = $n$addr$133;$s$128 = $w$034;
     } else {
      $n$addr$1$lcssa = $n$addr$0$lcssa52;$w$0$lcssa = $s$0$lcssa53;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $tobool2526 = ($n$addr$1$lcssa|0)==(0);
     if ($tobool2526) {
      $n$addr$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $n$addr$227 = $n$addr$1$lcssa;$s$128 = $w$0$lcssa;
     }
    }
    while(1) {
     $7 = HEAP8[$s$128>>0]|0;
     $cmp28 = ($7<<24>>24)==($5<<24>>24);
     if ($cmp28) {
      $n$addr$3 = $n$addr$227;$s$2 = $s$128;
      break L8;
     }
     $incdec$ptr33 = ((($s$128)) + 1|0);
     $dec34 = (($n$addr$227) + -1)|0;
     $tobool25 = ($dec34|0)==(0);
     if ($tobool25) {
      $n$addr$3 = 0;$s$2 = $incdec$ptr33;
      break;
     } else {
      $n$addr$227 = $dec34;$s$128 = $incdec$ptr33;
     }
    }
   }
  }
 } while(0);
 $tobool36 = ($n$addr$3|0)!=(0);
 $cond = $tobool36 ? $s$2 : 0;
 return ($cond|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp7 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $l$addr$010 = 0, $or$cond = 0, $or$cond9 = 0, $r$addr$011 = 0, $sub = 0, $tobool = 0, $tobool8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $cmp7 = ($0<<24>>24)!=($1<<24>>24);
 $tobool8 = ($0<<24>>24)==(0);
 $or$cond9 = $tobool8 | $cmp7;
 if ($or$cond9) {
  $$lcssa = $1;$$lcssa6 = $0;
 } else {
  $l$addr$010 = $l;$r$addr$011 = $r;
  while(1) {
   $incdec$ptr = ((($l$addr$010)) + 1|0);
   $incdec$ptr4 = ((($r$addr$011)) + 1|0);
   $2 = HEAP8[$incdec$ptr>>0]|0;
   $3 = HEAP8[$incdec$ptr4>>0]|0;
   $cmp = ($2<<24>>24)!=($3<<24>>24);
   $tobool = ($2<<24>>24)==(0);
   $or$cond = $tobool | $cmp;
   if ($or$cond) {
    $$lcssa = $3;$$lcssa6 = $2;
    break;
   } else {
    $l$addr$010 = $incdec$ptr;$r$addr$011 = $incdec$ptr4;
   }
  }
 }
 $conv5 = $$lcssa6&255;
 $conv6 = $$lcssa&255;
 $sub = (($conv5) - ($conv6))|0;
 return ($sub|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($call|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $arrayidx = 0, $b = 0, $buf = 0, $buf_size = 0, $call = 0, $call10 = 0, $cmp = 0, $cmp16 = 0, $cmp4 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $sub = 0, $sub$ptr$rhs$cast = 0, $sub17 = 0, $sub3 = 0;
 var $sub3$n$addr$0 = 0, $tobool = 0, $tobool11 = 0, $wbase = 0, $wend = 0, $wpos = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $b = sp + 124|0;
 $f = sp;
 dest=$f; src=32056; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $sub = (($n) + -1)|0;
 $cmp = ($sub>>>0)>(2147483646);
 if ($cmp) {
  $tobool = ($n|0)==(0);
  if ($tobool) {
   $n$addr$0 = 1;$s$addr$0 = $b;
   label = 4;
  } else {
   $call = (___errno_location()|0);
   HEAP32[$call>>2] = 75;
   $retval$0 = -1;
  }
 } else {
  $n$addr$0 = $n;$s$addr$0 = $s;
  label = 4;
 }
 if ((label|0) == 4) {
  $sub$ptr$rhs$cast = $s$addr$0;
  $sub3 = (-2 - ($sub$ptr$rhs$cast))|0;
  $cmp4 = ($n$addr$0>>>0)>($sub3>>>0);
  $sub3$n$addr$0 = $cmp4 ? $sub3 : $n$addr$0;
  $buf_size = ((($f)) + 48|0);
  HEAP32[$buf_size>>2] = $sub3$n$addr$0;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $s$addr$0;
  $buf = ((($f)) + 44|0);
  HEAP32[$buf>>2] = $s$addr$0;
  $add$ptr = (($s$addr$0) + ($sub3$n$addr$0)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $add$ptr;
  $call10 = (_vfprintf($f,$fmt,$ap)|0);
  $tobool11 = ($sub3$n$addr$0|0)==(0);
  if ($tobool11) {
   $retval$0 = $call10;
  } else {
   $0 = HEAP32[$wpos>>2]|0;
   $1 = HEAP32[$wend>>2]|0;
   $cmp16 = ($0|0)==($1|0);
   $sub17 = $cmp16 << 31 >> 31;
   $arrayidx = (($0) + ($sub17)|0);
   HEAP8[$arrayidx>>0] = 0;
   $retval$0 = $call10;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$call21 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $and11 = 0, $and36 = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call = 0, $call21 = 0, $call2130 = 0, $call6 = 0;
 var $cmp = 0, $cmp5 = 0, $cmp7 = 0, $cond = 0, $internal_buf = 0, $lock = 0, $mode = 0, $nl_arg = 0, $nl_type = 0, $or = 0, $ret$1 = 0, $ret$1$ = 0, $retval$0 = 0, $tobool = 0, $tobool22 = 0, $tobool26 = 0, $tobool37 = 0, $tobool41 = 0, $vacopy_currentptr = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, $write = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $call = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $cmp = ($call|0)<(0);
 if ($cmp) {
  $retval$0 = -1;
 } else {
  $lock = ((($f)) + 76|0);
  $0 = HEAP32[$lock>>2]|0;
  $cmp5 = ($0|0)>(-1);
  if ($cmp5) {
   $call6 = (___lockfile($f)|0);
   $cond = $call6;
  } else {
   $cond = 0;
  }
  $1 = HEAP32[$f>>2]|0;
  $and = $1 & 32;
  $mode = ((($f)) + 74|0);
  $2 = HEAP8[$mode>>0]|0;
  $cmp7 = ($2<<24>>24)<(1);
  if ($cmp7) {
   $and11 = $1 & -33;
   HEAP32[$f>>2] = $and11;
  }
  $buf_size = ((($f)) + 48|0);
  $3 = HEAP32[$buf_size>>2]|0;
  $tobool = ($3|0)==(0);
  if ($tobool) {
   $buf = ((($f)) + 44|0);
   $4 = HEAP32[$buf>>2]|0;
   HEAP32[$buf>>2] = $internal_buf;
   $wbase = ((($f)) + 28|0);
   HEAP32[$wbase>>2] = $internal_buf;
   $wpos = ((($f)) + 20|0);
   HEAP32[$wpos>>2] = $internal_buf;
   HEAP32[$buf_size>>2] = 80;
   $add$ptr = ((($internal_buf)) + 80|0);
   $wend = ((($f)) + 16|0);
   HEAP32[$wend>>2] = $add$ptr;
   $call21 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $tobool22 = ($4|0)==(0|0);
   if ($tobool22) {
    $ret$1 = $call21;
   } else {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    (FUNCTION_TABLE_iiii[$5 & 127]($f,0,0)|0);
    $6 = HEAP32[$wpos>>2]|0;
    $tobool26 = ($6|0)==(0|0);
    $$call21 = $tobool26 ? -1 : $call21;
    HEAP32[$buf>>2] = $4;
    HEAP32[$buf_size>>2] = 0;
    HEAP32[$wend>>2] = 0;
    HEAP32[$wbase>>2] = 0;
    HEAP32[$wpos>>2] = 0;
    $ret$1 = $$call21;
   }
  } else {
   $call2130 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $call2130;
  }
  $7 = HEAP32[$f>>2]|0;
  $and36 = $7 & 32;
  $tobool37 = ($and36|0)==(0);
  $ret$1$ = $tobool37 ? $ret$1 : -1;
  $or = $7 | $and;
  HEAP32[$f>>2] = $or;
  $tobool41 = ($cond|0)==(0);
  if (!($tobool41)) {
   ___unlockfile($f);
  }
  $retval$0 = $ret$1$;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$ = 0, $$194$ = 0, $$197 = 0, $$add$ptr258 = 0, $$l10n$0 = 0, $$lcssa199 = 0, $$pre = 0, $$pre247 = 0, $$pre248 = 0, $$pre248$pre = 0, $$pre249 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$0$add$ptr206 = 0, $a$1 = 0, $a$2 = 0, $add = 0, $add$ptr = 0, $add$ptr139 = 0, $add$ptr206 = 0, $add$ptr258 = 0, $add$ptr341 = 0, $add$ptr360 = 0, $add$ptr43 = 0, $add$ptr43$arrayidx31 = 0, $add$ptr474 = 0, $add$ptr88 = 0, $add270 = 0, $add323 = 0;
 var $add396 = 0, $add413 = 0, $add442 = 0, $and = 0, $and211 = 0, $and215 = 0, $and217 = 0, $and220 = 0, $and250 = 0, $and255 = 0, $and264 = 0, $and290 = 0, $and295 = 0, $and310 = 0, $and310$fl$4 = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $arrayidx114 = 0, $arrayidx119 = 0, $arrayidx124 = 0, $arrayidx132 = 0, $arrayidx16 = 0, $arrayidx174 = 0, $arrayidx193 = 0, $arrayidx31 = 0, $arrayidx35 = 0, $arrayidx371 = 0, $arrayidx470 = 0, $arrayidx482 = 0, $arrayidx68 = 0, $arrayidx73 = 0, $arrayidx81 = 0, $buf = 0, $call = 0, $call104 = 0, $call160 = 0;
 var $call345 = 0, $call346 = 0, $call357 = 0, $call385 = 0, $call412 = 0, $call430 = 0, $cmp = 0, $cmp1 = 0, $cmp105 = 0, $cmp111 = 0, $cmp116 = 0, $cmp126 = 0, $cmp13 = 0, $cmp166 = 0, $cmp177 = 0, $cmp18 = 0, $cmp182 = 0, $cmp185 = 0, $cmp212 = 0, $cmp241 = 0;
 var $cmp271 = 0, $cmp307 = 0, $cmp324 = 0, $cmp37 = 0, $cmp378 = 0, $cmp378227 = 0, $cmp386 = 0, $cmp391 = 0, $cmp398 = 0, $cmp405 = 0, $cmp405237 = 0, $cmp414 = 0, $cmp422 = 0, $cmp435 = 0, $cmp443 = 0, $cmp467 = 0, $cmp479 = 0, $cmp50 = 0, $cmp50217 = 0, $cmp65 = 0;
 var $cmp75 = 0, $cmp97 = 0, $cnt$0 = 0, $cnt$1 = 0, $cond149 = 0, $cond246 = 0, $cond355 = 0, $cond427 = 0, $conv120 = 0, $conv134 = 0, $conv164 = 0, $conv172 = 0, $conv175 = 0, $conv208 = 0, $conv230 = 0, $conv233 = 0, $conv32 = 0, $conv48 = 0, $conv48215 = 0, $conv69 = 0;
 var $conv83 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fl$0$lcssa = 0, $fl$0219 = 0, $fl$1 = 0, $fl$1$and220 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa256 = 0;
 var $i$0229 = 0, $i$1238 = 0, $i$2210 = 0, $i$3207 = 0, $i137 = 0, $i86 = 0, $inc = 0, $inc489 = 0, $incdec$ptr = 0, $incdec$ptr159 = 0, $incdec$ptr171 = 0, $incdec$ptr23 = 0, $incdec$ptr384 = 0, $incdec$ptr411 = 0, $incdec$ptr62 = 0, $isdigit = 0, $isdigit188 = 0, $isdigit190 = 0, $isdigittmp = 0, $isdigittmp$ = 0;
 var $isdigittmp187 = 0, $isdigittmp189 = 0, $l$0 = 0, $l$1228 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $lnot = 0, $lnot$ext = 0, $lnot484 = 0, $mb = 0, $narrow = 0, $or = 0, $or$cond = 0, $or$cond192 = 0, $or$cond193 = 0, $or$cond195 = 0;
 var $or100 = 0, $or100$fl$0 = 0, $or247 = 0, $p$0 = 0, $p$0$p$0$add270 = 0, $p$1 = 0, $p$2 = 0, $p$2$add323 = 0, $p$2$add323$p$2 = 0, $p$3 = 0, $p$4253 = 0, $p$5 = 0, $pl$0 = 0, $pl$1 = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$1 = 0, $prefix$2 = 0, $retval$0 = 0, $s = 0;
 var $shl = 0, $shr = 0, $st$0 = 0, $storemerge = 0, $storemerge186218 = 0, $storemerge191 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast362 = 0, $sub$ptr$lhs$cast432 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast268 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast363 = 0, $sub$ptr$rhs$cast433 = 0, $sub$ptr$sub = 0, $sub$ptr$sub269 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub364 = 0;
 var $sub$ptr$sub434 = 0, $sub$ptr$sub434$p$5 = 0, $sub101 = 0, $sub101$w$0 = 0, $sub135 = 0, $sub165 = 0, $sub173 = 0, $sub176 = 0, $sub390 = 0, $sub49 = 0, $sub49216 = 0, $sub49220 = 0, $sub84 = 0, $t$0 = 0, $t$1 = 0, $tobool = 0, $tobool141 = 0, $tobool179 = 0, $tobool209 = 0, $tobool218 = 0;
 var $tobool25 = 0, $tobool256 = 0, $tobool265 = 0, $tobool28 = 0, $tobool291 = 0, $tobool296 = 0, $tobool315 = 0, $tobool350 = 0, $tobool358 = 0, $tobool381 = 0, $tobool408 = 0, $tobool460 = 0, $tobool463 = 0, $tobool471 = 0, $tobool55 = 0, $tobool90 = 0, $trunc = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0;
 var $wc = 0, $ws$0230 = 0, $ws$1239 = 0, $xor = 0, $xor450 = 0, $xor458 = 0, $z$0$lcssa = 0, $z$0212 = 0, $z$1 = 0, $z$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $s = sp + 16|0;
 $arg = sp;
 $buf = sp + 24|0;
 $wc = sp + 8|0;
 $mb = sp + 20|0;
 HEAP32[$s>>2] = $fmt;
 $tobool25 = ($f|0)!=(0|0);
 $add$ptr206 = ((($buf)) + 40|0);
 $sub$ptr$lhs$cast318 = $add$ptr206;
 $add$ptr341 = ((($buf)) + 39|0);
 $arrayidx371 = ((($wc)) + 4|0);
 $1 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $cmp = ($cnt$0|0)>(-1);
  do {
   if ($cmp) {
    $sub = (2147483647 - ($cnt$0))|0;
    $cmp1 = ($l$0|0)>($sub|0);
    if ($cmp1) {
     $call = (___errno_location()|0);
     HEAP32[$call>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $add = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $add;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $0 = HEAP8[$1>>0]|0;
  $tobool = ($0<<24>>24)==(0);
  if ($tobool) {
   label = 87;
   break;
  } else {
   $2 = $0;$3 = $1;
  }
  L9: while(1) {
   switch ($2<<24>>24) {
   case 37:  {
    $4 = $3;$z$0212 = $3;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $7 = $3;$z$0$lcssa = $3;
    break L9;
    break;
   }
   default: {
   }
   }
   $incdec$ptr = ((($3)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr;
   $$pre = HEAP8[$incdec$ptr>>0]|0;
   $2 = $$pre;$3 = $incdec$ptr;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $arrayidx16 = ((($4)) + 1|0);
     $5 = HEAP8[$arrayidx16>>0]|0;
     $cmp18 = ($5<<24>>24)==(37);
     if (!($cmp18)) {
      $7 = $4;$z$0$lcssa = $z$0212;
      break L12;
     }
     $incdec$ptr23 = ((($z$0212)) + 1|0);
     $add$ptr = ((($4)) + 2|0);
     HEAP32[$s>>2] = $add$ptr;
     $6 = HEAP8[$add$ptr>>0]|0;
     $cmp13 = ($6<<24>>24)==(37);
     if ($cmp13) {
      $4 = $add$ptr;$z$0212 = $incdec$ptr23;
      label = 9;
     } else {
      $7 = $add$ptr;$z$0$lcssa = $incdec$ptr23;
      break;
     }
    }
   }
  } while(0);
  $sub$ptr$lhs$cast = $z$0$lcssa;
  $sub$ptr$rhs$cast = $1;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  if ($tobool25) {
   _out_442($f,$1,$sub$ptr$sub);
  }
  $tobool28 = ($sub$ptr$sub|0)==(0);
  if (!($tobool28)) {
   $l10n$0$phi = $l10n$0;$1 = $7;$cnt$0 = $cnt$1;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $arrayidx31 = ((($7)) + 1|0);
  $8 = HEAP8[$arrayidx31>>0]|0;
  $conv32 = $8 << 24 >> 24;
  $isdigittmp = (($conv32) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $arrayidx35 = ((($7)) + 2|0);
   $9 = HEAP8[$arrayidx35>>0]|0;
   $cmp37 = ($9<<24>>24)==(36);
   $add$ptr43 = ((($7)) + 3|0);
   $add$ptr43$arrayidx31 = $cmp37 ? $add$ptr43 : $arrayidx31;
   $$l10n$0 = $cmp37 ? 1 : $l10n$0;
   $isdigittmp$ = $cmp37 ? $isdigittmp : -1;
   $argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $add$ptr43$arrayidx31;
  } else {
   $argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $arrayidx31;
  }
  HEAP32[$s>>2] = $storemerge;
  $10 = HEAP8[$storemerge>>0]|0;
  $conv48215 = $10 << 24 >> 24;
  $sub49216 = (($conv48215) + -32)|0;
  $cmp50217 = ($sub49216>>>0)<(32);
  L24: do {
   if ($cmp50217) {
    $149 = $10;$fl$0219 = 0;$storemerge186218 = $storemerge;$sub49220 = $sub49216;
    while(1) {
     $shl = 1 << $sub49220;
     $and = $shl & 75913;
     $tobool55 = ($and|0)==(0);
     if ($tobool55) {
      $$lcssa199 = $149;$12 = $storemerge186218;$fl$0$lcssa = $fl$0219;
      break L24;
     }
     $or = $shl | $fl$0219;
     $incdec$ptr62 = ((($storemerge186218)) + 1|0);
     HEAP32[$s>>2] = $incdec$ptr62;
     $11 = HEAP8[$incdec$ptr62>>0]|0;
     $conv48 = $11 << 24 >> 24;
     $sub49 = (($conv48) + -32)|0;
     $cmp50 = ($sub49>>>0)<(32);
     if ($cmp50) {
      $149 = $11;$fl$0219 = $or;$storemerge186218 = $incdec$ptr62;$sub49220 = $sub49;
     } else {
      $$lcssa199 = $11;$12 = $incdec$ptr62;$fl$0$lcssa = $or;
      break;
     }
    }
   } else {
    $$lcssa199 = $10;$12 = $storemerge;$fl$0$lcssa = 0;
   }
  } while(0);
  $cmp65 = ($$lcssa199<<24>>24)==(42);
  if ($cmp65) {
   $arrayidx68 = ((($12)) + 1|0);
   $13 = HEAP8[$arrayidx68>>0]|0;
   $conv69 = $13 << 24 >> 24;
   $isdigittmp189 = (($conv69) + -48)|0;
   $isdigit190 = ($isdigittmp189>>>0)<(10);
   if ($isdigit190) {
    $arrayidx73 = ((($12)) + 2|0);
    $14 = HEAP8[$arrayidx73>>0]|0;
    $cmp75 = ($14<<24>>24)==(36);
    if ($cmp75) {
     $arrayidx81 = (($nl_type) + ($isdigittmp189<<2)|0);
     HEAP32[$arrayidx81>>2] = 10;
     $15 = HEAP8[$arrayidx68>>0]|0;
     $conv83 = $15 << 24 >> 24;
     $sub84 = (($conv83) + -48)|0;
     $i86 = (($nl_arg) + ($sub84<<3)|0);
     $16 = $i86;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = (($16) + 4)|0;
     $20 = $19;
     $21 = HEAP32[$20>>2]|0;
     $add$ptr88 = ((($12)) + 3|0);
     $l10n$2 = 1;$storemerge191 = $add$ptr88;$w$0 = $18;
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
   if ((label|0) == 23) {
    label = 0;
    $tobool90 = ($l10n$1|0)==(0);
    if (!($tobool90)) {
     $retval$0 = -1;
     break;
    }
    if ($tobool25) {
     $arglist_current = HEAP32[$ap>>2]|0;
     $22 = $arglist_current;
     $23 = ((0) + 4|0);
     $expanded4 = $23;
     $expanded = (($expanded4) - 1)|0;
     $24 = (($22) + ($expanded))|0;
     $25 = ((0) + 4|0);
     $expanded8 = $25;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $26 = $24 & $expanded6;
     $27 = $26;
     $28 = HEAP32[$27>>2]|0;
     $arglist_next = ((($27)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge191 = $arrayidx68;$w$0 = $28;
    } else {
     $l10n$2 = 0;$storemerge191 = $arrayidx68;$w$0 = 0;
    }
   }
   HEAP32[$s>>2] = $storemerge191;
   $cmp97 = ($w$0|0)<(0);
   $or100 = $fl$0$lcssa | 8192;
   $sub101 = (0 - ($w$0))|0;
   $or100$fl$0 = $cmp97 ? $or100 : $fl$0$lcssa;
   $sub101$w$0 = $cmp97 ? $sub101 : $w$0;
   $30 = $storemerge191;$fl$1 = $or100$fl$0;$l10n$3 = $l10n$2;$w$1 = $sub101$w$0;
  } else {
   $call104 = (_getint_443($s)|0);
   $cmp105 = ($call104|0)<(0);
   if ($cmp105) {
    $retval$0 = -1;
    break;
   }
   $$pre247 = HEAP32[$s>>2]|0;
   $30 = $$pre247;$fl$1 = $fl$0$lcssa;$l10n$3 = $l10n$1;$w$1 = $call104;
  }
  $29 = HEAP8[$30>>0]|0;
  $cmp111 = ($29<<24>>24)==(46);
  do {
   if ($cmp111) {
    $arrayidx114 = ((($30)) + 1|0);
    $31 = HEAP8[$arrayidx114>>0]|0;
    $cmp116 = ($31<<24>>24)==(42);
    if (!($cmp116)) {
     $incdec$ptr159 = ((($30)) + 1|0);
     HEAP32[$s>>2] = $incdec$ptr159;
     $call160 = (_getint_443($s)|0);
     $$pre248$pre = HEAP32[$s>>2]|0;
     $$pre248 = $$pre248$pre;$p$0 = $call160;
     break;
    }
    $arrayidx119 = ((($30)) + 2|0);
    $32 = HEAP8[$arrayidx119>>0]|0;
    $conv120 = $32 << 24 >> 24;
    $isdigittmp187 = (($conv120) + -48)|0;
    $isdigit188 = ($isdigittmp187>>>0)<(10);
    if ($isdigit188) {
     $arrayidx124 = ((($30)) + 3|0);
     $33 = HEAP8[$arrayidx124>>0]|0;
     $cmp126 = ($33<<24>>24)==(36);
     if ($cmp126) {
      $arrayidx132 = (($nl_type) + ($isdigittmp187<<2)|0);
      HEAP32[$arrayidx132>>2] = 10;
      $34 = HEAP8[$arrayidx119>>0]|0;
      $conv134 = $34 << 24 >> 24;
      $sub135 = (($conv134) + -48)|0;
      $i137 = (($nl_arg) + ($sub135<<3)|0);
      $35 = $i137;
      $36 = $35;
      $37 = HEAP32[$36>>2]|0;
      $38 = (($35) + 4)|0;
      $39 = $38;
      $40 = HEAP32[$39>>2]|0;
      $add$ptr139 = ((($30)) + 4|0);
      HEAP32[$s>>2] = $add$ptr139;
      $$pre248 = $add$ptr139;$p$0 = $37;
      break;
     }
    }
    $tobool141 = ($l10n$3|0)==(0);
    if (!($tobool141)) {
     $retval$0 = -1;
     break L1;
    }
    if ($tobool25) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $41 = $arglist_current2;
     $42 = ((0) + 4|0);
     $expanded11 = $42;
     $expanded10 = (($expanded11) - 1)|0;
     $43 = (($41) + ($expanded10))|0;
     $44 = ((0) + 4|0);
     $expanded15 = $44;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $45 = $43 & $expanded13;
     $46 = $45;
     $47 = HEAP32[$46>>2]|0;
     $arglist_next3 = ((($46)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $cond149 = $47;
    } else {
     $cond149 = 0;
    }
    HEAP32[$s>>2] = $arrayidx119;
    $$pre248 = $arrayidx119;$p$0 = $cond149;
   } else {
    $$pre248 = $30;$p$0 = -1;
   }
  } while(0);
  $49 = $$pre248;$st$0 = 0;
  while(1) {
   $48 = HEAP8[$49>>0]|0;
   $conv164 = $48 << 24 >> 24;
   $sub165 = (($conv164) + -65)|0;
   $cmp166 = ($sub165>>>0)>(57);
   if ($cmp166) {
    $retval$0 = -1;
    break L1;
   }
   $incdec$ptr171 = ((($49)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr171;
   $50 = HEAP8[$49>>0]|0;
   $conv172 = $50 << 24 >> 24;
   $sub173 = (($conv172) + -65)|0;
   $arrayidx174 = ((116425 + (($st$0*58)|0)|0) + ($sub173)|0);
   $51 = HEAP8[$arrayidx174>>0]|0;
   $conv175 = $51&255;
   $sub176 = (($conv175) + -1)|0;
   $cmp177 = ($sub176>>>0)<(8);
   if ($cmp177) {
    $49 = $incdec$ptr171;$st$0 = $conv175;
   } else {
    break;
   }
  }
  $tobool179 = ($51<<24>>24)==(0);
  if ($tobool179) {
   $retval$0 = -1;
   break;
  }
  $cmp182 = ($51<<24>>24)==(19);
  $cmp185 = ($argpos$0|0)>(-1);
  do {
   if ($cmp182) {
    if ($cmp185) {
     $retval$0 = -1;
     break L1;
    } else {
     label = 49;
    }
   } else {
    if ($cmp185) {
     $arrayidx193 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$arrayidx193>>2] = $conv175;
     $52 = (($nl_arg) + ($argpos$0<<3)|0);
     $53 = $52;
     $54 = $53;
     $55 = HEAP32[$54>>2]|0;
     $56 = (($53) + 4)|0;
     $57 = $56;
     $58 = HEAP32[$57>>2]|0;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $55;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     label = 49;
     break;
    }
    if (!($tobool25)) {
     $retval$0 = 0;
     break L1;
    }
    _pop_arg_445($arg,$conv175,$ap);
   }
  } while(0);
  if ((label|0) == 49) {
   label = 0;
   if (!($tobool25)) {
    $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $63 = HEAP8[$49>>0]|0;
  $conv208 = $63 << 24 >> 24;
  $tobool209 = ($st$0|0)!=(0);
  $and211 = $conv208 & 15;
  $cmp212 = ($and211|0)==(3);
  $or$cond192 = $tobool209 & $cmp212;
  $and215 = $conv208 & -33;
  $t$0 = $or$cond192 ? $and215 : $conv208;
  $and217 = $fl$1 & 8192;
  $tobool218 = ($and217|0)==(0);
  $and220 = $fl$1 & -65537;
  $fl$1$and220 = $tobool218 ? $fl$1 : $and220;
  L71: do {
   switch ($t$0|0) {
   case 110:  {
    $trunc = $st$0&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $70 = HEAP32[$arg>>2]|0;
     HEAP32[$70>>2] = $cnt$1;
     $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $71 = HEAP32[$arg>>2]|0;
     HEAP32[$71>>2] = $cnt$1;
     $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $72 = ($cnt$1|0)<(0);
     $73 = $72 << 31 >> 31;
     $74 = HEAP32[$arg>>2]|0;
     $75 = $74;
     $76 = $75;
     HEAP32[$76>>2] = $cnt$1;
     $77 = (($75) + 4)|0;
     $78 = $77;
     HEAP32[$78>>2] = $73;
     $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $conv230 = $cnt$1&65535;
     $79 = HEAP32[$arg>>2]|0;
     HEAP16[$79>>1] = $conv230;
     $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $conv233 = $cnt$1&255;
     $80 = HEAP32[$arg>>2]|0;
     HEAP8[$80>>0] = $conv233;
     $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $81 = HEAP32[$arg>>2]|0;
     HEAP32[$81>>2] = $cnt$1;
     $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $82 = ($cnt$1|0)<(0);
     $83 = $82 << 31 >> 31;
     $84 = HEAP32[$arg>>2]|0;
     $85 = $84;
     $86 = $85;
     HEAP32[$86>>2] = $cnt$1;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $83;
     $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $cmp241 = ($p$0>>>0)>(8);
    $cond246 = $cmp241 ? $p$0 : 8;
    $or247 = $fl$1$and220 | 8;
    $fl$3 = $or247;$p$1 = $cond246;$t$1 = 120;
    label = 61;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$and220;$p$1 = $p$0;$t$1 = $t$0;
    label = 61;
    break;
   }
   case 111:  {
    $99 = $arg;
    $100 = $99;
    $101 = HEAP32[$100>>2]|0;
    $102 = (($99) + 4)|0;
    $103 = $102;
    $104 = HEAP32[$103>>2]|0;
    $105 = (_fmt_o($101,$104,$add$ptr206)|0);
    $and264 = $fl$1$and220 & 8;
    $tobool265 = ($and264|0)==(0);
    $sub$ptr$rhs$cast268 = $105;
    $sub$ptr$sub269 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast268))|0;
    $cmp271 = ($p$0|0)>($sub$ptr$sub269|0);
    $add270 = (($sub$ptr$sub269) + 1)|0;
    $106 = $tobool265 | $cmp271;
    $p$0$p$0$add270 = $106 ? $p$0 : $add270;
    $125 = $101;$127 = $104;$a$0 = $105;$fl$4 = $fl$1$and220;$p$2 = $p$0$p$0$add270;$pl$1 = 0;$prefix$1 = 116889;
    label = 67;
    break;
   }
   case 105: case 100:  {
    $107 = $arg;
    $108 = $107;
    $109 = HEAP32[$108>>2]|0;
    $110 = (($107) + 4)|0;
    $111 = $110;
    $112 = HEAP32[$111>>2]|0;
    $113 = ($112|0)<(0);
    if ($113) {
     $114 = (_i64Subtract(0,0,($109|0),($112|0))|0);
     $115 = tempRet0;
     $116 = $arg;
     $117 = $116;
     HEAP32[$117>>2] = $114;
     $118 = (($116) + 4)|0;
     $119 = $118;
     HEAP32[$119>>2] = $115;
     $121 = $114;$122 = $115;$pl$0 = 1;$prefix$0 = 116889;
     label = 66;
     break L71;
    } else {
     $and290 = $fl$1$and220 & 2048;
     $tobool291 = ($and290|0)==(0);
     $and295 = $fl$1$and220 & 1;
     $tobool296 = ($and295|0)==(0);
     $$ = $tobool296 ? 116889 : (116891);
     $$$ = $tobool291 ? $$ : (116890);
     $120 = $fl$1$and220 & 2049;
     $narrow = ($120|0)!=(0);
     $$194$ = $narrow&1;
     $121 = $109;$122 = $112;$pl$0 = $$194$;$prefix$0 = $$$;
     label = 66;
     break L71;
    }
    break;
   }
   case 117:  {
    $64 = $arg;
    $65 = $64;
    $66 = HEAP32[$65>>2]|0;
    $67 = (($64) + 4)|0;
    $68 = $67;
    $69 = HEAP32[$68>>2]|0;
    $121 = $66;$122 = $69;$pl$0 = 0;$prefix$0 = 116889;
    label = 66;
    break;
   }
   case 99:  {
    $129 = $arg;
    $130 = $129;
    $131 = HEAP32[$130>>2]|0;
    $132 = (($129) + 4)|0;
    $133 = $132;
    $134 = HEAP32[$133>>2]|0;
    $135 = $131&255;
    HEAP8[$add$ptr341>>0] = $135;
    $a$2 = $add$ptr341;$fl$6 = $and220;$p$5 = 1;$pl$2 = 0;$prefix$2 = 116889;$z$2 = $add$ptr206;
    break;
   }
   case 109:  {
    $call345 = (___errno_location()|0);
    $136 = HEAP32[$call345>>2]|0;
    $call346 = (_strerror($136)|0);
    $a$1 = $call346;
    label = 71;
    break;
   }
   case 115:  {
    $137 = HEAP32[$arg>>2]|0;
    $tobool350 = ($137|0)!=(0|0);
    $cond355 = $tobool350 ? $137 : 116899;
    $a$1 = $cond355;
    label = 71;
    break;
   }
   case 67:  {
    $138 = $arg;
    $139 = $138;
    $140 = HEAP32[$139>>2]|0;
    $141 = (($138) + 4)|0;
    $142 = $141;
    $143 = HEAP32[$142>>2]|0;
    HEAP32[$wc>>2] = $140;
    HEAP32[$arrayidx371>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $150 = $wc;$p$4253 = -1;
    label = 75;
    break;
   }
   case 83:  {
    $$pre249 = HEAP32[$arg>>2]|0;
    $cmp378227 = ($p$0|0)==(0);
    if ($cmp378227) {
     _pad_448($f,32,$w$1,0,$fl$1$and220);
     $i$0$lcssa256 = 0;
     label = 84;
    } else {
     $150 = $$pre249;$p$4253 = $p$0;
     label = 75;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $146 = +HEAPF64[$arg>>3];
    $call430 = (_fmt_fp($f,$146,$w$1,$p$0,$fl$1$and220,$t$0)|0);
    $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = $call430;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $1;$fl$6 = $fl$1$and220;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 116889;$z$2 = $add$ptr206;
   }
   }
  } while(0);
  L95: do {
   if ((label|0) == 61) {
    label = 0;
    $89 = $arg;
    $90 = $89;
    $91 = HEAP32[$90>>2]|0;
    $92 = (($89) + 4)|0;
    $93 = $92;
    $94 = HEAP32[$93>>2]|0;
    $and250 = $t$1 & 32;
    $95 = (_fmt_x($91,$94,$add$ptr206,$and250)|0);
    $96 = ($91|0)==(0);
    $97 = ($94|0)==(0);
    $98 = $96 & $97;
    $and255 = $fl$3 & 8;
    $tobool256 = ($and255|0)==(0);
    $or$cond193 = $tobool256 | $98;
    $shr = $t$1 >> 4;
    $add$ptr258 = (116889 + ($shr)|0);
    $$add$ptr258 = $or$cond193 ? 116889 : $add$ptr258;
    $$197 = $or$cond193 ? 0 : 2;
    $125 = $91;$127 = $94;$a$0 = $95;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = $$197;$prefix$1 = $$add$ptr258;
    label = 67;
   }
   else if ((label|0) == 66) {
    label = 0;
    $123 = (_fmt_u($121,$122,$add$ptr206)|0);
    $125 = $121;$127 = $122;$a$0 = $123;$fl$4 = $fl$1$and220;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 67;
   }
   else if ((label|0) == 71) {
    label = 0;
    $call357 = (_memchr($a$1,0,$p$0)|0);
    $tobool358 = ($call357|0)==(0|0);
    $sub$ptr$lhs$cast362 = $call357;
    $sub$ptr$rhs$cast363 = $a$1;
    $sub$ptr$sub364 = (($sub$ptr$lhs$cast362) - ($sub$ptr$rhs$cast363))|0;
    $add$ptr360 = (($a$1) + ($p$0)|0);
    $p$3 = $tobool358 ? $p$0 : $sub$ptr$sub364;
    $z$1 = $tobool358 ? $add$ptr360 : $call357;
    $a$2 = $a$1;$fl$6 = $and220;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 116889;$z$2 = $z$1;
   }
   else if ((label|0) == 75) {
    label = 0;
    $i$0229 = 0;$l$1228 = 0;$ws$0230 = $150;
    while(1) {
     $144 = HEAP32[$ws$0230>>2]|0;
     $tobool381 = ($144|0)==(0);
     if ($tobool381) {
      $i$0$lcssa = $i$0229;$l$2 = $l$1228;
      break;
     }
     $call385 = (_wctomb($mb,$144)|0);
     $cmp386 = ($call385|0)<(0);
     $sub390 = (($p$4253) - ($i$0229))|0;
     $cmp391 = ($call385>>>0)>($sub390>>>0);
     $or$cond195 = $cmp386 | $cmp391;
     if ($or$cond195) {
      $i$0$lcssa = $i$0229;$l$2 = $call385;
      break;
     }
     $incdec$ptr384 = ((($ws$0230)) + 4|0);
     $add396 = (($call385) + ($i$0229))|0;
     $cmp378 = ($p$4253>>>0)>($add396>>>0);
     if ($cmp378) {
      $i$0229 = $add396;$l$1228 = $call385;$ws$0230 = $incdec$ptr384;
     } else {
      $i$0$lcssa = $add396;$l$2 = $call385;
      break;
     }
    }
    $cmp398 = ($l$2|0)<(0);
    if ($cmp398) {
     $retval$0 = -1;
     break L1;
    }
    _pad_448($f,32,$w$1,$i$0$lcssa,$fl$1$and220);
    $cmp405237 = ($i$0$lcssa|0)==(0);
    if ($cmp405237) {
     $i$0$lcssa256 = 0;
     label = 84;
    } else {
     $i$1238 = 0;$ws$1239 = $150;
     while(1) {
      $145 = HEAP32[$ws$1239>>2]|0;
      $tobool408 = ($145|0)==(0);
      if ($tobool408) {
       $i$0$lcssa256 = $i$0$lcssa;
       label = 84;
       break L95;
      }
      $call412 = (_wctomb($mb,$145)|0);
      $add413 = (($call412) + ($i$1238))|0;
      $cmp414 = ($add413|0)>($i$0$lcssa|0);
      if ($cmp414) {
       $i$0$lcssa256 = $i$0$lcssa;
       label = 84;
       break L95;
      }
      $incdec$ptr411 = ((($ws$1239)) + 4|0);
      _out_442($f,$mb,$call412);
      $cmp405 = ($add413>>>0)<($i$0$lcssa>>>0);
      if ($cmp405) {
       $i$1238 = $add413;$ws$1239 = $incdec$ptr411;
      } else {
       $i$0$lcssa256 = $i$0$lcssa;
       label = 84;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 67) {
   label = 0;
   $cmp307 = ($p$2|0)>(-1);
   $and310 = $fl$4 & -65537;
   $and310$fl$4 = $cmp307 ? $and310 : $fl$4;
   $124 = ($125|0)!=(0);
   $126 = ($127|0)!=(0);
   $128 = $124 | $126;
   $tobool315 = ($p$2|0)!=(0);
   $or$cond = $tobool315 | $128;
   $sub$ptr$rhs$cast319 = $a$0;
   $sub$ptr$sub320 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast319))|0;
   $lnot = $128 ^ 1;
   $lnot$ext = $lnot&1;
   $add323 = (($lnot$ext) + ($sub$ptr$sub320))|0;
   $cmp324 = ($p$2|0)>($add323|0);
   $p$2$add323 = $cmp324 ? $p$2 : $add323;
   $p$2$add323$p$2 = $or$cond ? $p$2$add323 : $p$2;
   $a$0$add$ptr206 = $or$cond ? $a$0 : $add$ptr206;
   $a$2 = $a$0$add$ptr206;$fl$6 = $and310$fl$4;$p$5 = $p$2$add323$p$2;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $add$ptr206;
  }
  else if ((label|0) == 84) {
   label = 0;
   $xor = $fl$1$and220 ^ 8192;
   _pad_448($f,32,$w$1,$i$0$lcssa256,$xor);
   $cmp422 = ($w$1|0)>($i$0$lcssa256|0);
   $cond427 = $cmp422 ? $w$1 : $i$0$lcssa256;
   $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = $cond427;$l10n$0 = $l10n$3;
   continue;
  }
  $sub$ptr$lhs$cast432 = $z$2;
  $sub$ptr$rhs$cast433 = $a$2;
  $sub$ptr$sub434 = (($sub$ptr$lhs$cast432) - ($sub$ptr$rhs$cast433))|0;
  $cmp435 = ($p$5|0)<($sub$ptr$sub434|0);
  $sub$ptr$sub434$p$5 = $cmp435 ? $sub$ptr$sub434 : $p$5;
  $add442 = (($sub$ptr$sub434$p$5) + ($pl$2))|0;
  $cmp443 = ($w$1|0)<($add442|0);
  $w$2 = $cmp443 ? $add442 : $w$1;
  _pad_448($f,32,$w$2,$add442,$fl$6);
  _out_442($f,$prefix$2,$pl$2);
  $xor450 = $fl$6 ^ 65536;
  _pad_448($f,48,$w$2,$add442,$xor450);
  _pad_448($f,48,$sub$ptr$sub434$p$5,$sub$ptr$sub434,0);
  _out_442($f,$a$2,$sub$ptr$sub434);
  $xor458 = $fl$6 ^ 8192;
  _pad_448($f,32,$w$2,$add442,$xor458);
  $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L114: do {
  if ((label|0) == 87) {
   $tobool460 = ($f|0)==(0|0);
   if ($tobool460) {
    $tobool463 = ($l10n$0|0)==(0);
    if ($tobool463) {
     $retval$0 = 0;
    } else {
     $i$2210 = 1;
     while(1) {
      $arrayidx470 = (($nl_type) + ($i$2210<<2)|0);
      $147 = HEAP32[$arrayidx470>>2]|0;
      $tobool471 = ($147|0)==(0);
      if ($tobool471) {
       $i$3207 = $i$2210;
       break;
      }
      $add$ptr474 = (($nl_arg) + ($i$2210<<3)|0);
      _pop_arg_445($add$ptr474,$147,$ap);
      $inc = (($i$2210) + 1)|0;
      $cmp467 = ($inc|0)<(10);
      if ($cmp467) {
       $i$2210 = $inc;
      } else {
       $retval$0 = 1;
       break L114;
      }
     }
     while(1) {
      $arrayidx482 = (($nl_type) + ($i$3207<<2)|0);
      $148 = HEAP32[$arrayidx482>>2]|0;
      $lnot484 = ($148|0)==(0);
      $inc489 = (($i$3207) + 1)|0;
      if (!($lnot484)) {
       $retval$0 = -1;
       break L114;
      }
      $cmp479 = ($inc489|0)<(10);
      if ($cmp479) {
       $i$3207 = $inc489;
      } else {
       $retval$0 = 1;
       break;
      }
     }
    }
   } else {
    $retval$0 = $cnt$1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out_442($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $and = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $and = $0 & 32;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  (___fwritex($s,$l,$f)|0);
 }
 return;
}
function _getint_443($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0, $conv = 0, $conv4 = 0, $i$0$lcssa = 0, $i$07 = 0, $incdec$ptr = 0, $isdigit = 0, $isdigit6 = 0, $isdigittmp = 0, $isdigittmp5 = 0, $isdigittmp8 = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $conv4 = $1 << 24 >> 24;
 $isdigittmp5 = (($conv4) + -48)|0;
 $isdigit6 = ($isdigittmp5>>>0)<(10);
 if ($isdigit6) {
  $2 = $0;$i$07 = 0;$isdigittmp8 = $isdigittmp5;
  while(1) {
   $mul = ($i$07*10)|0;
   $add = (($isdigittmp8) + ($mul))|0;
   $incdec$ptr = ((($2)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr;
   $3 = HEAP8[$incdec$ptr>>0]|0;
   $conv = $3 << 24 >> 24;
   $isdigittmp = (($conv) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $2 = $incdec$ptr;$i$07 = $add;$isdigittmp8 = $isdigittmp;
   } else {
    $i$0$lcssa = $add;
    break;
   }
  }
 } else {
  $i$0$lcssa = 0;
 }
 return ($i$0$lcssa|0);
}
function _pop_arg_445($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0;
 var $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $cmp = 0, $conv16 = 0, $conv22$mask = 0, $conv28 = 0, $conv34$mask = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($type>>>0)>(20);
 L1: do {
  if (!($cmp)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $0 = $arglist_current;
     $1 = ((0) + 4|0);
     $expanded28 = $1;
     $expanded = (($expanded28) - 1)|0;
     $2 = (($0) + ($expanded))|0;
     $3 = ((0) + 4|0);
     $expanded32 = $3;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $4 = $2 & $expanded30;
     $5 = $4;
     $6 = HEAP32[$5>>2]|0;
     $arglist_next = ((($5)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $6;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $7 = $arglist_current2;
     $8 = ((0) + 4|0);
     $expanded35 = $8;
     $expanded34 = (($expanded35) - 1)|0;
     $9 = (($7) + ($expanded34))|0;
     $10 = ((0) + 4|0);
     $expanded39 = $10;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $11 = $9 & $expanded37;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $arglist_next3 = ((($12)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $14 = ($13|0)<(0);
     $15 = $14 << 31 >> 31;
     $16 = $arg;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = (($16) + 4)|0;
     $19 = $18;
     HEAP32[$19>>2] = $15;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $20 = $arglist_current5;
     $21 = ((0) + 4|0);
     $expanded42 = $21;
     $expanded41 = (($expanded42) - 1)|0;
     $22 = (($20) + ($expanded41))|0;
     $23 = ((0) + 4|0);
     $expanded46 = $23;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $24 = $22 & $expanded44;
     $25 = $24;
     $26 = HEAP32[$25>>2]|0;
     $arglist_next6 = ((($25)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $27 = $arg;
     $28 = $27;
     HEAP32[$28>>2] = $26;
     $29 = (($27) + 4)|0;
     $30 = $29;
     HEAP32[$30>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $31 = $arglist_current8;
     $32 = ((0) + 8|0);
     $expanded49 = $32;
     $expanded48 = (($expanded49) - 1)|0;
     $33 = (($31) + ($expanded48))|0;
     $34 = ((0) + 8|0);
     $expanded53 = $34;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $35 = $33 & $expanded51;
     $36 = $35;
     $37 = $36;
     $38 = $37;
     $39 = HEAP32[$38>>2]|0;
     $40 = (($37) + 4)|0;
     $41 = $40;
     $42 = HEAP32[$41>>2]|0;
     $arglist_next9 = ((($36)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $43 = $arg;
     $44 = $43;
     HEAP32[$44>>2] = $39;
     $45 = (($43) + 4)|0;
     $46 = $45;
     HEAP32[$46>>2] = $42;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $47 = $arglist_current11;
     $48 = ((0) + 4|0);
     $expanded56 = $48;
     $expanded55 = (($expanded56) - 1)|0;
     $49 = (($47) + ($expanded55))|0;
     $50 = ((0) + 4|0);
     $expanded60 = $50;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $51 = $49 & $expanded58;
     $52 = $51;
     $53 = HEAP32[$52>>2]|0;
     $arglist_next12 = ((($52)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $conv16 = $53&65535;
     $54 = $conv16 << 16 >> 16;
     $55 = ($54|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = $arg;
     $58 = $57;
     HEAP32[$58>>2] = $54;
     $59 = (($57) + 4)|0;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $61 = $arglist_current14;
     $62 = ((0) + 4|0);
     $expanded63 = $62;
     $expanded62 = (($expanded63) - 1)|0;
     $63 = (($61) + ($expanded62))|0;
     $64 = ((0) + 4|0);
     $expanded67 = $64;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $65 = $63 & $expanded65;
     $66 = $65;
     $67 = HEAP32[$66>>2]|0;
     $arglist_next15 = ((($66)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $conv22$mask = $67 & 65535;
     $68 = $arg;
     $69 = $68;
     HEAP32[$69>>2] = $conv22$mask;
     $70 = (($68) + 4)|0;
     $71 = $70;
     HEAP32[$71>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $72 = $arglist_current17;
     $73 = ((0) + 4|0);
     $expanded70 = $73;
     $expanded69 = (($expanded70) - 1)|0;
     $74 = (($72) + ($expanded69))|0;
     $75 = ((0) + 4|0);
     $expanded74 = $75;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $76 = $74 & $expanded72;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $arglist_next18 = ((($77)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $conv28 = $78&255;
     $79 = $conv28 << 24 >> 24;
     $80 = ($79|0)<(0);
     $81 = $80 << 31 >> 31;
     $82 = $arg;
     $83 = $82;
     HEAP32[$83>>2] = $79;
     $84 = (($82) + 4)|0;
     $85 = $84;
     HEAP32[$85>>2] = $81;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $86 = $arglist_current20;
     $87 = ((0) + 4|0);
     $expanded77 = $87;
     $expanded76 = (($expanded77) - 1)|0;
     $88 = (($86) + ($expanded76))|0;
     $89 = ((0) + 4|0);
     $expanded81 = $89;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $90 = $88 & $expanded79;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next21 = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $conv34$mask = $92 & 255;
     $93 = $arg;
     $94 = $93;
     HEAP32[$94>>2] = $conv34$mask;
     $95 = (($93) + 4)|0;
     $96 = $95;
     HEAP32[$96>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $97 = $arglist_current23;
     $98 = ((0) + 8|0);
     $expanded84 = $98;
     $expanded83 = (($expanded84) - 1)|0;
     $99 = (($97) + ($expanded83))|0;
     $100 = ((0) + 8|0);
     $expanded88 = $100;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $101 = $99 & $expanded86;
     $102 = $101;
     $103 = +HEAPF64[$102>>3];
     $arglist_next24 = ((($102)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $103;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $104 = $arglist_current26;
     $105 = ((0) + 8|0);
     $expanded91 = $105;
     $expanded90 = (($expanded91) - 1)|0;
     $106 = (($104) + ($expanded90))|0;
     $107 = ((0) + 8|0);
     $expanded95 = $107;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $108 = $106 & $expanded93;
     $109 = $108;
     $110 = +HEAPF64[$109>>3];
     $arglist_next27 = ((($109)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $110;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$s,$lower) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 $lower = $lower|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $conv1 = 0, $conv4 = 0, $idxprom = 0, $incdec$ptr = 0, $or = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $5 = $0;$7 = $1;$s$addr$06 = $s;
  while(1) {
   $idxprom = $5 & 15;
   $arrayidx = (116941 + ($idxprom)|0);
   $6 = HEAP8[$arrayidx>>0]|0;
   $conv4 = $6&255;
   $or = $conv4 | $lower;
   $conv1 = $or&255;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv1;
   $8 = (_bitshift64Lshr(($5|0),($7|0),4)|0);
   $9 = tempRet0;
   $10 = ($8|0)==(0);
   $11 = ($9|0)==(0);
   $12 = $10 & $11;
   if ($12) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $5 = $8;$7 = $9;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_o($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conv = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $6 = $0;$8 = $1;$s$addr$06 = $s;
  while(1) {
   $5 = $6&255;
   $7 = $5 & 7;
   $conv = $7 | 48;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $9 = (_bitshift64Lshr(($6|0),($8|0),3)|0);
   $10 = tempRet0;
   $11 = ($9|0)==(0);
   $12 = ($10|0)==(0);
   $13 = $11 & $12;
   if ($13) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $6 = $9;$8 = $10;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add5 = 0, $conv = 0;
 var $conv6 = 0, $div9 = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $rem4 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $s$addr$1$lcssa = 0, $s$addr$19 = 0, $tobool8 = 0, $x$addr$0$lcssa$off0 = 0, $y$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $7 = $0;$8 = $1;$s$addr$013 = $s;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9&255;
   $conv = $11 | 48;
   $incdec$ptr = ((($s$addr$013)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $12 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $13 = tempRet0;
   $14 = ($8>>>0)>(9);
   $15 = ($7>>>0)>(4294967295);
   $16 = ($8|0)==(9);
   $17 = $16 & $15;
   $18 = $14 | $17;
   if ($18) {
    $7 = $12;$8 = $13;$s$addr$013 = $incdec$ptr;
   } else {
    break;
   }
  }
  $s$addr$0$lcssa = $incdec$ptr;$x$addr$0$lcssa$off0 = $12;
 } else {
  $s$addr$0$lcssa = $s;$x$addr$0$lcssa$off0 = $0;
 }
 $tobool8 = ($x$addr$0$lcssa$off0|0)==(0);
 if ($tobool8) {
  $s$addr$1$lcssa = $s$addr$0$lcssa;
 } else {
  $s$addr$19 = $s$addr$0$lcssa;$y$010 = $x$addr$0$lcssa$off0;
  while(1) {
   $rem4 = (($y$010>>>0) % 10)&-1;
   $add5 = $rem4 | 48;
   $conv6 = $add5&255;
   $incdec$ptr7 = ((($s$addr$19)) + -1|0);
   HEAP8[$incdec$ptr7>>0] = $conv6;
   $div9 = (($y$010>>>0) / 10)&-1;
   $19 = ($y$010>>>0)<(10);
   if ($19) {
    $s$addr$1$lcssa = $incdec$ptr7;
    break;
   } else {
    $s$addr$19 = $incdec$ptr7;$y$010 = $div9;
   }
  }
 }
 return ($s$addr$1$lcssa|0);
}
function _strerror($e) {
 $e = $e|0;
 var $0 = 0, $call = 0, $call1 = 0, $locale = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___pthread_self_241()|0);
 $locale = ((($call)) + 188|0);
 $0 = HEAP32[$locale>>2]|0;
 $call1 = (___strerror_l($e,$0)|0);
 return ($call1|0);
}
function _pad_448($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $cmp = 0, $cmp3 = 0, $cmp38 = 0, $cond = 0, $l$addr$0$lcssa = 0, $l$addr$09 = 0, $or$cond = 0, $pad = 0, $sub = 0, $sub6 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $pad = sp;
 $and = $fl & 73728;
 $tobool = ($and|0)==(0);
 $cmp = ($w|0)>($l|0);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  $sub = (($w) - ($l))|0;
  $0 = ($sub>>>0)<(256);
  $cond = $0 ? $sub : 256;
  _memset(($pad|0),($c|0),($cond|0))|0;
  $cmp38 = ($sub>>>0)>(255);
  if ($cmp38) {
   $1 = (($w) - ($l))|0;
   $l$addr$09 = $sub;
   while(1) {
    _out_442($f,$pad,256);
    $sub6 = (($l$addr$09) + -256)|0;
    $cmp3 = ($sub6>>>0)>(255);
    if ($cmp3) {
     $l$addr$09 = $sub6;
    } else {
     break;
    }
   }
   $2 = $1 & 255;
   $l$addr$0$lcssa = $2;
  } else {
   $l$addr$0$lcssa = $sub;
  }
  _out_442($f,$pad,$l$addr$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call = (_wcrtomb($s,$wc,0)|0);
  $retval$0 = $call;
 }
 return ($retval$0|0);
}
function _fmt_fp($f,$y,$w,$p,$fl,$t) {
 $f = $f|0;
 $y = +$y;
 $w = $w|0;
 $p = $p|0;
 $fl = $fl|0;
 $t = $t|0;
 var $$ = 0, $$$ = 0, $$$405 = 0.0, $$394$ = 0, $$397 = 0.0, $$405 = 0.0, $$p = 0, $$p$inc468 = 0, $$pr = 0, $$pr407 = 0, $$pre = 0, $$pre487 = 0, $$sub514 = 0, $$sub562 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $a$1$lcssa = 0, $a$1476 = 0, $a$2$ph = 0, $a$3$lcssa = 0, $a$3466 = 0, $a$5$lcssa = 0, $a$5448 = 0, $a$6 = 0, $a$8 = 0;
 var $a$9$ph = 0, $add = 0, $add$ptr213 = 0, $add$ptr311 = 0, $add$ptr311$z$4 = 0, $add$ptr354 = 0, $add$ptr358 = 0, $add$ptr373 = 0, $add$ptr442 = 0, $add$ptr442$z$3 = 0, $add$ptr65 = 0, $add$ptr671 = 0, $add$ptr742 = 0, $add$ptr756 = 0, $add113 = 0, $add150 = 0, $add150$pn = 0, $add165 = 0, $add273 = 0, $add275 = 0;
 var $add284 = 0, $add313 = 0, $add355 = 0, $add410 = 0.0, $add414 = 0, $add477$neg = 0, $add561 = 0, $add608 = 0, $add612 = 0, $add620 = 0, $add653 = 0, $add653$sink406 = 0, $add67 = 0, $add737 = 0, $add810 = 0, $add87 = 0.0, $add90 = 0.0, $and = 0, $and12 = 0, $and134 = 0;
 var $and282 = 0, $and36 = 0, $and379 = 0, $and45 = 0, $and483 = 0, $and610$pre$phiZ2D = 0, $and62 = 0, $arraydecay208$add$ptr213 = 0, $arrayidx = 0, $arrayidx117 = 0, $arrayidx251 = 0, $arrayidx453 = 0, $arrayidx489 = 0, $big = 0, $buf = 0, $call55 = 0.0, $carry$0471 = 0, $carry262$0462 = 0, $cmp103 = 0, $cmp127 = 0;
 var $cmp147 = 0, $cmp205 = 0, $cmp225 = 0, $cmp225474 = 0, $cmp235 = 0, $cmp235470 = 0, $cmp249 = 0, $cmp259 = 0, $cmp259464 = 0, $cmp277 = 0, $cmp277460 = 0, $cmp299 = 0, $cmp308 = 0, $cmp315 = 0, $cmp324 = 0, $cmp324456 = 0, $cmp333 = 0, $cmp338 = 0, $cmp350 = 0, $cmp363452 = 0;
 var $cmp374 = 0, $cmp38 = 0, $cmp385 = 0, $cmp390 = 0, $cmp403 = 0, $cmp411 = 0, $cmp416 = 0, $cmp416446 = 0, $cmp420 = 0, $cmp433 = 0, $cmp433442 = 0, $cmp443 = 0, $cmp450 = 0, $cmp450$lcssa = 0, $cmp470 = 0, $cmp473 = 0, $cmp495 = 0, $cmp495438 = 0, $cmp505 = 0, $cmp528 = 0;
 var $cmp577 = 0, $cmp59 = 0, $cmp614 = 0, $cmp617 = 0, $cmp623 = 0, $cmp636 = 0, $cmp636433 = 0, $cmp660 = 0, $cmp665 = 0, $cmp673 = 0, $cmp678 = 0, $cmp678419 = 0, $cmp68 = 0, $cmp686 = 0, $cmp707 = 0, $cmp707414 = 0, $cmp710 = 0, $cmp710415 = 0, $cmp722 = 0, $cmp722411 = 0;
 var $cmp745 = 0, $cmp748 = 0, $cmp748427 = 0, $cmp760 = 0, $cmp765 = 0, $cmp770 = 0, $cmp770423 = 0, $cmp777 = 0, $cmp790 = 0, $cmp818 = 0, $cmp82 = 0, $cmp94 = 0, $cond = 0, $cond100 = 0, $cond233 = 0, $cond271 = 0, $cond304 = 0, $cond43 = 0, $cond629 = 0, $cond732 = 0;
 var $cond800 = 0, $conv111 = 0, $conv114 = 0, $conv116 = 0, $conv118393 = 0, $conv121 = 0, $conv123 = 0.0, $conv216 = 0, $conv218 = 0.0, $conv644 = 0, $conv646 = 0, $d$0 = 0, $d$0469 = 0, $d$0472 = 0, $d$1461 = 0, $d$4 = 0, $d$5422 = 0, $d$6416 = 0, $d$7428 = 0, $dec = 0;
 var $dec476 = 0, $dec481 = 0, $dec78 = 0, $div274 = 0, $div356 = 0, $div378 = 0, $div384 = 0, $e$0458 = 0, $e$1 = 0, $e$2444 = 0, $e$4 = 0, $e$5$ph = 0, $e2 = 0, $ebuf0 = 0, $estr$0 = 0, $estr$1$lcssa = 0, $estr$1434 = 0, $estr$2 = 0, $exitcond = 0, $i$0457 = 0;
 var $i$1$lcssa = 0, $i$1453 = 0, $i$2443 = 0, $i$3439 = 0, $inc = 0, $inc425 = 0, $inc438 = 0, $inc468 = 0, $inc500 = 0, $incdec$ptr106 = 0, $incdec$ptr112 = 0, $incdec$ptr115 = 0, $incdec$ptr122 = 0, $incdec$ptr137 = 0, $incdec$ptr217 = 0, $incdec$ptr246 = 0, $incdec$ptr288 = 0, $incdec$ptr292 = 0, $incdec$ptr292$a$3 = 0, $incdec$ptr292$a$3492 = 0;
 var $incdec$ptr292$a$3494 = 0, $incdec$ptr292491 = 0, $incdec$ptr296 = 0, $incdec$ptr419 = 0, $incdec$ptr419$sink$lcssa = 0, $incdec$ptr419$sink447 = 0, $incdec$ptr423 = 0, $incdec$ptr639 = 0, $incdec$ptr645 = 0, $incdec$ptr647 = 0, $incdec$ptr681 = 0, $incdec$ptr689 = 0, $incdec$ptr698 = 0, $incdec$ptr725 = 0, $incdec$ptr734 = 0, $incdec$ptr763 = 0, $incdec$ptr773 = 0, $incdec$ptr776 = 0, $incdec$ptr808 = 0, $j$0 = 0;
 var $j$0451 = 0, $j$0454 = 0, $j$1440 = 0, $j$2 = 0, $l$0 = 0, $l$1 = 0, $land$ext$neg = 0, $lnot = 0, $lnot455 = 0, $lor$ext = 0, $mul = 0.0, $mul125 = 0.0, $mul202 = 0.0, $mul220 = 0.0, $mul286 = 0, $mul322 = 0, $mul328 = 0, $mul335 = 0, $mul349 = 0, $mul367 = 0;
 var $mul406 = 0.0, $mul406$$397 = 0.0, $mul407 = 0.0, $mul407$$$405 = 0.0, $mul431 = 0, $mul437 = 0, $mul499 = 0, $mul513 = 0, $mul80 = 0.0, $narrow = 0, $not$tobool341 = 0, $notlhs = 0, $notrhs = 0, $or = 0, $or$cond = 0, $or$cond1$not = 0, $or$cond2 = 0, $or$cond395 = 0, $or$cond396 = 0, $or$cond398 = 0;
 var $or$cond402 = 0, $or120 = 0, $or504 = 0, $or613 = 0, $p$addr$2 = 0, $p$addr$2$$sub514399 = 0, $p$addr$2$$sub562400 = 0, $p$addr$3 = 0, $p$addr$4$lcssa = 0, $p$addr$4417 = 0, $p$addr$5$lcssa = 0, $p$addr$5429 = 0, $pl$0 = 0, $prefix$0 = 0, $prefix$0$add$ptr65 = 0, $r$0$a$9 = 0, $re$1410 = 0, $rem360 = 0, $rem370 = 0, $rem494 = 0;
 var $rem494437 = 0, $round$0409 = 0.0, $round377$1 = 0.0, $s$0 = 0, $s$1 = 0, $s35$0 = 0, $s668$0420 = 0, $s668$1 = 0, $s715$0$lcssa = 0, $s715$0412 = 0, $s753$0 = 0, $s753$1424 = 0, $s753$2 = 0, $scevgep483 = 0, $scevgep483484 = 0, $shl280 = 0, $shr283 = 0, $shr285 = 0, $small$1 = 0.0, $sub = 0.0;
 var $sub$ptr$div = 0, $sub$ptr$div321 = 0, $sub$ptr$div347 = 0, $sub$ptr$div430 = 0, $sub$ptr$div511 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast143 = 0, $sub$ptr$lhs$cast151 = 0, $sub$ptr$lhs$cast305 = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast344 = 0, $sub$ptr$lhs$cast508 = 0, $sub$ptr$lhs$cast633 = 0, $sub$ptr$lhs$cast694 = 0, $sub$ptr$lhs$cast787 = 0, $sub$ptr$lhs$cast811 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast152 = 0, $sub$ptr$rhs$cast306 = 0, $sub$ptr$rhs$cast319 = 0;
 var $sub$ptr$rhs$cast428 = 0, $sub$ptr$rhs$cast634 = 0, $sub$ptr$rhs$cast634431 = 0, $sub$ptr$rhs$cast649 = 0, $sub$ptr$rhs$cast695 = 0, $sub$ptr$rhs$cast788 = 0, $sub$ptr$rhs$cast812 = 0, $sub$ptr$sub = 0, $sub$ptr$sub145 = 0, $sub$ptr$sub153 = 0, $sub$ptr$sub307 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub346 = 0, $sub$ptr$sub429 = 0, $sub$ptr$sub510 = 0, $sub$ptr$sub635 = 0, $sub$ptr$sub635432 = 0, $sub$ptr$sub650 = 0, $sub$ptr$sub650$pn = 0, $sub$ptr$sub696 = 0;
 var $sub$ptr$sub789 = 0, $sub$ptr$sub813 = 0, $sub124 = 0.0, $sub146 = 0, $sub181 = 0, $sub203 = 0, $sub219 = 0.0, $sub256 = 0, $sub264 = 0, $sub281 = 0, $sub336 = 0, $sub343 = 0, $sub357 = 0, $sub409 = 0, $sub478 = 0, $sub480 = 0, $sub514 = 0, $sub562 = 0, $sub626$le = 0, $sub735 = 0;
 var $sub74 = 0, $sub806 = 0, $sub85 = 0.0, $sub86 = 0.0, $sub88 = 0.0, $sub91 = 0.0, $sub97 = 0, $t$addr$0 = 0, $t$addr$1 = 0, $tobool13 = 0, $tobool135 = 0, $tobool139 = 0, $tobool140 = 0, $tobool222 = 0, $tobool244 = 0, $tobool290 = 0, $tobool290490 = 0, $tobool294 = 0, $tobool341 = 0, $tobool37 = 0;
 var $tobool371 = 0, $tobool380 = 0, $tobool400 = 0, $tobool484 = 0, $tobool490 = 0, $tobool56 = 0, $tobool63 = 0, $tobool76 = 0, $tobool76488 = 0, $tobool781 = 0, $tobool79 = 0, $tobool9 = 0, $w$add653 = 0, $xor = 0, $xor167 = 0, $xor186 = 0, $xor655 = 0, $xor816 = 0, $y$addr$0 = 0.0, $y$addr$1 = 0.0;
 var $y$addr$2 = 0.0, $y$addr$3 = 0.0, $y$addr$4 = 0.0, $z$0 = 0, $z$1$lcssa = 0, $z$1475 = 0, $z$2 = 0, $z$3$lcssa = 0, $z$3465 = 0, $z$4 = 0, $z$7 = 0, $z$7$add$ptr742 = 0, $z$7$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $big = sp + 8|0;
 $e2 = sp;
 $buf = sp + 524|0;
 $sub$ptr$rhs$cast = $buf;
 $ebuf0 = sp + 512|0;
 HEAP32[$e2>>2] = 0;
 $arrayidx = ((($ebuf0)) + 12|0);
 (___DOUBLE_BITS_449($y)|0);
 $0 = tempRet0;
 $1 = ($0|0)<(0);
 if ($1) {
  $sub = -$y;
  $pl$0 = 1;$prefix$0 = 116906;$y$addr$0 = $sub;
 } else {
  $and = $fl & 2048;
  $tobool9 = ($and|0)==(0);
  $and12 = $fl & 1;
  $tobool13 = ($and12|0)==(0);
  $$ = $tobool13 ? (116907) : (116912);
  $$$ = $tobool9 ? $$ : (116909);
  $2 = $fl & 2049;
  $narrow = ($2|0)!=(0);
  $$394$ = $narrow&1;
  $pl$0 = $$394$;$prefix$0 = $$$;$y$addr$0 = $y;
 }
 (___DOUBLE_BITS_449($y$addr$0)|0);
 $3 = tempRet0;
 $4 = $3 & 2146435072;
 $5 = ($4>>>0)<(2146435072);
 $6 = (0)<(0);
 $7 = ($4|0)==(2146435072);
 $8 = $7 & $6;
 $9 = $5 | $8;
 do {
  if ($9) {
   $call55 = (+_frexpl($y$addr$0,$e2));
   $mul = $call55 * 2.0;
   $tobool56 = $mul != 0.0;
   if ($tobool56) {
    $10 = HEAP32[$e2>>2]|0;
    $dec = (($10) + -1)|0;
    HEAP32[$e2>>2] = $dec;
   }
   $or = $t | 32;
   $cmp59 = ($or|0)==(97);
   if ($cmp59) {
    $and62 = $t & 32;
    $tobool63 = ($and62|0)==(0);
    $add$ptr65 = ((($prefix$0)) + 9|0);
    $prefix$0$add$ptr65 = $tobool63 ? $prefix$0 : $add$ptr65;
    $add67 = $pl$0 | 2;
    $11 = ($p>>>0)>(11);
    $sub74 = (12 - ($p))|0;
    $tobool76488 = ($sub74|0)==(0);
    $tobool76 = $11 | $tobool76488;
    do {
     if ($tobool76) {
      $y$addr$1 = $mul;
     } else {
      $re$1410 = $sub74;$round$0409 = 8.0;
      while(1) {
       $dec78 = (($re$1410) + -1)|0;
       $mul80 = $round$0409 * 16.0;
       $tobool79 = ($dec78|0)==(0);
       if ($tobool79) {
        break;
       } else {
        $re$1410 = $dec78;$round$0409 = $mul80;
       }
      }
      $12 = HEAP8[$prefix$0$add$ptr65>>0]|0;
      $cmp82 = ($12<<24>>24)==(45);
      if ($cmp82) {
       $sub85 = -$mul;
       $sub86 = $sub85 - $mul80;
       $add87 = $mul80 + $sub86;
       $sub88 = -$add87;
       $y$addr$1 = $sub88;
       break;
      } else {
       $add90 = $mul + $mul80;
       $sub91 = $add90 - $mul80;
       $y$addr$1 = $sub91;
       break;
      }
     }
    } while(0);
    $13 = HEAP32[$e2>>2]|0;
    $cmp94 = ($13|0)<(0);
    $sub97 = (0 - ($13))|0;
    $cond100 = $cmp94 ? $sub97 : $13;
    $14 = ($cond100|0)<(0);
    $15 = $14 << 31 >> 31;
    $16 = (_fmt_u($cond100,$15,$arrayidx)|0);
    $cmp103 = ($16|0)==($arrayidx|0);
    if ($cmp103) {
     $incdec$ptr106 = ((($ebuf0)) + 11|0);
     HEAP8[$incdec$ptr106>>0] = 48;
     $estr$0 = $incdec$ptr106;
    } else {
     $estr$0 = $16;
    }
    $17 = $13 >> 31;
    $18 = $17 & 2;
    $19 = (($18) + 43)|0;
    $conv111 = $19&255;
    $incdec$ptr112 = ((($estr$0)) + -1|0);
    HEAP8[$incdec$ptr112>>0] = $conv111;
    $add113 = (($t) + 15)|0;
    $conv114 = $add113&255;
    $incdec$ptr115 = ((($estr$0)) + -2|0);
    HEAP8[$incdec$ptr115>>0] = $conv114;
    $notrhs = ($p|0)<(1);
    $and134 = $fl & 8;
    $tobool135 = ($and134|0)==(0);
    $s$0 = $buf;$y$addr$2 = $y$addr$1;
    while(1) {
     $conv116 = (~~(($y$addr$2)));
     $arrayidx117 = (116941 + ($conv116)|0);
     $20 = HEAP8[$arrayidx117>>0]|0;
     $conv118393 = $20&255;
     $or120 = $conv118393 | $and62;
     $conv121 = $or120&255;
     $incdec$ptr122 = ((($s$0)) + 1|0);
     HEAP8[$s$0>>0] = $conv121;
     $conv123 = (+($conv116|0));
     $sub124 = $y$addr$2 - $conv123;
     $mul125 = $sub124 * 16.0;
     $sub$ptr$lhs$cast = $incdec$ptr122;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp127 = ($sub$ptr$sub|0)==(1);
     if ($cmp127) {
      $notlhs = $mul125 == 0.0;
      $or$cond1$not = $notrhs & $notlhs;
      $or$cond = $tobool135 & $or$cond1$not;
      if ($or$cond) {
       $s$1 = $incdec$ptr122;
      } else {
       $incdec$ptr137 = ((($s$0)) + 2|0);
       HEAP8[$incdec$ptr122>>0] = 46;
       $s$1 = $incdec$ptr137;
      }
     } else {
      $s$1 = $incdec$ptr122;
     }
     $tobool139 = $mul125 != 0.0;
     if ($tobool139) {
      $s$0 = $s$1;$y$addr$2 = $mul125;
     } else {
      break;
     }
    }
    $tobool140 = ($p|0)!=(0);
    $sub$ptr$rhs$cast152 = $incdec$ptr115;
    $sub$ptr$lhs$cast151 = $arrayidx;
    $sub$ptr$lhs$cast143 = $s$1;
    $sub$ptr$sub145 = (($sub$ptr$lhs$cast143) - ($sub$ptr$rhs$cast))|0;
    $sub$ptr$sub153 = (($sub$ptr$lhs$cast151) - ($sub$ptr$rhs$cast152))|0;
    $sub146 = (($sub$ptr$sub145) + -2)|0;
    $cmp147 = ($sub146|0)<($p|0);
    $or$cond395 = $tobool140 & $cmp147;
    $add150 = (($p) + 2)|0;
    $add150$pn = $or$cond395 ? $add150 : $sub$ptr$sub145;
    $l$0 = (($sub$ptr$sub153) + ($add67))|0;
    $add165 = (($l$0) + ($add150$pn))|0;
    _pad_448($f,32,$w,$add165,$fl);
    _out_442($f,$prefix$0$add$ptr65,$add67);
    $xor167 = $fl ^ 65536;
    _pad_448($f,48,$w,$add165,$xor167);
    _out_442($f,$buf,$sub$ptr$sub145);
    $sub181 = (($add150$pn) - ($sub$ptr$sub145))|0;
    _pad_448($f,48,$sub181,0,0);
    _out_442($f,$incdec$ptr115,$sub$ptr$sub153);
    $xor186 = $fl ^ 8192;
    _pad_448($f,32,$w,$add165,$xor186);
    $add653$sink406 = $add165;
    break;
   }
   $cmp68 = ($p|0)<(0);
   $$p = $cmp68 ? 6 : $p;
   if ($tobool56) {
    $mul202 = $mul * 268435456.0;
    $21 = HEAP32[$e2>>2]|0;
    $sub203 = (($21) + -28)|0;
    HEAP32[$e2>>2] = $sub203;
    $$pr = $sub203;$y$addr$3 = $mul202;
   } else {
    $$pre = HEAP32[$e2>>2]|0;
    $$pr = $$pre;$y$addr$3 = $mul;
   }
   $cmp205 = ($$pr|0)<(0);
   $add$ptr213 = ((($big)) + 288|0);
   $arraydecay208$add$ptr213 = $cmp205 ? $big : $add$ptr213;
   $y$addr$4 = $y$addr$3;$z$0 = $arraydecay208$add$ptr213;
   while(1) {
    $conv216 = (~~(($y$addr$4))>>>0);
    HEAP32[$z$0>>2] = $conv216;
    $incdec$ptr217 = ((($z$0)) + 4|0);
    $conv218 = (+($conv216>>>0));
    $sub219 = $y$addr$4 - $conv218;
    $mul220 = $sub219 * 1.0E+9;
    $tobool222 = $mul220 != 0.0;
    if ($tobool222) {
     $y$addr$4 = $mul220;$z$0 = $incdec$ptr217;
    } else {
     break;
    }
   }
   $cmp225474 = ($$pr|0)>(0);
   if ($cmp225474) {
    $23 = $$pr;$a$1476 = $arraydecay208$add$ptr213;$z$1475 = $incdec$ptr217;
    while(1) {
     $22 = ($23|0)<(29);
     $cond233 = $22 ? $23 : 29;
     $d$0469 = ((($z$1475)) + -4|0);
     $cmp235470 = ($d$0469>>>0)<($a$1476>>>0);
     if ($cmp235470) {
      $a$2$ph = $a$1476;
     } else {
      $carry$0471 = 0;$d$0472 = $d$0469;
      while(1) {
       $24 = HEAP32[$d$0472>>2]|0;
       $25 = (_bitshift64Shl(($24|0),0,($cond233|0))|0);
       $26 = tempRet0;
       $27 = (_i64Add(($25|0),($26|0),($carry$0471|0),0)|0);
       $28 = tempRet0;
       $29 = (___uremdi3(($27|0),($28|0),1000000000,0)|0);
       $30 = tempRet0;
       HEAP32[$d$0472>>2] = $29;
       $31 = (___udivdi3(($27|0),($28|0),1000000000,0)|0);
       $32 = tempRet0;
       $d$0 = ((($d$0472)) + -4|0);
       $cmp235 = ($d$0>>>0)<($a$1476>>>0);
       if ($cmp235) {
        break;
       } else {
        $carry$0471 = $31;$d$0472 = $d$0;
       }
      }
      $tobool244 = ($31|0)==(0);
      if ($tobool244) {
       $a$2$ph = $a$1476;
      } else {
       $incdec$ptr246 = ((($a$1476)) + -4|0);
       HEAP32[$incdec$ptr246>>2] = $31;
       $a$2$ph = $incdec$ptr246;
      }
     }
     $z$2 = $z$1475;
     while(1) {
      $cmp249 = ($z$2>>>0)>($a$2$ph>>>0);
      if (!($cmp249)) {
       break;
      }
      $arrayidx251 = ((($z$2)) + -4|0);
      $33 = HEAP32[$arrayidx251>>2]|0;
      $lnot = ($33|0)==(0);
      if ($lnot) {
       $z$2 = $arrayidx251;
      } else {
       break;
      }
     }
     $34 = HEAP32[$e2>>2]|0;
     $sub256 = (($34) - ($cond233))|0;
     HEAP32[$e2>>2] = $sub256;
     $cmp225 = ($sub256|0)>(0);
     if ($cmp225) {
      $23 = $sub256;$a$1476 = $a$2$ph;$z$1475 = $z$2;
     } else {
      $$pr407 = $sub256;$a$1$lcssa = $a$2$ph;$z$1$lcssa = $z$2;
      break;
     }
    }
   } else {
    $$pr407 = $$pr;$a$1$lcssa = $arraydecay208$add$ptr213;$z$1$lcssa = $incdec$ptr217;
   }
   $cmp259464 = ($$pr407|0)<(0);
   if ($cmp259464) {
    $add273 = (($$p) + 25)|0;
    $div274 = (($add273|0) / 9)&-1;
    $add275 = (($div274) + 1)|0;
    $cmp299 = ($or|0)==(102);
    $35 = $$pr407;$a$3466 = $a$1$lcssa;$z$3465 = $z$1$lcssa;
    while(1) {
     $sub264 = (0 - ($35))|0;
     $36 = ($sub264|0)<(9);
     $cond271 = $36 ? $sub264 : 9;
     $cmp277460 = ($a$3466>>>0)<($z$3465>>>0);
     if ($cmp277460) {
      $shl280 = 1 << $cond271;
      $sub281 = (($shl280) + -1)|0;
      $shr285 = 1000000000 >>> $cond271;
      $carry262$0462 = 0;$d$1461 = $a$3466;
      while(1) {
       $38 = HEAP32[$d$1461>>2]|0;
       $and282 = $38 & $sub281;
       $shr283 = $38 >>> $cond271;
       $add284 = (($shr283) + ($carry262$0462))|0;
       HEAP32[$d$1461>>2] = $add284;
       $mul286 = Math_imul($and282, $shr285)|0;
       $incdec$ptr288 = ((($d$1461)) + 4|0);
       $cmp277 = ($incdec$ptr288>>>0)<($z$3465>>>0);
       if ($cmp277) {
        $carry262$0462 = $mul286;$d$1461 = $incdec$ptr288;
       } else {
        break;
       }
      }
      $39 = HEAP32[$a$3466>>2]|0;
      $tobool290 = ($39|0)==(0);
      $incdec$ptr292 = ((($a$3466)) + 4|0);
      $incdec$ptr292$a$3 = $tobool290 ? $incdec$ptr292 : $a$3466;
      $tobool294 = ($mul286|0)==(0);
      if ($tobool294) {
       $incdec$ptr292$a$3494 = $incdec$ptr292$a$3;$z$4 = $z$3465;
      } else {
       $incdec$ptr296 = ((($z$3465)) + 4|0);
       HEAP32[$z$3465>>2] = $mul286;
       $incdec$ptr292$a$3494 = $incdec$ptr292$a$3;$z$4 = $incdec$ptr296;
      }
     } else {
      $37 = HEAP32[$a$3466>>2]|0;
      $tobool290490 = ($37|0)==(0);
      $incdec$ptr292491 = ((($a$3466)) + 4|0);
      $incdec$ptr292$a$3492 = $tobool290490 ? $incdec$ptr292491 : $a$3466;
      $incdec$ptr292$a$3494 = $incdec$ptr292$a$3492;$z$4 = $z$3465;
     }
     $cond304 = $cmp299 ? $arraydecay208$add$ptr213 : $incdec$ptr292$a$3494;
     $sub$ptr$lhs$cast305 = $z$4;
     $sub$ptr$rhs$cast306 = $cond304;
     $sub$ptr$sub307 = (($sub$ptr$lhs$cast305) - ($sub$ptr$rhs$cast306))|0;
     $sub$ptr$div = $sub$ptr$sub307 >> 2;
     $cmp308 = ($sub$ptr$div|0)>($add275|0);
     $add$ptr311 = (($cond304) + ($add275<<2)|0);
     $add$ptr311$z$4 = $cmp308 ? $add$ptr311 : $z$4;
     $40 = HEAP32[$e2>>2]|0;
     $add313 = (($40) + ($cond271))|0;
     HEAP32[$e2>>2] = $add313;
     $cmp259 = ($add313|0)<(0);
     if ($cmp259) {
      $35 = $add313;$a$3466 = $incdec$ptr292$a$3494;$z$3465 = $add$ptr311$z$4;
     } else {
      $a$3$lcssa = $incdec$ptr292$a$3494;$z$3$lcssa = $add$ptr311$z$4;
      break;
     }
    }
   } else {
    $a$3$lcssa = $a$1$lcssa;$z$3$lcssa = $z$1$lcssa;
   }
   $cmp315 = ($a$3$lcssa>>>0)<($z$3$lcssa>>>0);
   $sub$ptr$lhs$cast318 = $arraydecay208$add$ptr213;
   if ($cmp315) {
    $sub$ptr$rhs$cast319 = $a$3$lcssa;
    $sub$ptr$sub320 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast319))|0;
    $sub$ptr$div321 = $sub$ptr$sub320 >> 2;
    $mul322 = ($sub$ptr$div321*9)|0;
    $41 = HEAP32[$a$3$lcssa>>2]|0;
    $cmp324456 = ($41>>>0)<(10);
    if ($cmp324456) {
     $e$1 = $mul322;
    } else {
     $e$0458 = $mul322;$i$0457 = 10;
     while(1) {
      $mul328 = ($i$0457*10)|0;
      $inc = (($e$0458) + 1)|0;
      $cmp324 = ($41>>>0)<($mul328>>>0);
      if ($cmp324) {
       $e$1 = $inc;
       break;
      } else {
       $e$0458 = $inc;$i$0457 = $mul328;
      }
     }
    }
   } else {
    $e$1 = 0;
   }
   $cmp333 = ($or|0)!=(102);
   $mul335 = $cmp333 ? $e$1 : 0;
   $sub336 = (($$p) - ($mul335))|0;
   $cmp338 = ($or|0)==(103);
   $tobool341 = ($$p|0)!=(0);
   $42 = $tobool341 & $cmp338;
   $land$ext$neg = $42 << 31 >> 31;
   $sub343 = (($sub336) + ($land$ext$neg))|0;
   $sub$ptr$lhs$cast344 = $z$3$lcssa;
   $sub$ptr$sub346 = (($sub$ptr$lhs$cast344) - ($sub$ptr$lhs$cast318))|0;
   $sub$ptr$div347 = $sub$ptr$sub346 >> 2;
   $43 = ($sub$ptr$div347*9)|0;
   $mul349 = (($43) + -9)|0;
   $cmp350 = ($sub343|0)<($mul349|0);
   if ($cmp350) {
    $add$ptr354 = ((($arraydecay208$add$ptr213)) + 4|0);
    $add355 = (($sub343) + 9216)|0;
    $div356 = (($add355|0) / 9)&-1;
    $sub357 = (($div356) + -1024)|0;
    $add$ptr358 = (($add$ptr354) + ($sub357<<2)|0);
    $rem360 = (($add355|0) % 9)&-1;
    $j$0451 = (($rem360) + 1)|0;
    $cmp363452 = ($j$0451|0)<(9);
    if ($cmp363452) {
     $i$1453 = 10;$j$0454 = $j$0451;
     while(1) {
      $mul367 = ($i$1453*10)|0;
      $j$0 = (($j$0454) + 1)|0;
      $exitcond = ($j$0|0)==(9);
      if ($exitcond) {
       $i$1$lcssa = $mul367;
       break;
      } else {
       $i$1453 = $mul367;$j$0454 = $j$0;
      }
     }
    } else {
     $i$1$lcssa = 10;
    }
    $44 = HEAP32[$add$ptr358>>2]|0;
    $rem370 = (($44>>>0) % ($i$1$lcssa>>>0))&-1;
    $tobool371 = ($rem370|0)==(0);
    $add$ptr373 = ((($add$ptr358)) + 4|0);
    $cmp374 = ($add$ptr373|0)==($z$3$lcssa|0);
    $or$cond396 = $cmp374 & $tobool371;
    if ($or$cond396) {
     $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
    } else {
     $div378 = (($44>>>0) / ($i$1$lcssa>>>0))&-1;
     $and379 = $div378 & 1;
     $tobool380 = ($and379|0)==(0);
     $$397 = $tobool380 ? 9007199254740992.0 : 9007199254740994.0;
     $div384 = (($i$1$lcssa|0) / 2)&-1;
     $cmp385 = ($rem370>>>0)<($div384>>>0);
     $cmp390 = ($rem370|0)==($div384|0);
     $or$cond398 = $cmp374 & $cmp390;
     $$405 = $or$cond398 ? 1.0 : 1.5;
     $$$405 = $cmp385 ? 0.5 : $$405;
     $tobool400 = ($pl$0|0)==(0);
     if ($tobool400) {
      $round377$1 = $$397;$small$1 = $$$405;
     } else {
      $45 = HEAP8[$prefix$0>>0]|0;
      $cmp403 = ($45<<24>>24)==(45);
      $mul406 = -$$397;
      $mul407 = -$$$405;
      $mul406$$397 = $cmp403 ? $mul406 : $$397;
      $mul407$$$405 = $cmp403 ? $mul407 : $$$405;
      $round377$1 = $mul406$$397;$small$1 = $mul407$$$405;
     }
     $sub409 = (($44) - ($rem370))|0;
     HEAP32[$add$ptr358>>2] = $sub409;
     $add410 = $round377$1 + $small$1;
     $cmp411 = $add410 != $round377$1;
     if ($cmp411) {
      $add414 = (($sub409) + ($i$1$lcssa))|0;
      HEAP32[$add$ptr358>>2] = $add414;
      $cmp416446 = ($add414>>>0)>(999999999);
      if ($cmp416446) {
       $a$5448 = $a$3$lcssa;$incdec$ptr419$sink447 = $add$ptr358;
       while(1) {
        $incdec$ptr419 = ((($incdec$ptr419$sink447)) + -4|0);
        HEAP32[$incdec$ptr419$sink447>>2] = 0;
        $cmp420 = ($incdec$ptr419>>>0)<($a$5448>>>0);
        if ($cmp420) {
         $incdec$ptr423 = ((($a$5448)) + -4|0);
         HEAP32[$incdec$ptr423>>2] = 0;
         $a$6 = $incdec$ptr423;
        } else {
         $a$6 = $a$5448;
        }
        $46 = HEAP32[$incdec$ptr419>>2]|0;
        $inc425 = (($46) + 1)|0;
        HEAP32[$incdec$ptr419>>2] = $inc425;
        $cmp416 = ($inc425>>>0)>(999999999);
        if ($cmp416) {
         $a$5448 = $a$6;$incdec$ptr419$sink447 = $incdec$ptr419;
        } else {
         $a$5$lcssa = $a$6;$incdec$ptr419$sink$lcssa = $incdec$ptr419;
         break;
        }
       }
      } else {
       $a$5$lcssa = $a$3$lcssa;$incdec$ptr419$sink$lcssa = $add$ptr358;
      }
      $sub$ptr$rhs$cast428 = $a$5$lcssa;
      $sub$ptr$sub429 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast428))|0;
      $sub$ptr$div430 = $sub$ptr$sub429 >> 2;
      $mul431 = ($sub$ptr$div430*9)|0;
      $47 = HEAP32[$a$5$lcssa>>2]|0;
      $cmp433442 = ($47>>>0)<(10);
      if ($cmp433442) {
       $a$8 = $a$5$lcssa;$d$4 = $incdec$ptr419$sink$lcssa;$e$4 = $mul431;
      } else {
       $e$2444 = $mul431;$i$2443 = 10;
       while(1) {
        $mul437 = ($i$2443*10)|0;
        $inc438 = (($e$2444) + 1)|0;
        $cmp433 = ($47>>>0)<($mul437>>>0);
        if ($cmp433) {
         $a$8 = $a$5$lcssa;$d$4 = $incdec$ptr419$sink$lcssa;$e$4 = $inc438;
         break;
        } else {
         $e$2444 = $inc438;$i$2443 = $mul437;
        }
       }
      }
     } else {
      $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
     }
    }
    $add$ptr442 = ((($d$4)) + 4|0);
    $cmp443 = ($z$3$lcssa>>>0)>($add$ptr442>>>0);
    $add$ptr442$z$3 = $cmp443 ? $add$ptr442 : $z$3$lcssa;
    $a$9$ph = $a$8;$e$5$ph = $e$4;$z$7$ph = $add$ptr442$z$3;
   } else {
    $a$9$ph = $a$3$lcssa;$e$5$ph = $e$1;$z$7$ph = $z$3$lcssa;
   }
   $z$7 = $z$7$ph;
   while(1) {
    $cmp450 = ($z$7>>>0)>($a$9$ph>>>0);
    if (!($cmp450)) {
     $cmp450$lcssa = 0;
     break;
    }
    $arrayidx453 = ((($z$7)) + -4|0);
    $48 = HEAP32[$arrayidx453>>2]|0;
    $lnot455 = ($48|0)==(0);
    if ($lnot455) {
     $z$7 = $arrayidx453;
    } else {
     $cmp450$lcssa = 1;
     break;
    }
   }
   $sub626$le = (0 - ($e$5$ph))|0;
   do {
    if ($cmp338) {
     $not$tobool341 = $tobool341 ^ 1;
     $inc468 = $not$tobool341&1;
     $$p$inc468 = (($inc468) + ($$p))|0;
     $cmp470 = ($$p$inc468|0)>($e$5$ph|0);
     $cmp473 = ($e$5$ph|0)>(-5);
     $or$cond2 = $cmp470 & $cmp473;
     if ($or$cond2) {
      $dec476 = (($t) + -1)|0;
      $add477$neg = (($$p$inc468) + -1)|0;
      $sub478 = (($add477$neg) - ($e$5$ph))|0;
      $p$addr$2 = $sub478;$t$addr$0 = $dec476;
     } else {
      $sub480 = (($t) + -2)|0;
      $dec481 = (($$p$inc468) + -1)|0;
      $p$addr$2 = $dec481;$t$addr$0 = $sub480;
     }
     $and483 = $fl & 8;
     $tobool484 = ($and483|0)==(0);
     if ($tobool484) {
      if ($cmp450$lcssa) {
       $arrayidx489 = ((($z$7)) + -4|0);
       $49 = HEAP32[$arrayidx489>>2]|0;
       $tobool490 = ($49|0)==(0);
       if ($tobool490) {
        $j$2 = 9;
       } else {
        $rem494437 = (($49>>>0) % 10)&-1;
        $cmp495438 = ($rem494437|0)==(0);
        if ($cmp495438) {
         $i$3439 = 10;$j$1440 = 0;
         while(1) {
          $mul499 = ($i$3439*10)|0;
          $inc500 = (($j$1440) + 1)|0;
          $rem494 = (($49>>>0) % ($mul499>>>0))&-1;
          $cmp495 = ($rem494|0)==(0);
          if ($cmp495) {
           $i$3439 = $mul499;$j$1440 = $inc500;
          } else {
           $j$2 = $inc500;
           break;
          }
         }
        } else {
         $j$2 = 0;
        }
       }
      } else {
       $j$2 = 9;
      }
      $or504 = $t$addr$0 | 32;
      $cmp505 = ($or504|0)==(102);
      $sub$ptr$lhs$cast508 = $z$7;
      $sub$ptr$sub510 = (($sub$ptr$lhs$cast508) - ($sub$ptr$lhs$cast318))|0;
      $sub$ptr$div511 = $sub$ptr$sub510 >> 2;
      $50 = ($sub$ptr$div511*9)|0;
      $mul513 = (($50) + -9)|0;
      if ($cmp505) {
       $sub514 = (($mul513) - ($j$2))|0;
       $51 = ($sub514|0)>(0);
       $$sub514 = $51 ? $sub514 : 0;
       $cmp528 = ($p$addr$2|0)<($$sub514|0);
       $p$addr$2$$sub514399 = $cmp528 ? $p$addr$2 : $$sub514;
       $and610$pre$phiZ2D = 0;$p$addr$3 = $p$addr$2$$sub514399;$t$addr$1 = $t$addr$0;
       break;
      } else {
       $add561 = (($mul513) + ($e$5$ph))|0;
       $sub562 = (($add561) - ($j$2))|0;
       $52 = ($sub562|0)>(0);
       $$sub562 = $52 ? $sub562 : 0;
       $cmp577 = ($p$addr$2|0)<($$sub562|0);
       $p$addr$2$$sub562400 = $cmp577 ? $p$addr$2 : $$sub562;
       $and610$pre$phiZ2D = 0;$p$addr$3 = $p$addr$2$$sub562400;$t$addr$1 = $t$addr$0;
       break;
      }
     } else {
      $and610$pre$phiZ2D = $and483;$p$addr$3 = $p$addr$2;$t$addr$1 = $t$addr$0;
     }
    } else {
     $$pre487 = $fl & 8;
     $and610$pre$phiZ2D = $$pre487;$p$addr$3 = $$p;$t$addr$1 = $t;
    }
   } while(0);
   $53 = $p$addr$3 | $and610$pre$phiZ2D;
   $54 = ($53|0)!=(0);
   $lor$ext = $54&1;
   $or613 = $t$addr$1 | 32;
   $cmp614 = ($or613|0)==(102);
   if ($cmp614) {
    $cmp617 = ($e$5$ph|0)>(0);
    $add620 = $cmp617 ? $e$5$ph : 0;
    $estr$2 = 0;$sub$ptr$sub650$pn = $add620;
   } else {
    $cmp623 = ($e$5$ph|0)<(0);
    $cond629 = $cmp623 ? $sub626$le : $e$5$ph;
    $55 = ($cond629|0)<(0);
    $56 = $55 << 31 >> 31;
    $57 = (_fmt_u($cond629,$56,$arrayidx)|0);
    $sub$ptr$lhs$cast633 = $arrayidx;
    $sub$ptr$rhs$cast634431 = $57;
    $sub$ptr$sub635432 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634431))|0;
    $cmp636433 = ($sub$ptr$sub635432|0)<(2);
    if ($cmp636433) {
     $estr$1434 = $57;
     while(1) {
      $incdec$ptr639 = ((($estr$1434)) + -1|0);
      HEAP8[$incdec$ptr639>>0] = 48;
      $sub$ptr$rhs$cast634 = $incdec$ptr639;
      $sub$ptr$sub635 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634))|0;
      $cmp636 = ($sub$ptr$sub635|0)<(2);
      if ($cmp636) {
       $estr$1434 = $incdec$ptr639;
      } else {
       $estr$1$lcssa = $incdec$ptr639;
       break;
      }
     }
    } else {
     $estr$1$lcssa = $57;
    }
    $58 = $e$5$ph >> 31;
    $59 = $58 & 2;
    $60 = (($59) + 43)|0;
    $conv644 = $60&255;
    $incdec$ptr645 = ((($estr$1$lcssa)) + -1|0);
    HEAP8[$incdec$ptr645>>0] = $conv644;
    $conv646 = $t$addr$1&255;
    $incdec$ptr647 = ((($estr$1$lcssa)) + -2|0);
    HEAP8[$incdec$ptr647>>0] = $conv646;
    $sub$ptr$rhs$cast649 = $incdec$ptr647;
    $sub$ptr$sub650 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast649))|0;
    $estr$2 = $incdec$ptr647;$sub$ptr$sub650$pn = $sub$ptr$sub650;
   }
   $add608 = (($pl$0) + 1)|0;
   $add612 = (($add608) + ($p$addr$3))|0;
   $l$1 = (($add612) + ($lor$ext))|0;
   $add653 = (($l$1) + ($sub$ptr$sub650$pn))|0;
   _pad_448($f,32,$w,$add653,$fl);
   _out_442($f,$prefix$0,$pl$0);
   $xor655 = $fl ^ 65536;
   _pad_448($f,48,$w,$add653,$xor655);
   if ($cmp614) {
    $cmp660 = ($a$9$ph>>>0)>($arraydecay208$add$ptr213>>>0);
    $r$0$a$9 = $cmp660 ? $arraydecay208$add$ptr213 : $a$9$ph;
    $add$ptr671 = ((($buf)) + 9|0);
    $sub$ptr$lhs$cast694 = $add$ptr671;
    $incdec$ptr689 = ((($buf)) + 8|0);
    $d$5422 = $r$0$a$9;
    while(1) {
     $61 = HEAP32[$d$5422>>2]|0;
     $62 = (_fmt_u($61,0,$add$ptr671)|0);
     $cmp673 = ($d$5422|0)==($r$0$a$9|0);
     if ($cmp673) {
      $cmp686 = ($62|0)==($add$ptr671|0);
      if ($cmp686) {
       HEAP8[$incdec$ptr689>>0] = 48;
       $s668$1 = $incdec$ptr689;
      } else {
       $s668$1 = $62;
      }
     } else {
      $cmp678419 = ($62>>>0)>($buf>>>0);
      if ($cmp678419) {
       $63 = $62;
       $64 = (($63) - ($sub$ptr$rhs$cast))|0;
       _memset(($buf|0),48,($64|0))|0;
       $s668$0420 = $62;
       while(1) {
        $incdec$ptr681 = ((($s668$0420)) + -1|0);
        $cmp678 = ($incdec$ptr681>>>0)>($buf>>>0);
        if ($cmp678) {
         $s668$0420 = $incdec$ptr681;
        } else {
         $s668$1 = $incdec$ptr681;
         break;
        }
       }
      } else {
       $s668$1 = $62;
      }
     }
     $sub$ptr$rhs$cast695 = $s668$1;
     $sub$ptr$sub696 = (($sub$ptr$lhs$cast694) - ($sub$ptr$rhs$cast695))|0;
     _out_442($f,$s668$1,$sub$ptr$sub696);
     $incdec$ptr698 = ((($d$5422)) + 4|0);
     $cmp665 = ($incdec$ptr698>>>0)>($arraydecay208$add$ptr213>>>0);
     if ($cmp665) {
      break;
     } else {
      $d$5422 = $incdec$ptr698;
     }
    }
    $65 = ($53|0)==(0);
    if (!($65)) {
     _out_442($f,116957,1);
    }
    $cmp707414 = ($incdec$ptr698>>>0)<($z$7>>>0);
    $cmp710415 = ($p$addr$3|0)>(0);
    $66 = $cmp707414 & $cmp710415;
    if ($66) {
     $d$6416 = $incdec$ptr698;$p$addr$4417 = $p$addr$3;
     while(1) {
      $67 = HEAP32[$d$6416>>2]|0;
      $68 = (_fmt_u($67,0,$add$ptr671)|0);
      $cmp722411 = ($68>>>0)>($buf>>>0);
      if ($cmp722411) {
       $69 = $68;
       $70 = (($69) - ($sub$ptr$rhs$cast))|0;
       _memset(($buf|0),48,($70|0))|0;
       $s715$0412 = $68;
       while(1) {
        $incdec$ptr725 = ((($s715$0412)) + -1|0);
        $cmp722 = ($incdec$ptr725>>>0)>($buf>>>0);
        if ($cmp722) {
         $s715$0412 = $incdec$ptr725;
        } else {
         $s715$0$lcssa = $incdec$ptr725;
         break;
        }
       }
      } else {
       $s715$0$lcssa = $68;
      }
      $71 = ($p$addr$4417|0)<(9);
      $cond732 = $71 ? $p$addr$4417 : 9;
      _out_442($f,$s715$0$lcssa,$cond732);
      $incdec$ptr734 = ((($d$6416)) + 4|0);
      $sub735 = (($p$addr$4417) + -9)|0;
      $cmp707 = ($incdec$ptr734>>>0)<($z$7>>>0);
      $cmp710 = ($p$addr$4417|0)>(9);
      $72 = $cmp707 & $cmp710;
      if ($72) {
       $d$6416 = $incdec$ptr734;$p$addr$4417 = $sub735;
      } else {
       $p$addr$4$lcssa = $sub735;
       break;
      }
     }
    } else {
     $p$addr$4$lcssa = $p$addr$3;
    }
    $add737 = (($p$addr$4$lcssa) + 9)|0;
    _pad_448($f,48,$add737,9,0);
   } else {
    $add$ptr742 = ((($a$9$ph)) + 4|0);
    $z$7$add$ptr742 = $cmp450$lcssa ? $z$7 : $add$ptr742;
    $cmp748427 = ($p$addr$3|0)>(-1);
    if ($cmp748427) {
     $add$ptr756 = ((($buf)) + 9|0);
     $tobool781 = ($and610$pre$phiZ2D|0)==(0);
     $sub$ptr$lhs$cast787 = $add$ptr756;
     $73 = (0 - ($sub$ptr$rhs$cast))|0;
     $incdec$ptr763 = ((($buf)) + 8|0);
     $d$7428 = $a$9$ph;$p$addr$5429 = $p$addr$3;
     while(1) {
      $74 = HEAP32[$d$7428>>2]|0;
      $75 = (_fmt_u($74,0,$add$ptr756)|0);
      $cmp760 = ($75|0)==($add$ptr756|0);
      if ($cmp760) {
       HEAP8[$incdec$ptr763>>0] = 48;
       $s753$0 = $incdec$ptr763;
      } else {
       $s753$0 = $75;
      }
      $cmp765 = ($d$7428|0)==($a$9$ph|0);
      do {
       if ($cmp765) {
        $incdec$ptr776 = ((($s753$0)) + 1|0);
        _out_442($f,$s753$0,1);
        $cmp777 = ($p$addr$5429|0)<(1);
        $or$cond402 = $tobool781 & $cmp777;
        if ($or$cond402) {
         $s753$2 = $incdec$ptr776;
         break;
        }
        _out_442($f,116957,1);
        $s753$2 = $incdec$ptr776;
       } else {
        $cmp770423 = ($s753$0>>>0)>($buf>>>0);
        if (!($cmp770423)) {
         $s753$2 = $s753$0;
         break;
        }
        $scevgep483 = (($s753$0) + ($73)|0);
        $scevgep483484 = $scevgep483;
        _memset(($buf|0),48,($scevgep483484|0))|0;
        $s753$1424 = $s753$0;
        while(1) {
         $incdec$ptr773 = ((($s753$1424)) + -1|0);
         $cmp770 = ($incdec$ptr773>>>0)>($buf>>>0);
         if ($cmp770) {
          $s753$1424 = $incdec$ptr773;
         } else {
          $s753$2 = $incdec$ptr773;
          break;
         }
        }
       }
      } while(0);
      $sub$ptr$rhs$cast788 = $s753$2;
      $sub$ptr$sub789 = (($sub$ptr$lhs$cast787) - ($sub$ptr$rhs$cast788))|0;
      $cmp790 = ($p$addr$5429|0)>($sub$ptr$sub789|0);
      $cond800 = $cmp790 ? $sub$ptr$sub789 : $p$addr$5429;
      _out_442($f,$s753$2,$cond800);
      $sub806 = (($p$addr$5429) - ($sub$ptr$sub789))|0;
      $incdec$ptr808 = ((($d$7428)) + 4|0);
      $cmp745 = ($incdec$ptr808>>>0)<($z$7$add$ptr742>>>0);
      $cmp748 = ($sub806|0)>(-1);
      $76 = $cmp745 & $cmp748;
      if ($76) {
       $d$7428 = $incdec$ptr808;$p$addr$5429 = $sub806;
      } else {
       $p$addr$5$lcssa = $sub806;
       break;
      }
     }
    } else {
     $p$addr$5$lcssa = $p$addr$3;
    }
    $add810 = (($p$addr$5$lcssa) + 18)|0;
    _pad_448($f,48,$add810,18,0);
    $sub$ptr$lhs$cast811 = $arrayidx;
    $sub$ptr$rhs$cast812 = $estr$2;
    $sub$ptr$sub813 = (($sub$ptr$lhs$cast811) - ($sub$ptr$rhs$cast812))|0;
    _out_442($f,$estr$2,$sub$ptr$sub813);
   }
   $xor816 = $fl ^ 8192;
   _pad_448($f,32,$w,$add653,$xor816);
   $add653$sink406 = $add653;
  } else {
   $and36 = $t & 32;
   $tobool37 = ($and36|0)!=(0);
   $cond = $tobool37 ? 116925 : 116929;
   $cmp38 = ($y$addr$0 != $y$addr$0) | (0.0 != 0.0);
   $cond43 = $tobool37 ? 116933 : 116937;
   $s35$0 = $cmp38 ? $cond43 : $cond;
   $add = (($pl$0) + 3)|0;
   $and45 = $fl & -65537;
   _pad_448($f,32,$w,$add,$and45);
   _out_442($f,$prefix$0,$pl$0);
   _out_442($f,$s35$0,3);
   $xor = $fl ^ 8192;
   _pad_448($f,32,$w,$add,$xor);
   $add653$sink406 = $add;
  }
 } while(0);
 $cmp818 = ($add653$sink406|0)<($w|0);
 $w$add653 = $cmp818 ? $w : $add653$sink406;
 STACKTOP = sp;return ($w$add653|0);
}
function ___DOUBLE_BITS_449($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $__f;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($1);
 return ($0|0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_frexp($x,$e));
 return (+$call);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $call = 0.0, $conv = 0, $mul = 0.0, $retval$0 = 0.0, $storemerge = 0, $sub = 0, $sub8 = 0, $tobool1 = 0, $trunc$clear = 0, $x$addr$0 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2&65535;
 $trunc$clear = $4 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $tobool1 = $x != 0.0;
  if ($tobool1) {
   $mul = $x * 1.8446744073709552E+19;
   $call = (+_frexp($mul,$e));
   $5 = HEAP32[$e>>2]|0;
   $sub = (($5) + -64)|0;
   $storemerge = $sub;$x$addr$0 = $call;
  } else {
   $storemerge = 0;$x$addr$0 = $x;
  }
  HEAP32[$e>>2] = $storemerge;
  $retval$0 = $x$addr$0;
  break;
 }
 case 2047:  {
  $retval$0 = $x;
  break;
 }
 default: {
  $conv = $2 & 2047;
  $sub8 = (($conv) + -1022)|0;
  HEAP32[$e>>2] = $sub8;
  $6 = $1 & -2146435073;
  $7 = $6 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $7;$8 = +HEAPF64[tempDoublePtr>>3];
  $retval$0 = $8;
 }
 }
 return (+$retval$0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $and = 0, $and32 = 0, $and36 = 0, $and49 = 0, $and54 = 0, $and58 = 0, $call = 0, $call10 = 0, $call66 = 0, $cmp = 0, $cmp14 = 0, $cmp21 = 0, $cmp24 = 0, $cmp41 = 0, $cmp7 = 0, $conv = 0;
 var $conv12 = 0, $conv17 = 0, $conv19 = 0, $conv29 = 0, $conv34 = 0, $conv38 = 0, $conv46 = 0, $conv51 = 0, $conv56 = 0, $conv60 = 0, $incdec$ptr = 0, $incdec$ptr30 = 0, $incdec$ptr35 = 0, $incdec$ptr47 = 0, $incdec$ptr52 = 0, $incdec$ptr57 = 0, $locale = 0, $not$tobool2 = 0, $or = 0, $or$cond = 0;
 var $or18 = 0, $or28 = 0, $or33 = 0, $or37 = 0, $or45 = 0, $or50 = 0, $or55 = 0, $or59 = 0, $retval$0 = 0, $shr2729 = 0, $shr3130 = 0, $shr32 = 0, $shr4426 = 0, $shr4827 = 0, $shr5328 = 0, $sub40 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 do {
  if ($tobool) {
   $retval$0 = 1;
  } else {
   $cmp = ($wc>>>0)<(128);
   if ($cmp) {
    $conv = $wc&255;
    HEAP8[$s>>0] = $conv;
    $retval$0 = 1;
    break;
   }
   $call = (___pthread_self_96()|0);
   $locale = ((($call)) + 188|0);
   $0 = HEAP32[$locale>>2]|0;
   $1 = HEAP32[$0>>2]|0;
   $not$tobool2 = ($1|0)==(0|0);
   if ($not$tobool2) {
    $2 = $wc & -128;
    $cmp7 = ($2|0)==(57216);
    if ($cmp7) {
     $conv12 = $wc&255;
     HEAP8[$s>>0] = $conv12;
     $retval$0 = 1;
     break;
    } else {
     $call10 = (___errno_location()|0);
     HEAP32[$call10>>2] = 84;
     $retval$0 = -1;
     break;
    }
   }
   $cmp14 = ($wc>>>0)<(2048);
   if ($cmp14) {
    $shr32 = $wc >>> 6;
    $or = $shr32 | 192;
    $conv17 = $or&255;
    $incdec$ptr = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv17;
    $and = $wc & 63;
    $or18 = $and | 128;
    $conv19 = $or18&255;
    HEAP8[$incdec$ptr>>0] = $conv19;
    $retval$0 = 2;
    break;
   }
   $cmp21 = ($wc>>>0)<(55296);
   $3 = $wc & -8192;
   $cmp24 = ($3|0)==(57344);
   $or$cond = $cmp21 | $cmp24;
   if ($or$cond) {
    $shr2729 = $wc >>> 12;
    $or28 = $shr2729 | 224;
    $conv29 = $or28&255;
    $incdec$ptr30 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv29;
    $shr3130 = $wc >>> 6;
    $and32 = $shr3130 & 63;
    $or33 = $and32 | 128;
    $conv34 = $or33&255;
    $incdec$ptr35 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr30>>0] = $conv34;
    $and36 = $wc & 63;
    $or37 = $and36 | 128;
    $conv38 = $or37&255;
    HEAP8[$incdec$ptr35>>0] = $conv38;
    $retval$0 = 3;
    break;
   }
   $sub40 = (($wc) + -65536)|0;
   $cmp41 = ($sub40>>>0)<(1048576);
   if ($cmp41) {
    $shr4426 = $wc >>> 18;
    $or45 = $shr4426 | 240;
    $conv46 = $or45&255;
    $incdec$ptr47 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv46;
    $shr4827 = $wc >>> 12;
    $and49 = $shr4827 & 63;
    $or50 = $and49 | 128;
    $conv51 = $or50&255;
    $incdec$ptr52 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr47>>0] = $conv51;
    $shr5328 = $wc >>> 6;
    $and54 = $shr5328 & 63;
    $or55 = $and54 | 128;
    $conv56 = $or55&255;
    $incdec$ptr57 = ((($s)) + 3|0);
    HEAP8[$incdec$ptr52>>0] = $conv56;
    $and58 = $wc & 63;
    $or59 = $and58 | 128;
    $conv60 = $or59&255;
    HEAP8[$incdec$ptr57>>0] = $conv60;
    $retval$0 = 4;
    break;
   } else {
    $call66 = (___errno_location()|0);
    HEAP32[$call66>>2] = 84;
    $retval$0 = -1;
    break;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___pthread_self_96() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function ___pthread_self_241() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function ___strerror_l($e,$loc) {
 $e = $e|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $arrayidx15 = 0, $call = 0, $cmp = 0, $conv = 0, $dec = 0, $i$012 = 0, $i$111 = 0, $inc = 0, $incdec$ptr = 0, $s$0$lcssa = 0, $s$010 = 0, $s$1 = 0, $tobool = 0, $tobool5 = 0, $tobool59 = 0, $tobool8 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $i$012 = 0;
 while(1) {
  $arrayidx = (116959 + ($i$012)|0);
  $0 = HEAP8[$arrayidx>>0]|0;
  $conv = $0&255;
  $cmp = ($conv|0)==($e|0);
  if ($cmp) {
   label = 2;
   break;
  }
  $inc = (($i$012) + 1)|0;
  $tobool = ($inc|0)==(87);
  if ($tobool) {
   $i$111 = 87;$s$010 = 117047;
   label = 5;
   break;
  } else {
   $i$012 = $inc;
  }
 }
 if ((label|0) == 2) {
  $tobool59 = ($i$012|0)==(0);
  if ($tobool59) {
   $s$0$lcssa = 117047;
  } else {
   $i$111 = $i$012;$s$010 = 117047;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$010;
   while(1) {
    $1 = HEAP8[$s$1>>0]|0;
    $tobool8 = ($1<<24>>24)==(0);
    $incdec$ptr = ((($s$1)) + 1|0);
    if ($tobool8) {
     break;
    } else {
     $s$1 = $incdec$ptr;
    }
   }
   $dec = (($i$111) + -1)|0;
   $tobool5 = ($dec|0)==(0);
   if ($tobool5) {
    $s$0$lcssa = $incdec$ptr;
    break;
   } else {
    $i$111 = $dec;$s$010 = $incdec$ptr;
    label = 5;
   }
  }
 }
 $arrayidx15 = ((($loc)) + 20|0);
 $2 = HEAP32[$arrayidx15>>2]|0;
 $call = (___lctrans($s$0$lcssa,$2)|0);
 return ($call|0);
}
function ___lctrans($msg,$lm) {
 $msg = $msg|0;
 $lm = $lm|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___lctrans_impl($msg,$lm)|0);
 return ($call|0);
}
function ___lctrans_impl($msg,$lm) {
 $msg = $msg|0;
 $lm = $lm|0;
 var $0 = 0, $1 = 0, $call = 0, $cond = 0, $map_size = 0, $tobool = 0, $tobool1 = 0, $trans$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($lm|0)==(0|0);
 if ($tobool) {
  $trans$0 = 0;
 } else {
  $0 = HEAP32[$lm>>2]|0;
  $map_size = ((($lm)) + 4|0);
  $1 = HEAP32[$map_size>>2]|0;
  $call = (___mo_lookup($0,$1,$msg)|0);
  $trans$0 = $call;
 }
 $tobool1 = ($trans$0|0)!=(0|0);
 $cond = $tobool1 ? $trans$0 : $msg;
 return ($cond|0);
}
function ___mo_lookup($p,$size,$s) {
 $p = $p|0;
 $size = $size|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr65 = 0, $add$ptr65$ = 0, $add16 = 0, $add23 = 0, $add31 = 0, $add42 = 0, $add49 = 0, $add59 = 0;
 var $arrayidx = 0, $arrayidx1 = 0, $arrayidx17 = 0, $arrayidx24 = 0, $arrayidx3 = 0, $arrayidx32 = 0, $arrayidx43 = 0, $arrayidx50 = 0, $arrayidx60 = 0, $b$0 = 0, $b$1 = 0, $call = 0, $call18 = 0, $call2 = 0, $call25 = 0, $call36 = 0, $call4 = 0, $call44 = 0, $call51 = 0, $cmp = 0;
 var $cmp10 = 0, $cmp26 = 0, $cmp29 = 0, $cmp52 = 0, $cmp56 = 0, $cmp6 = 0, $cmp67 = 0, $cmp71 = 0, $div = 0, $div12 = 0, $div13 = 0, $div14 = 0, $mul = 0, $mul15 = 0, $n$0 = 0, $n$1 = 0, $or = 0, $or$cond = 0, $or$cond66 = 0, $or$cond67 = 0;
 var $rem = 0, $retval$4 = 0, $sub = 0, $sub28 = 0, $sub5 = 0, $sub55 = 0, $sub79 = 0, $tobool = 0, $tobool33 = 0, $tobool37 = 0, $tobool62 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $sub = (($0) + 1794895138)|0;
 $arrayidx = ((($p)) + 8|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $call = (_swapc($1,$sub)|0);
 $arrayidx1 = ((($p)) + 12|0);
 $2 = HEAP32[$arrayidx1>>2]|0;
 $call2 = (_swapc($2,$sub)|0);
 $arrayidx3 = ((($p)) + 16|0);
 $3 = HEAP32[$arrayidx3>>2]|0;
 $call4 = (_swapc($3,$sub)|0);
 $div = $size >>> 2;
 $cmp = ($call>>>0)<($div>>>0);
 L1: do {
  if ($cmp) {
   $mul = $call << 2;
   $sub5 = (($size) - ($mul))|0;
   $cmp6 = ($call2>>>0)<($sub5>>>0);
   $cmp10 = ($call4>>>0)<($sub5>>>0);
   $or$cond = $cmp6 & $cmp10;
   if ($or$cond) {
    $or = $call4 | $call2;
    $rem = $or & 3;
    $tobool = ($rem|0)==(0);
    if ($tobool) {
     $div12 = $call2 >>> 2;
     $div13 = $call4 >>> 2;
     $b$0 = 0;$n$0 = $call;
     while(1) {
      $div14 = $n$0 >>> 1;
      $add = (($b$0) + ($div14))|0;
      $mul15 = $add << 1;
      $add16 = (($mul15) + ($div12))|0;
      $arrayidx17 = (($p) + ($add16<<2)|0);
      $4 = HEAP32[$arrayidx17>>2]|0;
      $call18 = (_swapc($4,$sub)|0);
      $add23 = (($add16) + 1)|0;
      $arrayidx24 = (($p) + ($add23<<2)|0);
      $5 = HEAP32[$arrayidx24>>2]|0;
      $call25 = (_swapc($5,$sub)|0);
      $cmp26 = ($call25>>>0)<($size>>>0);
      $sub28 = (($size) - ($call25))|0;
      $cmp29 = ($call18>>>0)<($sub28>>>0);
      $or$cond66 = $cmp26 & $cmp29;
      if (!($or$cond66)) {
       $retval$4 = 0;
       break L1;
      }
      $add31 = (($call25) + ($call18))|0;
      $arrayidx32 = (($p) + ($add31)|0);
      $6 = HEAP8[$arrayidx32>>0]|0;
      $tobool33 = ($6<<24>>24)==(0);
      if (!($tobool33)) {
       $retval$4 = 0;
       break L1;
      }
      $add$ptr = (($p) + ($call25)|0);
      $call36 = (_strcmp($s,$add$ptr)|0);
      $tobool37 = ($call36|0)==(0);
      if ($tobool37) {
       break;
      }
      $cmp67 = ($n$0|0)==(1);
      $cmp71 = ($call36|0)<(0);
      $sub79 = (($n$0) - ($div14))|0;
      $n$1 = $cmp71 ? $div14 : $sub79;
      $b$1 = $cmp71 ? $b$0 : $add;
      if ($cmp67) {
       $retval$4 = 0;
       break L1;
      } else {
       $b$0 = $b$1;$n$0 = $n$1;
      }
     }
     $add42 = (($mul15) + ($div13))|0;
     $arrayidx43 = (($p) + ($add42<<2)|0);
     $7 = HEAP32[$arrayidx43>>2]|0;
     $call44 = (_swapc($7,$sub)|0);
     $add49 = (($add42) + 1)|0;
     $arrayidx50 = (($p) + ($add49<<2)|0);
     $8 = HEAP32[$arrayidx50>>2]|0;
     $call51 = (_swapc($8,$sub)|0);
     $cmp52 = ($call51>>>0)<($size>>>0);
     $sub55 = (($size) - ($call51))|0;
     $cmp56 = ($call44>>>0)<($sub55>>>0);
     $or$cond67 = $cmp52 & $cmp56;
     if ($or$cond67) {
      $add$ptr65 = (($p) + ($call51)|0);
      $add59 = (($call51) + ($call44))|0;
      $arrayidx60 = (($p) + ($add59)|0);
      $9 = HEAP8[$arrayidx60>>0]|0;
      $tobool62 = ($9<<24>>24)==(0);
      $add$ptr65$ = $tobool62 ? $add$ptr65 : 0;
      $retval$4 = $add$ptr65$;
     } else {
      $retval$4 = 0;
     }
    } else {
     $retval$4 = 0;
    }
   } else {
    $retval$4 = 0;
   }
  } else {
   $retval$4 = 0;
  }
 } while(0);
 return ($retval$4|0);
}
function _swapc($x,$c) {
 $x = $x|0;
 $c = $c|0;
 var $or5 = 0, $tobool = 0, $x$or5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($c|0)==(0);
 $or5 = (_llvm_bswap_i32(($x|0))|0);
 $x$or5 = $tobool ? $x : $or5;
 return ($x$or5|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$pre = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr26 = 0, $arrayidx = 0, $call = 0, $call16 = 0, $call4 = 0;
 var $cmp = 0, $cmp11 = 0, $cmp17 = 0, $cmp6 = 0, $i$0 = 0, $i$1 = 0, $l$addr$0 = 0, $l$addr$1 = 0, $lbf = 0, $retval$1 = 0, $s$addr$1 = 0, $sub = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool1 = 0, $tobool9 = 0, $wend = 0, $wpos = 0, $write = 0, $write15 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $3 = $$pre;
   label = 5;
  } else {
   $retval$1 = 0;
  }
 } else {
  $1 = $0;
  $3 = $1;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $wpos = ((($f)) + 20|0);
   $2 = HEAP32[$wpos>>2]|0;
   $sub$ptr$sub = (($3) - ($2))|0;
   $cmp = ($sub$ptr$sub>>>0)<($l>>>0);
   $4 = $2;
   if ($cmp) {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    $call4 = (FUNCTION_TABLE_iiii[$5 & 127]($f,$s,$l)|0);
    $retval$1 = $call4;
    break;
   }
   $lbf = ((($f)) + 75|0);
   $6 = HEAP8[$lbf>>0]|0;
   $cmp6 = ($6<<24>>24)>(-1);
   L10: do {
    if ($cmp6) {
     $i$0 = $l;
     while(1) {
      $tobool9 = ($i$0|0)==(0);
      if ($tobool9) {
       $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
       break L10;
      }
      $sub = (($i$0) + -1)|0;
      $arrayidx = (($s) + ($sub)|0);
      $7 = HEAP8[$arrayidx>>0]|0;
      $cmp11 = ($7<<24>>24)==(10);
      if ($cmp11) {
       break;
      } else {
       $i$0 = $sub;
      }
     }
     $write15 = ((($f)) + 36|0);
     $8 = HEAP32[$write15>>2]|0;
     $call16 = (FUNCTION_TABLE_iiii[$8 & 127]($f,$s,$i$0)|0);
     $cmp17 = ($call16>>>0)<($i$0>>>0);
     if ($cmp17) {
      $retval$1 = $call16;
      break L5;
     }
     $add$ptr = (($s) + ($i$0)|0);
     $l$addr$0 = (($l) - ($i$0))|0;
     $$pre33 = HEAP32[$wpos>>2]|0;
     $9 = $$pre33;$i$1 = $i$0;$l$addr$1 = $l$addr$0;$s$addr$1 = $add$ptr;
    } else {
     $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
    }
   } while(0);
   _memcpy(($9|0),($s$addr$1|0),($l$addr$1|0))|0;
   $10 = HEAP32[$wpos>>2]|0;
   $add$ptr26 = (($10) + ($l$addr$1)|0);
   HEAP32[$wpos>>2] = $add$ptr26;
   $add = (($i$1) + ($l$addr$1))|0;
   $retval$1 = $add;
  }
 } while(0);
 return ($retval$1|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $tobool = 0, $wbase = 0, $wend = 0;
 var $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = ((($f)) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 8;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $rend = ((($f)) + 8|0);
  HEAP32[$rend>>2] = 0;
  $rpos = ((($f)) + 4|0);
  HEAP32[$rpos>>2] = 0;
  $buf = ((($f)) + 44|0);
  $2 = HEAP32[$buf>>2]|0;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $2;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $2;
  $buf_size = ((($f)) + 48|0);
  $3 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($2) + ($3)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $retval$0 = 0;
 } else {
  $or5 = $1 | 32;
  HEAP32[$f>>2] = $or5;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $cmp = 0, $l$sub$ptr$sub = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$rhs$cast = $1;
 $sub$ptr$sub = (($0) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub>>>0)>($l>>>0);
 $l$sub$ptr$sub = $cmp ? $l : $sub$ptr$sub;
 _memcpy(($1|0),($s|0),($l$sub$ptr$sub|0))|0;
 $2 = HEAP32[$wpos>>2]|0;
 $add$ptr = (($2) + ($l$sub$ptr$sub)|0);
 HEAP32[$wpos>>2] = $add$ptr;
 return ($l|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $cmp = 0, $cmp1 = 0, $lor$ext = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($c|0)==(32);
 $sub = (($c) + -9)|0;
 $cmp1 = ($sub>>>0)<(5);
 $0 = $cmp | $cmp1;
 $lor$ext = $0&1;
 return ($lor$ext|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $c = 0, $call = 0, $call1 = 0, $cmp = 0, $conv = 0, $read = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c = sp;
 $call = (___toread($f)|0);
 $tobool = ($call|0)==(0);
 if ($tobool) {
  $read = ((($f)) + 32|0);
  $0 = HEAP32[$read>>2]|0;
  $call1 = (FUNCTION_TABLE_iiii[$0 & 127]($f,$c,1)|0);
  $cmp = ($call1|0)==(1);
  if ($cmp) {
   $1 = HEAP8[$c>>0]|0;
   $conv = $1&255;
   $retval$0 = $conv;
  } else {
   $retval$0 = -1;
  }
 } else {
  $retval$0 = -1;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___toread($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $cmp = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or9 = 0, $rend = 0, $retval$0 = 0;
 var $rpos = 0, $sext = 0, $sub = 0, $tobool = 0, $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = ((($f)) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $2 = HEAP32[$wbase>>2]|0;
 $cmp = ($1>>>0)>($2>>>0);
 if ($cmp) {
  $write = ((($f)) + 36|0);
  $3 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$3 & 127]($f,0,0)|0);
 }
 $wend = ((($f)) + 16|0);
 HEAP32[$wend>>2] = 0;
 HEAP32[$wbase>>2] = 0;
 HEAP32[$wpos>>2] = 0;
 $4 = HEAP32[$f>>2]|0;
 $and = $4 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $buf = ((($f)) + 44|0);
  $5 = HEAP32[$buf>>2]|0;
  $buf_size = ((($f)) + 48|0);
  $6 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($5) + ($6)|0);
  $rend = ((($f)) + 8|0);
  HEAP32[$rend>>2] = $add$ptr;
  $rpos = ((($f)) + 4|0);
  HEAP32[$rpos>>2] = $add$ptr;
  $7 = $4 << 27;
  $sext = $7 >> 31;
  $retval$0 = $sext;
 } else {
  $or9 = $4 | 32;
  HEAP32[$f>>2] = $or9;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $and = 0, $and3 = 0, $incdec$ptr = 0, $incdec$ptr1323 = 0, $incdec$ptr7 = 0, $lnot = 0, $neg = 0, $rem = 0, $rem13 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0, $s$addr$1$lcssa = 0;
 var $sub = 0, $sub$ptr$lhs$cast15 = 0, $sub$ptr$lhs$cast15$sink = 0, $sub$ptr$sub17 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool1021 = 0, $tobool14 = 0, $w$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $rem13 = $0 & 3;
 $tobool14 = ($rem13|0)==(0);
 L1: do {
  if ($tobool14) {
   $s$addr$0$lcssa = $s;
   label = 4;
  } else {
   $5 = $0;$s$addr$015 = $s;
   while(1) {
    $1 = HEAP8[$s$addr$015>>0]|0;
    $tobool1 = ($1<<24>>24)==(0);
    if ($tobool1) {
     $sub$ptr$lhs$cast15$sink = $5;
     break L1;
    }
    $incdec$ptr = ((($s$addr$015)) + 1|0);
    $2 = $incdec$ptr;
    $rem = $2 & 3;
    $tobool = ($rem|0)==(0);
    if ($tobool) {
     $s$addr$0$lcssa = $incdec$ptr;
     label = 4;
     break;
    } else {
     $5 = $2;$s$addr$015 = $incdec$ptr;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $s$addr$0$lcssa;
  while(1) {
   $3 = HEAP32[$w$0>>2]|0;
   $sub = (($3) + -16843009)|0;
   $neg = $3 & -2139062144;
   $and = $neg ^ -2139062144;
   $and3 = $and & $sub;
   $lnot = ($and3|0)==(0);
   $incdec$ptr7 = ((($w$0)) + 4|0);
   if ($lnot) {
    $w$0 = $incdec$ptr7;
   } else {
    break;
   }
  }
  $4 = $3&255;
  $tobool1021 = ($4<<24>>24)==(0);
  if ($tobool1021) {
   $s$addr$1$lcssa = $w$0;
  } else {
   $$pn = $w$0;
   while(1) {
    $incdec$ptr1323 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$incdec$ptr1323>>0]|0;
    $tobool10 = ($$pre<<24>>24)==(0);
    if ($tobool10) {
     $s$addr$1$lcssa = $incdec$ptr1323;
     break;
    } else {
     $$pn = $incdec$ptr1323;
    }
   }
  }
  $sub$ptr$lhs$cast15 = $s$addr$1$lcssa;
  $sub$ptr$lhs$cast15$sink = $sub$ptr$lhs$cast15;
 }
 $sub$ptr$sub17 = (($sub$ptr$lhs$cast15$sink) - ($0))|0;
 return ($sub$ptr$sub17|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $call = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___strchrnul($s,$c)|0);
 $0 = HEAP8[$call>>0]|0;
 $1 = $c&255;
 $cmp = ($0<<24>>24)==($1<<24>>24);
 $cond = $cmp ? $call : 0;
 return ($cond|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $and = 0, $and14 = 0, $and15 = 0, $and29 = 0, $and9 = 0, $and930 = 0, $call = 0, $cmp = 0, $cmp26 = 0, $conv1 = 0;
 var $incdec$ptr = 0, $incdec$ptr19 = 0, $incdec$ptr31 = 0, $lnot = 0, $mul = 0, $neg = 0, $neg13 = 0, $neg28 = 0, $or$cond = 0, $or$cond24 = 0, $rem = 0, $rem34 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$036 = 0, $s$addr$1 = 0, $sub = 0, $sub11 = 0, $sub27 = 0, $tobool = 0;
 var $tobool10 = 0, $tobool1031 = 0, $tobool2 = 0, $tobool23 = 0, $tobool235 = 0, $tobool3 = 0, $w$0$lcssa = 0, $w$032 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $tobool = ($conv1|0)==(0);
 L1: do {
  if ($tobool) {
   $call = (_strlen($s)|0);
   $add$ptr = (($s) + ($call)|0);
   $retval$0 = $add$ptr;
  } else {
   $0 = $s;
   $rem34 = $0 & 3;
   $tobool235 = ($rem34|0)==(0);
   if ($tobool235) {
    $s$addr$0$lcssa = $s;
   } else {
    $1 = $c&255;
    $s$addr$036 = $s;
    while(1) {
     $2 = HEAP8[$s$addr$036>>0]|0;
     $tobool3 = ($2<<24>>24)==(0);
     $cmp = ($2<<24>>24)==($1<<24>>24);
     $or$cond = $tobool3 | $cmp;
     if ($or$cond) {
      $retval$0 = $s$addr$036;
      break L1;
     }
     $incdec$ptr = ((($s$addr$036)) + 1|0);
     $3 = $incdec$ptr;
     $rem = $3 & 3;
     $tobool2 = ($rem|0)==(0);
     if ($tobool2) {
      $s$addr$0$lcssa = $incdec$ptr;
      break;
     } else {
      $s$addr$036 = $incdec$ptr;
     }
    }
   }
   $mul = Math_imul($conv1, 16843009)|0;
   $4 = HEAP32[$s$addr$0$lcssa>>2]|0;
   $sub27 = (($4) + -16843009)|0;
   $neg28 = $4 & -2139062144;
   $and29 = $neg28 ^ -2139062144;
   $and930 = $and29 & $sub27;
   $tobool1031 = ($and930|0)==(0);
   L10: do {
    if ($tobool1031) {
     $5 = $4;$w$032 = $s$addr$0$lcssa;
     while(1) {
      $xor = $5 ^ $mul;
      $sub11 = (($xor) + -16843009)|0;
      $neg13 = $xor & -2139062144;
      $and14 = $neg13 ^ -2139062144;
      $and15 = $and14 & $sub11;
      $lnot = ($and15|0)==(0);
      if (!($lnot)) {
       $w$0$lcssa = $w$032;
       break L10;
      }
      $incdec$ptr19 = ((($w$032)) + 4|0);
      $6 = HEAP32[$incdec$ptr19>>2]|0;
      $sub = (($6) + -16843009)|0;
      $neg = $6 & -2139062144;
      $and = $neg ^ -2139062144;
      $and9 = $and & $sub;
      $tobool10 = ($and9|0)==(0);
      if ($tobool10) {
       $5 = $6;$w$032 = $incdec$ptr19;
      } else {
       $w$0$lcssa = $incdec$ptr19;
       break;
      }
     }
    } else {
     $w$0$lcssa = $s$addr$0$lcssa;
    }
   } while(0);
   $7 = $c&255;
   $s$addr$1 = $w$0$lcssa;
   while(1) {
    $8 = HEAP8[$s$addr$1>>0]|0;
    $tobool23 = ($8<<24>>24)==(0);
    $cmp26 = ($8<<24>>24)==($7<<24>>24);
    $or$cond24 = $tobool23 | $cmp26;
    $incdec$ptr31 = ((($s$addr$1)) + 1|0);
    if ($or$cond24) {
     $retval$0 = $s$addr$1;
     break;
    } else {
     $s$addr$1 = $incdec$ptr31;
    }
   }
  }
 } while(0);
 return ($retval$0|0);
}
function _strcpy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($dest,$src)|0);
 return ($dest|0);
}
function ___stpcpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and28 = 0, $and7 = 0, $and729 = 0, $cmp = 0, $d$addr$0$lcssa = 0, $d$addr$037 = 0, $d$addr$1$ph = 0, $d$addr$124 = 0;
 var $incdec$ptr = 0, $incdec$ptr11 = 0, $incdec$ptr12 = 0, $incdec$ptr19 = 0, $incdec$ptr20 = 0, $incdec$ptr5 = 0, $lnot = 0, $lnot30 = 0, $neg = 0, $neg27 = 0, $rem2 = 0, $rem235 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$038 = 0, $s$addr$1$ph = 0, $s$addr$125 = 0, $sub = 0, $sub26 = 0, $tobool = 0;
 var $tobool16 = 0, $tobool1623 = 0, $tobool3 = 0, $tobool36 = 0, $wd$0$lcssa = 0, $wd$031 = 0, $ws$0$lcssa = 0, $ws$032 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $cmp = ($3|0)==(0);
 L1: do {
  if ($cmp) {
   $rem235 = $0 & 3;
   $tobool36 = ($rem235|0)==(0);
   if ($tobool36) {
    $d$addr$0$lcssa = $d;$s$addr$0$lcssa = $s;
   } else {
    $d$addr$037 = $d;$s$addr$038 = $s;
    while(1) {
     $4 = HEAP8[$s$addr$038>>0]|0;
     HEAP8[$d$addr$037>>0] = $4;
     $tobool3 = ($4<<24>>24)==(0);
     if ($tobool3) {
      $retval$0 = $d$addr$037;
      break L1;
     }
     $incdec$ptr = ((($s$addr$038)) + 1|0);
     $incdec$ptr5 = ((($d$addr$037)) + 1|0);
     $5 = $incdec$ptr;
     $rem2 = $5 & 3;
     $tobool = ($rem2|0)==(0);
     if ($tobool) {
      $d$addr$0$lcssa = $incdec$ptr5;$s$addr$0$lcssa = $incdec$ptr;
      break;
     } else {
      $d$addr$037 = $incdec$ptr5;$s$addr$038 = $incdec$ptr;
     }
    }
   }
   $6 = HEAP32[$s$addr$0$lcssa>>2]|0;
   $sub26 = (($6) + -16843009)|0;
   $neg27 = $6 & -2139062144;
   $and28 = $neg27 ^ -2139062144;
   $and729 = $and28 & $sub26;
   $lnot30 = ($and729|0)==(0);
   if ($lnot30) {
    $7 = $6;$wd$031 = $d$addr$0$lcssa;$ws$032 = $s$addr$0$lcssa;
    while(1) {
     $incdec$ptr11 = ((($ws$032)) + 4|0);
     $incdec$ptr12 = ((($wd$031)) + 4|0);
     HEAP32[$wd$031>>2] = $7;
     $8 = HEAP32[$incdec$ptr11>>2]|0;
     $sub = (($8) + -16843009)|0;
     $neg = $8 & -2139062144;
     $and = $neg ^ -2139062144;
     $and7 = $and & $sub;
     $lnot = ($and7|0)==(0);
     if ($lnot) {
      $7 = $8;$wd$031 = $incdec$ptr12;$ws$032 = $incdec$ptr11;
     } else {
      $wd$0$lcssa = $incdec$ptr12;$ws$0$lcssa = $incdec$ptr11;
      break;
     }
    }
   } else {
    $wd$0$lcssa = $d$addr$0$lcssa;$ws$0$lcssa = $s$addr$0$lcssa;
   }
   $d$addr$1$ph = $wd$0$lcssa;$s$addr$1$ph = $ws$0$lcssa;
   label = 8;
  } else {
   $d$addr$1$ph = $d;$s$addr$1$ph = $s;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $9 = HEAP8[$s$addr$1$ph>>0]|0;
  HEAP8[$d$addr$1$ph>>0] = $9;
  $tobool1623 = ($9<<24>>24)==(0);
  if ($tobool1623) {
   $retval$0 = $d$addr$1$ph;
  } else {
   $d$addr$124 = $d$addr$1$ph;$s$addr$125 = $s$addr$1$ph;
   while(1) {
    $incdec$ptr19 = ((($s$addr$125)) + 1|0);
    $incdec$ptr20 = ((($d$addr$124)) + 1|0);
    $10 = HEAP8[$incdec$ptr19>>0]|0;
    HEAP8[$incdec$ptr20>>0] = $10;
    $tobool16 = ($10<<24>>24)==(0);
    if ($tobool16) {
     $retval$0 = $incdec$ptr20;
     break;
    } else {
     $d$addr$124 = $incdec$ptr20;$s$addr$125 = $incdec$ptr19;
    }
   }
  }
 }
 return ($retval$0|0);
}
function _strncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($d,$s,$n)|0);
 return ($d|0);
}
function ___stpncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $and13 = 0, $and14 = 0, $and2 = 0, $and247 = 0, $cmp = 0, $cmp10 = 0, $cmp1037 = 0, $d$addr$0$lcssa = 0, $d$addr$0$lcssa63 = 0, $d$addr$051 = 0, $d$addr$1$ph = 0;
 var $d$addr$131 = 0, $d$addr$2 = 0, $dec = 0, $dec32 = 0, $incdec$ptr = 0, $incdec$ptr20 = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $incdec$ptr34 = 0, $incdec$ptr5 = 0, $lnot = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa65 = 0, $n$addr$053 = 0, $n$addr$1$lcssa = 0, $n$addr$138 = 0, $n$addr$2$ph = 0, $n$addr$233 = 0, $n$addr$3 = 0, $neg = 0;
 var $or$cond = 0, $or$cond50 = 0, $s$addr$0$lcssa = 0, $s$addr$0$lcssa64 = 0, $s$addr$052 = 0, $s$addr$1$ph = 0, $s$addr$132 = 0, $sub = 0, $sub19 = 0, $tobool = 0, $tobool25 = 0, $tobool2530 = 0, $tobool28 = 0, $tobool3 = 0, $tobool3$lcssa = 0, $tobool349 = 0, $tobool4 = 0, $tobool48 = 0, $tobool7 = 0, $wd$0$lcssa = 0;
 var $wd$039 = 0, $ws$0$lcssa = 0, $ws$040 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $cmp = ($3|0)==(0);
 do {
  if ($cmp) {
   $and247 = $0 & 3;
   $tobool48 = ($and247|0)!=(0);
   $tobool349 = ($n|0)!=(0);
   $or$cond50 = $tobool349 & $tobool48;
   L3: do {
    if ($or$cond50) {
     $d$addr$051 = $d;$n$addr$053 = $n;$s$addr$052 = $s;
     while(1) {
      $4 = HEAP8[$s$addr$052>>0]|0;
      HEAP8[$d$addr$051>>0] = $4;
      $tobool4 = ($4<<24>>24)==(0);
      if ($tobool4) {
       $d$addr$0$lcssa63 = $d$addr$051;$n$addr$0$lcssa65 = $n$addr$053;$s$addr$0$lcssa64 = $s$addr$052;
       break L3;
      }
      $dec = (($n$addr$053) + -1)|0;
      $incdec$ptr = ((($s$addr$052)) + 1|0);
      $incdec$ptr5 = ((($d$addr$051)) + 1|0);
      $5 = $incdec$ptr;
      $and2 = $5 & 3;
      $tobool = ($and2|0)!=(0);
      $tobool3 = ($dec|0)!=(0);
      $or$cond = $tobool3 & $tobool;
      if ($or$cond) {
       $d$addr$051 = $incdec$ptr5;$n$addr$053 = $dec;$s$addr$052 = $incdec$ptr;
      } else {
       $d$addr$0$lcssa = $incdec$ptr5;$n$addr$0$lcssa = $dec;$s$addr$0$lcssa = $incdec$ptr;$tobool3$lcssa = $tobool3;
       label = 5;
       break;
      }
     }
    } else {
     $d$addr$0$lcssa = $d;$n$addr$0$lcssa = $n;$s$addr$0$lcssa = $s;$tobool3$lcssa = $tobool349;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($tobool3$lcssa) {
     $d$addr$0$lcssa63 = $d$addr$0$lcssa;$n$addr$0$lcssa65 = $n$addr$0$lcssa;$s$addr$0$lcssa64 = $s$addr$0$lcssa;
    } else {
     $d$addr$2 = $d$addr$0$lcssa;$n$addr$3 = 0;
     break;
    }
   }
   $6 = HEAP8[$s$addr$0$lcssa64>>0]|0;
   $tobool7 = ($6<<24>>24)==(0);
   if ($tobool7) {
    $d$addr$2 = $d$addr$0$lcssa63;$n$addr$3 = $n$addr$0$lcssa65;
   } else {
    $cmp1037 = ($n$addr$0$lcssa65>>>0)>(3);
    L11: do {
     if ($cmp1037) {
      $n$addr$138 = $n$addr$0$lcssa65;$wd$039 = $d$addr$0$lcssa63;$ws$040 = $s$addr$0$lcssa64;
      while(1) {
       $7 = HEAP32[$ws$040>>2]|0;
       $sub = (($7) + -16843009)|0;
       $neg = $7 & -2139062144;
       $and13 = $neg ^ -2139062144;
       $and14 = $and13 & $sub;
       $lnot = ($and14|0)==(0);
       if (!($lnot)) {
        $n$addr$1$lcssa = $n$addr$138;$wd$0$lcssa = $wd$039;$ws$0$lcssa = $ws$040;
        break L11;
       }
       HEAP32[$wd$039>>2] = $7;
       $sub19 = (($n$addr$138) + -4)|0;
       $incdec$ptr20 = ((($ws$040)) + 4|0);
       $incdec$ptr21 = ((($wd$039)) + 4|0);
       $cmp10 = ($sub19>>>0)>(3);
       if ($cmp10) {
        $n$addr$138 = $sub19;$wd$039 = $incdec$ptr21;$ws$040 = $incdec$ptr20;
       } else {
        $n$addr$1$lcssa = $sub19;$wd$0$lcssa = $incdec$ptr21;$ws$0$lcssa = $incdec$ptr20;
        break;
       }
      }
     } else {
      $n$addr$1$lcssa = $n$addr$0$lcssa65;$wd$0$lcssa = $d$addr$0$lcssa63;$ws$0$lcssa = $s$addr$0$lcssa64;
     }
    } while(0);
    $d$addr$1$ph = $wd$0$lcssa;$n$addr$2$ph = $n$addr$1$lcssa;$s$addr$1$ph = $ws$0$lcssa;
    label = 11;
   }
  } else {
   $d$addr$1$ph = $d;$n$addr$2$ph = $n;$s$addr$1$ph = $s;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $tobool2530 = ($n$addr$2$ph|0)==(0);
   if ($tobool2530) {
    $d$addr$2 = $d$addr$1$ph;$n$addr$3 = 0;
   } else {
    $d$addr$131 = $d$addr$1$ph;$n$addr$233 = $n$addr$2$ph;$s$addr$132 = $s$addr$1$ph;
    while(1) {
     $8 = HEAP8[$s$addr$132>>0]|0;
     HEAP8[$d$addr$131>>0] = $8;
     $tobool28 = ($8<<24>>24)==(0);
     if ($tobool28) {
      $d$addr$2 = $d$addr$131;$n$addr$3 = $n$addr$233;
      break L16;
     }
     $dec32 = (($n$addr$233) + -1)|0;
     $incdec$ptr33 = ((($s$addr$132)) + 1|0);
     $incdec$ptr34 = ((($d$addr$131)) + 1|0);
     $tobool25 = ($dec32|0)==(0);
     if ($tobool25) {
      $d$addr$2 = $incdec$ptr34;$n$addr$3 = 0;
      break;
     } else {
      $d$addr$131 = $incdec$ptr34;$n$addr$233 = $dec32;$s$addr$132 = $incdec$ptr33;
     }
    }
   }
  }
 } while(0);
 _memset(($d$addr$2|0),0,($n$addr$3|0))|0;
 return ($d$addr$2|0);
}
function _strcat($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $add$ptr = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($dest)|0);
 $add$ptr = (($dest) + ($call)|0);
 (_strcpy($add$ptr,$src)|0);
 return ($dest|0);
}
function _toupper($c) {
 $c = $c|0;
 var $and = 0, $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_islower($c)|0);
 $tobool = ($call|0)==(0);
 $and = $c & 95;
 $retval$0 = $tobool ? $c : $and;
 return ($retval$0|0);
}
function _islower($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($c) + -97)|0;
 $cmp = ($sub>>>0)<(26);
 $conv = $cmp&1;
 return ($conv|0);
}
function ___procfdname($buf,$fd) {
 $buf = $buf|0;
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $add15 = 0, $arrayidx11 = 0, $arrayidx16 = 0, $arrayidx4 = 0, $conv = 0, $dec = 0, $div = 0, $div18 = 0, $fd$addr$020 = 0, $i$123 = 0, $i$221 = 0, $inc9 = 0, $j$024 = 0, $rem = 0, $scevgep = 0, $tobool2 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$buf; src=118851; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $tobool2 = ($fd|0)==(0);
 if ($tobool2) {
  $scevgep = ((($buf)) + 14|0);
  HEAP8[$scevgep>>0] = 48;
  $arrayidx4 = ((($buf)) + 15|0);
  HEAP8[$arrayidx4>>0] = 0;
 } else {
  $i$123 = 14;$j$024 = $fd;
  while(1) {
   $div = (($j$024>>>0) / 10)&-1;
   $inc9 = (($i$123) + 1)|0;
   $0 = ($j$024>>>0)<(10);
   if ($0) {
    break;
   } else {
    $i$123 = $inc9;$j$024 = $div;
   }
  }
  $arrayidx11 = (($buf) + ($inc9)|0);
  HEAP8[$arrayidx11>>0] = 0;
  $fd$addr$020 = $fd;$i$221 = $inc9;
  while(1) {
   $rem = (($fd$addr$020>>>0) % 10)&-1;
   $add15 = $rem | 48;
   $conv = $add15&255;
   $dec = (($i$221) + -1)|0;
   $arrayidx16 = (($buf) + ($dec)|0);
   HEAP8[$arrayidx16>>0] = $conv;
   $div18 = (($fd$addr$020>>>0) / 10)&-1;
   $1 = ($fd$addr$020>>>0)<(10);
   if ($1) {
    break;
   } else {
    $fd$addr$020 = $div18;$i$221 = $dec;
   }
  }
 }
 return;
}
function _fstat($fd,$st) {
 $fd = $fd|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $buf = 0, $call = 0, $call1 = 0, $call3 = 0, $call5 = 0, $call6 = 0, $cmp = 0, $cmp2 = 0, $retval$0 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 24|0;
 $0 = $st;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $call = (___syscall197(197,($vararg_buffer|0))|0);
 $cmp = ($call|0)==(-9);
 if ($cmp) {
  HEAP32[$vararg_buffer2>>2] = $fd;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 1;
  $call1 = (___syscall221(221,($vararg_buffer2|0))|0);
  $cmp2 = ($call1|0)<(0);
  if ($cmp2) {
   label = 3;
  } else {
   ___procfdname($buf,$fd);
   $1 = $buf;
   HEAP32[$vararg_buffer6>>2] = $1;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $0;
   $call5 = (___syscall195(195,($vararg_buffer6|0))|0);
   $call6 = (___syscall_ret($call5)|0);
   $retval$0 = $call6;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $call3 = (___syscall_ret($call)|0);
  $retval$0 = $call3;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $and = 0, $call1 = 0, $call12 = 0, $call2 = 0, $call3 = 0, $call4 = 0, $cmp = 0, $conv = 0, $memchr = 0, $or = 0, $retval$0 = 0, $tobool = 0, $tobool13 = 0, $tobool8 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $memchr = (_memchr(118866,$conv,4)|0);
 $tobool = ($memchr|0)==(0|0);
 if ($tobool) {
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 22;
  $retval$0 = 0;
 } else {
  $call2 = (___fmodeflags($mode)|0);
  $1 = $filename;
  $or = $call2 | 32768;
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $or;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $call3 = (___syscall5(5,($vararg_buffer|0))|0);
  $call4 = (___syscall_ret($call3)|0);
  $cmp = ($call4|0)<(0);
  if ($cmp) {
   $retval$0 = 0;
  } else {
   $and = $call2 & 524288;
   $tobool8 = ($and|0)==(0);
   if (!($tobool8)) {
    HEAP32[$vararg_buffer3>>2] = $call4;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $call12 = (___fdopen($call4,$mode)|0);
   $tobool13 = ($call12|0)==(0|0);
   if ($tobool13) {
    HEAP32[$vararg_buffer8>>2] = $call4;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $retval$0 = 0;
   } else {
    $retval$0 = $call12;
   }
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $0 = 0, $call = 0, $call5 = 0, $call9 = 0, $cmp15 = 0, $cmp21 = 0, $cmp27 = 0, $flags$0 = 0, $flags$0$or = 0, $flags$2 = 0, $flags$2$or18 = 0, $flags$4 = 0, $not$cmp = 0, $or = 0, $or12 = 0, $or18 = 0, $or24 = 0, $or30 = 0, $or30$flags$4 = 0;
 var $tobool = 0, $tobool10 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strchr($mode,43)|0);
 $tobool = ($call|0)==(0|0);
 $0 = HEAP8[$mode>>0]|0;
 $not$cmp = ($0<<24>>24)!=(114);
 $$ = $not$cmp&1;
 $flags$0 = $tobool ? $$ : 2;
 $call5 = (_strchr($mode,120)|0);
 $tobool6 = ($call5|0)==(0|0);
 $or = $flags$0 | 128;
 $flags$0$or = $tobool6 ? $flags$0 : $or;
 $call9 = (_strchr($mode,101)|0);
 $tobool10 = ($call9|0)==(0|0);
 $or12 = $flags$0$or | 524288;
 $flags$2 = $tobool10 ? $flags$0$or : $or12;
 $cmp15 = ($0<<24>>24)==(114);
 $or18 = $flags$2 | 64;
 $flags$2$or18 = $cmp15 ? $flags$2 : $or18;
 $cmp21 = ($0<<24>>24)==(119);
 $or24 = $flags$2$or18 | 512;
 $flags$4 = $cmp21 ? $or24 : $flags$2$or18;
 $cmp27 = ($0<<24>>24)==(97);
 $or30 = $flags$4 | 1024;
 $or30$flags$4 = $cmp27 ? $or30 : $flags$4;
 return ($or30$flags$4|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$pre = 0, $$pre27 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add$ptr31 = 0, $and = 0, $and33 = 0, $buf = 0, $buf_size = 0, $call1 = 0, $call12 = 0, $call2 = 0, $call22 = 0, $call35 = 0, $call43 = 0;
 var $call6 = 0, $close = 0, $cmp = 0, $cmp18 = 0, $cond = 0, $conv = 0, $fd30 = 0, $lock = 0, $memchr = 0, $or = 0, $or28 = 0, $read = 0, $retval$0 = 0, $seek = 0, $tobool = 0, $tobool13 = 0, $tobool23 = 0, $tobool3 = 0, $tobool34 = 0, $tobool36 = 0;
 var $tobool40 = 0, $tobool7 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $write = 0, $wsz = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $wsz = sp + 56|0;
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $memchr = (_memchr(118866,$conv,4)|0);
 $tobool = ($memchr|0)==(0|0);
 if ($tobool) {
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 22;
  $retval$0 = 0;
 } else {
  $call2 = (_malloc(1156)|0);
  $tobool3 = ($call2|0)==(0|0);
  if ($tobool3) {
   $retval$0 = 0;
  } else {
   dest=$call2; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $call6 = (_strchr($mode,43)|0);
   $tobool7 = ($call6|0)==(0|0);
   if ($tobool7) {
    $cmp = ($0<<24>>24)==(114);
    $cond = $cmp ? 8 : 4;
    HEAP32[$call2>>2] = $cond;
   }
   $call12 = (_strchr($mode,101)|0);
   $tobool13 = ($call12|0)==(0|0);
   if ($tobool13) {
    $1 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $1 = $$pre;
   }
   $cmp18 = ($1<<24>>24)==(97);
   if ($cmp18) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $call22 = (___syscall221(221,($vararg_buffer3|0))|0);
    $and = $call22 & 1024;
    $tobool23 = ($and|0)==(0);
    if ($tobool23) {
     $or = $call22 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $or;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $2 = HEAP32[$call2>>2]|0;
    $or28 = $2 | 128;
    HEAP32[$call2>>2] = $or28;
    $4 = $or28;
   } else {
    $$pre27 = HEAP32[$call2>>2]|0;
    $4 = $$pre27;
   }
   $fd30 = ((($call2)) + 60|0);
   HEAP32[$fd30>>2] = $fd;
   $add$ptr31 = ((($call2)) + 132|0);
   $buf = ((($call2)) + 44|0);
   HEAP32[$buf>>2] = $add$ptr31;
   $buf_size = ((($call2)) + 48|0);
   HEAP32[$buf_size>>2] = 1024;
   $3 = ((($call2)) + 75|0);
   HEAP8[$3>>0] = -1;
   $and33 = $4 & 8;
   $tobool34 = ($and33|0)==(0);
   if ($tobool34) {
    $5 = $wsz;
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $5;
    $call35 = (___syscall54(54,($vararg_buffer12|0))|0);
    $tobool36 = ($call35|0)==(0);
    if ($tobool36) {
     HEAP8[$3>>0] = 10;
    }
   }
   $read = ((($call2)) + 32|0);
   HEAP32[$read>>2] = 68;
   $write = ((($call2)) + 36|0);
   HEAP32[$write>>2] = 66;
   $seek = ((($call2)) + 40|0);
   HEAP32[$seek>>2] = 67;
   $close = ((($call2)) + 12|0);
   HEAP32[$close>>2] = 65;
   $6 = HEAP32[(119544)>>2]|0;
   $tobool40 = ($6|0)==(0);
   if ($tobool40) {
    $lock = ((($call2)) + 76|0);
    HEAP32[$lock>>2] = -1;
   }
   $call43 = (___ofl_add($call2)|0);
   $retval$0 = $call2;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___ofl_add($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $call = 0, $next = 0, $prev = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___ofl_lock()|0);
 $0 = HEAP32[$call>>2]|0;
 $next = ((($f)) + 56|0);
 HEAP32[$next>>2] = $0;
 $1 = HEAP32[$call>>2]|0;
 $tobool = ($1|0)==(0|0);
 if (!($tobool)) {
  $prev = ((($1)) + 52|0);
  HEAP32[$prev>>2] = $f;
 }
 HEAP32[$call>>2] = $f;
 ___ofl_unlock();
 return ($f|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((119604|0));
 return (119612|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((119604|0));
 return;
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $and = 0, $call = 0, $call1 = 0, $call18 = 0, $call19 = 0, $close = 0, $cmp = 0, $cmp13 = 0, $cond = 0, $getln_buf = 0;
 var $lock = 0, $next5 = 0, $or = 0, $prev = 0, $prev11 = 0, $tobool = 0, $tobool2 = 0, $tobool20 = 0, $tobool26 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 ___unlist_locked_file($f);
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 1;
 $tobool = ($and|0)!=(0);
 if (!($tobool)) {
  $call1 = (___ofl_lock()|0);
  $prev = ((($f)) + 52|0);
  $2 = HEAP32[$prev>>2]|0;
  $tobool2 = ($2|0)==(0|0);
  $3 = $2;
  $$pre = ((($f)) + 56|0);
  if (!($tobool2)) {
   $4 = HEAP32[$$pre>>2]|0;
   $next5 = ((($2)) + 56|0);
   HEAP32[$next5>>2] = $4;
  }
  $5 = HEAP32[$$pre>>2]|0;
  $tobool7 = ($5|0)==(0|0);
  if (!($tobool7)) {
   $prev11 = ((($5)) + 52|0);
   HEAP32[$prev11>>2] = $3;
  }
  $6 = HEAP32[$call1>>2]|0;
  $cmp13 = ($6|0)==($f|0);
  if ($cmp13) {
   HEAP32[$call1>>2] = $5;
  }
  ___ofl_unlock();
 }
 $call18 = (_fflush($f)|0);
 $close = ((($f)) + 12|0);
 $7 = HEAP32[$close>>2]|0;
 $call19 = (FUNCTION_TABLE_ii[$7 & 127]($f)|0);
 $or = $call19 | $call18;
 $getln_buf = ((($f)) + 92|0);
 $8 = HEAP32[$getln_buf>>2]|0;
 $tobool20 = ($8|0)==(0|0);
 if (!($tobool20)) {
  _free($8);
 }
 if ($tobool) {
  $tobool26 = ($cond|0)==(0);
  if (!($tobool26)) {
   ___unlockfile($f);
  }
 } else {
  _free($f);
 }
 return ($or|0);
}
function ___unlist_locked_file($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $lockcount = 0, $next_locked = 0, $next_locked10 = 0, $next_locked10$sink = 0, $prev_locked4 = 0, $stdio_locks = 0, $tobool = 0, $tobool1 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lockcount = ((($f)) + 68|0);
 $0 = HEAP32[$lockcount>>2]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  $next_locked = ((($f)) + 116|0);
  $1 = HEAP32[$next_locked>>2]|0;
  $tobool1 = ($1|0)==(0|0);
  $$pre = ((($f)) + 112|0);
  if (!($tobool1)) {
   $2 = HEAP32[$$pre>>2]|0;
   $prev_locked4 = ((($1)) + 112|0);
   HEAP32[$prev_locked4>>2] = $2;
  }
  $3 = HEAP32[$$pre>>2]|0;
  $tobool6 = ($3|0)==(0|0);
  if ($tobool6) {
   $call = (___pthread_self_460()|0);
   $stdio_locks = ((($call)) + 232|0);
   $next_locked10$sink = $stdio_locks;
  } else {
   $next_locked10 = ((($3)) + 116|0);
   $next_locked10$sink = $next_locked10;
  }
  HEAP32[$next_locked10$sink>>2] = $1;
 }
 return;
}
function _fflush($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $call11 = 0, $call118 = 0, $call17 = 0, $call23 = 0, $call7 = 0, $cmp = 0, $cmp15 = 0, $cmp21 = 0, $cond10 = 0, $cond20 = 0, $f$addr$0 = 0, $f$addr$019 = 0;
 var $f$addr$022 = 0, $lock = 0, $lock14 = 0, $next = 0, $or = 0, $phitmp = 0, $r$0$lcssa = 0, $r$021 = 0, $r$1 = 0, $retval$0 = 0, $tobool = 0, $tobool12 = 0, $tobool1220 = 0, $tobool25 = 0, $tobool5 = 0, $wbase = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($f|0)==(0|0);
 do {
  if ($tobool) {
   $1 = HEAP32[8013]|0;
   $tobool5 = ($1|0)==(0|0);
   if ($tobool5) {
    $cond10 = 0;
   } else {
    $2 = HEAP32[8013]|0;
    $call7 = (_fflush($2)|0);
    $cond10 = $call7;
   }
   $call11 = (___ofl_lock()|0);
   $f$addr$019 = HEAP32[$call11>>2]|0;
   $tobool1220 = ($f$addr$019|0)==(0|0);
   if ($tobool1220) {
    $r$0$lcssa = $cond10;
   } else {
    $f$addr$022 = $f$addr$019;$r$021 = $cond10;
    while(1) {
     $lock14 = ((($f$addr$022)) + 76|0);
     $3 = HEAP32[$lock14>>2]|0;
     $cmp15 = ($3|0)>(-1);
     if ($cmp15) {
      $call17 = (___lockfile($f$addr$022)|0);
      $cond20 = $call17;
     } else {
      $cond20 = 0;
     }
     $wpos = ((($f$addr$022)) + 20|0);
     $4 = HEAP32[$wpos>>2]|0;
     $wbase = ((($f$addr$022)) + 28|0);
     $5 = HEAP32[$wbase>>2]|0;
     $cmp21 = ($4>>>0)>($5>>>0);
     if ($cmp21) {
      $call23 = (___fflush_unlocked($f$addr$022)|0);
      $or = $call23 | $r$021;
      $r$1 = $or;
     } else {
      $r$1 = $r$021;
     }
     $tobool25 = ($cond20|0)==(0);
     if (!($tobool25)) {
      ___unlockfile($f$addr$022);
     }
     $next = ((($f$addr$022)) + 56|0);
     $f$addr$0 = HEAP32[$next>>2]|0;
     $tobool12 = ($f$addr$0|0)==(0|0);
     if ($tobool12) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $f$addr$022 = $f$addr$0;$r$021 = $r$1;
     }
    }
   }
   ___ofl_unlock();
   $retval$0 = $r$0$lcssa;
  } else {
   $lock = ((($f)) + 76|0);
   $0 = HEAP32[$lock>>2]|0;
   $cmp = ($0|0)>(-1);
   if (!($cmp)) {
    $call118 = (___fflush_unlocked($f)|0);
    $retval$0 = $call118;
    break;
   }
   $call = (___lockfile($f)|0);
   $phitmp = ($call|0)==(0);
   $call1 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $retval$0 = $call1;
   } else {
    ___unlockfile($f);
    $retval$0 = $call1;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cmp = 0, $cmp4 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $seek = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $wbase = 0, $wend = 0, $wpos = 0;
 var $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wpos = ((($f)) + 20|0);
 $0 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $1 = HEAP32[$wbase>>2]|0;
 $cmp = ($0>>>0)>($1>>>0);
 if ($cmp) {
  $write = ((($f)) + 36|0);
  $2 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$2 & 127]($f,0,0)|0);
  $3 = HEAP32[$wpos>>2]|0;
  $tobool = ($3|0)==(0|0);
  if ($tobool) {
   $retval$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $rpos = ((($f)) + 4|0);
  $4 = HEAP32[$rpos>>2]|0;
  $rend = ((($f)) + 8|0);
  $5 = HEAP32[$rend>>2]|0;
  $cmp4 = ($4>>>0)<($5>>>0);
  if ($cmp4) {
   $sub$ptr$lhs$cast = $4;
   $sub$ptr$rhs$cast = $5;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $seek = ((($f)) + 40|0);
   $6 = HEAP32[$seek>>2]|0;
   (FUNCTION_TABLE_iiii[$6 & 127]($f,$sub$ptr$sub,1)|0);
  }
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = 0;
  HEAP32[$wbase>>2] = 0;
  HEAP32[$wpos>>2] = 0;
  HEAP32[$rend>>2] = 0;
  HEAP32[$rpos>>2] = 0;
  $retval$0 = 0;
 }
 return ($retval$0|0);
}
function ___pthread_self_460() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _fputs($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var $call = 0, $call1 = 0, $not$cmp = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($s)|0);
 $call1 = (_fwrite($s,1,$call,$f)|0);
 $not$cmp = ($call1|0)!=($call|0);
 $sub = $not$cmp << 31 >> 31;
 return ($sub|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$nmemb = 0, $0 = 0, $call = 0, $call1 = 0, $call112 = 0, $call113 = 0, $cmp = 0, $cmp5 = 0, $cond9 = 0, $div = 0, $lock = 0, $mul = 0, $phitmp = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = Math_imul($nmemb, $size)|0;
 $tobool = ($size|0)==(0);
 $$nmemb = $tobool ? 0 : $nmemb;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  $call1 = (___fwritex($src,$mul,$f)|0);
  if ($phitmp) {
   $call113 = $call1;
  } else {
   ___unlockfile($f);
   $call113 = $call1;
  }
 } else {
  $call112 = (___fwritex($src,$mul,$f)|0);
  $call113 = $call112;
 }
 $cmp5 = ($call113|0)==($mul|0);
 if ($cmp5) {
  $cond9 = $$nmemb;
 } else {
  $div = (($call113>>>0) / ($size>>>0))&-1;
  $cond9 = $div;
 }
 return ($cond9|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c = 0, $call = 0, $call13 = 0, $cmp = 0, $cmp14 = 0, $cmp7 = 0, $conv = 0, $conv18 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $lbf = 0, $retval$0 = 0;
 var $tobool = 0, $tobool1 = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c = sp;
 $conv = $_c&255;
 HEAP8[$c>>0] = $conv;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $2 = $$pre;
   label = 4;
  } else {
   $retval$0 = -1;
  }
 } else {
  $2 = $0;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $wpos = ((($f)) + 20|0);
   $1 = HEAP32[$wpos>>2]|0;
   $cmp = ($1>>>0)<($2>>>0);
   if ($cmp) {
    $conv5 = $_c & 255;
    $lbf = ((($f)) + 75|0);
    $3 = HEAP8[$lbf>>0]|0;
    $conv6 = $3 << 24 >> 24;
    $cmp7 = ($conv5|0)==($conv6|0);
    if (!($cmp7)) {
     $incdec$ptr = ((($1)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$1>>0] = $conv;
     $retval$0 = $conv5;
     break;
    }
   }
   $write = ((($f)) + 36|0);
   $4 = HEAP32[$write>>2]|0;
   $call13 = (FUNCTION_TABLE_iiii[$4 & 127]($f,$c,1)|0);
   $cmp14 = ($call13|0)==(1);
   if ($cmp14) {
    $5 = HEAP8[$c>>0]|0;
    $conv18 = $5&255;
    $retval$0 = $conv18;
   } else {
    $retval$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function _isalpha($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $or = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $or = $c | 32;
 $sub = (($or) + -97)|0;
 $cmp = ($sub>>>0)<(26);
 $conv = $cmp&1;
 return ($conv|0);
}
function _getc($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call13 = 0, $call3 = 0, $cmp = 0, $cmp1 = 0, $cmp6 = 0, $cond15 = 0, $conv = 0, $conv11 = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $lock = 0, $rend = 0;
 var $rend5 = 0, $retval$0 = 0, $rpos = 0, $rpos4 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)<(0);
 if ($cmp) {
  label = 3;
 } else {
  $call = (___lockfile($f)|0);
  $tobool = ($call|0)==(0);
  if ($tobool) {
   label = 3;
  } else {
   $rpos4 = ((($f)) + 4|0);
   $4 = HEAP32[$rpos4>>2]|0;
   $rend5 = ((($f)) + 8|0);
   $5 = HEAP32[$rend5>>2]|0;
   $cmp6 = ($4>>>0)<($5>>>0);
   if ($cmp6) {
    $incdec$ptr10 = ((($4)) + 1|0);
    HEAP32[$rpos4>>2] = $incdec$ptr10;
    $6 = HEAP8[$4>>0]|0;
    $conv11 = $6&255;
    $cond15 = $conv11;
   } else {
    $call13 = (___uflow($f)|0);
    $cond15 = $call13;
   }
   ___unlockfile($f);
   $retval$0 = $cond15;
  }
 }
 do {
  if ((label|0) == 3) {
   $rpos = ((($f)) + 4|0);
   $1 = HEAP32[$rpos>>2]|0;
   $rend = ((($f)) + 8|0);
   $2 = HEAP32[$rend>>2]|0;
   $cmp1 = ($1>>>0)<($2>>>0);
   if ($cmp1) {
    $incdec$ptr = ((($1)) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr;
    $3 = HEAP8[$1>>0]|0;
    $conv = $3&255;
    $retval$0 = $conv;
    break;
   } else {
    $call3 = (___uflow($f)|0);
    $retval$0 = $call3;
    break;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[7981]|0;
 $call = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _fgetc($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call13 = 0, $call3 = 0, $cmp = 0, $cmp1 = 0, $cmp6 = 0, $cond15 = 0, $conv = 0, $conv11 = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $lock = 0, $rend = 0;
 var $rend5 = 0, $retval$0 = 0, $rpos = 0, $rpos4 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)<(0);
 if ($cmp) {
  label = 3;
 } else {
  $call = (___lockfile($f)|0);
  $tobool = ($call|0)==(0);
  if ($tobool) {
   label = 3;
  } else {
   $rpos4 = ((($f)) + 4|0);
   $4 = HEAP32[$rpos4>>2]|0;
   $rend5 = ((($f)) + 8|0);
   $5 = HEAP32[$rend5>>2]|0;
   $cmp6 = ($4>>>0)<($5>>>0);
   if ($cmp6) {
    $incdec$ptr10 = ((($4)) + 1|0);
    HEAP32[$rpos4>>2] = $incdec$ptr10;
    $6 = HEAP8[$4>>0]|0;
    $conv11 = $6&255;
    $cond15 = $conv11;
   } else {
    $call13 = (___uflow($f)|0);
    $cond15 = $call13;
   }
   ___unlockfile($f);
   $retval$0 = $cond15;
  }
 }
 do {
  if ((label|0) == 3) {
   $rpos = ((($f)) + 4|0);
   $1 = HEAP32[$rpos>>2]|0;
   $rend = ((($f)) + 8|0);
   $2 = HEAP32[$rend>>2]|0;
   $cmp1 = ($1>>>0)<($2>>>0);
   if ($cmp1) {
    $incdec$ptr = ((($1)) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr;
    $3 = HEAP8[$1>>0]|0;
    $conv = $3&255;
    $retval$0 = $conv;
    break;
   } else {
    $call3 = (___uflow($f)|0);
    $retval$0 = $call3;
    break;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function _perror($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call1 = 0, $call2 = 0, $call4 = 0, $call8 = 0, $cmp = 0, $cond = 0, $lock = 0, $tobool = 0, $tobool11 = 0, $tobool3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7856]|0;
 $call = (___errno_location()|0);
 $1 = HEAP32[$call>>2]|0;
 $call1 = (_strerror($1)|0);
 $lock = ((($0)) + 76|0);
 $2 = HEAP32[$lock>>2]|0;
 $cmp = ($2|0)>(-1);
 if ($cmp) {
  $call2 = (___lockfile($0)|0);
  $cond = $call2;
 } else {
  $cond = 0;
 }
 $tobool = ($msg|0)==(0|0);
 if (!($tobool)) {
  $3 = HEAP8[$msg>>0]|0;
  $tobool3 = ($3<<24>>24)==(0);
  if (!($tobool3)) {
   $call4 = (_strlen($msg)|0);
   (_fwrite($msg,$call4,1,$0)|0);
   (_fputc(58,$0)|0);
   (_fputc(32,$0)|0);
  }
 }
 $call8 = (_strlen($call1)|0);
 (_fwrite($call1,$call8,1,$0)|0);
 (_fputc(10,$0)|0);
 $tobool11 = ($cond|0)==(0);
 if (!($tobool11)) {
  ___unlockfile($0);
 }
 return;
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call10 = 0, $call28 = 0, $cmp = 0, $cmp15 = 0, $cmp20 = 0, $cmp3 = 0, $cmp5 = 0, $cond30 = 0, $conv = 0, $conv1 = 0, $conv14 = 0, $conv2 = 0;
 var $incdec$ptr = 0, $incdec$ptr25 = 0, $lbf = 0, $lbf13 = 0, $lock = 0, $retval$0 = 0, $tobool = 0, $wend = 0, $wend19 = 0, $wpos = 0, $wpos18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)<(0);
 $conv = $c&255;
 $conv1 = $c & 255;
 if ($cmp) {
  label = 3;
 } else {
  $call = (___lockfile($f)|0);
  $tobool = ($call|0)==(0);
  if ($tobool) {
   label = 3;
  } else {
   $lbf13 = ((($f)) + 75|0);
   $4 = HEAP8[$lbf13>>0]|0;
   $conv14 = $4 << 24 >> 24;
   $cmp15 = ($conv1|0)==($conv14|0);
   if ($cmp15) {
    label = 10;
   } else {
    $wpos18 = ((($f)) + 20|0);
    $5 = HEAP32[$wpos18>>2]|0;
    $wend19 = ((($f)) + 16|0);
    $6 = HEAP32[$wend19>>2]|0;
    $cmp20 = ($5>>>0)<($6>>>0);
    if ($cmp20) {
     $incdec$ptr25 = ((($5)) + 1|0);
     HEAP32[$wpos18>>2] = $incdec$ptr25;
     HEAP8[$5>>0] = $conv;
     $cond30 = $conv1;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $call28 = (___overflow($f,$c)|0);
    $cond30 = $call28;
   }
   ___unlockfile($f);
   $retval$0 = $cond30;
  }
 }
 do {
  if ((label|0) == 3) {
   $lbf = ((($f)) + 75|0);
   $1 = HEAP8[$lbf>>0]|0;
   $conv2 = $1 << 24 >> 24;
   $cmp3 = ($conv1|0)==($conv2|0);
   if (!($cmp3)) {
    $wpos = ((($f)) + 20|0);
    $2 = HEAP32[$wpos>>2]|0;
    $wend = ((($f)) + 16|0);
    $3 = HEAP32[$wend>>2]|0;
    $cmp5 = ($2>>>0)<($3>>>0);
    if ($cmp5) {
     $incdec$ptr = ((($2)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$2>>0] = $conv;
     $retval$0 = $conv1;
     break;
    }
   }
   $call10 = (___overflow($f,$c)|0);
   $retval$0 = $call10;
  }
 } while(0);
 return ($retval$0|0);
}
function _putchar($c) {
 $c = $c|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7981]|0;
 $call = (_fputc($c,$0)|0);
 return ($call|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$nmemb = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add = 0, $add$ptr = 0, $add$ptr25 = 0, $add$ptr45 = 0, $call = 0, $call29 = 0, $call33 = 0, $cmp = 0, $cmp12 = 0, $cmp36 = 0, $cmp4 = 0, $cond = 0, $conv = 0, $conv3 = 0;
 var $dest$0$ph = 0, $dest$046 = 0, $div = 0, $l$0$ph = 0, $l$047 = 0, $lock = 0, $mode = 0, $mul = 0, $or = 0, $read = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub$mul = 0, $sub26 = 0, $sub42 = 0, $sub44 = 0;
 var $tobool = 0, $tobool28 = 0, $tobool2845 = 0, $tobool30 = 0, $tobool39 = 0, $tobool46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = Math_imul($nmemb, $size)|0;
 $tobool = ($size|0)==(0);
 $$nmemb = $tobool ? 0 : $nmemb;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 $mode = ((($f)) + 74|0);
 $1 = HEAP8[$mode>>0]|0;
 $conv = $1 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $rend = ((($f)) + 8|0);
 $2 = HEAP32[$rend>>2]|0;
 $rpos = ((($f)) + 4|0);
 $3 = HEAP32[$rpos>>2]|0;
 $sub$ptr$rhs$cast = $3;
 $sub$ptr$sub = (($2) - ($sub$ptr$rhs$cast))|0;
 $cmp4 = ($sub$ptr$sub|0)>(0);
 $cmp12 = ($sub$ptr$sub>>>0)<($mul>>>0);
 $sub$ptr$sub$mul = $cmp12 ? $sub$ptr$sub : $mul;
 if ($cmp4) {
  $sub26 = (($mul) - ($sub$ptr$sub$mul))|0;
  $add$ptr25 = (($destv) + ($sub$ptr$sub$mul)|0);
  _memcpy(($destv|0),($3|0),($sub$ptr$sub$mul|0))|0;
  $add$ptr = (($3) + ($sub$ptr$sub$mul)|0);
  HEAP32[$rpos>>2] = $add$ptr;
  $dest$0$ph = $add$ptr25;$l$0$ph = $sub26;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $mul;
 }
 $tobool2845 = ($l$0$ph|0)==(0);
 L7: do {
  if ($tobool2845) {
   label = 13;
  } else {
   $read = ((($f)) + 32|0);
   $dest$046 = $dest$0$ph;$l$047 = $l$0$ph;
   while(1) {
    $call29 = (___toread($f)|0);
    $tobool30 = ($call29|0)==(0);
    if (!($tobool30)) {
     break;
    }
    $4 = HEAP32[$read>>2]|0;
    $call33 = (FUNCTION_TABLE_iiii[$4 & 127]($f,$dest$046,$l$047)|0);
    $add = (($call33) + 1)|0;
    $cmp36 = ($add>>>0)<(2);
    if ($cmp36) {
     break;
    }
    $sub44 = (($l$047) - ($call33))|0;
    $add$ptr45 = (($dest$046) + ($call33)|0);
    $tobool28 = ($sub44|0)==(0);
    if ($tobool28) {
     label = 13;
     break L7;
    } else {
     $dest$046 = $add$ptr45;$l$047 = $sub44;
    }
   }
   $tobool39 = ($cond|0)==(0);
   if (!($tobool39)) {
    ___unlockfile($f);
   }
   $sub42 = (($mul) - ($l$047))|0;
   $div = (($sub42>>>0) / ($size>>>0))&-1;
   $retval$0 = $div;
  }
 } while(0);
 if ((label|0) == 13) {
  $tobool46 = ($cond|0)==(0);
  if ($tobool46) {
   $retval$0 = $$nmemb;
  } else {
   ___unlockfile($f);
   $retval$0 = $$nmemb;
  }
 }
 return ($retval$0|0);
}
function _fileno($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $call = 0, $cmp = 0, $fd = 0, $lock = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  if (!($phitmp)) {
  }
 }
 $fd = ((($f)) + 60|0);
 $1 = HEAP32[$fd>>2]|0;
 return ($1|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $and = 0, $call = 0, $cmp = 0, $cmp1 = 0, $phitmp = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $seek = 0, $sub = 0;
 var $sub$ptr$sub11 = 0, $sub$ptr$sub6 = 0, $tobool = 0, $wbase = 0, $wbase3 = 0, $wpos = 0, $wpos2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $seek = ((($f)) + 40|0);
 $0 = HEAP32[$seek>>2]|0;
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 128;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $4 = 1;
 } else {
  $wpos = ((($f)) + 20|0);
  $2 = HEAP32[$wpos>>2]|0;
  $wbase = ((($f)) + 28|0);
  $3 = HEAP32[$wbase>>2]|0;
  $cmp = ($2>>>0)>($3>>>0);
  $phitmp = $cmp ? 2 : 1;
  $4 = $phitmp;
 }
 $call = (FUNCTION_TABLE_iiii[$0 & 127]($f,0,$4)|0);
 $cmp1 = ($call|0)<(0);
 if ($cmp1) {
  $retval$0 = $call;
 } else {
  $rend = ((($f)) + 8|0);
  $5 = HEAP32[$rend>>2]|0;
  $rpos = ((($f)) + 4|0);
  $6 = HEAP32[$rpos>>2]|0;
  $wpos2 = ((($f)) + 20|0);
  $7 = HEAP32[$wpos2>>2]|0;
  $wbase3 = ((($f)) + 28|0);
  $8 = HEAP32[$wbase3>>2]|0;
  $sub$ptr$sub6 = (($call) - ($5))|0;
  $sub$ptr$sub11 = (($sub$ptr$sub6) + ($6))|0;
  $sub = (($sub$ptr$sub11) + ($7))|0;
  $add = (($sub) - ($8))|0;
  $retval$0 = $add;
 }
 return ($retval$0|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $call = 0, $call1 = 0, $call16 = 0, $call17 = 0, $cmp = 0, $lock = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  $call1 = (___ftello_unlocked($f)|0);
  if ($phitmp) {
   $call17 = $call1;
  } else {
   $call17 = $call1;
  }
 } else {
  $call16 = (___ftello_unlocked($f)|0);
  $call17 = $call16;
 }
 return ($call17|0);
}
function _ftell($f) {
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___ftello($f)|0);
 return ($call|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($c) + -48)|0;
 $cmp = ($sub>>>0)<(10);
 $conv = $cmp&1;
 return ($conv|0);
}
function _atoi($s) {
 $s = $s|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $call = 0, $cond = 0, $conv = 0, $conv5 = 0, $conv58 = 0, $incdec$ptr = 0, $incdec$ptr9 = 0, $isdigit = 0, $isdigit10 = 0, $isdigittmp = 0, $isdigittmp13 = 0, $isdigittmp9 = 0, $mul = 0, $n$0$lcssa = 0, $n$012 = 0, $neg$0 = 0;
 var $neg$1$ph = 0, $s$addr$0 = 0, $s$addr$1$ph = 0, $s$addr$111 = 0, $sub11 = 0, $sub14 = 0, $tobool = 0, $tobool13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $s$addr$0 = $s;
 while(1) {
  $0 = HEAP8[$s$addr$0>>0]|0;
  $conv = $0 << 24 >> 24;
  $call = (_isspace($conv)|0);
  $tobool = ($call|0)==(0);
  $incdec$ptr = ((($s$addr$0)) + 1|0);
  if ($tobool) {
   break;
  } else {
   $s$addr$0 = $incdec$ptr;
  }
 }
 switch ($conv|0) {
 case 45:  {
  $neg$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $neg$0 = 0;
  label = 5;
  break;
 }
 default: {
  $1 = $0;$neg$1$ph = 0;$s$addr$1$ph = $s$addr$0;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$incdec$ptr>>0]|0;
  $1 = $$pre;$neg$1$ph = $neg$0;$s$addr$1$ph = $incdec$ptr;
 }
 $conv58 = $1 << 24 >> 24;
 $isdigittmp9 = (($conv58) + -48)|0;
 $isdigit10 = ($isdigittmp9>>>0)<(10);
 if ($isdigit10) {
  $isdigittmp13 = $isdigittmp9;$n$012 = 0;$s$addr$111 = $s$addr$1$ph;
  while(1) {
   $mul = ($n$012*10)|0;
   $incdec$ptr9 = ((($s$addr$111)) + 1|0);
   $sub11 = (($mul) - ($isdigittmp13))|0;
   $2 = HEAP8[$incdec$ptr9>>0]|0;
   $conv5 = $2 << 24 >> 24;
   $isdigittmp = (($conv5) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $isdigittmp13 = $isdigittmp;$n$012 = $sub11;$s$addr$111 = $incdec$ptr9;
   } else {
    $n$0$lcssa = $sub11;
    break;
   }
  }
 } else {
  $n$0$lcssa = 0;
 }
 $tobool13 = ($neg$1$ph|0)!=(0);
 $sub14 = (0 - ($n$0$lcssa))|0;
 $cond = $tobool13 ? $n$0$lcssa : $sub14;
 return ($cond|0);
}
function _bsearch($key,$base,$nel,$width,$cmp) {
 $key = $key|0;
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $add$ptr = 0, $base$addr$0$add$ptr = 0, $base$addr$013 = 0, $call = 0, $cmp1 = 0, $cmp111 = 0, $cmp2 = 0, $cmp5 = 0, $div = 0, $div$sub = 0, $mul = 0, $nel$addr$012 = 0, $retval$0 = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp111 = ($nel|0)==(0);
 L1: do {
  if ($cmp111) {
   $retval$0 = 0;
  } else {
   $base$addr$013 = $base;$nel$addr$012 = $nel;
   while(1) {
    $div = $nel$addr$012 >>> 1;
    $mul = Math_imul($div, $width)|0;
    $add$ptr = (($base$addr$013) + ($mul)|0);
    $call = (FUNCTION_TABLE_iii[$cmp & 127]($key,$add$ptr)|0);
    $tobool = ($call|0)==(0);
    if ($tobool) {
     $retval$0 = $add$ptr;
     break L1;
    }
    $cmp2 = ($nel$addr$012|0)==(1);
    if ($cmp2) {
     $retval$0 = 0;
     break L1;
    }
    $cmp5 = ($call|0)<(0);
    $sub = (($nel$addr$012) - ($div))|0;
    $div$sub = $cmp5 ? $div : $sub;
    $base$addr$0$add$ptr = $cmp5 ? $base$addr$013 : $add$ptr;
    $cmp1 = ($div$sub|0)==(0);
    if ($cmp1) {
     $retval$0 = 0;
     break;
    } else {
     $base$addr$013 = $base$addr$0$add$ptr;$nel$addr$012 = $div$sub;
    }
   }
  }
 } while(0);
 return ($retval$0|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}

  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&63]();
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&127](a1|0,a2|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&63](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_vi(1);
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(2);
}
function b3(p0) {
 p0 = p0|0; nullFunc_ii(3);return 0;
}
function b4() {
 ; nullFunc_v(4);
}
function b5(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(5);return 0;
}
function b6(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(6);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,_sn_write,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_vi = [b1,b1,b1,b1,b1,b1,_set_eols,_write_lojban_text,_write_translation,b1,b1,b1,b1,_write_partial_tag_text,b1,b1,b1,b1,b1,_set_eols_4279,_write_lojban_text_4280,_write_translation_4281,b1,b1,b1,b1,_write_partial_tag_text_4286,b1,b1
,b1,b1,_set_eols_4334,_write_lojban_text_4335,_write_translation_4336,b1,b1,b1,b1,_write_partial_tag_text_4341,b1,b1,b1,b1,b1,_set_eols_4391,_write_lojban_text_4392,_write_translation_4393,b1,b1,b1,b1,_write_partial_tag_text_4398,b1,b1,b1,b1,b1,_set_eols_4437,_write_lojban_text_4438
,_write_translation_4439,b1,b1,b1,b1,_write_partial_tag_text_4444,b1,b1,b1,b1,b1,b1,_handle_signal,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vii = [b2,b2,b2,b2,_latex_write_open_bracket,_latex_write_close_bracket,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_write_open_bracket,_write_close_bracket,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,_write_open_bracket_4332,_write_close_bracket_4333,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_write_open_bracket_4389,_write_close_bracket_4390,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_write_open_bracket_4435,_write_close_bracket_4436,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_ii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,___stdio_close,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_v = [b4,_initialise,_write_prologue,_latex_write_epilog,b4,b4,b4,b4,b4,_start_tags,_end_tags,_start_tag,b4,b4,_initialise_4277,_write_prologue_4278,_write_epilog,b4,b4,b4,b4,b4,_start_tags_4282,_end_tags_4283,_start_tag_4284,b4,b4,_initialise_4330,_write_prologue_4331
,b4,b4,b4,b4,b4,_start_tags_4337,_end_tags_4338,_start_tag_4339,b4,b4,_initialise_4386,_write_prologue_4387,_write_epilog_4388,b4,b4,b4,b4,b4,_start_tags_4394,_end_tags_4395,_start_tag_4396,b4,b4,_initialise_4432,_write_prologue_4433,_write_epilog_4434,b4,b4,b4,b4
,b4,_start_tags_4440,_end_tags_4441,_start_tag_4442,b4];
var FUNCTION_TABLE_iii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_compare_r2g,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_viiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_write_tag_text,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_write_tag_text_4285,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,_write_tag_text_4340,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_write_tag_text_4397,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,_write_tag_text_4443];

  return { _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _i64Subtract: _i64Subtract, ___udivdi3: ___udivdi3, setThrew: setThrew, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, ___errno_location: ___errno_location, _memset: _memset, _sbrk: _sbrk, _memcpy: _memcpy, stackAlloc: stackAlloc, dynCall_vii: dynCall_vii, ___uremdi3: ___uremdi3, dynCall_vi: dynCall_vi, getTempRet0: getTempRet0, setTempRet0: setTempRet0, _i64Add: _i64Add, dynCall_iiii: dynCall_iiii, _emscripten_get_global_libc: _emscripten_get_global_libc, dynCall_ii: dynCall_ii, dynCall_viiii: dynCall_viiii, stackSave: stackSave, _free: _free, runPostSets: runPostSets, establishStackSpace: establishStackSpace, stackRestore: stackRestore, _malloc: _malloc, dynCall_iii: dynCall_iii, dynCall_v: dynCall_v };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_get_global_libc.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];


// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;






/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



